<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="mongo-glib-1.0"/>
  <c:include name="mongo-glib/mongo-glib.h"/>
  <namespace name="Mongo"
             version="1.0"
             shared-library="libmongo-glib-1.0-0.dll"
             c:identifier-prefixes="Mongo"
             c:symbol-prefixes="mongo">
    <record name="Bson"
            c:type="MongoBson"
            glib:type-name="MongoBson"
            glib:get-type="mongo_bson_get_type"
            c:symbol-prefix="bson">
      <field name="data" writable="1">
        <type name="guint8" c:type="guint8*"/>
      </field>
      <field name="len" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="mongo_bson_new">
        <doc xml:space="preserve">Creates a new instance of #MongoBson. The #MongoBson instance is
pre-populated with an _id field and #MongoObjectId value. This value
is generated on the local machine and follows the guidelines suggested
by the BSON ObjectID specificiation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoBson that should be freed with mongo_bson_unref().</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
      </constructor>
      <constructor name="new_empty" c:identifier="mongo_bson_new_empty">
        <doc xml:space="preserve">Creates a new instance of #MongoBson. This function is similar to
mongo_bson_new() except that it does not pre-populate the newly created
#MongoBson instance with an _id field.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An empty #MongoBson that should be freed with mongo_bson_unref().</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="mongo_bson_new_from_data">
        <doc xml:space="preserve">Creates a new #MongoBson instance using the buffer and the length.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #MongoBson that should be freed with mongo_bson_unref().</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to create a #MongoBson.</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">The length of @buffer.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_take_data"
                   c:identifier="mongo_bson_new_take_data">
        <doc xml:space="preserve">Creates a new instance of #MongoBson using the buffers provided.
@buffer should be a buffer that can work with g_realloc() and
g_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #MongoBson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to use when creating the #MongoBson.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">The length of @buffer.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_array" c:identifier="mongo_bson_append_array">
        <doc xml:space="preserve">Appends a #MongoBson containing an array. A #MongoBson array is a document
that contains fields with string keys containing integers monotonically.

&lt;informalexample&gt;
  &lt;programlisting&gt;
{"0": "First Value", "1": "Second Value"}
  &lt;/programlisting&gt;
&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The field name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The #MongoBson array to append.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_boolean" c:identifier="mongo_bson_append_boolean">
        <doc xml:space="preserve">Stores the value specified by @value as a boolean in the document
under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The string containing key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A value to store in the document.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_bson" c:identifier="mongo_bson_append_bson">
        <doc xml:space="preserve">Stores the #MongoBson in the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson to store.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_date_time"
              c:identifier="mongo_bson_append_date_time">
        <doc xml:space="preserve">Appends the #GDateTime to the #MongoBson under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #GDateTime to store.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_double" c:identifier="mongo_bson_append_double">
        <doc xml:space="preserve">Appends the #gdouble @value to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #gdouble.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_int" c:identifier="mongo_bson_append_int">
        <doc xml:space="preserve">Appends @value to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #gint32 containing the value.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_int64" c:identifier="mongo_bson_append_int64">
        <doc xml:space="preserve">Appends @value to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #gint64 containing the value.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_null" c:identifier="mongo_bson_append_null">
        <doc xml:space="preserve">Appends a %NULL value to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_object_id"
              c:identifier="mongo_bson_append_object_id">
        <doc xml:space="preserve">Appends @object_id to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_regex" c:identifier="mongo_bson_append_regex">
        <doc xml:space="preserve">Appends a regex to the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="regex" transfer-ownership="none">
            <doc xml:space="preserve">A string containing a regex.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve">Options for the regex.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_string" c:identifier="mongo_bson_append_string">
        <doc xml:space="preserve">Stores the string @value in the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_timeval" c:identifier="mongo_bson_append_timeval">
        <doc xml:space="preserve">Appends the date and time represented by @value up to milliseconds.
The value is stored in the document under @key.

See also: mongo_bson_append_date_time().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #GTimeVal containing the date and time.</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_undefined"
              c:identifier="mongo_bson_append_undefined">
        <doc xml:space="preserve">Appends a javascript "undefined" value in the document under @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="mongo_bson_dup">
        <doc xml:space="preserve">Creates a new #MongoBson by copying @bson.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #MongoBson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_empty" c:identifier="mongo_bson_get_empty">
        <doc xml:space="preserve">Checks to see if the contents of MongoBson are empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @bson is empty.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="join" c:identifier="mongo_bson_join">
        <doc xml:space="preserve">Appends the contents of @other to the end of @bson.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="mongo_bson_ref">
        <doc xml:space="preserve">Atomically increments the reference count of @bson by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@bson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="mongo_bson_to_string">
        <doc xml:space="preserve">Build a string representing the BSON document. Since BSON documents are
used for both documents and arrays, you can change the format using
@is_array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string representing the BSON document.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </instance-parameter>
          <parameter name="is_array" transfer-ownership="none">
            <doc xml:space="preserve">If the document should be generated as an array.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="mongo_bson_unref">
        <doc xml:space="preserve">Atomically decrements the reference count of @bson by one.  When the
reference count reaches zero, the structure will be destroyed and
freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A MongoBson.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="BsonIter" c:type="MongoBsonIter">
      <doc xml:space="preserve">#MongoBsonIter is used to iterate through the contents of a #MongoBson.
It is meant to be used on the stack and can allow for reading data
directly out of the #MongoBson without having to malloc a copy. This
can be handy when dealing with lots of medium to large sized documents.</doc>
      <field name="user_data1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data5" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data6" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data7" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <method name="find" c:identifier="mongo_bson_iter_find">
        <doc xml:space="preserve">Iterates through all upcoming keys in a #MongoBsonIter until @key is
found or the end of the document has been reached.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @key was found, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A key to find in the BSON document.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="mongo_bson_iter_get_key">
        <doc xml:space="preserve">Fetches the key currently pointed to by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the key.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_array"
              c:identifier="mongo_bson_iter_get_value_array">
        <doc xml:space="preserve">Fetches the array document current pointed to by @iter. This makes a
copy of the document and returns a new #MongoBson instance. For more
optimized cases, you may want to use mongo_bson_iter_recurse() to avoid
copying the memory if only iteration is needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoBson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_boolean"
              c:identifier="mongo_bson_iter_get_value_boolean">
        <doc xml:space="preserve">Fetches the current value pointed to by the iterator, expecting it to
be a boolean.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The current value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_bson"
              c:identifier="mongo_bson_iter_get_value_bson">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_DOCUMENT. The document is copied and returned as a new
#MongoBson instance. If you simply need to iterate the child document,
you may want to use mongo_bson_iter_recurse().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoBson if successful; otherwise %NULL.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_date_time"
              c:identifier="mongo_bson_iter_get_value_date_time">
        <doc xml:space="preserve">Fetches a #GDateTime for the current value pointed to by @iter.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GDateTime which should be freed with g_date_time_unref().</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_double"
              c:identifier="mongo_bson_iter_get_value_double">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_DOUBLE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gdouble.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_int"
              c:identifier="mongo_bson_iter_get_value_int">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_INT32.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gint32 containing the value.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_int64"
              c:identifier="mongo_bson_iter_get_value_int64">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_INT64.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gint64.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_object_id"
              c:identifier="mongo_bson_iter_get_value_object_id">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_OBJECT_ID. The resulting #MongoObjectId should be freed
with mongo_object_id_free().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoObjectId.</doc>
          <type name="ObjectId" c:type="MongoObjectId*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_regex"
              c:identifier="mongo_bson_iter_get_value_regex">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a regex. The values
MUST NOT be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="regex"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A location for a string containing the regex.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="options"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A location for a string containing the options.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_string"
              c:identifier="mongo_bson_iter_get_value_string">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter if it is a
%MONGO_BSON_UTF8. If @length is not %NULL, then the length of the
string will be stored in the location pointed to by @length.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string which should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">The length of the resulting string.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_timeval"
              c:identifier="mongo_bson_iter_get_value_timeval">
        <doc xml:space="preserve">Fetches the current value pointed to by @iter as a #GTimeVal if the type
is a %MONGO_BSON_DATE_TIME.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A location for a #GTimeVal.</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_type"
              c:identifier="mongo_bson_iter_get_value_type">
        <doc xml:space="preserve">Fetches the #MongoBsonType currently pointed to by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoBsonType.</doc>
          <type name="BsonType" c:type="MongoBsonType"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="mongo_bson_iter_init">
        <doc xml:space="preserve">Initializes a #MongoBsonIter for iterating through a #MongoBson document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">an uninitialized #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">a #MongoBson.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_find" c:identifier="mongo_bson_iter_init_find">
        <doc xml:space="preserve">Convenience function to initialize a #MongoBsonIter and find the key
matching @key. If @key was found, %TRUE is returned, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @key was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">an uninitialized #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="bson" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to find.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_key" c:identifier="mongo_bson_iter_is_key">
        <doc xml:space="preserve">Checks to see if the iterator is on the given key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @iter is observing @key.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to check for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="mongo_bson_iter_next">
        <doc xml:space="preserve">Moves @iter to the next field in the document. If no more fields exist,
then %FALSE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if there are no more fields or an error; otherwise %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              direction="inout"
                              caller-allocates="0"
                              transfer-ownership="full">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="recurse" c:identifier="mongo_bson_iter_recurse">
        <doc xml:space="preserve">Recurses into the child BSON document found at the key currently observed
by the #MongoBsonIter. The @child #MongoBsonIter is initialized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @child is initialized; otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </instance-parameter>
          <parameter name="child"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonIter.</doc>
            <type name="BsonIter" c:type="MongoBsonIter*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="BsonStream"
           c:symbol-prefix="bson_stream"
           c:type="MongoBsonStream"
           parent="GObject.Object"
           glib:type-name="MongoBsonStream"
           glib:get-type="mongo_bson_stream_get_type"
           glib:type-struct="BsonStreamClass">
      <constructor name="new" c:identifier="mongo_bson_stream_new">
        <doc xml:space="preserve">Creates a new instance of #MongoBsonStream. This should be freed
with g_object_unref() when you are finished with it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #MongoBsonStream.</doc>
          <type name="BsonStream" c:type="MongoBsonStream*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="mongo_bson_stream_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="load_from_channel"
              c:identifier="mongo_bson_stream_load_from_channel"
              throws="1">
        <doc xml:space="preserve">Enables #MongoBsonStream to use the content of @channel for the
underlying BSON stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonStream.</doc>
            <type name="BsonStream" c:type="MongoBsonStream*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve">A #GIOChannel.</doc>
            <type name="GLib.IOChannel" c:type="GIOChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="mongo_bson_stream_load_from_file"
              throws="1">
        <doc xml:space="preserve">Load a #GFile containing a BSON stream to be used for iterating BSON
documents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonStream.</doc>
            <type name="BsonStream" c:type="MongoBsonStream*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile containing the BSON stream.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="mongo_bson_stream_next">
        <doc xml:space="preserve">Gets the next #MongoBson document found in the stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoBson if successful; otherwise %NULL.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBsonStream.</doc>
            <type name="BsonStream" c:type="MongoBsonStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BsonStreamPrivate" c:type="MongoBsonStreamPrivate*"/>
      </field>
    </class>
    <record name="BsonStreamClass"
            c:type="MongoBsonStreamClass"
            glib:is-gtype-struct-for="BsonStream">
      <field name="parent_class">
        <doc xml:space="preserve">GObject parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="BsonStreamError" c:type="MongoBsonStreamError">
    </enumeration>
    <record name="BsonStreamPrivate"
            c:type="MongoBsonStreamPrivate"
            disguised="1">
    </record>
    <enumeration name="BsonType"
                 glib:type-name="MongoBsonType"
                 glib:get-type="mongo_bson_type_get_type"
                 c:type="MongoBsonType">
      <doc xml:space="preserve">These enumerations specify the field type within a #MongoBson.
The field type can be retrieved with mongo_bson_iter_get_value_type().</doc>
      <member name="DOUBLE"
              value="1"
              c:identifier="MONGO_BSON_DOUBLE"
              glib:nick="DOUBLE">
        <doc xml:space="preserve">Field contains a #gdouble.</doc>
      </member>
      <member name="UTF8"
              value="2"
              c:identifier="MONGO_BSON_UTF8"
              glib:nick="UTF8">
        <doc xml:space="preserve">Field contains a UTF-8 string.</doc>
      </member>
      <member name="DOCUMENT"
              value="3"
              c:identifier="MONGO_BSON_DOCUMENT"
              glib:nick="DOCUMENT">
        <doc xml:space="preserve">Field contains a BSON document.</doc>
      </member>
      <member name="ARRAY"
              value="4"
              c:identifier="MONGO_BSON_ARRAY"
              glib:nick="ARRAY">
        <doc xml:space="preserve">Field contains a BSON array.</doc>
      </member>
      <member name="UNDEFINED"
              value="6"
              c:identifier="MONGO_BSON_UNDEFINED"
              glib:nick="UNDEFINED">
        <doc xml:space="preserve">Field is JavaScript undefined.</doc>
      </member>
      <member name="OBJECT_ID"
              value="7"
              c:identifier="MONGO_BSON_OBJECT_ID"
              glib:nick="OBJECT_ID">
        <doc xml:space="preserve">Field contains a #MongoObjectId.</doc>
      </member>
      <member name="BOOLEAN"
              value="8"
              c:identifier="MONGO_BSON_BOOLEAN"
              glib:nick="BOOLEAN">
        <doc xml:space="preserve">Field contains a #gboolean.</doc>
      </member>
      <member name="DATE_TIME"
              value="9"
              c:identifier="MONGO_BSON_DATE_TIME"
              glib:nick="DATE_TIME">
        <doc xml:space="preserve">Field contains a #GDateTime.</doc>
      </member>
      <member name="NULL"
              value="10"
              c:identifier="MONGO_BSON_NULL"
              glib:nick="NULL">
        <doc xml:space="preserve">Field contains %NULL.</doc>
      </member>
      <member name="REGEX"
              value="11"
              c:identifier="MONGO_BSON_REGEX"
              glib:nick="REGEX">
        <doc xml:space="preserve">Field contains a #GRegex.</doc>
      </member>
      <member name="INT32"
              value="16"
              c:identifier="MONGO_BSON_INT32"
              glib:nick="INT32">
        <doc xml:space="preserve">Field contains a #gint32.</doc>
      </member>
      <member name="INT64"
              value="18"
              c:identifier="MONGO_BSON_INT64"
              glib:nick="INT64">
        <doc xml:space="preserve">Field contains a #gint64.</doc>
      </member>
    </enumeration>
    <record name="ClientContext"
            c:type="MongoClientContext"
            glib:type-name="MongoClientContext"
            glib:get-type="mongo_client_context_get_type"
            c:symbol-prefix="client_context">
      <method name="get_uri" c:identifier="mongo_client_context_get_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="mongo_client_context_ref">
        <return-value transfer-ownership="full">
          <type name="ClientContext" c:type="MongoClientContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="mongo_client_context_unref">
        <doc xml:space="preserve">Atomically decrements the reference count of @context by one.  When the
reference count reaches zero, the structure will be destroyed and
freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A MongoClientContext.</doc>
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Collection"
           c:symbol-prefix="collection"
           c:type="MongoCollection"
           parent="GObject.Object"
           glib:type-name="MongoCollection"
           glib:get-type="mongo_collection_get_type"
           glib:type-struct="CollectionClass">
      <function name="error_quark" c:identifier="mongo_collection_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="count_async" c:identifier="mongo_collection_count_async">
        <doc xml:space="preserve">Asynchronously count the number of items in the collection matching
the query if specified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson or %NULL.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_finish"
              c:identifier="mongo_collection_count_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchonrous request to mongo_collection_count_async().
If successful; %TRUE is returned and @count is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">A location for the number of documents matching.</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async" c:identifier="mongo_collection_delete_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="selector" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DeleteFlags" c:type="MongoDeleteFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="mongo_collection_delete_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_async" c:identifier="mongo_collection_drop_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_finish"
              c:identifier="mongo_collection_drop_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="mongo_collection_find">
        <doc xml:space="preserve">Find documents within the collection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoCursor.</doc>
          <type name="Cursor" c:type="MongoCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson containing the query.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
          <parameter name="field_selector"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson or %NULL for all fields.</doc>
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:space="preserve">The number of documents to skip.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">The maximum number of documents to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoQueryFlags.</doc>
            <type name="QueryFlags" c:type="MongoQueryFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_one_async"
              c:identifier="mongo_collection_find_one_async">
        <doc xml:space="preserve">Asynchronously queries the collection for the first document matching
@query. You may specify the fields that should be retrieved by providing
@field_selector.

@callback MUST call mongo_collection_find_one_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson or %NULL.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="field_selector"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson or %NULL.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoQueryFlags.</doc>
            <type name="QueryFlags" c:type="MongoQueryFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_one_finish"
              c:identifier="mongo_collection_find_one_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to mongo_collection_find_one_async().
If no document was found %NULL is returned and @error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoBson if successful; otherwise %NULL
and @error is set.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="mongo_collection_get_connection">
        <doc xml:space="preserve">Fetches the connection the collection communicates over.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoConnection.</doc>
          <type name="Connection" c:type="MongoConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database" c:identifier="mongo_collection_get_database">
        <doc xml:space="preserve">Fetches the database that this collection belongs to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoDatabase.</doc>
          <type name="Database" c:type="MongoDatabase*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCollection.</doc>
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_async" c:identifier="mongo_collection_insert_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="documents" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson**"/>
          </parameter>
          <parameter name="n_documents" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="InsertFlags" c:type="MongoInsertFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_finish"
              c:identifier="mongo_collection_insert_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="mongo_collection_update_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="selector" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="update" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="UpdateFlags" c:type="MongoUpdateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="mongo_collection_update_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="MongoCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Connection"/>
      </property>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Database"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CollectionPrivate" c:type="MongoCollectionPrivate*"/>
      </field>
    </class>
    <record name="CollectionClass"
            c:type="MongoCollectionClass"
            glib:is-gtype-struct-for="Collection">
      <field name="parent_class">
        <doc xml:space="preserve">The parent GObject class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="CollectionError" c:type="MongoCollectionError">
    </enumeration>
    <record name="CollectionPrivate"
            c:type="MongoCollectionPrivate"
            disguised="1">
    </record>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="MongoConnection"
           parent="GObject.Object"
           glib:type-name="MongoConnection"
           glib:get-type="mongo_connection_get_type"
           glib:type-struct="ConnectionClass">
      <constructor name="new" c:identifier="mongo_connection_new">
        <doc xml:space="preserve">Creates a new instance of #MongoConnection which will connect to
mongodb://127.0.0.1:27017.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #MongoConnection.</doc>
          <type name="Connection" c:type="MongoConnection*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_uri"
                   c:identifier="mongo_connection_new_from_uri">
        <doc xml:space="preserve">Creates a new #MongoConnection using the URI provided. The URI should be in
the mongodb://host:port form.

Currently, mongodb:// style URIs that contain multiple hosts must all
connect on the same port number, specified in the last host due to an
incomplete implementation of URI parsing. This will be supported in
the future.

Such a URI would look like:

  mongodb://127.0.0.1:27017,127.0.0.2:27018

And will result in %NULL being returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #MongoConnection.</doc>
          <type name="Connection" c:type="MongoConnection*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">A URI string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_quark" c:identifier="mongo_connection_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="command_async"
              c:identifier="mongo_connection_command_async">
        <doc xml:space="preserve">Asynchronously requests that a command is executed on the remote Mongo
server.

@callback MUST execute mongo_connection_command_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">The database execute the command within.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson containing the command.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="command_finish"
              c:identifier="mongo_connection_command_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to execute a command on a remote
Mongo server. Upon failure, %NULL is returned and @error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoMessageReply if successful; otherwise %NULL.</doc>
          <type name="MessageReply" c:type="MongoMessageReply*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async" c:identifier="mongo_connection_delete_async">
        <doc xml:space="preserve">Asynchronously requests the removal of one or more documents in a Mongo
collection. If you only want to remove a single document from the Mongo
collection, then you MUST specify the %MONGO_DELETE_SINGLE_REMOVE flag
in @flags.

Selector should be a #MongoBson containing the fields to match.

@callback MUST call mongo_connection_delete_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the "db.collection".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoDeleteFlags.</doc>
            <type name="DeleteFlags" c:type="MongoDeleteFlags"/>
          </parameter>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson of fields to select for deletion.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="mongo_connection_delete_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to remove one or more documents from a
Mongo collection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_database" c:identifier="mongo_connection_get_database">
        <doc xml:space="preserve">Fetches a #MongoDatabase for the database available via @connection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MongoDatabase.</doc>
          <type name="Database" c:type="MongoDatabase*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The database name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slave_okay"
              c:identifier="mongo_connection_get_slave_okay">
        <doc xml:space="preserve">Retrieves the "slave-okay" property. If "slave-okay" is %TRUE, then
%MONGO_QUERY_SLAVE_OK will be set on all outgoing queries.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if "slave-okay" is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getmore_async"
              c:identifier="mongo_connection_getmore_async">
        <doc xml:space="preserve">Asynchronously requests more results from a cursor on the Mongo server.

@callback MUST call mongo_connection_getmore_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the 'db.collection".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">The maximum number of documents to return in the cursor.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cursor_id" transfer-ownership="none">
            <doc xml:space="preserve">The cursor_id provided by the server.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="getmore_finish"
              c:identifier="mongo_connection_getmore_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to mongo_connection_getmore_finish().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoMessageReply.</doc>
          <type name="MessageReply" c:type="MongoMessageReply*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_async" c:identifier="mongo_connection_insert_async">
        <doc xml:space="preserve">Asynchronously requests the insertion of a document into the Mongo server.

@callback MUST call mongo_connection_insert_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the "db.collection".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoInsertFlags.</doc>
            <type name="InsertFlags" c:type="MongoInsertFlags"/>
          </parameter>
          <parameter name="documents" transfer-ownership="none">
            <doc xml:space="preserve">Array  of
   #MongoBson documents to insert.</doc>
            <array length="3" zero-terminated="0" c:type="MongoBson**">
              <type name="Bson"/>
            </array>
          </parameter>
          <parameter name="n_documents" transfer-ownership="none">
            <doc xml:space="preserve">The number of elements in @documents.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_finish"
              c:identifier="mongo_connection_insert_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asychronous request to insert a document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="kill_cursors_async"
              c:identifier="mongo_connection_kill_cursors_async">
        <doc xml:space="preserve">Asynchronously requests that a series of cursors are killed on the Mongo
server.

@callback MUST call mongo_connection_kill_cursors_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="cursors" transfer-ownership="none">
            <doc xml:space="preserve">Array of cursors.</doc>
            <array length="1" zero-terminated="0" c:type="guint64*">
              <type name="guint64"/>
            </array>
          </parameter>
          <parameter name="n_cursors" transfer-ownership="none">
            <doc xml:space="preserve">Number of elements in @cursors.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="kill_cursors_finish"
              c:identifier="mongo_connection_kill_cursors_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to mongo_connection_kill_cursors_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_async" c:identifier="mongo_connection_query_async">
        <doc xml:space="preserve">Asynchronously queries Mongo for the documents that match. This retrieves
the first reply from the server side cursor. Further replies can be
retrieved with mongo_connection_getmore_async().

@callback MUST call mongo_connection_query_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <doc xml:space="preserve">A string containing "db.collection".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoQueryFlags.</doc>
            <type name="QueryFlags" c:type="MongoQueryFlags"/>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:space="preserve">The number of documents to skip in the result set.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">The maximum number of documents to retrieve.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson containing the query.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="field_selector"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson describing requested fields.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_finish"
              c:identifier="mongo_connection_query_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to mongo_connection_query_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoMessageReply.</doc>
          <type name="MessageReply" c:type="MongoMessageReply*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_slave_okay"
              c:identifier="mongo_connection_set_slave_okay">
        <doc xml:space="preserve">Sets the "slave-okay" property. If @slave_okay is %TRUE, then all queries
will have the %MONGO_QUERY_SLAVE_OK flag set, allowing them to be executed
on slave servers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="slave_okay" transfer-ownership="none">
            <doc xml:space="preserve">A #gboolean.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="mongo_connection_update_async">
        <doc xml:space="preserve">Asynchronously requests an update to all documents matching @selector.

@callback MUST call mongo_connection_update_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the "db.collection".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A bitwise-or of #MongoUpdateFlags.</doc>
            <type name="UpdateFlags" c:type="MongoUpdateFlags"/>
          </parameter>
          <parameter name="selector"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #MongoBson or %NULL.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="update" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoBson to apply as an update to documents matching @selector.</doc>
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="mongo_connection_update_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to mongo_connection_update_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoConnection.</doc>
            <type name="Connection" c:type="MongoConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="replica-set" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slave-okay" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="uri"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ConnectionPrivate" c:type="MongoConnectionPrivate*"/>
      </field>
    </class>
    <record name="ConnectionClass"
            c:type="MongoConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <field name="parent_class">
        <doc xml:space="preserve">The parent GObject class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ConnectionError" c:type="MongoConnectionError">
    </enumeration>
    <record name="ConnectionPrivate"
            c:type="MongoConnectionPrivate"
            disguised="1">
    </record>
    <class name="Cursor"
           c:symbol-prefix="cursor"
           c:type="MongoCursor"
           parent="GObject.Object"
           glib:type-name="MongoCursor"
           glib:get-type="mongo_cursor_get_type"
           glib:type-struct="CursorClass">
      <method name="close_async" c:identifier="mongo_cursor_close_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_finish"
              c:identifier="mongo_cursor_close_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_async" c:identifier="mongo_cursor_count_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_finish"
              c:identifier="mongo_cursor_count_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_async" c:identifier="mongo_cursor_foreach_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="CursorCallback" c:type="MongoCursorCallback"/>
          </parameter>
          <parameter name="foreach_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="foreach_notify"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_finish"
              c:identifier="mongo_cursor_foreach_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_batch_size" c:identifier="mongo_cursor_get_batch_size">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_collection" c:identifier="mongo_cursor_get_collection">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fields" c:identifier="mongo_cursor_get_fields">
        <doc xml:space="preserve">Fetches the field selector used by the cursor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoBson or %NULL.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCursor.</doc>
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="mongo_cursor_get_flags">
        <return-value transfer-ownership="none">
          <type name="QueryFlags" c:type="MongoQueryFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit" c:identifier="mongo_cursor_get_limit">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query" c:identifier="mongo_cursor_get_query">
        <doc xml:space="preserve">Fetches the query performed by the cursor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoBson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoCursor.</doc>
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_skip" c:identifier="mongo_cursor_get_skip">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_batch_size" c:identifier="mongo_cursor_set_batch_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <type name="Cursor" c:type="MongoCursor*"/>
          </instance-parameter>
          <parameter name="batch_size" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="batch-size" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="collection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Connection"/>
      </property>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fields"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="limit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="query"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <property name="skip"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CursorPrivate" c:type="MongoCursorPrivate*"/>
      </field>
    </class>
    <callback name="CursorCallback" c:type="MongoCursorCallback">
      <doc xml:space="preserve">This function prototype is used by callbacks to
mongo_cursor_foreach_async(). It allows you to iterate through all
of the documents as they are received from the remote Mongo server.
There may be delay between successive calls to this function while
data is delivered from the Mongo server.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE to continue processing, %FALSE to stop.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cursor" transfer-ownership="none">
          <doc xml:space="preserve">A #MongoCursor.</doc>
          <type name="Cursor" c:type="MongoCursor*"/>
        </parameter>
        <parameter name="bson" transfer-ownership="none">
          <doc xml:space="preserve">A #MongoBson.</doc>
          <type name="Bson" c:type="MongoBson*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">User data provided to mongo_cursor_foreach_async().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="CursorClass"
            c:type="MongoCursorClass"
            glib:is-gtype-struct-for="Cursor">
      <field name="parent_class">
        <doc xml:space="preserve">The parent #GObjectClass.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CursorPrivate" c:type="MongoCursorPrivate" disguised="1">
    </record>
    <class name="Database"
           c:symbol-prefix="database"
           c:type="MongoDatabase"
           parent="GObject.Object"
           glib:type-name="MongoDatabase"
           glib:get-type="mongo_database_get_type"
           glib:type-struct="DatabaseClass">
      <function name="error_quark" c:identifier="mongo_database_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="drop_async" c:identifier="mongo_database_drop_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="MongoDatabase*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_finish"
              c:identifier="mongo_database_drop_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="MongoDatabase*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_collection"
              c:identifier="mongo_database_get_collection">
        <doc xml:space="preserve">Fetches the collection that is found in @database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoDatabase.</doc>
          <type name="Collection" c:type="MongoCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoDatabase.</doc>
            <type name="Database" c:type="MongoDatabase*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The database name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="mongo_database_get_connection">
        <doc xml:space="preserve">Fetches the connection that @database communicates over.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoConnection.</doc>
          <type name="Connection" c:type="MongoConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoDatabase.</doc>
            <type name="Database" c:type="MongoDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="mongo_database_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="MongoDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Connection"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DatabasePrivate" c:type="MongoDatabasePrivate*"/>
      </field>
    </class>
    <record name="DatabaseClass"
            c:type="MongoDatabaseClass"
            glib:is-gtype-struct-for="Database">
      <field name="parent_class">
        <doc xml:space="preserve">The parent #GObjectClass.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DatabaseError" c:type="MongoDatabaseError">
    </enumeration>
    <record name="DatabasePrivate" c:type="MongoDatabasePrivate" disguised="1">
    </record>
    <bitfield name="DeleteFlags"
              glib:type-name="MongoDeleteFlags"
              glib:get-type="mongo_delete_flags_get_type"
              c:type="MongoDeleteFlags">
      <doc xml:space="preserve">#MongoDeleteFlags are used when performing a delete operation.</doc>
      <member name="NONE"
              value="0"
              c:identifier="MONGO_DELETE_NONE"
              glib:nick="NONE">
        <doc xml:space="preserve">Specify no delete flags.</doc>
      </member>
      <member name="SINGLE_REMOVE"
              value="1"
              c:identifier="MONGO_DELETE_SINGLE_REMOVE"
              glib:nick="SINGLE_REMOVE">
        <doc xml:space="preserve">Only remove the first document matching the
   document selector.</doc>
      </member>
    </bitfield>
    <bitfield name="InsertFlags"
              glib:type-name="MongoInsertFlags"
              glib:get-type="mongo_insert_flags_get_type"
              c:type="MongoInsertFlags">
      <doc xml:space="preserve">#MongoInsertFlags are used when performing an insert operation.</doc>
      <member name="NONE"
              value="0"
              c:identifier="MONGO_INSERT_NONE"
              glib:nick="NONE">
        <doc xml:space="preserve">Specify no insert flags.</doc>
      </member>
      <member name="CONTINUE_ON_ERROR"
              value="1"
              c:identifier="MONGO_INSERT_CONTINUE_ON_ERROR"
              glib:nick="CONTINUE_ON_ERROR">
        <doc xml:space="preserve">Continue inserting documents from
   the insertion set even if one fails.</doc>
      </member>
    </bitfield>
    <constant name="MAJOR_VERSION" value="0" c:type="MONGO_MAJOR_VERSION">
      <doc xml:space="preserve">Mongo major version component (e.g. 1 if %MONGO_VERSION is 1.2.3)</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="2" c:type="MONGO_MICRO_VERSION">
      <doc xml:space="preserve">Mongo micro version component (e.g. 3 if %MONGO_VERSION is 1.2.3)</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="3" c:type="MONGO_MINOR_VERSION">
      <doc xml:space="preserve">Mongo minor version component (e.g. 2 if %MONGO_VERSION is 1.2.3)</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Manager"
            c:type="MongoManager"
            glib:type-name="MongoManager"
            glib:get-type="mongo_manager_get_type"
            c:symbol-prefix="manager">
      <constructor name="new" c:identifier="mongo_manager_new">
        <doc xml:space="preserve">Creates a new instance of #MongoManager.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #MongoManager.</doc>
          <type name="Manager" c:type="MongoManager*"/>
        </return-value>
      </constructor>
      <method name="add_host" c:identifier="mongo_manager_add_host">
        <doc xml:space="preserve">Adds a host to @manager. This is a node that was discovered by performing
an "ismaster" command to the mongod instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve">A "host:port" string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_seed" c:identifier="mongo_manager_add_seed">
        <doc xml:space="preserve">Adds a seed to @manager. This is a node that was provided in the
mongodb:// style connection string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
          <parameter name="seed" transfer-ownership="none">
            <doc xml:space="preserve">A "host:port" string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_hosts" c:identifier="mongo_manager_clear_hosts">
        <doc xml:space="preserve">Clear all hosts that were "discovered" in the replica set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_seeds" c:identifier="mongo_manager_clear_seeds">
        <doc xml:space="preserve">Clear all known seeds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hosts" c:identifier="mongo_manager_get_hosts">
        <doc xml:space="preserve">Retrieves the array of hosts.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of hosts.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seeds" c:identifier="mongo_manager_get_seeds">
        <doc xml:space="preserve">Retrieves the array of seeds.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of seeds.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="mongo_manager_next">
        <doc xml:space="preserve">Retrieves the next host that should be connected to. If another host
does not exist, %NULL is returned and @delay is set. The caller should
delay that many milliseconds before calling mongo_manager_next() again.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A "host:port" to connect to, or %NULL and @delay is set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
          <parameter name="delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">A location for the requested delay.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="mongo_manager_ref">
        <doc xml:space="preserve">Increment the reference count of @manager by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@manager.</doc>
          <type name="Manager" c:type="MongoManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_host" c:identifier="mongo_manager_remove_host">
        <doc xml:space="preserve">Remove a discovered host from the manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve">A "host:port" string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_seed" c:identifier="mongo_manager_remove_seed">
        <doc xml:space="preserve">Remove a seed from @manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
          <parameter name="seed" transfer-ownership="none">
            <doc xml:space="preserve">A "host:port" string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_delay" c:identifier="mongo_manager_reset_delay">
        <doc xml:space="preserve">Resets the delay that will be provided when iterating nodes to connect to.
This should be called after successfully connecting to a PRIMARY node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="mongo_manager_unref">
        <doc xml:space="preserve">Decrement the reference count of @manager by one. Upon reaching zero, the
structure will be freed and resources released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoManager.</doc>
            <type name="Manager" c:type="MongoManager*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Message"
           c:symbol-prefix="message"
           c:type="MongoMessage"
           parent="GObject.InitiallyUnowned"
           abstract="1"
           glib:type-name="MongoMessage"
           glib:get-type="mongo_message_get_type"
           glib:type-struct="MessageClass">
      <virtual-method name="load_from_data" invoker="load_from_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_to_data" invoker="save_to_data">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_reply" c:identifier="mongo_message_get_reply">
        <doc xml:space="preserve">Retrieves the reply to the message if it has been set. This is primarily
useful when working with #MongoServer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #MongoMessage reply to the message.</doc>
          <type name="Message" c:type="MongoMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoMessage.</doc>
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_request_id"
              c:identifier="mongo_message_get_request_id">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_response_to"
              c:identifier="mongo_message_get_response_to">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="mongo_message_load_from_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_data" c:identifier="mongo_message_save_to_data">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply" c:identifier="mongo_message_set_reply">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="reply" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply_bson"
              c:identifier="mongo_message_set_reply_bson">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="ReplyFlags" c:type="MongoReplyFlags"/>
          </parameter>
          <parameter name="bson" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_id"
              c:identifier="mongo_message_set_request_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="request_id" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_to"
              c:identifier="mongo_message_set_response_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </instance-parameter>
          <parameter name="response_to" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="request-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "request-id" property is the client generated identifier for the
message delivered to the mongo server. The mongo server replies with
a #MongoMessageReply placing "request-id" as the "response-to".</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="response-to" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "response-to" property contains the "request-id" that the message is
in response to.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessagePrivate" c:type="MongoMessagePrivate*"/>
      </field>
    </class>
    <record name="MessageClass"
            c:type="MongoMessageClass"
            glib:is-gtype-struct-for="Message">
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="operation">
        <type name="Operation" c:type="MongoOperation"/>
      </field>
      <field name="load_from_data">
        <callback name="load_from_data">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="guint8" c:type="const guint8*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_to_data">
        <callback name="save_to_data">
          <return-value transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </return-value>
          <parameters>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="MessageDelete"
           c:symbol-prefix="message_delete"
           c:type="MongoMessageDelete"
           parent="Message"
           glib:type-name="MongoMessageDelete"
           glib:get-type="mongo_message_delete_get_type"
           glib:type-struct="MessageDeleteClass">
      <property name="collection" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="DeleteFlags"/>
      </property>
      <property name="query" writable="1" transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageDeletePrivate" c:type="MongoMessageDeletePrivate*"/>
      </field>
    </class>
    <record name="MessageDeleteClass"
            c:type="MongoMessageDeleteClass"
            glib:is-gtype-struct-for="MessageDelete">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageDeletePrivate"
            c:type="MongoMessageDeletePrivate"
            disguised="1">
    </record>
    <class name="MessageGetmore"
           c:symbol-prefix="message_getmore"
           c:type="MongoMessageGetmore"
           parent="Message"
           glib:type-name="MongoMessageGetmore"
           glib:get-type="mongo_message_getmore_get_type"
           glib:type-struct="MessageGetmoreClass">
      <property name="collection" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cursor-id" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="limit" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageGetmorePrivate"
              c:type="MongoMessageGetmorePrivate*"/>
      </field>
    </class>
    <record name="MessageGetmoreClass"
            c:type="MongoMessageGetmoreClass"
            glib:is-gtype-struct-for="MessageGetmore">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageGetmorePrivate"
            c:type="MongoMessageGetmorePrivate"
            disguised="1">
    </record>
    <class name="MessageInsert"
           c:symbol-prefix="message_insert"
           c:type="MongoMessageInsert"
           parent="Message"
           glib:type-name="MongoMessageInsert"
           glib:get-type="mongo_message_insert_get_type"
           glib:type-struct="MessageInsertClass">
      <method name="get_collection"
              c:identifier="mongo_message_insert_get_collection">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documents"
              c:identifier="mongo_message_insert_get_documents">
        <doc xml:space="preserve">Gets the documents that were part of the insert message.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GList of #MongoBson.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Bson"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoMessageInsert.</doc>
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="mongo_message_insert_get_flags">
        <return-value transfer-ownership="none">
          <type name="InsertFlags" c:type="MongoInsertFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_collection"
              c:identifier="mongo_message_insert_set_collection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
          <parameter name="collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_documents"
              c:identifier="mongo_message_insert_set_documents">
        <doc xml:space="preserve">Sets the documents for the #MongoMessageInsert message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoMessageInsert.</doc>
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
          <parameter name="documents" transfer-ownership="none">
            <doc xml:space="preserve">A #GList
  of #MongoBson documents.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Bson"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="mongo_message_insert_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="insert" transfer-ownership="none">
            <type name="MessageInsert" c:type="MongoMessageInsert*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="InsertFlags" c:type="MongoInsertFlags"/>
          </parameter>
        </parameters>
      </method>
      <property name="collection" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="InsertFlags"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageInsertPrivate" c:type="MongoMessageInsertPrivate*"/>
      </field>
    </class>
    <record name="MessageInsertClass"
            c:type="MongoMessageInsertClass"
            glib:is-gtype-struct-for="MessageInsert">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageInsertPrivate"
            c:type="MongoMessageInsertPrivate"
            disguised="1">
    </record>
    <class name="MessageKillCursors"
           c:symbol-prefix="message_kill_cursors"
           c:type="MongoMessageKillCursors"
           parent="Message"
           glib:type-name="MongoMessageKillCursors"
           glib:get-type="mongo_message_kill_cursors_get_type"
           glib:type-struct="MessageKillCursorsClass">
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageKillCursorsPrivate"
              c:type="MongoMessageKillCursorsPrivate*"/>
      </field>
    </class>
    <record name="MessageKillCursorsClass"
            c:type="MongoMessageKillCursorsClass"
            glib:is-gtype-struct-for="MessageKillCursors">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageKillCursorsPrivate"
            c:type="MongoMessageKillCursorsPrivate"
            disguised="1">
    </record>
    <class name="MessageMsg"
           c:symbol-prefix="message_msg"
           c:type="MongoMessageMsg"
           parent="Message"
           glib:type-name="MongoMessageMsg"
           glib:get-type="mongo_message_msg_get_type"
           glib:type-struct="MessageMsgClass">
      <property name="message" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The message field of a MongoDB OP_MSG message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageMsgPrivate" c:type="MongoMessageMsgPrivate*"/>
      </field>
    </class>
    <record name="MessageMsgClass"
            c:type="MongoMessageMsgClass"
            glib:is-gtype-struct-for="MessageMsg">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageMsgPrivate"
            c:type="MongoMessageMsgPrivate"
            disguised="1">
    </record>
    <record name="MessagePrivate" c:type="MongoMessagePrivate" disguised="1">
    </record>
    <class name="MessageQuery"
           c:symbol-prefix="message_query"
           c:type="MongoMessageQuery"
           parent="Message"
           glib:type-name="MongoMessageQuery"
           glib:get-type="mongo_message_query_get_type"
           glib:type-struct="MessageQueryClass">
      <method name="get_collection"
              c:identifier="mongo_message_query_get_collection">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command_name"
              c:identifier="mongo_message_query_get_command_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="mongo_message_query_get_flags">
        <return-value transfer-ownership="none">
          <type name="QueryFlags" c:type="MongoQueryFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit" c:identifier="mongo_message_query_get_limit">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query" c:identifier="mongo_message_query_get_query">
        <return-value transfer-ownership="none">
          <type name="Bson" c:type="const MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selector"
              c:identifier="mongo_message_query_get_selector">
        <return-value transfer-ownership="none">
          <type name="Bson" c:type="const MongoBson*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_skip" c:identifier="mongo_message_query_get_skip">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_command" c:identifier="mongo_message_query_is_command">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_collection"
              c:identifier="mongo_message_query_set_collection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fields" c:identifier="mongo_message_query_set_fields">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="fields" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="mongo_message_query_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="QueryFlags" c:type="MongoQueryFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit" c:identifier="mongo_message_query_set_limit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query" c:identifier="mongo_message_query_set_query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="bson" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip" c:identifier="mongo_message_query_set_skip">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="skip" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_fields"
              c:identifier="mongo_message_query_take_fields">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="fields" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_query" c:identifier="mongo_message_query_take_query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <type name="MessageQuery" c:type="MongoMessageQuery*"/>
          </instance-parameter>
          <parameter name="bson" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson*"/>
          </parameter>
        </parameters>
      </method>
      <property name="collection" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fields" writable="1" transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="QueryFlags"/>
      </property>
      <property name="limit" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="query" writable="1" transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <property name="skip" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageQueryPrivate" c:type="MongoMessageQueryPrivate*"/>
      </field>
    </class>
    <record name="MessageQueryClass"
            c:type="MongoMessageQueryClass"
            glib:is-gtype-struct-for="MessageQuery">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageQueryPrivate"
            c:type="MongoMessageQueryPrivate"
            disguised="1">
    </record>
    <class name="MessageReply"
           c:symbol-prefix="message_reply"
           c:type="MongoMessageReply"
           parent="Message"
           glib:type-name="MongoMessageReply"
           glib:get-type="mongo_message_reply_get_type"
           glib:type-struct="MessageReplyClass">
      <method name="get_count" c:identifier="mongo_message_reply_get_count">
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cursor_id"
              c:identifier="mongo_message_reply_get_cursor_id">
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documents"
              c:identifier="mongo_message_reply_get_documents">
        <doc xml:space="preserve">Returns an array of documents for the reply. @count is set to the
number of documents returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GList of #MongoBson.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Bson"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoMessageReply.</doc>
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="mongo_message_reply_get_flags">
        <return-value transfer-ownership="none">
          <type name="ReplyFlags" c:type="MongoReplyFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset" c:identifier="mongo_message_reply_get_offset">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cursor_id"
              c:identifier="mongo_message_reply_set_cursor_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
          <parameter name="cursor_id" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_documents"
              c:identifier="mongo_message_reply_set_documents">
        <doc xml:space="preserve">Sets the documents for the reply. @documents is copied and each #MongoBson
inside has its reference count increased by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoMessageReply.</doc>
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
          <parameter name="documents" transfer-ownership="none">
            <doc xml:space="preserve">A #GList
  of #MongoBson documents.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Bson"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="mongo_message_reply_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="ReplyFlags" c:type="MongoReplyFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset" c:identifier="mongo_message_reply_set_offset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reply" transfer-ownership="none">
            <type name="MessageReply" c:type="MongoMessageReply*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cursor-id" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="ReplyFlags"/>
      </property>
      <property name="offset" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageReplyPrivate" c:type="MongoMessageReplyPrivate*"/>
      </field>
    </class>
    <record name="MessageReplyClass"
            c:type="MongoMessageReplyClass"
            glib:is-gtype-struct-for="MessageReply">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageReplyPrivate"
            c:type="MongoMessageReplyPrivate"
            disguised="1">
    </record>
    <class name="MessageUpdate"
           c:symbol-prefix="message_update"
           c:type="MongoMessageUpdate"
           parent="Message"
           glib:type-name="MongoMessageUpdate"
           glib:get-type="mongo_message_update_get_type"
           glib:type-struct="MessageUpdateClass">
      <property name="collection" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="UpdateFlags"/>
      </property>
      <property name="query" writable="1" transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <property name="update" writable="1" transfer-ownership="none">
        <type name="Bson"/>
      </property>
      <field name="parent">
        <type name="Message" c:type="MongoMessage"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MessageUpdatePrivate" c:type="MongoMessageUpdatePrivate*"/>
      </field>
    </class>
    <record name="MessageUpdateClass"
            c:type="MongoMessageUpdateClass"
            glib:is-gtype-struct-for="MessageUpdate">
      <field name="parent_class">
        <type name="MessageClass" c:type="MongoMessageClass"/>
      </field>
    </record>
    <record name="MessageUpdatePrivate"
            c:type="MongoMessageUpdatePrivate"
            disguised="1">
    </record>
    <record name="ObjectId"
            c:type="MongoObjectId"
            glib:type-name="MongoObjectId"
            glib:get-type="mongo_object_id_get_type"
            c:symbol-prefix="object_id">
      <constructor name="new" c:identifier="mongo_object_id_new">
        <doc xml:space="preserve">Create a new #MongoObjectId. The timestamp, PID, hostname, and counter
fields of the #MongoObjectId will be generated.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoObjectId that should be freed with
mongo_object_id_free().</doc>
          <type name="ObjectId" c:type="MongoObjectId*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="mongo_object_id_new_from_data">
        <doc xml:space="preserve">Creates a new #MongoObjectId from an array of 12 bytes. @bytes
MUST contain 12-bytes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #MongoObjectId that should
be freed with mongo_object_id_free().</doc>
          <type name="ObjectId" c:type="MongoObjectId*"/>
        </return-value>
        <parameters>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve">The bytes containing the object id.</doc>
            <array zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mongo_object_id_new_from_string">
        <doc xml:space="preserve">Creates a new #MongoObjectId from a 24-character, hex-encoded, string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #MongoObjectId if successful; otherwise %NULL.</doc>
          <type name="ObjectId" c:type="MongoObjectId*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve">A 24-character string containing the object id.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="mongo_object_id_compare">
        <doc xml:space="preserve">A qsort() style compare function that will return less than zero
if @object_id is less than @other, zero if they are the same, and
greater than one if @other is greater than @object_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A qsort() style compare integer.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">The first #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve">The second #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="mongo_object_id_copy">
        <doc xml:space="preserve">Creates a new #MongoObjectId that is a copy of @object_id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoObjectId that should be freed with
mongo_object_id_free().</doc>
          <type name="ObjectId" c:type="MongoObjectId*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="mongo_object_id_free">
        <doc xml:space="preserve">Frees a #MongoObjectId.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="ObjectId" c:type="MongoObjectId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="mongo_object_id_get_data">
        <doc xml:space="preserve">Gets the raw bytes for the object id. The length of the bytes is
returned in the out paramter @length for language bindings and
is always 12.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The object id bytes.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">Then number of bytes returned.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="mongo_object_id_to_string">
        <doc xml:space="preserve">Converts @object_id into a hex string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The ObjectId as a string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object_id" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="ObjectId" c:type="const MongoObjectId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="equal" c:identifier="mongo_object_id_equal">
        <doc xml:space="preserve">Checks if @v1 and @v2 contain the same object id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @v1 and @v2 are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="v1" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="v2" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="hash" c:identifier="mongo_object_id_hash">
        <doc xml:space="preserve">Hashes the bytes of the provided #MongoObjectId using DJB hash.
This is suitable for using as a hash function for #GHashTable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A hash value corresponding to the key.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoObjectId.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="Operation"
                 glib:type-name="MongoOperation"
                 glib:get-type="mongo_operation_get_type"
                 c:type="MongoOperation">
      <doc xml:space="preserve">#MongoOperation represents the operation command identifiers used by
the Mongo wire protocol. This is mainly provided for completeness sake
and is unlikely to be needed by most consumers of this library.</doc>
      <member name="REPLY"
              value="1"
              c:identifier="MONGO_OPERATION_REPLY"
              glib:nick="REPLY">
        <doc xml:space="preserve">OP_REPLY from Mongo.</doc>
      </member>
      <member name="MSG"
              value="1000"
              c:identifier="MONGO_OPERATION_MSG"
              glib:nick="MSG">
        <doc xml:space="preserve">Generic message operation.</doc>
      </member>
      <member name="UPDATE"
              value="2001"
              c:identifier="MONGO_OPERATION_UPDATE"
              glib:nick="UPDATE">
        <doc xml:space="preserve">Operation to update documents.</doc>
      </member>
      <member name="INSERT"
              value="2002"
              c:identifier="MONGO_OPERATION_INSERT"
              glib:nick="INSERT">
        <doc xml:space="preserve">Operation to insert documents.</doc>
      </member>
      <member name="QUERY"
              value="2004"
              c:identifier="MONGO_OPERATION_QUERY"
              glib:nick="QUERY">
        <doc xml:space="preserve">Operation to find documents.</doc>
      </member>
      <member name="GETMORE"
              value="2005"
              c:identifier="MONGO_OPERATION_GETMORE"
              glib:nick="GETMORE">
        <doc xml:space="preserve">Operation to getmore documents on a cursor.</doc>
      </member>
      <member name="DELETE"
              value="2006"
              c:identifier="MONGO_OPERATION_DELETE"
              glib:nick="DELETE">
        <doc xml:space="preserve">Operation to delete documents.</doc>
      </member>
      <member name="KILL_CURSORS"
              value="2007"
              c:identifier="MONGO_OPERATION_KILL_CURSORS"
              glib:nick="KILL_CURSORS">
        <doc xml:space="preserve">Operation to kill an array of cursors.</doc>
      </member>
    </enumeration>
    <class name="Protocol"
           c:symbol-prefix="protocol"
           c:type="MongoProtocol"
           parent="GObject.Object"
           glib:type-name="MongoProtocol"
           glib:get-type="mongo_protocol_get_type"
           glib:type-struct="ProtocolClass">
      <function name="error_quark" c:identifier="mongo_protocol_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="delete_async" c:identifier="mongo_protocol_delete_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DeleteFlags" c:type="MongoDeleteFlags"/>
          </parameter>
          <parameter name="selector" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="mongo_protocol_delete_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fail" c:identifier="mongo_protocol_fail">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="flush_sync" c:identifier="mongo_protocol_flush_sync">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_io_stream" c:identifier="mongo_protocol_get_io_stream">
        <doc xml:space="preserve">Fetch the #GIOStream used by @protocol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GIOStream.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoProtocol.</doc>
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getmore_async" c:identifier="mongo_protocol_getmore_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cursor_id" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="getmore_finish"
              c:identifier="mongo_protocol_getmore_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to fetch more documents from a cursor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoMessageReply if successful; otherwise or %NULL.</doc>
          <type name="MessageReply" c:type="MongoMessageReply*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoProtocol.</doc>
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_async" c:identifier="mongo_protocol_insert_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="InsertFlags" c:type="MongoInsertFlags"/>
          </parameter>
          <parameter name="documents" transfer-ownership="none">
            <type name="Bson" c:type="MongoBson**"/>
          </parameter>
          <parameter name="n_documents" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_finish"
              c:identifier="mongo_protocol_insert_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="kill_cursors_async"
              c:identifier="mongo_protocol_kill_cursors_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="cursors" transfer-ownership="none">
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="n_cursors" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="kill_cursors_finish"
              c:identifier="mongo_protocol_kill_cursors_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="msg_async" c:identifier="mongo_protocol_msg_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="msg_finish"
              c:identifier="mongo_protocol_msg_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_async" c:identifier="mongo_protocol_query_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="QueryFlags" c:type="MongoQueryFlags"/>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="field_selector" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_finish"
              c:identifier="mongo_protocol_query_finish"
              throws="1">
        <doc xml:space="preserve">Completed an asynchronous request to query.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #MongoMessageReply.</doc>
          <type name="MessageReply" c:type="MongoMessageReply*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">A #MongoProtocol.</doc>
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="mongo_protocol_update_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="db_and_collection" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="UpdateFlags" c:type="MongoUpdateFlags"/>
          </parameter>
          <parameter name="selector" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="update" transfer-ownership="none">
            <type name="Bson" c:type="const MongoBson*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="mongo_protocol_update_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <type name="Protocol" c:type="MongoProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="io-stream"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.IOStream"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProtocolPrivate" c:type="MongoProtocolPrivate*"/>
      </field>
      <glib:signal name="failed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProtocolClass"
            c:type="MongoProtocolClass"
            glib:is-gtype-struct-for="Protocol">
      <field name="parent_class">
        <doc xml:space="preserve">The parent #GObjectClass.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ProtocolError" c:type="MongoProtocolError">
    </enumeration>
    <record name="ProtocolPrivate" c:type="MongoProtocolPrivate" disguised="1">
    </record>
    <bitfield name="QueryFlags"
              glib:type-name="MongoQueryFlags"
              glib:get-type="mongo_query_flags_get_type"
              c:type="MongoQueryFlags">
      <doc xml:space="preserve">#MongoQueryFlags is used for querying a Mongo instance.</doc>
      <member name="NONE"
              value="0"
              c:identifier="MONGO_QUERY_NONE"
              glib:nick="NONE">
        <doc xml:space="preserve">No query flags supplied.</doc>
      </member>
      <member name="TAILABLE_CURSOR"
              value="2"
              c:identifier="MONGO_QUERY_TAILABLE_CURSOR"
              glib:nick="TAILABLE_CURSOR">
        <doc xml:space="preserve">Cursor will not be closed when the last
   data is retrieved. You can resume this cursor later.</doc>
      </member>
      <member name="SLAVE_OK"
              value="4"
              c:identifier="MONGO_QUERY_SLAVE_OK"
              glib:nick="SLAVE_OK">
        <doc xml:space="preserve">Allow query of replica slave.</doc>
      </member>
      <member name="OPLOG_REPLAY"
              value="8"
              c:identifier="MONGO_QUERY_OPLOG_REPLAY"
              glib:nick="OPLOG_REPLAY">
        <doc xml:space="preserve">Used internally by Mongo.</doc>
      </member>
      <member name="NO_CURSOR_TIMEOUT"
              value="16"
              c:identifier="MONGO_QUERY_NO_CURSOR_TIMEOUT"
              glib:nick="NO_CURSOR_TIMEOUT">
        <doc xml:space="preserve">The server normally times out idle
   cursors after an inactivity period (10 minutes). This prevents that.</doc>
      </member>
      <member name="AWAIT_DATA"
              value="32"
              c:identifier="MONGO_QUERY_AWAIT_DATA"
              glib:nick="AWAIT_DATA">
        <doc xml:space="preserve">Use with %MONGO_QUERY_TAILABLE_CURSOR. Block
   rather than returning no data. After a period, time out.</doc>
      </member>
      <member name="EXHAUST"
              value="64"
              c:identifier="MONGO_QUERY_EXHAUST"
              glib:nick="EXHAUST">
        <doc xml:space="preserve">Stream the data down full blast in multiple
   "more" packages. Faster when you are pulling a lot of data and
   know you want to pull it all down.</doc>
      </member>
      <member name="PARTIAL"
              value="128"
              c:identifier="MONGO_QUERY_PARTIAL"
              glib:nick="PARTIAL">
        <doc xml:space="preserve">Get partial results from mongos if some shards
   are down (instead of throwing an error).</doc>
      </member>
    </bitfield>
    <bitfield name="ReplyFlags"
              glib:type-name="MongoReplyFlags"
              glib:get-type="mongo_reply_flags_get_type"
              c:type="MongoReplyFlags">
      <doc xml:space="preserve">#MongoReplyFlags contains flags supplied by the Mongo server in reply
to a request.</doc>
      <member name="NONE"
              value="0"
              c:identifier="MONGO_REPLY_NONE"
              glib:nick="NONE">
        <doc xml:space="preserve">No flags set.</doc>
      </member>
      <member name="CURSOR_NOT_FOUND"
              value="1"
              c:identifier="MONGO_REPLY_CURSOR_NOT_FOUND"
              glib:nick="CURSOR_NOT_FOUND">
        <doc xml:space="preserve">Cursor was not found.</doc>
      </member>
      <member name="QUERY_FAILURE"
              value="2"
              c:identifier="MONGO_REPLY_QUERY_FAILURE"
              glib:nick="QUERY_FAILURE">
        <doc xml:space="preserve">Query failed, error document provided.</doc>
      </member>
      <member name="SHARD_CONFIG_STALE"
              value="4"
              c:identifier="MONGO_REPLY_SHARD_CONFIG_STALE"
              glib:nick="SHARD_CONFIG_STALE">
        <doc xml:space="preserve">Shard configuration is stale.</doc>
      </member>
      <member name="AWAIT_CAPABLE"
              value="8"
              c:identifier="MONGO_REPLY_AWAIT_CAPABLE"
              glib:nick="AWAIT_CAPABLE">
        <doc xml:space="preserve">Wait for data to be returned until timeout
   has passed. Used with %MONGO_QUERY_TAILABLE_CURSOR.</doc>
      </member>
    </bitfield>
    <class name="Server"
           c:symbol-prefix="server"
           c:type="MongoServer"
           parent="Gio.SocketService"
           glib:type-name="MongoServer"
           glib:get-type="mongo_server_get_type"
           glib:type-struct="ServerClass">
      <constructor name="new" c:identifier="mongo_server_new">
        <return-value transfer-ownership="full">
          <type name="Server" c:type="MongoServer*"/>
        </return-value>
      </constructor>
      <virtual-method name="request_delete">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_finished">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_getmore">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_insert">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_kill_cursors">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_msg">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_query">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_read">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_reply">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_started">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_update">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="MongoClientContext*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="pause_message" c:identifier="mongo_server_pause_message">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpause_message"
              c:identifier="mongo_server_unpause_message">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="MongoServer*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="MongoMessage*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gio.SocketService" c:type="GSocketService"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ServerPrivate" c:type="MongoServerPrivate*"/>
      </field>
      <glib:signal name="request-delete" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-finished" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-getmore" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-insert" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-kill-cursors" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-msg" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-query" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-read" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-reply" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-started" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-update" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ClientContext"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServerClass"
            c:type="MongoServerClass"
            glib:is-gtype-struct-for="Server">
      <field name="parent_class">
        <type name="Gio.SocketServiceClass" c:type="GSocketServiceClass"/>
      </field>
      <field name="request_started">
        <callback name="request_started">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_finished">
        <callback name="request_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_read">
        <callback name="request_read">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_reply">
        <callback name="request_reply">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_msg">
        <callback name="request_msg">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_update">
        <callback name="request_update">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_insert">
        <callback name="request_insert">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_query">
        <callback name="request_query">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_getmore">
        <callback name="request_getmore">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_delete">
        <callback name="request_delete">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_kill_cursors">
        <callback name="request_kill_cursors">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="MongoServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="MongoClientContext*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="MongoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="ServerPrivate" c:type="MongoServerPrivate" disguised="1">
    </record>
    <bitfield name="UpdateFlags"
              glib:type-name="MongoUpdateFlags"
              glib:get-type="mongo_update_flags_get_type"
              c:type="MongoUpdateFlags">
      <doc xml:space="preserve">#MongoUpdateFlags is used when updating documents found in Mongo.</doc>
      <member name="NONE"
              value="0"
              c:identifier="MONGO_UPDATE_NONE"
              glib:nick="NONE">
        <doc xml:space="preserve">No update flags specified.</doc>
      </member>
      <member name="UPSERT"
              value="1"
              c:identifier="MONGO_UPDATE_UPSERT"
              glib:nick="UPSERT">
        <doc xml:space="preserve">Perform an upsert.</doc>
      </member>
      <member name="MULTI_UPDATE"
              value="2"
              c:identifier="MONGO_UPDATE_MULTI_UPDATE"
              glib:nick="MULTI_UPDATE">
        <doc xml:space="preserve">Continue updating after first match.</doc>
      </member>
    </bitfield>
    <constant name="VERSION_HEX" value="0" c:type="MONGO_VERSION_HEX">
      <doc xml:space="preserve">Mongo version, encoded as an hexadecimal number, useful for
integer comparisons.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_S" value="0.3.2" c:type="MONGO_VERSION_S">
      <doc xml:space="preserve">Mongo version, encoded as a string, useful for printing and
concatenation.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="clear_bson" c:identifier="mongo_clear_bson">
      <doc xml:space="preserve">If @bson is a pointer to a #MongoBson, it will be freed and zeroed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bson"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A pointer to a #MongoBson or %NULL.</doc>
          <type name="Bson" c:type="MongoBson**"/>
        </parameter>
      </parameters>
    </function>
    <function name="clear_object_id" c:identifier="mongo_clear_object_id">
      <doc xml:space="preserve">Clears the pointer to a #MongoObjectId by freeing the #MongoObjectId
and then setting the pointer to %NULL. If no #MongoObjectId was found,
then no operation is performed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_id"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">A pointer to a #MongoObjectId.</doc>
          <type name="ObjectId" c:type="MongoObjectId**"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_id_equal"
              c:identifier="mongo_object_id_equal"
              moved-to="ObjectId.equal">
      <doc xml:space="preserve">Checks if @v1 and @v2 contain the same object id.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @v1 and @v2 are equal.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="v1" transfer-ownership="none">
          <doc xml:space="preserve">A #MongoObjectId.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="v2" transfer-ownership="none">
          <doc xml:space="preserve">A #MongoObjectId.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_id_hash"
              c:identifier="mongo_object_id_hash"
              moved-to="ObjectId.hash">
      <doc xml:space="preserve">Hashes the bytes of the provided #MongoObjectId using DJB hash.
This is suitable for using as a hash function for #GHashTable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A hash value corresponding to the key.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="v" transfer-ownership="none">
          <doc xml:space="preserve">A #MongoObjectId.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
