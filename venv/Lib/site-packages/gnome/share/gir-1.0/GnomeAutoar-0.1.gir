<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <c:include name="gnome-autoar/gnome-autoar.h"/>
  <namespace name="GnomeAutoar"
             version="0.1"
             shared-library="libgnome-autoar-0-0.dll"
             c:identifier-prefixes="Autoar"
             c:symbol-prefixes="autoar">
    <alias name="Compressor_autoptr" c:type="AutoarCompressor_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="Extractor_autoptr" c:type="AutoarExtractor_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <class name="Compressor"
           c:symbol-prefix="compressor"
           c:type="AutoarCompressor"
           parent="GObject.Object"
           glib:type-name="AutoarCompressor"
           glib:get-type="autoar_compressor_get_type"
           glib:type-struct="CompressorClass">
      <constructor name="new"
                   c:identifier="autoar_compressor_new"
                   introspectable="0">
        <doc xml:space="preserve">Create a new #AutoarCompressor object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #AutoarCompressor object</doc>
          <type name="Compressor" c:type="AutoarCompressor*"/>
        </return-value>
        <parameters>
          <parameter name="source_files" transfer-ownership="none">
            <doc xml:space="preserve">a #GList of source #GFiles to be archived</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="output_file" transfer-ownership="none">
            <doc xml:space="preserve">output directory of the new archive, or the file name of the
new archive if you set #AutoarCompressor:output-is-dest on the returned object</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">the compression format</doc>
            <type name="Format" c:type="AutoarFormat"/>
          </parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">the compression filter</doc>
            <type name="Filter" c:type="AutoarFilter"/>
          </parameter>
          <parameter name="create_top_level_directory"
                     transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="quark" c:identifier="autoar_compressor_quark">
        <doc xml:space="preserve">Gets the #AutoarCompressor Error Quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_completed_files"
              c:identifier="autoar_compressor_get_completed_files">
        <doc xml:space="preserve">Gets the number of files has been read</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of files has been read</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed_size"
              c:identifier="autoar_compressor_get_completed_size">
        <doc xml:space="preserve">Gets the size in bytes has been read from the source files and directories.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">file size in bytes has been read</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_create_top_level_directory"
              c:identifier="autoar_compressor_get_create_top_level_directory">
        <doc xml:space="preserve">Gets whether a top level directory will be created in the new archive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether a top level directory will be created</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_files" c:identifier="autoar_compressor_get_files">
        <doc xml:space="preserve">Gets the number of files will be read when the operation is completed. This
value is currently unset, so calling this function is useless.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total number of files</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filter" c:identifier="autoar_compressor_get_filter">
        <doc xml:space="preserve">Gets the compression filter</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the compression filter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format" c:identifier="autoar_compressor_get_format">
        <doc xml:space="preserve">Gets the compression format</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the compression format</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notify_interval"
              c:identifier="autoar_compressor_get_notify_interval">
        <doc xml:space="preserve">See autoar_compressor_set_notify_interval().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the minimal interval in microseconds between the emission of the
#AutoarCompressor::progress signal.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_file"
              c:identifier="autoar_compressor_get_output_file">
        <doc xml:space="preserve">If #AutoarCompressor:output_is_dest is %FALSE, gets the directory which
contains the new archive. Otherwise, gets the the new archive. See
autoar_compressor_set_output_is_dest().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_is_dest"
              c:identifier="autoar_compressor_get_output_is_dest">
        <doc xml:space="preserve">See autoar_compressor_set_output_is_dest().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if #AutoarCompressor:output is the location of the new
archive.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="autoar_compressor_get_size">
        <doc xml:space="preserve">Gets the size in bytes will be read when the operation is completed. This
value is currently unset, so calling this function is useless.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total file size in bytes</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_files"
              c:identifier="autoar_compressor_get_source_files"
              introspectable="0">
        <doc xml:space="preserve">Gets the list of source files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList with the source files</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_notify_interval"
              c:identifier="autoar_compressor_set_notify_interval">
        <doc xml:space="preserve">Sets the minimal interval between emission of #AutoarCompressor::progress
signal. This prevent too frequent signal emission, which may cause
performance impact. If you do not want this feature, you can set the
interval to 0, so you will receive every progress update.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
          <parameter name="notify_interval" transfer-ownership="none">
            <doc xml:space="preserve">the minimal interval in microseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_is_dest"
              c:identifier="autoar_compressor_set_output_is_dest">
        <doc xml:space="preserve">By default #AutoarCompressor:output-is-dest is set to %FALSE, which means
the new archive will be created as a regular file under
#AutoarCompressor:output directory. The name of the new archive will be
automatically generated and you will be notified via
#AutoarCompressor::decide-dest when the name is decided. If you have already
decided the location of the new archive, and you do not want
#AutoarCompressor to decide it for you, you can set
#AutoarCompressor:output-is-dest to %TRUE. #AutoarCompressor will use
#AutoarCompressor:output as the location of the new archive, and it will
neither check whether the file exists nor create the necessary
directories for you. This function should only be called before calling
autoar_compressor_start() or autoar_compressor_start_async().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
          <parameter name="output_is_dest" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the location of the new archive has been already
decided</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="autoar_compressor_start">
        <doc xml:space="preserve">Runs the archive creating work. All callbacks will be called in the same
thread as the caller of this functions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor object</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async" c:identifier="autoar_compressor_start_async">
        <doc xml:space="preserve">Asynchronously runs the archive creating work. You should connect to
#AutoarCompressor::cancelled, #AutoarCompressor::error, and
#AutoarCompressor::completed signal to get notification when the work is
terminated. All callbacks will be called in the main thread, so you can
safely manipulate GTK+ widgets in the callbacks.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarCompressor object</doc>
            <type name="Compressor" c:type="AutoarCompressor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="completed-files" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="completed-size" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="create-top-level-directory"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="files" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="filter"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="format"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="notify-interval"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="output-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="output-is-dest"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="source-files"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <glib:signal name="cancelled" when="last">
        <doc xml:space="preserve">This signal is emitted after archive creating job is cancelled by the
#GCancellable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve">This signal is emitted after the archive creating job is successfully
completed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="decide-dest" when="last">
        <doc xml:space="preserve">This signal is emitted when the location of the new archive is determined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve">the location of the new archive</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="error" when="last">
        <doc xml:space="preserve">This signal is emitted when error occurs and all jobs should be terminated.
Possible error domains are %AUTOAR_COMPRESSOR_ERROR, %G_IO_ERROR, and
%AUTOAR_LIBARCHIVE_ERROR, which represent error occurs in #AutoarCompressor,
GIO, and libarchive, respectively. The #GError is owned by #AutoarCompressor
and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">the #GError</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="progress" when="last">
        <doc xml:space="preserve">This signal is used to report progress of creating archives. The value of
@completed_size and @completed_files are the same as the
#AutoarCompressor:completed_size and #AutoarCompressor:completed_files properties,
respectively.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="completed_size" transfer-ownership="none">
            <doc xml:space="preserve">bytes has been read from source files and directories</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="completed_files" transfer-ownership="none">
            <doc xml:space="preserve">number of files and directories has been read</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CompressorClass"
            c:type="AutoarCompressorClass"
            glib:is-gtype-struct-for="Compressor">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ConflictAction" c:type="AutoarConflictAction">
      <member name="skip" value="0" c:identifier="AUTOAR_CONFLICT_SKIP">
      </member>
      <member name="overwrite"
              value="1"
              c:identifier="AUTOAR_CONFLICT_OVERWRITE">
      </member>
      <member name="change_destination"
              value="2"
              c:identifier="AUTOAR_CONFLICT_CHANGE_DESTINATION">
      </member>
    </enumeration>
    <class name="Extractor"
           c:symbol-prefix="extractor"
           c:type="AutoarExtractor"
           parent="GObject.Object"
           glib:type-name="AutoarExtractor"
           glib:get-type="autoar_extractor_get_type"
           glib:type-struct="ExtractorClass">
      <constructor name="new" c:identifier="autoar_extractor_new">
        <doc xml:space="preserve">Create a new #AutoarExtractor object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #AutoarExtractor object</doc>
          <type name="Extractor" c:type="AutoarExtractor*"/>
        </return-value>
        <parameters>
          <parameter name="source_file" transfer-ownership="none">
            <doc xml:space="preserve">source archive</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="output_file" transfer-ownership="none">
            <doc xml:space="preserve">output directory of extracted file or directory, or the
file name of the extracted file or directory itself if you set
#AutoarExtractor:output-is-dest on the returned object</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="quark" c:identifier="autoar_extractor_quark">
        <doc xml:space="preserve">Gets the #AutoarExtractor Error Quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_completed_files"
              c:identifier="autoar_extractor_get_completed_files">
        <doc xml:space="preserve">Gets the number of files has been written to disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of files has been written to disk</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed_size"
              c:identifier="autoar_extractor_get_completed_size">
        <doc xml:space="preserve">Gets the size in bytes has been written to disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">size in bytes has been written</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delete_after_extraction"
              c:identifier="autoar_extractor_get_delete_after_extraction">
        <doc xml:space="preserve">Whether the source archive will be deleted after a successful extraction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the source archive will be deleted after a succesful
extraction</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notify_interval"
              c:identifier="autoar_extractor_get_notify_interval">
        <doc xml:space="preserve">See autoar_extractor_set_notify_interval().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the minimal interval in microseconds between the emission of the
#AutoarExtractor::progress signal.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_file"
              c:identifier="autoar_extractor_get_output_file">
        <doc xml:space="preserve">This function is similar to autoar_extractor_get_output(), except for the
return value is a #GFile.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_is_dest"
              c:identifier="autoar_extractor_get_output_is_dest">
        <doc xml:space="preserve">See autoar_extractor_set_output_is_dest().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if #AutoarExtractor:output is the location of extracted file
or directory</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_file"
              c:identifier="autoar_extractor_get_source_file">
        <doc xml:space="preserve">Gets the #GFile object which represents the source archive that will be
extracted for this object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_files"
              c:identifier="autoar_extractor_get_total_files">
        <doc xml:space="preserve">Gets the total number of files will be written when the operation is
completed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total number of extracted files</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_size"
              c:identifier="autoar_extractor_get_total_size">
        <doc xml:space="preserve">Gets the size in bytes will be written when the operation is completed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total size of extracted files in bytes</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_delete_after_extraction"
              c:identifier="autoar_extractor_set_delete_after_extraction">
        <doc xml:space="preserve">By default #AutoarExtractor:delete-after-extraction is set to %FALSE so the
source archive will not be automatically deleted if extraction succeeds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
          <parameter name="delete_if_succeed" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_notify_interval"
              c:identifier="autoar_extractor_set_notify_interval">
        <doc xml:space="preserve">Sets the minimal interval between emission of #AutoarExtractor::progress
signal. This prevent too frequent signal emission, which may cause
performance impact. If you do not want this feature, you can set the interval
to 0, so you will receive every progress update.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
          <parameter name="notify_interval" transfer-ownership="none">
            <doc xml:space="preserve">the minimal interval in microseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_is_dest"
              c:identifier="autoar_extractor_set_output_is_dest">
        <doc xml:space="preserve">By default #AutoarExtractor:output-is-dest is set to %FALSE, which means
only one file or directory will be generated. The destination is internally
determined by analyzing the contents of the archive. If this is not wanted,
#AutoarExtractor:output-is-dest can be set to %TRUE, which will make
#AutoarExtractor:output the destination for extracted files. In any case, the
destination will be notified via #AutoarExtractor::decide-destination, when
it is possible to set a new destination.

#AutoarExtractor will attempt to create the destination regardless to whether
its path was internally decided or not.

This function should only be called before calling autoar_extractor_start() or
autoar_extractor_start_async().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
          <parameter name="output_is_dest" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the location of the extracted directory or file
has been already decided</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="autoar_extractor_start">
        <doc xml:space="preserve">Runs the archive extracting work. All callbacks will be called in the same
thread as the caller of this functions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor object</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async" c:identifier="autoar_extractor_start_async">
        <doc xml:space="preserve">Asynchronously runs the archive extracting work. You should connect to
#AutoarExtractor::cancelled, #AutoarExtractor::error, and
#AutoarExtractor::completed signal to get notification when the work is
terminated. All callbacks will be called in the main thread, so you can
safely manipulate GTK+ widgets in the callbacks.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #AutoarExtractor object</doc>
            <type name="Extractor" c:type="AutoarExtractor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="completed-files" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="completed-size" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="delete-after-extraction"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="notify-interval"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="output-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="output-is-dest"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="source-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="total-files" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="total-size" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="cancelled" when="last">
        <doc xml:space="preserve">This signal is emitted after archive extracting job is cancelled by the
#GCancellable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve">This signal is emitted after the archive extracting job is successfully
completed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="conflict" when="last">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the action to be performed by #AutoarExtractor

This signal is used to report and offer the possibility to solve name
conflicts when extracting files.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">the file that caused a conflict</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="new_file" transfer-ownership="none">
            <doc xml:space="preserve">an address to store the new destination for a conflict file</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="decide-destination" when="last">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new destination that will overwrite the previous
                          one, or %NULL if this is not wanted

This signal is emitted when the path of the destination is determined. It is
useful for solving name conflicts or for setting a new destination, based on
the contents of the archive.</doc>
          <type name="GObject.Object"/>
        </return-value>
        <parameters>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve">the location where files will be extracted</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve">the list of files to be extracted. All have @destination as their
           common prefix</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="error" when="last">
        <doc xml:space="preserve">This signal is emitted when error occurs and all jobs should be terminated.
Possible error domains are %AUTOAR_EXTRACTOR_ERROR, %G_IO_ERROR, and
%AUTOAR_LIBARCHIVE_ERROR, which represent error occurs in #AutoarExtractor,
GIO, and libarchive, respectively. The #GError is owned by #AutoarExtractor
and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">the #GError</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="progress" when="last">
        <doc xml:space="preserve">This signal is used to report progress of creating archives.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="completed_size" transfer-ownership="none">
            <doc xml:space="preserve">bytes has been written to disk</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="completed_files" transfer-ownership="none">
            <doc xml:space="preserve">number of files have been written to disk</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scanned" when="last">
        <doc xml:space="preserve">This signal is emitted when #AutoarExtractor finish scanning filename entries
in the source archive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve">the number of files will be extracted from the source archive</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ExtractorClass"
            c:type="AutoarExtractorClass"
            glib:is-gtype-struct-for="Extractor">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="Filter" c:type="AutoarFilter">
      <doc xml:space="preserve">This is a non-negative number which represents filters supported by
libarchive. A libarchive filter is a filter which can convert a
regular file into a compressed file.</doc>
      <member name="none" value="1" c:identifier="AUTOAR_FILTER_NONE">
        <doc xml:space="preserve">%ARCHIVE_FILTER_NONE: No filter</doc>
      </member>
      <member name="compress" value="2" c:identifier="AUTOAR_FILTER_COMPRESS">
        <doc xml:space="preserve">%ARCHIVE_FILTER_COMPRESS: UNIX-compressed</doc>
      </member>
      <member name="gzip" value="3" c:identifier="AUTOAR_FILTER_GZIP">
        <doc xml:space="preserve">%ARCHIVE_FILTER_GZIP: Gzip</doc>
      </member>
      <member name="bzip2" value="4" c:identifier="AUTOAR_FILTER_BZIP2">
        <doc xml:space="preserve">%ARCHIVE_FILTER_BZIP2: Bzip2</doc>
      </member>
      <member name="xz" value="5" c:identifier="AUTOAR_FILTER_XZ">
        <doc xml:space="preserve">%ARCHIVE_FILTER_XZ: XZ</doc>
      </member>
      <member name="lzma" value="6" c:identifier="AUTOAR_FILTER_LZMA">
        <doc xml:space="preserve">%ARCHIVE_FILTER_LZMA: LZMA</doc>
      </member>
      <member name="lzip" value="7" c:identifier="AUTOAR_FILTER_LZIP">
        <doc xml:space="preserve">%ARCHIVE_FILTER_LZIP: Lzip</doc>
      </member>
      <member name="lzop" value="8" c:identifier="AUTOAR_FILTER_LZOP">
        <doc xml:space="preserve">%ARCHIVE_FILTER_LZOP: LZO</doc>
      </member>
      <member name="grzip" value="9" c:identifier="AUTOAR_FILTER_GRZIP">
        <doc xml:space="preserve">%ARCHIVE_FILTER_GRZIP: GRZip</doc>
      </member>
      <member name="lrzip" value="10" c:identifier="AUTOAR_FILTER_LRZIP">
        <doc xml:space="preserve">%ARCHIVE_FILTER_LRZIP: Long Range ZIP (lrzip)</doc>
      </member>
    </enumeration>
    <callback name="FilterFunc" c:type="AutoarFilterFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="gpointer" c:type="archive*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="Format" c:type="AutoarFormat">
      <doc xml:space="preserve">This is a non-negative number which represents formats supported by
libarchive. A libarchive format is a file format which can store many
files as a archive file.</doc>
      <member name="zip" value="1" c:identifier="AUTOAR_FORMAT_ZIP">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_ZIP: Zip archive</doc>
      </member>
      <member name="tar" value="2" c:identifier="AUTOAR_FORMAT_TAR">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_TAR_PAX_RESTRICTED: Tar archive, use
  ustar format is possible. If there are extended headers which cannot be
  represented in the ustar format, libarchive will use pax interchage format
  instead.</doc>
      </member>
      <member name="cpio" value="3" c:identifier="AUTOAR_FORMAT_CPIO">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_CPIO_POSIX: CPIO archive, POSIX
  standard cpio interchage format.</doc>
      </member>
      <member name="7zip" value="4" c:identifier="AUTOAR_FORMAT_7ZIP">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_7ZIP: 7-zip archive</doc>
      </member>
      <member name="ar_bsd" value="5" c:identifier="AUTOAR_FORMAT_AR_BSD">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_AR_BSD: BSD variant of Unix archive
  format. This format does not support storing directories.</doc>
      </member>
      <member name="ar_svr4" value="6" c:identifier="AUTOAR_FORMAT_AR_SVR4">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_AR_GNU: GNU/SVR4 variant of Unix
  archive format. This format does not support storing directories.</doc>
      </member>
      <member name="cpio_newc"
              value="7"
              c:identifier="AUTOAR_FORMAT_CPIO_NEWC">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_CPIO_SVR4_NOCRC: CPIO archive,
  SVR4 non-CRC variant</doc>
      </member>
      <member name="gnutar" value="8" c:identifier="AUTOAR_FORMAT_GNUTAR">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_TAR_GNUTAR: Tar archive, support
  most popular GNU extensions.</doc>
      </member>
      <member name="iso9660" value="9" c:identifier="AUTOAR_FORMAT_ISO9660">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_ISO9660: Raw CD image</doc>
      </member>
      <member name="pax" value="10" c:identifier="AUTOAR_FORMAT_PAX">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE: Tar archive, use
  pax interchage format</doc>
      </member>
      <member name="ustar" value="11" c:identifier="AUTOAR_FORMAT_USTAR">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_TAR_USTAR: Tar archive, use old
  ustar format</doc>
      </member>
      <member name="xar" value="12" c:identifier="AUTOAR_FORMAT_XAR">
        <doc xml:space="preserve">%ARCHIVE_FORMAT_XAR: Xar archive</doc>
      </member>
    </enumeration>
    <callback name="FormatFunc" c:type="AutoarFormatFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="gpointer" c:type="archive*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="check_mime_type_supported"
              c:identifier="autoar_check_mime_type_supported">
      <doc xml:space="preserve">Checks whether a mime type is supported by autoar. This function does no
blocking IO.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an #AutoarFilter</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mime_type" transfer-ownership="none">
          <doc xml:space="preserve">a string representing the mime type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_description"
              c:identifier="autoar_filter_get_description">
      <doc xml:space="preserve">Gets description of the filter from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">description about the filter</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_description_libarchive"
              c:identifier="autoar_filter_get_description_libarchive">
      <doc xml:space="preserve">Gets description of the filter from libarchive. This function creates
and destroys an archive object in order to get the description string.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">description about the filter. Free the returned
string with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_extension"
              c:identifier="autoar_filter_get_extension">
      <doc xml:space="preserve">Gets the file name extension of the filter from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a file name extension</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_filter_libarchive"
              c:identifier="autoar_filter_get_filter_libarchive">
      <doc xml:space="preserve">Gets the filter code used by libarchive. You can use the return value
as the argument for archive_write_add_filter().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an integer</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_libarchive_read"
              c:identifier="autoar_filter_get_libarchive_read"
              introspectable="0">
      <doc xml:space="preserve">Gets the function used to add filter on the object returned by
archive_read_new().</doc>
      <return-value>
        <doc xml:space="preserve">function pointer to the setter function provided by libarchive</doc>
        <type name="FilterFunc" c:type="AutoarFilterFunc"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_libarchive_write"
              c:identifier="autoar_filter_get_libarchive_write"
              introspectable="0">
      <doc xml:space="preserve">Gets the function used to add filter on the object returned by
archive_write_new().</doc>
      <return-value>
        <doc xml:space="preserve">function pointer to the setter function provided by libarchive</doc>
        <type name="FilterFunc" c:type="AutoarFilterFunc"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_get_mime_type"
              c:identifier="autoar_filter_get_mime_type">
      <doc xml:space="preserve">Gets the MIME type of the filter from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an MIME type</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_is_valid" c:identifier="autoar_filter_is_valid">
      <doc xml:space="preserve">Checks whether an #AutoarFilter is valid.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the value of @filter is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="filter_last" c:identifier="autoar_filter_last">
      <doc xml:space="preserve">Gets the maximal allowed values of #AutoarFilter</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">maximal allowed values of #AutoarFilter</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="format_filter_get_description"
              c:identifier="autoar_format_filter_get_description">
      <doc xml:space="preserve">Gets the description for an archive @format compressed by
@filter using #GContentType and autoar_format_filter_get_mime_type().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">description about the archive. Free the returned
string with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_filter_get_extension"
              c:identifier="autoar_format_filter_get_extension">
      <doc xml:space="preserve">Gets the file name extension for an archive @format compressed by
@filter. The first character of the returned string is always '.'</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a file name extension. Free the returned string
with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_filter_get_mime_type"
              c:identifier="autoar_format_filter_get_mime_type">
      <doc xml:space="preserve">Gets the MIME type for an archive @format compressed by
@filter. This function always succeed, but it is not guaranteed
that the returned MIME type exists and can be recognized by applications.
Some combination of format and filter seldom exists in application,
so this function can only generate the string based on some
non-standard rules.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">an MIME type. Free the returned
string with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFilter</doc>
          <type name="Filter" c:type="AutoarFilter"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_description"
              c:identifier="autoar_format_get_description">
      <doc xml:space="preserve">Gets description of the format from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">description about the format</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_description_libarchive"
              c:identifier="autoar_format_get_description_libarchive">
      <doc xml:space="preserve">Gets description of the format from libarchive. This function creates
and destroys an archive object in order to get the description string.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">description about the format. Free the returned
string with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_extension"
              c:identifier="autoar_format_get_extension">
      <doc xml:space="preserve">Gets the file name extension of the format from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a file name extension</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_format_libarchive"
              c:identifier="autoar_format_get_format_libarchive">
      <doc xml:space="preserve">Gets the format code used by libarchive. You can use the return value
as the argument for archive_read_support_format_by_code() and
archive_write_set_format(). However, some format cannot be set using
these two functions because of problems inside libarchive. Use
autoar_format_get_libarchive_read() and
autoar_format_get_libarchive_write() to get the function pointer
is the more reliable way to set format on the archive object.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an integer</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_libarchive_read"
              c:identifier="autoar_format_get_libarchive_read"
              introspectable="0">
      <doc xml:space="preserve">Gets the function used to set format on the object returned by
archive_read_new().</doc>
      <return-value>
        <doc xml:space="preserve">function pointer to the setter function provided by libarchive</doc>
        <type name="FormatFunc" c:type="AutoarFormatFunc"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_libarchive_write"
              c:identifier="autoar_format_get_libarchive_write"
              introspectable="0">
      <doc xml:space="preserve">Gets the function used to set format on the object returned by
archive_write_new().</doc>
      <return-value>
        <doc xml:space="preserve">function pointer to the setter function provided by libarchive</doc>
        <type name="FormatFunc" c:type="AutoarFormatFunc"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_get_mime_type"
              c:identifier="autoar_format_get_mime_type">
      <doc xml:space="preserve">Gets the MIME type of the format from the internal static data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an MIME type</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_is_valid" c:identifier="autoar_format_is_valid">
      <doc xml:space="preserve">Checks whether an #AutoarFormat is valid.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the value of @format is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">an #AutoarFormat</doc>
          <type name="Format" c:type="AutoarFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_last" c:identifier="autoar_format_last">
      <doc xml:space="preserve">Gets the maximal allowed values of #AutoarFormat</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">maximal allowed values of #AutoarFormat</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="libarchive_quark" c:identifier="autoar_libarchive_quark">
      <doc xml:space="preserve">Gets the libarchive Error Quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="query_mime_type_supported"
              c:identifier="autoar_query_mime_type_supported">
      <doc xml:space="preserve">This function will query the file's mime type and then call
autoar_check_mime_type_supported(), so it does blocking IO.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an #AutoarFilter</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile to check if its mime type is supported</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
