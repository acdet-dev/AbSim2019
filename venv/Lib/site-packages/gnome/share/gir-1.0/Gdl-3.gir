<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="gdl-3.0"/>
  <c:include name="gdl/gdl.h"/>
  <namespace name="Gdl"
             version="3"
             shared-library="libgdl-3-5.dll"
             c:identifier-prefixes="Gdl"
             c:symbol-prefixes="gdl">
    <constant name="DOCK_MASTER_PROPERTY"
              value="master"
              c:type="GDL_DOCK_MASTER_PROPERTY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCK_NAME_PROPERTY"
              value="name"
              c:type="GDL_DOCK_NAME_PROPERTY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCK_OBJECT_FLAGS_SHIFT"
              value="8"
              c:type="GDL_DOCK_OBJECT_FLAGS_SHIFT"
              deprecated="1"
              deprecated-version="3.6">
      <doc xml:space="preserve">Minimum shift count to be used for user defined flags, to be stored in
#GdlDockObject.flags.</doc>
      <doc-deprecated xml:space="preserve">Use a private flag instead</doc-deprecated>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Dock"
           c:symbol-prefix="dock"
           c:type="GdlDock"
           parent="DockObject"
           glib:type-name="GdlDock"
           glib:get-type="gdl_dock_get_type"
           glib:type-struct="DockClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_new">
        <doc xml:space="preserve">Create a new dock.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GdlDock widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="layout_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_floating_item"
              c:identifier="gdl_dock_add_floating_item">
        <doc xml:space="preserve">Dock an item as a floating item. It creates a new window containing a new
dock widget sharing the same master where the item is docked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockItem widget</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate of the floating item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate of the floating item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">width of the floating item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">height of the floating item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item" c:identifier="gdl_dock_add_item">
        <doc xml:space="preserve">Dock in @dock, the widget @item at the position defined by @placement. The
function takes care of finding the right parent widget eventually creating
it if needed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockItem widget</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </parameter>
          <parameter name="placement" transfer-ownership="none">
            <doc xml:space="preserve">A position for the widget</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item_by_name" c:identifier="gdl_dock_get_item_by_name">
        <doc xml:space="preserve">Looks for an #GdlDockItem widget bound to the master of the dock item. It
does not search only in the children of this particular dock widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDockItem widget or %NULL</doc>
          <type name="DockItem" c:type="GdlDockItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">An item name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_named_items" c:identifier="gdl_dock_get_named_items">
        <doc xml:space="preserve">Returns a list of all item bound to the master of the dock, not only
the children of this particular dock widget.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of #GdlDockItem. The list should be freedwith g_list_free(),
but the item still belong to the master.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DockObject"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_placeholder_by_name"
              c:identifier="gdl_dock_get_placeholder_by_name"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Looks for an #GdlDockPlaceholder object bound to the master of the dock item.
It does not search only in the children of this particular dock widget.</doc>
        <doc-deprecated xml:space="preserve">This function is always returning %NULL.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDockPlaceholder object or %NULL</doc>
          <type name="DockPlaceholder" c:type="GdlDockPlaceholder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">An item name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="gdl_dock_get_root">
        <doc xml:space="preserve">Get the first child of the #GdlDockObject.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDockObject or %NULL.</doc>
          <type name="DockObject" c:type="GdlDockObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_preview" c:identifier="gdl_dock_hide_preview">
        <doc xml:space="preserve">Hide the preview window used to materialize the dock target.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_from" c:identifier="gdl_dock_new_from">
        <doc xml:space="preserve">Create a new dock widget having the same master than @original.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GdlDock widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="original" transfer-ownership="none">
            <doc xml:space="preserve">The original #GdlDock</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="floating" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to create a floating dock</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_taskbar"
              c:identifier="gdl_dock_set_skip_taskbar"
              version="3.6">
        <doc xml:space="preserve">Sets whether or not a floating dock window should be prevented from
appearing in the system taskbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">The dock whose property should be set.</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if floating docks should be prevented from appearing in the taskbar</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_preview" c:identifier="gdl_dock_show_preview">
        <doc xml:space="preserve">Show a preview window used to materialize the dock target.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">The position and the size of the preview window</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xor_rect"
              c:identifier="gdl_dock_xor_rect"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Show a preview window used to materialize the dock target.</doc>
        <doc-deprecated xml:space="preserve">Use gdl_dock_show_preview instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">The position and the size of the preview window</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xor_rect_hide"
              c:identifier="gdl_dock_xor_rect_hide"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Hide the preview window used to materialize the dock target.</doc>
        <doc-deprecated xml:space="preserve">Use gdl_dock_hide_preview instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDock widget</doc>
            <type name="Dock" c:type="GdlDock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="default-title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="floating"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="floatx"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="floaty"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="height"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="skip-taskbar"
                version="3.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether or not to prevent a floating dock window from appearing in the
taskbar. Note that this only affects floating windows that are created
after this flag is set; existing windows are not affected.  Usually,
this property is used when you create the dock.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="width"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="object">
        <type name="DockObject" c:type="GdlDockObject"/>
      </field>
      <field name="priv">
        <type name="DockPrivate" c:type="GdlDockPrivate*"/>
      </field>
      <glib:signal name="layout-changed" when="last">
        <doc xml:space="preserve">Signals that the layout has changed, one or more widgets have been moved,
added or removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="DockBar"
           c:symbol-prefix="dock_bar"
           c:type="GdlDockBar"
           parent="Gtk.Box"
           glib:type-name="GdlDockBar"
           glib:get-type="gdl_dock_bar_get_type"
           glib:type-struct="DockBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="gdl_dock_bar_new">
        <doc xml:space="preserve">Creates a new GDL dock bar. If a #GdlDockObject is used, the dock bar will
be associated with the master of this object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock bar.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="master"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The associated #GdlDockMaster or #GdlDockObject object</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_orientation"
              c:identifier="gdl_dock_bar_get_orientation"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Retrieves the orientation of the @dockbar.</doc>
        <doc-deprecated xml:space="preserve">Use gtk_orientable_get_orientation() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the orientation of the @docbar</doc>
          <type name="Gtk.Orientation" c:type="GtkOrientation"/>
        </return-value>
        <parameters>
          <instance-parameter name="dockbar" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockBar</doc>
            <type name="DockBar" c:type="GdlDockBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="gdl_dock_bar_get_style">
        <doc xml:space="preserve">Retrieves the style of the @dockbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the style of the @docbar</doc>
          <type name="DockBarStyle" c:type="GdlDockBarStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="dockbar" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockBar</doc>
            <type name="DockBar" c:type="GdlDockBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="gdl_dock_bar_set_orientation"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Set the orientation of the @dockbar.</doc>
        <doc-deprecated xml:space="preserve">Use gtk_orientable_set_orientation() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dockbar" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockBar</doc>
            <type name="DockBar" c:type="GdlDockBar*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve">the new orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="gdl_dock_bar_set_style">
        <doc xml:space="preserve">Set the style of the @dockbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dockbar" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockBar</doc>
            <type name="DockBar" c:type="GdlDockBar*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">the new style</doc>
            <type name="DockBarStyle" c:type="GdlDockBarStyle"/>
          </parameter>
        </parameters>
      </method>
      <property name="dockbar-style"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="DockBarStyle"/>
      </property>
      <property name="master" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #GdlDockMaster object attached to the dockbar.</doc>
        <type name="GObject.Object"/>
      </property>
      <field name="parent">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="deprecated_dock" readable="0" private="1">
        <type name="Dock" c:type="GdlDock*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DockBarPrivate" c:type="GdlDockBarPrivate*"/>
      </field>
    </class>
    <record name="DockBarClass"
            c:type="GdlDockBarClass"
            glib:is-gtype-struct-for="DockBar">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <record name="DockBarPrivate" c:type="GdlDockBarPrivate" disguised="1">
    </record>
    <enumeration name="DockBarStyle"
                 glib:type-name="GdlDockBarStyle"
                 glib:get-type="gdl_dock_bar_style_get_type"
                 c:type="GdlDockBarStyle">
      <doc xml:space="preserve">Used to customize the appearance of a #GdlDockBar.</doc>
      <member name="icons"
              value="0"
              c:identifier="GDL_DOCK_BAR_ICONS"
              glib:nick="icons">
        <doc xml:space="preserve">Buttons display only icons in the dockbar.</doc>
      </member>
      <member name="text"
              value="1"
              c:identifier="GDL_DOCK_BAR_TEXT"
              glib:nick="text">
        <doc xml:space="preserve">Buttons display only text labels in the dockbar.</doc>
      </member>
      <member name="both"
              value="2"
              c:identifier="GDL_DOCK_BAR_BOTH"
              glib:nick="both">
        <doc xml:space="preserve">Buttons display text and icons in the dockbar.</doc>
      </member>
      <member name="auto"
              value="3"
              c:identifier="GDL_DOCK_BAR_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve">identical to @GDL_DOCK_BAR_BOTH.</doc>
      </member>
    </enumeration>
    <record name="DockClass"
            c:type="GdlDockClass"
            glib:is-gtype-struct-for="Dock">
      <field name="parent_class" readable="0" private="1">
        <type name="DockObjectClass" c:type="GdlDockObjectClass"/>
      </field>
      <field name="layout_changed">
        <callback name="layout_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dock" transfer-ownership="none">
              <type name="Dock" c:type="GdlDock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DockItem"
           c:symbol-prefix="dock_item"
           c:type="GdlDockItem"
           parent="DockObject"
           glib:type-name="GdlDockItem"
           glib:get-type="gdl_dock_item_get_type"
           glib:type-struct="DockItemClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_item_new">
        <doc xml:space="preserve">Creates a new dock item widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock item grip widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Unique name for identifying the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_name" transfer-ownership="none">
            <doc xml:space="preserve">Human readable name for the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="behavior" transfer-ownership="none">
            <doc xml:space="preserve">General behavior for the dock item (i.e. whether it can
           float, if it's locked, etc.), as specified by
           #GdlDockItemBehavior flags.</doc>
            <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_pixbuf_icon"
                   c:identifier="gdl_dock_item_new_with_pixbuf_icon"
                   version="3.3.2">
        <doc xml:space="preserve">Creates a new dock item grip widget with a given pixbuf icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock item grip widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Unique name for identifying the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_name" transfer-ownership="none">
            <doc xml:space="preserve">Human readable name for the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pixbuf_icon" transfer-ownership="none">
            <doc xml:space="preserve">Pixbuf icon for the dock object.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="const GdkPixbuf*"/>
          </parameter>
          <parameter name="behavior" transfer-ownership="none">
            <doc xml:space="preserve">General behavior for the dock item (i.e. whether it can
           float, if it's locked, etc.), as specified by
           #GdlDockItemBehavior flags.</doc>
            <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_stock"
                   c:identifier="gdl_dock_item_new_with_stock">
        <doc xml:space="preserve">Creates a new dock item grip widget with a given stock id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock item grip widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Unique name for identifying the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_name" transfer-ownership="none">
            <doc xml:space="preserve">Human readable name for the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:space="preserve">Stock icon for the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="behavior" transfer-ownership="none">
            <doc xml:space="preserve">General behavior for the dock item (i.e. whether it can
           float, if it's locked, etc.), as specified by
           #GdlDockItemBehavior flags.</doc>
            <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="dock_drag_begin">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dock_drag_end">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="cancelled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dock_drag_motion">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Gdk.Device" c:type="GdkDevice*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_focus_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_orientation" invoker="set_orientation">
        <doc xml:space="preserve">This function sets the layout of the dock item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item which will get it's orientation set.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve">The orientation to set the item to. If the orientation
is set to #GTK_ORIENTATION_VERTICAL, the grip widget will be shown
along the top of the edge of item (if it is not hidden). If the
orientation is set to #GTK_ORIENTATION_HORIZONTAL, the grip widget
will be shown down the left edge of the item (even if the widget
text direction is set to RTL).</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="bind" c:identifier="gdl_dock_item_bind">
        <doc xml:space="preserve">Binds this dock item to a new dock master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The item to bind.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="dock" transfer-ownership="none">
            <doc xml:space="preserve">The #GdlDock widget to bind it to. Note that this widget must
be a type of #GdlDock.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dock_to" c:identifier="gdl_dock_item_dock_to">
        <doc xml:space="preserve">Relocates a dock item to a new location relative to another dock item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item that will be relocated to the dock position.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The dock item that will be used as the point of reference.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">The position to dock #item, relative to #target.</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="docking_param" transfer-ownership="none">
            <doc xml:space="preserve">This value is unused, and will be ignored.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_behavior_flags"
              c:identifier="gdl_dock_item_get_behavior_flags"
              version="3.6">
        <doc xml:space="preserve">Retrieves the behavior of the item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the behavior of the item.</doc>
          <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockItem</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child"
              c:identifier="gdl_dock_item_get_child"
              version="3.6">
        <doc xml:space="preserve">Gets the child of the #GdlDockItem, or %NULL if the item contains
no child widget. The returned widget does not have a reference
added, so you do not need to unref it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">pointer to child of the #GdlDockItem</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockItem</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drag_area"
              c:identifier="gdl_dock_item_get_drag_area"
              version="3.6">
        <doc xml:space="preserve">Gets the size and the position of the drag window in pixels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to get the preferred size of.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to a #GdkRectangle that will receive the drag position</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_grip" c:identifier="gdl_dock_item_get_grip">
        <doc xml:space="preserve">This function returns the dock item's grip label widget.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Returns the current label widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item from which to to get the grip of.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_orientation"
              c:identifier="gdl_dock_item_get_orientation"
              version="3.6">
        <doc xml:space="preserve">Retrieves the orientation of the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the orientation of the object.</doc>
          <type name="Gtk.Orientation" c:type="GtkOrientation"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockItem</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tablabel" c:identifier="gdl_dock_item_get_tablabel">
        <doc xml:space="preserve">Gets the current tab label widget. Note that this label widget is
only visible when the "switcher-style" property of the #GdlDockMaster
is set to #GDL_SWITCHER_STYLE_TABS</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Returns the tab label widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item from which to get the tab label widget.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_grip" c:identifier="gdl_dock_item_hide_grip">
        <doc xml:space="preserve">This function hides the dock item's grip widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to hide the grip of.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_item" c:identifier="gdl_dock_item_hide_item">
        <doc xml:space="preserve">This function hides the dock item. Since version 3.6, when dock items
are hidden they are not removed from the layout.

The dock item close button causes the panel to be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to hide.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="iconify_item" c:identifier="gdl_dock_item_iconify_item">
        <doc xml:space="preserve">This function iconifies the dock item. When dock items are iconified
they are hidden, and appear only as icons in dock bars.

The dock item iconify button causes the panel to be iconified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to iconify.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_closed"
              c:identifier="gdl_dock_item_is_closed"
              version="3.6">
        <doc xml:space="preserve">Checks whether a given #GdlDockItem is closed. It can be only hidden or
detached.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the dock item is closed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to be checked</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_iconified"
              c:identifier="gdl_dock_item_is_iconified"
              version="3.6">
        <doc xml:space="preserve">Checks whether a given #GdlDockItem is iconified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the dock item is iconified.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to be checked</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_placeholder"
              c:identifier="gdl_dock_item_is_placeholder"
              version="3.6">
        <doc xml:space="preserve">Checks whether a given #GdlDockItem is a placeholder created by the
#GdlDockLayout object and does not contain a child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the dock item is a placeholder</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to be checked</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="gdl_dock_item_lock">
        <doc xml:space="preserve">This function locks the dock item. When locked the dock item cannot
be dragged around and it doesn't show a grip.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to lock.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_deselected"
              c:identifier="gdl_dock_item_notify_deselected">
        <doc xml:space="preserve">This function emits the deselected signal. It is used by #GdlSwitcher
to let clients know that this item has been deselected.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the dock item to emit a deselected signal on.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_selected"
              c:identifier="gdl_dock_item_notify_selected">
        <doc xml:space="preserve">This function emits the selected signal. It is to be used by #GdlSwitcher
to let clients know that this item has been switched to.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the dock item to emit a selected signal on.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="or_child_has_focus"
              c:identifier="gdl_dock_item_or_child_has_focus"
              version="3.3.2">
        <doc xml:space="preserve">Checks whether a given #GdlDockItem or its child widget has focus.
This check is performed recursively on child widgets.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the dock item or its child widget has focus;
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to be checked</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="preferred_size"
              c:identifier="gdl_dock_item_preferred_size">
        <doc xml:space="preserve">Gets the preferred size of the dock item in pixels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to get the preferred size of.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="req" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to a #GtkRequisition into which the preferred size
will be written.</doc>
            <type name="Gtk.Requisition" c:type="GtkRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_behavior_flags"
              c:identifier="gdl_dock_item_set_behavior_flags"
              version="3.6">
        <doc xml:space="preserve">This function sets the behavior of the dock item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item which will get it's behavior set.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="behavior" transfer-ownership="none">
            <doc xml:space="preserve">Behavior flags to turn on</doc>
            <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
          </parameter>
          <parameter name="clear" transfer-ownership="none">
            <doc xml:space="preserve">Whether to clear state before turning on @flags</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="gdl_dock_item_set_child"
              version="3.6">
        <doc xml:space="preserve">Set a new child for the #GdlDockItem. This child is different from the
children using the #GtkContainer interface. It is a private child reserved
for the widget implementation.

If a child is already present, it will be replaced. If @widget is %NULL the
child will be removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockItem</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_position"
              c:identifier="gdl_dock_item_set_default_position">
        <doc xml:space="preserve">This method has only an effect when you add you dock_item with
GDL_DOCK_ITEM_BEH_NEVER_FLOATING. In this case you have to assign
it a default position.*

Deprecated 3.6: This function is doing nothing now.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">The GdlDockObject which is the default dock for @item</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="gdl_dock_item_set_orientation">
        <doc xml:space="preserve">This function sets the layout of the dock item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item which will get it's orientation set.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve">The orientation to set the item to. If the orientation
is set to #GTK_ORIENTATION_VERTICAL, the grip widget will be shown
along the top of the edge of item (if it is not hidden). If the
orientation is set to #GTK_ORIENTATION_HORIZONTAL, the grip widget
will be shown down the left edge of the item (even if the widget
text direction is set to RTL).</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tablabel" c:identifier="gdl_dock_item_set_tablabel">
        <doc xml:space="preserve">Replaces the current tab label widget with another widget. Note that
this label widget is only visible when the "switcher-style" property
of the #GdlDockMaster is set to #GDL_SWITCHER_STYLE_TABS</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item which will get it's tab label widget set.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="tablabel" transfer-ownership="none">
            <doc xml:space="preserve">The widget that will become the tab label.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_grip" c:identifier="gdl_dock_item_show_grip">
        <doc xml:space="preserve">This function shows the dock item's grip widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to show the grip of.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show_item" c:identifier="gdl_dock_item_show_item">
        <doc xml:space="preserve">This function shows the dock item. When dock items are shown, they
are displayed in their normal layout position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to show.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="gdl_dock_item_unbind">
        <doc xml:space="preserve">Unbinds this dock item from it's dock master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The item to unbind.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="gdl_dock_item_unlock">
        <doc xml:space="preserve">This function unlocks the dock item. When unlocked the dock item can
be dragged around and can show a grip.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item to unlock.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset_behavior_flags"
              c:identifier="gdl_dock_item_unset_behavior_flags"
              version="3.6">
        <doc xml:space="preserve">This function sets the behavior of the dock item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item which will get it's behavior set.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </instance-parameter>
          <parameter name="behavior" transfer-ownership="none">
            <doc xml:space="preserve">Behavior flags to turn off</doc>
            <type name="DockItemBehavior" c:type="GdlDockItemBehavior"/>
          </parameter>
        </parameters>
      </method>
      <property name="behavior" writable="1" transfer-ownership="none">
        <type name="DockItemBehavior"/>
      </property>
      <property name="closed"
                version="3.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If set, the dock item is closed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="iconified"
                version="3.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If set, the dock item is hidden but it has a corresponding icon in the
dock bar allowing to show it again.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="orientation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The orientation of the docking item. If the orientation is set to
#GTK_ORIENTATION_VERTICAL, the grip widget will be shown along
the top of the edge of item (if it is not hidden). If the
orientation is set to #GTK_ORIENTATION_HORIZONTAL, the grip
widget will be shown down the left edge of the item (even if the
widget text direction is set to RTL).</doc>
        <type name="Gtk.Orientation"/>
      </property>
      <property name="preferred-height" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="preferred-width" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="resize" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="object">
        <type name="DockObject" c:type="GdlDockObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DockItemPrivate" c:type="GdlDockItemPrivate*"/>
      </field>
      <glib:signal name="deselected" when="first">
        <doc xml:space="preserve">Signals that this dock has been deselected in a switcher.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="dock-drag-begin" when="first">
        <doc xml:space="preserve">Signals that the dock item has begun to be dragged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="dock-drag-end" when="first">
        <doc xml:space="preserve">Signals that the dock item dragging has ended.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancel" transfer-ownership="none">
            <doc xml:space="preserve">This value is set to TRUE if the drag was cancelled by
the user. #cancel is set to FALSE if the drag was accepted.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="dock-drag-motion" when="first">
        <doc xml:space="preserve">Signals that a dock item dragging motion event has occured.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">The device used.</doc>
            <type name="Gdk.Device"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">The x-position that the dock item has been dragged to.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">The y-position that the dock item has been dragged to.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-focus-child"
                   when="last"
                   action="1"
                   version="3.3.2">
        <doc xml:space="preserve">The ::move-focus-child signal is emitted when a change of focus is
requested for the child widget of a dock item.  The @dir parameter
specifies the direction in which focus is to be shifted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">The direction in which to move focus</doc>
            <type name="Gtk.DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected" when="first">
        <doc xml:space="preserve">Signals that this dock has been selected from a switcher.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <bitfield name="DockItemBehavior"
              glib:type-name="GdlDockItemBehavior"
              glib:get-type="gdl_dock_item_behavior_get_type"
              c:type="GdlDockItemBehavior">
      <doc xml:space="preserve">Described the behaviour of a doc item. The item can have multiple flags set.</doc>
      <member name="normal"
              value="0"
              c:identifier="GDL_DOCK_ITEM_BEH_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve">Normal dock item</doc>
      </member>
      <member name="never_floating"
              value="1"
              c:identifier="GDL_DOCK_ITEM_BEH_NEVER_FLOATING"
              glib:nick="never-floating">
        <doc xml:space="preserve">item cannot be undocked</doc>
      </member>
      <member name="never_vertical"
              value="2"
              c:identifier="GDL_DOCK_ITEM_BEH_NEVER_VERTICAL"
              glib:nick="never-vertical">
        <doc xml:space="preserve">item cannot be docked vertically</doc>
      </member>
      <member name="never_horizontal"
              value="4"
              c:identifier="GDL_DOCK_ITEM_BEH_NEVER_HORIZONTAL"
              glib:nick="never-horizontal">
        <doc xml:space="preserve">item cannot be docked horizontally</doc>
      </member>
      <member name="locked"
              value="8"
              c:identifier="GDL_DOCK_ITEM_BEH_LOCKED"
              glib:nick="locked">
        <doc xml:space="preserve">item is locked, it cannot be moved around</doc>
      </member>
      <member name="cant_dock_top"
              value="16"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_DOCK_TOP"
              glib:nick="cant-dock-top">
        <doc xml:space="preserve">item cannot be docked at top</doc>
      </member>
      <member name="cant_dock_bottom"
              value="32"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_DOCK_BOTTOM"
              glib:nick="cant-dock-bottom">
        <doc xml:space="preserve">item cannot be docked at bottom</doc>
      </member>
      <member name="cant_dock_left"
              value="64"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_DOCK_LEFT"
              glib:nick="cant-dock-left">
        <doc xml:space="preserve">item cannot be docked left</doc>
      </member>
      <member name="cant_dock_right"
              value="128"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_DOCK_RIGHT"
              glib:nick="cant-dock-right">
        <doc xml:space="preserve">item cannot be docked right</doc>
      </member>
      <member name="cant_dock_center"
              value="256"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_DOCK_CENTER"
              glib:nick="cant-dock-center">
        <doc xml:space="preserve">item cannot be docked at center</doc>
      </member>
      <member name="cant_close"
              value="512"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_CLOSE"
              glib:nick="cant-close">
        <doc xml:space="preserve">item cannot be closed</doc>
      </member>
      <member name="cant_iconify"
              value="1024"
              c:identifier="GDL_DOCK_ITEM_BEH_CANT_ICONIFY"
              glib:nick="cant-iconify">
        <doc xml:space="preserve">item cannot be iconified</doc>
      </member>
      <member name="no_grip"
              value="2048"
              c:identifier="GDL_DOCK_ITEM_BEH_NO_GRIP"
              glib:nick="no-grip">
        <doc xml:space="preserve">item doesn't have a grip</doc>
      </member>
    </bitfield>
    <class name="DockItemButtonImage"
           c:symbol-prefix="dock_item_button_image"
           c:type="GdlDockItemButtonImage"
           parent="Gtk.Widget"
           glib:type-name="GdlDockItemButtonImage"
           glib:get-type="gdl_dock_item_button_image_get_type"
           glib:type-struct="DockItemButtonImageClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_item_button_image_new">
        <doc xml:space="preserve">Creates a new GDL dock button image object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock item button image widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="image_type" transfer-ownership="none">
            <doc xml:space="preserve">Specifies what type of image the widget should display</doc>
            <type name="DockItemButtonImageType"
                  c:type="GdlDockItemButtonImageType"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
      <field name="image_type">
        <type name="DockItemButtonImageType"
              c:type="GdlDockItemButtonImageType"/>
      </field>
    </class>
    <record name="DockItemButtonImageClass"
            c:type="GdlDockItemButtonImageClass"
            glib:is-gtype-struct-for="DockItemButtonImage">
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="DockItemButtonImageType"
                 c:type="GdlDockItemButtonImageType">
      <doc xml:space="preserve">Define the image displayed.</doc>
      <member name="close"
              value="0"
              c:identifier="GDL_DOCK_ITEM_BUTTON_IMAGE_CLOSE">
        <doc xml:space="preserve">Display a small cross</doc>
      </member>
      <member name="iconify"
              value="1"
              c:identifier="GDL_DOCK_ITEM_BUTTON_IMAGE_ICONIFY">
        <doc xml:space="preserve">Display a small triangle</doc>
      </member>
    </enumeration>
    <record name="DockItemClass"
            c:type="GdlDockItemClass"
            glib:is-gtype-struct-for="DockItem">
      <field name="parent_class">
        <type name="DockObjectClass" c:type="GdlDockObjectClass"/>
      </field>
      <field name="priv">
        <type name="DockItemClassPrivate" c:type="GdlDockItemClassPrivate*"/>
      </field>
      <field name="set_orientation">
        <callback name="set_orientation">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve">The dock item which will get it's orientation set.</doc>
              <type name="DockItem" c:type="GdlDockItem*"/>
            </parameter>
            <parameter name="orientation" transfer-ownership="none">
              <doc xml:space="preserve">The orientation to set the item to. If the orientation
is set to #GTK_ORIENTATION_VERTICAL, the grip widget will be shown
along the top of the edge of item (if it is not hidden). If the
orientation is set to #GTK_ORIENTATION_HORIZONTAL, the grip widget
will be shown down the left edge of the item (even if the widget
text direction is set to RTL).</doc>
              <type name="Gtk.Orientation" c:type="GtkOrientation"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dock_drag_begin">
        <callback name="dock_drag_begin">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="DockItem" c:type="GdlDockItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dock_drag_motion">
        <callback name="dock_drag_motion">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="DockItem" c:type="GdlDockItem*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Gdk.Device" c:type="GdkDevice*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dock_drag_end">
        <callback name="dock_drag_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="DockItem" c:type="GdlDockItem*"/>
            </parameter>
            <parameter name="cancelled" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_focus_child">
        <callback name="move_focus_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="DockItem" c:type="GdlDockItem*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <method name="set_has_grip"
              c:identifier="gdl_dock_item_class_set_has_grip"
              version="3.6">
        <doc xml:space="preserve">Define in the corresponding kind of dock item has a grip. Even if an item
has a grip it can be hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item_class" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockItemClass</doc>
            <type name="DockItemClass" c:type="GdlDockItemClass*"/>
          </instance-parameter>
          <parameter name="has_grip" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE is the dock item has a grip</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="DockItemClassPrivate"
            c:type="GdlDockItemClassPrivate"
            disguised="1">
    </record>
    <bitfield name="DockItemFlags"
              deprecated="1"
              deprecated-version="3.6"
              glib:type-name="GdlDockItemFlags"
              glib:get-type="gdl_dock_item_flags_get_type"
              c:type="GdlDockItemFlags">
      <doc xml:space="preserve">Status flag of a GdlDockItem. Don't use unless you derive a widget from GdlDockItem</doc>
      <doc-deprecated xml:space="preserve">Use your own private data instead.</doc-deprecated>
      <member name="in_drag"
              value="256"
              c:identifier="GDL_DOCK_IN_DRAG"
              glib:nick="in-drag">
        <doc xml:space="preserve">item is in a drag operation</doc>
      </member>
      <member name="in_predrag"
              value="512"
              c:identifier="GDL_DOCK_IN_PREDRAG"
              glib:nick="in-predrag">
        <doc xml:space="preserve">item is in a predrag operation</doc>
      </member>
      <member name="iconified"
              value="1024"
              c:identifier="GDL_DOCK_ICONIFIED"
              glib:nick="iconified">
        <doc xml:space="preserve">item is iconified</doc>
      </member>
      <member name="user_action"
              value="2048"
              c:identifier="GDL_DOCK_USER_ACTION"
              glib:nick="user-action">
        <doc xml:space="preserve">indicates the user has started an action on the dock item</doc>
      </member>
    </bitfield>
    <class name="DockItemGrip"
           c:symbol-prefix="dock_item_grip"
           c:type="GdlDockItemGrip"
           parent="Gtk.Container"
           glib:type-name="GdlDockItemGrip"
           glib:get-type="gdl_dock_item_grip_get_type"
           glib:type-struct="DockItemGripClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_item_grip_new">
        <doc xml:space="preserve">Creates a new GDL dock item grip object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created dock item grip widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item that will "own" this grip widget.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="has_event" c:identifier="gdl_dock_item_grip_has_event">
        <doc xml:space="preserve">Return %TRUE if the grip window has reveived the event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the grip has received the event</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="grip" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockItemGrip widget</doc>
            <type name="DockItemGrip" c:type="GdlDockItemGrip*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide_handle" c:identifier="gdl_dock_item_grip_hide_handle">
        <doc xml:space="preserve">This function hides the dock item's grip widget handle hatching.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grip" transfer-ownership="none">
            <doc xml:space="preserve">The dock item grip to hide the handle of.</doc>
            <type name="DockItemGrip" c:type="GdlDockItemGrip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cursor"
              c:identifier="gdl_dock_item_grip_set_cursor"
              version="3.6">
        <doc xml:space="preserve">Change the cursor when a drag operation is started.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grip" transfer-ownership="none">
            <doc xml:space="preserve">The dock item grip</doc>
            <type name="DockItemGrip" c:type="GdlDockItemGrip*"/>
          </instance-parameter>
          <parameter name="in_drag" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if a drag operation is started</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="gdl_dock_item_grip_set_label">
        <doc xml:space="preserve">Replaces the current label widget with another widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grip" transfer-ownership="none">
            <doc xml:space="preserve">The grip that will get it's label widget set.</doc>
            <type name="DockItemGrip" c:type="GdlDockItemGrip*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The widget that will become the label.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_handle" c:identifier="gdl_dock_item_grip_show_handle">
        <doc xml:space="preserve">This function shows the dock item's grip widget handle hatching.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grip" transfer-ownership="none">
            <doc xml:space="preserve">The dock item grip to show the handle of.</doc>
            <type name="DockItemGrip" c:type="GdlDockItemGrip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="item"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DockItem"/>
      </property>
      <field name="parent">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="DockItemGripPrivate" c:type="GdlDockItemGripPrivate*"/>
      </field>
    </class>
    <record name="DockItemGripClass"
            c:type="GdlDockItemGripClass"
            glib:is-gtype-struct-for="DockItemGrip">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="DockItemGripPrivate"
            c:type="GdlDockItemGripPrivate"
            disguised="1">
    </record>
    <record name="DockItemPrivate" c:type="GdlDockItemPrivate" disguised="1">
    </record>
    <class name="DockLayout"
           c:symbol-prefix="dock_layout"
           c:type="GdlDockLayout"
           parent="GObject.Object"
           glib:type-name="GdlDockLayout"
           glib:get-type="gdl_dock_layout_get_type"
           glib:type-struct="DockLayoutClass">
      <doc xml:space="preserve">The GdlDockLayout struct contains only private fields
and should not be directly accessed.</doc>
      <constructor name="new" c:identifier="gdl_dock_layout_new">
        <doc xml:space="preserve">Creates a new #GdlDockLayout. Instead of setting @master
directly with a master object, it is possible to use a #GdlDockObject, in
this case the layout will be attached to the same master than the dock
object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">New #GdlDockLayout item.</doc>
          <type name="DockLayout" c:type="GdlDockLayout*"/>
        </return-value>
        <parameters>
          <parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">A master or a dock object to which the layout will be attached.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attach" c:identifier="gdl_dock_layout_attach">
        <doc xml:space="preserve">Attach the @layout to the @master and delete the reference to
the master that the layout attached previously.

Deprecated 3.6: Use gdl_dock_layout_set_master() instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout object</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">The master object to which the layout will be attached</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_layout"
              c:identifier="gdl_dock_layout_delete_layout">
        <doc xml:space="preserve">Deletes the layout with the given name from the memory.
This will set #GdlDockLayout:dirty to %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The dock item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the layout to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layouts" c:identifier="gdl_dock_layout_get_layouts">
        <doc xml:space="preserve">Get the list of layout names including or not the default layout.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GList list
 holding the layout names. You must first free each element in the list
 with g_free(), then free the list itself with g_list_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="include_default" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to include the default layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_master"
              c:identifier="gdl_dock_layout_get_master"
              version="3.6">
        <doc xml:space="preserve">Retrieves the master of the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdlDockMaster object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockLayout</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_dirty" c:identifier="gdl_dock_layout_is_dirty">
        <doc xml:space="preserve">Checks whether the XML tree in memory is different from the file where the layout was saved.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE is the layout in the memory is different from the file, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="gdl_dock_layout_load_from_file">
        <doc xml:space="preserve">Loads the layout from file with the given @filename.
This will set #GdlDockLayout:dirty to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @layout successfully loaded else %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The name of the file to load.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_layout" c:identifier="gdl_dock_layout_load_layout">
        <doc xml:space="preserve">Loads the layout with the given name from the memory.
This will set #GdlDockLayout:dirty to %TRUE.

See also gdl_dock_layout_load_from_file()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if layout successfully loaded else %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The dock item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The name of the layout to load or %NULL for a default layout name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_layout" c:identifier="gdl_dock_layout_save_layout">
        <doc xml:space="preserve">Saves the @layout with the given name to the memory.
This will set #GdlDockLayout:dirty to %TRUE.

See also gdl_dock_layout_save_to_file().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The dock item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The name of the layout to save or %NULL for a default layout name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file" c:identifier="gdl_dock_layout_save_to_file">
        <doc xml:space="preserve">This function saves the current layout in XML format to
the file with the given @filename.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @layout successfuly save to the file, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout item.</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Name of the file we want to save in layout</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_master" c:identifier="gdl_dock_layout_set_master">
        <doc xml:space="preserve">Attach the @layout to the @master and delete the reference to
the master that the layout attached previously. Instead of setting @master
directly with the master object, it is possible to use a #GdlDockObject, in
this case the layout will be attached to the same master than the dock
object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The layout object</doc>
            <type name="DockLayout" c:type="GdlDockLayout*"/>
          </instance-parameter>
          <parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">The master object to which the layout will be attached</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dirty" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="master" writable="1" transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <field name="g_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="deprecated_dirty" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="deprecated_master" readable="0" private="1">
        <type name="DockMaster" c:type="GdlDockMaster*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DockLayoutPrivate" c:type="GdlDockLayoutPrivate*"/>
      </field>
    </class>
    <record name="DockLayoutClass"
            c:type="GdlDockLayoutClass"
            glib:is-gtype-struct-for="DockLayout">
      <field name="g_object_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DockLayoutPrivate"
            c:type="GdlDockLayoutPrivate"
            disguised="1">
    </record>
    <class name="DockMaster"
           c:symbol-prefix="dock_master"
           c:type="GdlDockMaster"
           parent="GObject.Object"
           glib:type-name="GdlDockMaster"
           glib:get-type="gdl_dock_master_get_type"
           glib:type-struct="DockMasterClass">
      <virtual-method name="layout_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="gdl_dock_master_add">
        <doc xml:space="preserve">Add a new dock widget to the master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="gdl_dock_master_foreach">
        <doc xml:space="preserve">Call @function on each dock widget of the master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">the function to call with each element's data</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to the function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_toplevel"
              c:identifier="gdl_dock_master_foreach_toplevel">
        <doc xml:space="preserve">Call @function on each top level dock widget of the master, including or not
the controller.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="include_controller" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to include the controller</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">the function to call with each element's data</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to the function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_controller"
              c:identifier="gdl_dock_master_get_controller">
        <doc xml:space="preserve">Retrieves the #GdlDockObject acting as the controller.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDockObject.</doc>
          <type name="DockObject" c:type="GdlDockObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dock_name"
              c:identifier="gdl_dock_master_get_dock_name"
              version="3.6">
        <doc xml:space="preserve">Return an unique translated dock name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new translated name. The string has to be freed
with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="gdl_dock_master_get_object">
        <doc xml:space="preserve">Looks for a #GdlDockObject named @nick_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDockObject named @nick_name or %NULL if it does not exist.</doc>
          <type name="DockObject" c:type="GdlDockObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="nick_name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the dock widget.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gdl_dock_master_remove">
        <doc xml:space="preserve">Remove one dock widget from the master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_controller"
              c:identifier="gdl_dock_master_set_controller">
        <doc xml:space="preserve">Set a new controller. The controller must be a top level #GdlDockObject.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockMaster</doc>
            <type name="DockMaster" c:type="GdlDockMaster*"/>
          </instance-parameter>
          <parameter name="new_controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="locked" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="switcher-style" writable="1" transfer-ownership="none">
        <type name="SwitcherStyle"/>
      </property>
      <property name="tab-pos" writable="1" transfer-ownership="none">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="tab-reorderable" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DockMasterPrivate" c:type="GdlDockMasterPrivate*"/>
      </field>
      <glib:signal name="layout-changed" when="last">
        <doc xml:space="preserve">Signals that the layout has changed, one or more widgets have been moved,
added or removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DockMasterClass"
            c:type="GdlDockMasterClass"
            glib:is-gtype-struct-for="DockMaster">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="layout_changed">
        <callback name="layout_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="master" transfer-ownership="none">
              <type name="DockMaster" c:type="GdlDockMaster*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DockMasterPrivate"
            c:type="GdlDockMasterPrivate"
            disguised="1">
    </record>
    <class name="DockNotebook"
           c:symbol-prefix="dock_notebook"
           c:type="GdlDockNotebook"
           parent="DockItem"
           glib:type-name="GdlDockNotebook"
           glib:get-type="gdl_dock_notebook_get_type"
           glib:type-struct="DockNotebookClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_notebook_new">
        <doc xml:space="preserve">Creates a new manual #GdlDockNotebook widget. This function is seldom useful as
such widget is normally created and destroyed automatically when needed by
the master.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created #GdlDockNotebook.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="page" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="item">
        <type name="DockItem" c:type="GdlDockItem"/>
      </field>
      <field name="priv">
        <type name="DockNotebookPrivate" c:type="GdlDockNotebookPrivate*"/>
      </field>
    </class>
    <record name="DockNotebookClass"
            c:type="GdlDockNotebookClass"
            glib:is-gtype-struct-for="DockNotebook">
      <field name="parent_class">
        <type name="DockItemClass" c:type="GdlDockItemClass"/>
      </field>
      <field name="priv">
        <type name="DockNotebookClassPrivate"
              c:type="GdlDockNotebookClassPrivate*"/>
      </field>
    </record>
    <record name="DockNotebookClassPrivate"
            c:type="GdlDockNotebookClassPrivate"
            disguised="1">
    </record>
    <record name="DockNotebookPrivate"
            c:type="GdlDockNotebookPrivate"
            disguised="1">
    </record>
    <class name="DockObject"
           c:symbol-prefix="dock_object"
           c:type="GdlDockObject"
           parent="Gtk.Container"
           glib:type-name="GdlDockObject"
           glib:get-type="gdl_dock_object_get_type"
           glib:type-struct="DockObjectClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <function name="nick_from_type"
                c:identifier="gdl_dock_object_nick_from_type">
        <doc xml:space="preserve">Finds the nickname for a given type</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">If the object has a nickname, then it is returned.
  Otherwise, the type name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type for which to find the nickname</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_type_for_nick"
                c:identifier="gdl_dock_object_set_type_for_nick">
        <doc xml:space="preserve">Assigns an object type to a given nickname.  If the nickname already exists,
then it reassigns it to a new object type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">If the nick was previously assigned, the old type is returned.
Otherwise, %G_TYPE_NONE.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve">The nickname for the object type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The object type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_from_nick"
                c:identifier="gdl_dock_object_type_from_nick">
        <doc xml:space="preserve">Finds the object type assigned to a given nickname.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">If the nickname has previously been assigned, then the corresponding
object type is returned.  Otherwise, %G_TYPE_NONE.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve">The nickname for the object type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="child_placement" invoker="child_placement">
        <doc xml:space="preserve">This function returns information about placement of a child dock
object inside another dock object.  The function returns %TRUE if
@child is effectively a child of @object.  @placement should
normally be initially setup to %GDL_DOCK_NONE.  If it's set to some
other value, this function will not touch the stored value if the
specified placement is "compatible" with the actual placement of
the child.

@placement can be %NULL, in which case the function simply tells if
@child is attached to @object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @child is a child of @object.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">the dock object we are asking for child placement</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">the child of the @object we want the placement for</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="placement"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">where to return the placement information</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach" invoker="detach">
        <doc xml:space="preserve">Dissociate a dock object from its parent, including or not its children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to detach children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dock" invoker="dock">
        <doc xml:space="preserve">Dock a dock widget in @object at the defined position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="requestor" transfer-ownership="none">
            <doc xml:space="preserve">The widget to dock</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">The position for the child</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="other_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dock_request" invoker="dock_request">
        <doc xml:space="preserve">Dock a dock widget in @object at the defined position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @object has been docked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockRequest with information about the docking position</doc>
            <type name="DockRequest" c:type="GdlDockRequest*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="present" invoker="present">
        <doc xml:space="preserve">Presents the GDL object to the user. By example, this will select the
corresponding page if the object is in a notebook. If @child is missing,
only the @object will be show.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The child widget to present or %NULL</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reduce" invoker="reduce">
        <doc xml:space="preserve">Remove a compound object if it is not longer useful to hold the child. The
object has to be removed and the child reattached to the parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reorder" invoker="reorder">
        <doc xml:space="preserve">Move the @child widget at another place.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @child has been moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">The child widget to reorder</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="new_position" transfer-ownership="none">
            <doc xml:space="preserve">New position for the child</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="other_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="bind" c:identifier="gdl_dock_object_bind">
        <doc xml:space="preserve">Add a link between a #GdlDockObject and a master. It is normally not used
directly because it is automatically called when a new object is docked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="master" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockMaster</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_placement"
              c:identifier="gdl_dock_object_child_placement">
        <doc xml:space="preserve">This function returns information about placement of a child dock
object inside another dock object.  The function returns %TRUE if
@child is effectively a child of @object.  @placement should
normally be initially setup to %GDL_DOCK_NONE.  If it's set to some
other value, this function will not touch the stored value if the
specified placement is "compatible" with the actual placement of
the child.

@placement can be %NULL, in which case the function simply tells if
@child is attached to @object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @child is a child of @object.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">the dock object we are asking for child placement</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">the child of the @object we want the placement for</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="placement"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">where to return the placement information</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="gdl_dock_object_detach">
        <doc xml:space="preserve">Dissociate a dock object from its parent, including or not its children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to detach children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dock" c:identifier="gdl_dock_object_dock">
        <doc xml:space="preserve">Dock a dock widget in @object at the defined position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="requestor" transfer-ownership="none">
            <doc xml:space="preserve">The widget to dock</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">The position for the child</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="other_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dock_request" c:identifier="gdl_dock_object_dock_request">
        <doc xml:space="preserve">Dock a dock widget in @object at the defined position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @object has been docked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y coordinate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockRequest with information about the docking position</doc>
            <type name="DockRequest" c:type="GdlDockRequest*"/>
          </parameter>
        </parameters>
      </method>
      <method name="freeze" c:identifier="gdl_dock_object_freeze">
        <doc xml:space="preserve">Temporarily freezes a dock object, any call to reduce on the object has no
immediate effect. If gdl_dock_object_freeze() has been called more than once,
gdl_dock_object_thaw() must be called an equal number of times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller"
              c:identifier="gdl_dock_object_get_controller"
              version="3.6">
        <doc xml:space="preserve">Retrieves the controller of the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdlDockObject object</doc>
          <type name="DockObject" c:type="GdlDockObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_long_name"
              c:identifier="gdl_dock_object_get_long_name"
              version="3.6">
        <doc xml:space="preserve">Retrieves the long name of the object. This name is an human readable string
which can be displayed in the user interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_master"
              c:identifier="gdl_dock_object_get_master"
              version="3.6">
        <doc xml:space="preserve">Retrieves the master of the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdlDockMaster object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gdl_dock_object_get_name"
              version="3.6">
        <doc xml:space="preserve">Retrieves the name of the object. This name is used to identify the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent_object"
              c:identifier="gdl_dock_object_get_parent_object">
        <doc xml:space="preserve">Returns a parent #GdlDockObject if it exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdlDockObject or %NULL if such object does not exist.</doc>
          <type name="DockObject" c:type="GdlDockObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf"
              c:identifier="gdl_dock_object_get_pixbuf"
              version="3.6">
        <doc xml:space="preserve">Retrieves a pixbuf used as the dock object icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">icon for dock object</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stock_id"
              c:identifier="gdl_dock_object_get_stock_id"
              version="3.6">
        <doc xml:space="preserve">Retrieves the a stock id used as the object icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A stock id corresponding to the object icon.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toplevel" c:identifier="gdl_dock_object_get_toplevel">
        <doc xml:space="preserve">Get the top level #GdlDock widget of @object or %NULL if cannot be found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GdlDock or %NULL.</doc>
          <type name="Dock" c:type="GdlDock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_automatic"
              c:identifier="gdl_dock_object_is_automatic"
              version="3.6">
        <doc xml:space="preserve">Determine if an object is managed by the dock master, such object is
destroyed automatically when it is not needed anymore.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the object is managed automatically by the dock master.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_bound" c:identifier="gdl_dock_object_is_bound">
        <doc xml:space="preserve">Check if the object is bound to a master.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @object has a master</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_closed"
              c:identifier="gdl_dock_object_is_closed"
              version="3.6">
        <doc xml:space="preserve">Checks whether a given #GdlDockObject is closed. It can be only hidden and
still in the widget hierarchy or detached.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the dock object is closed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">The dock object to be checked</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_compound" c:identifier="gdl_dock_object_is_compound">
        <doc xml:space="preserve">Check if an object is a compound object, accepting children widget or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @object is a compound object.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_frozen"
              c:identifier="gdl_dock_object_is_frozen"
              version="3.6">
        <doc xml:space="preserve">Determine if an object is frozen and is not removed immediately from the
widget hierarchy when it is reduced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the object is frozen.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="layout_changed_notify"
              c:identifier="gdl_dock_object_layout_changed_notify"
              version="3.6">
        <doc xml:space="preserve">Emits the #GdlDockMaster::layout-changed signal on the master of the object
if existing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present" c:identifier="gdl_dock_object_present">
        <doc xml:space="preserve">Presents the GDL object to the user. By example, this will select the
corresponding page if the object is in a notebook. If @child is missing,
only the @object will be show.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The child widget to present or %NULL</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reduce" c:identifier="gdl_dock_object_reduce">
        <doc xml:space="preserve">Remove a compound object if it is not longer useful to hold the child. The
object has to be removed and the child reattached to the parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reorder" c:identifier="gdl_dock_object_reorder">
        <doc xml:space="preserve">Move the @child widget at another place.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @child has been moved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">The child widget to reorder</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="new_position" transfer-ownership="none">
            <doc xml:space="preserve">New position for the child</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="other_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_long_name"
              c:identifier="gdl_dock_object_set_long_name"
              version="3.6">
        <doc xml:space="preserve">Set the long name of the object. This name is an human readable string
which can be displayed in the user interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a name for the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manual"
              c:identifier="gdl_dock_object_set_manual"
              version="3.6">
        <doc xml:space="preserve">A #GdlDockObject is managed by default by the dock master, use this function
to make it a manual object if you want to manage the destruction of the
object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gdl_dock_object_set_name"
              version="3.6">
        <doc xml:space="preserve">Set the name of the object used to identify it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a name for the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixbuf"
              c:identifier="gdl_dock_object_set_pixbuf"
              version="3.6">
        <doc xml:space="preserve">Set a icon for a dock object using a #GdkPixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a icon or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stock_id"
              c:identifier="gdl_dock_object_set_stock_id"
              version="3.6">
        <doc xml:space="preserve">Set an icon for the dock object using a stock id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:space="preserve">a stock id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw" c:identifier="gdl_dock_object_thaw">
        <doc xml:space="preserve">Thaws a dock object frozen with gdl_dock_object_freeze().
Any pending reduce calls are made, maybe leading to the destruction of
the object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="gdl_dock_object_unbind">
        <doc xml:space="preserve">This removes the link between an dock object and its master.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="long-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A long descriptive name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="master"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The master which manages all the objects in a dock ring</doc>
        <type name="DockMaster"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The object name.  If the object is manual the name can be used
to recall the object from any other object in the ring</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pixbuf-icon"
                version="3.3.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A GdkPixbuf to use for the icon of the dock object.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="stock-id"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A stock id to use for the icon of the dock object.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="container">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="deprecated_flags">
        <type name="DockObjectFlags" c:type="GdlDockObjectFlags"/>
      </field>
      <field name="deprecated_master">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DockObjectPrivate" c:type="GdlDockObjectPrivate*"/>
      </field>
      <glib:signal name="detach" when="last">
        <doc xml:space="preserve">Signals that the #GdlDockObject is detached.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if children have to be detached too.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="dock" when="first">
        <doc xml:space="preserve">Signals that the #GdlDockObject has been docked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DockObject"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="DockPlacement"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="GObject.Value"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DockObjectClass"
            c:type="GdlDockObjectClass"
            glib:is-gtype-struct-for="DockObject">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="priv">
        <type name="DockObjectClassPrivate"
              c:type="GdlDockObjectClassPrivate*"/>
      </field>
      <field name="detach">
        <callback name="detach">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="recursive" transfer-ownership="none">
              <doc xml:space="preserve">%TRUE to detach children</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reduce">
        <callback name="reduce">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dock_request">
        <callback name="dock_request">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @object has been docked.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">X coordinate</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">Y coordinate</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockRequest with information about the docking position</doc>
              <type name="DockRequest" c:type="GdlDockRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dock">
        <callback name="dock">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="requestor" transfer-ownership="none">
              <doc xml:space="preserve">The widget to dock</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:space="preserve">The position for the child</doc>
              <type name="DockPlacement" c:type="GdlDockPlacement"/>
            </parameter>
            <parameter name="other_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reorder">
        <callback name="reorder">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @child has been moved</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve">The child widget to reorder</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="new_position" transfer-ownership="none">
              <doc xml:space="preserve">New position for the child</doc>
              <type name="DockPlacement" c:type="GdlDockPlacement"/>
            </parameter>
            <parameter name="other_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">Optional data giving additional information
depending on the dock object.</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="present">
        <callback name="present">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdlDockObject</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="child"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">The child widget to present or %NULL</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_placement">
        <callback name="child_placement">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @child is a child of @object.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">the dock object we are asking for child placement</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve">the child of the @object we want the placement for</doc>
              <type name="DockObject" c:type="GdlDockObject*"/>
            </parameter>
            <parameter name="placement"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">where to return the placement information</doc>
              <type name="DockPlacement" c:type="GdlDockPlacement*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DockObjectClassPrivate"
            c:type="GdlDockObjectClassPrivate"
            disguised="1">
    </record>
    <bitfield name="DockObjectFlags"
              glib:type-name="GdlDockObjectFlags"
              glib:get-type="gdl_dock_object_flags_get_type"
              c:type="GdlDockObjectFlags">
      <doc xml:space="preserve">Described the state of a #GdlDockObject.

Since 3.6: These flags are available using access function, like
gdl_dock_object_is_automatic() or gdl_dock_object_is_closed().</doc>
      <member name="automatic"
              value="1"
              c:identifier="GDL_DOCK_AUTOMATIC"
              glib:nick="automatic">
        <doc xml:space="preserve">Object is created and destroyed by the master, not the user</doc>
      </member>
      <member name="attached"
              value="2"
              c:identifier="GDL_DOCK_ATTACHED"
              glib:nick="attached">
        <doc xml:space="preserve">Object has a parent</doc>
      </member>
      <member name="in_reflow"
              value="4"
              c:identifier="GDL_DOCK_IN_REFLOW"
              glib:nick="in-reflow">
        <doc xml:space="preserve">Object is currently part of a rearrangement</doc>
      </member>
      <member name="in_detach"
              value="8"
              c:identifier="GDL_DOCK_IN_DETACH"
              glib:nick="in-detach">
        <doc xml:space="preserve">Object will be removed</doc>
      </member>
    </bitfield>
    <record name="DockObjectPrivate"
            c:type="GdlDockObjectPrivate"
            disguised="1">
    </record>
    <class name="DockPaned"
           c:symbol-prefix="dock_paned"
           c:type="GdlDockPaned"
           parent="DockItem"
           glib:type-name="GdlDockPaned"
           glib:get-type="gdl_dock_paned_get_type"
           glib:type-struct="DockPanedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_dock_paned_new">
        <doc xml:space="preserve">Creates a new manual #GdlDockPaned widget. This function is seldom useful as
such widget is normally created and destroyed automatically when needed by
the master.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GdlDockPaned.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve">the pane's orientation.</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="dock_item">
        <type name="DockItem" c:type="GdlDockItem"/>
      </field>
      <field name="priv">
        <type name="DockPanedPrivate" c:type="GdlDockPanedPrivate*"/>
      </field>
    </class>
    <record name="DockPanedClass"
            c:type="GdlDockPanedClass"
            glib:is-gtype-struct-for="DockPaned">
      <field name="parent_class">
        <type name="DockItemClass" c:type="GdlDockItemClass"/>
      </field>
    </record>
    <record name="DockPanedPrivate" c:type="GdlDockPanedPrivate" disguised="1">
    </record>
    <class name="DockParam"
           c:symbol-prefix="dock_param"
           glib:type-name="GdlDockParam"
           glib:get-type="gdl_dock_param_get_type"
           glib:fundamental="1">
    </class>
    <bitfield name="DockParamFlags"
              glib:type-name="GdlDockParamFlags"
              glib:get-type="gdl_dock_param_flags_get_type"
              c:type="GdlDockParamFlags">
      <doc xml:space="preserve">Used to flag additional characteristics to GObject properties used in dock
object.</doc>
      <member name="export"
              value="256"
              c:identifier="GDL_DOCK_PARAM_EXPORT"
              glib:nick="export">
        <doc xml:space="preserve">The parameter is to be exported for later layout rebuilding</doc>
      </member>
      <member name="after"
              value="512"
              c:identifier="GDL_DOCK_PARAM_AFTER"
              glib:nick="after">
        <doc xml:space="preserve">The parameter must be set after adding the children objects</doc>
      </member>
    </bitfield>
    <class name="DockPlaceholder"
           c:symbol-prefix="dock_placeholder"
           c:type="GdlDockPlaceholder"
           parent="DockObject"
           glib:type-name="GdlDockPlaceholder"
           glib:get-type="gdl_dock_placeholder_get_type"
           glib:type-struct="DockPlaceholderClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gdl_dock_placeholder_new"
                   deprecated="1"
                   deprecated-version="3.6">
        <doc xml:space="preserve">Creates a new dock placeholder at @object place. This is a kind of marker
allowing you to dock new items later at this place. It is not completely
working though.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created placeholder.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Unique name for identifying the dock object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">Corresponding #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">The position to dock a new item in @object</doc>
            <type name="DockPlacement" c:type="GdlDockPlacement"/>
          </parameter>
          <parameter name="sticky" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the placeholder move with the @object</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attach"
              c:identifier="gdl_dock_placeholder_attach"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Move the placeholder to the position of @object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ph" transfer-ownership="none">
            <doc xml:space="preserve">The #GdlDockPlaceholder object</doc>
            <type name="DockPlaceholder" c:type="GdlDockPlaceholder*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A new #GdlDockObject</doc>
            <type name="DockObject" c:type="GdlDockObject*"/>
          </parameter>
        </parameters>
      </method>
      <property name="floating"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="floatx"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="floaty"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="height"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="host" writable="1" transfer-ownership="none">
        <type name="DockObject"/>
      </property>
      <property name="next-placement" writable="1" transfer-ownership="none">
        <type name="DockPlacement"/>
      </property>
      <property name="sticky"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="width"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="object">
        <type name="DockObject" c:type="GdlDockObject"/>
      </field>
      <field name="priv">
        <type name="DockPlaceholderPrivate"
              c:type="GdlDockPlaceholderPrivate*"/>
      </field>
    </class>
    <record name="DockPlaceholderClass"
            c:type="GdlDockPlaceholderClass"
            glib:is-gtype-struct-for="DockPlaceholder">
      <field name="parent_class">
        <type name="DockObjectClass" c:type="GdlDockObjectClass"/>
      </field>
    </record>
    <record name="DockPlaceholderPrivate"
            c:type="GdlDockPlaceholderPrivate"
            disguised="1">
    </record>
    <enumeration name="DockPlacement"
                 glib:type-name="GdlDockPlacement"
                 glib:get-type="gdl_dock_placement_get_type"
                 c:type="GdlDockPlacement">
      <doc xml:space="preserve">Described the docking position.</doc>
      <member name="none"
              value="0"
              c:identifier="GDL_DOCK_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No position defined</doc>
      </member>
      <member name="top" value="1" c:identifier="GDL_DOCK_TOP" glib:nick="top">
        <doc xml:space="preserve">Dock object on the top</doc>
      </member>
      <member name="bottom"
              value="2"
              c:identifier="GDL_DOCK_BOTTOM"
              glib:nick="bottom">
        <doc xml:space="preserve">Dock object on the bottom</doc>
      </member>
      <member name="right"
              value="3"
              c:identifier="GDL_DOCK_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve">Dock object on the right</doc>
      </member>
      <member name="left"
              value="4"
              c:identifier="GDL_DOCK_LEFT"
              glib:nick="left">
        <doc xml:space="preserve">Dock object on the left</doc>
      </member>
      <member name="center"
              value="5"
              c:identifier="GDL_DOCK_CENTER"
              glib:nick="center">
        <doc xml:space="preserve">Dock object on top of the other</doc>
      </member>
      <member name="floating"
              value="6"
              c:identifier="GDL_DOCK_FLOATING"
              glib:nick="floating">
        <doc xml:space="preserve">Dock object in its own window</doc>
      </member>
    </enumeration>
    <record name="DockPrivate" c:type="GdlDockPrivate" disguised="1">
    </record>
    <record name="DockRequest" c:type="GdlDockRequest">
      <doc xml:space="preserve">Full docking information.</doc>
      <field name="applicant" writable="1">
        <doc xml:space="preserve">A #GdlDockObject to dock</doc>
        <type name="DockObject" c:type="GdlDockObject*"/>
      </field>
      <field name="target" writable="1">
        <doc xml:space="preserve">The #GdlDockObject target</doc>
        <type name="DockObject" c:type="GdlDockObject*"/>
      </field>
      <field name="position" writable="1">
        <doc xml:space="preserve">how to dock @applicant in @target</doc>
        <type name="DockPlacement" c:type="GdlDockPlacement"/>
      </field>
      <field name="rect" writable="1">
        <doc xml:space="preserve">Precise position</doc>
        <type name="cairo.RectangleInt" c:type="cairo_rectangle_int_t"/>
      </field>
      <field name="extra" writable="1">
        <doc xml:space="preserve">Additional information</doc>
        <type name="GObject.Value" c:type="GValue"/>
      </field>
    </record>
    <class name="DockTablabel"
           c:symbol-prefix="dock_tablabel"
           c:type="GdlDockTablabel"
           parent="Gtk.Bin"
           glib:type-name="GdlDockTablabel"
           glib:get-type="gdl_dock_tablabel_get_type"
           glib:type-struct="DockTablabelClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gdl_dock_tablabel_new"
                   deprecated="1"
                   deprecated-version="3.6">
        <doc xml:space="preserve">Creates a new GDL tab label widget.</doc>
        <doc-deprecated xml:space="preserve">Use a #GtkLabel instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GdlDockTablabel.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The dock item that associated with this label widget.</doc>
            <type name="DockItem" c:type="GdlDockItem*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="button_pressed_handle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tablabel" transfer-ownership="none">
            <type name="DockTablabel" c:type="GdlDockTablabel*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate"
              c:identifier="gdl_dock_tablabel_activate"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Set the widget in "activated" state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tablabel" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockTablabel widget</doc>
            <type name="DockTablabel" c:type="GdlDockTablabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate"
              c:identifier="gdl_dock_tablabel_deactivate"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve">Set the widget in "deactivated" state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tablabel" transfer-ownership="none">
            <doc xml:space="preserve">A #GdlDockTablabel widget</doc>
            <type name="DockTablabel" c:type="GdlDockTablabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="item" writable="1" transfer-ownership="none">
        <type name="DockItem"/>
      </property>
      <field name="parent">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <field name="drag_handle_size">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="item">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="event_window">
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </field>
      <field name="active">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="drag_start_event">
        <type name="Gdk.EventButton" c:type="GdkEventButton"/>
      </field>
      <field name="pre_drag">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <glib:signal name="button-pressed-handle" when="last">
        <doc xml:space="preserve">This signal is emitted when the user clicks on the label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkEvent</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DockTablabelClass"
            c:type="GdlDockTablabelClass"
            glib:is-gtype-struct-for="DockTablabel">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="button_pressed_handle">
        <callback name="button_pressed_handle">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tablabel" transfer-ownership="none">
              <type name="DockTablabel" c:type="GdlDockTablabel*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PreviewWindow"
           c:symbol-prefix="preview_window"
           c:type="GdlPreviewWindow"
           parent="Gtk.Window"
           glib:type-name="GdlPreviewWindow"
           glib:get-type="gdl_preview_window_get_type"
           glib:type-struct="PreviewWindowClass">
      <doc xml:space="preserve">The GdlDockLayout struct contains only private fields
and should not be directly accessed.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_preview_window_new">
        <doc xml:space="preserve">Creates a new #GdlPreviewWindow</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">New #GdlPreviewWindow item.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="update" c:identifier="gdl_preview_window_update">
        <doc xml:space="preserve">Update the size and position of the preview window. This function is
called on drag_motion event to update the representation of the docking site
in real time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #GdlPreviewWindow</doc>
            <type name="PreviewWindow" c:type="GdlPreviewWindow*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">the new position and size of the window</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="PreviewWindowClass"
            c:type="GdlPreviewWindowClass"
            glib:is-gtype-struct-for="PreviewWindow">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <class name="Switcher"
           c:symbol-prefix="switcher"
           c:type="GdlSwitcher"
           parent="Gtk.Notebook"
           glib:type-name="GdlSwitcher"
           glib:get-type="gdl_switcher_get_type"
           glib:type-struct="SwitcherClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gdl_switcher_new">
        <doc xml:space="preserve">Creates a new notebook widget with no pages.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly created #GdlSwitcher</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="insert_page" c:identifier="gdl_switcher_insert_page">
        <doc xml:space="preserve">Adds a page to a #GdlSwitcher.  A button is created in the switcher, with its
icon taken preferentially from the @stock_id parameter.  If this parameter is
%NULL, then the @pixbuf_icon parameter is used.  Failing that, the
%GTK_STOCK_NEW stock icon is used.  The text label for the button is specified
using the @label parameter.  If it is %NULL then a default incrementally
numbered label is used instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The index (starting from 0) of the appended page in the notebook, or -1 if function fails</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="switcher" transfer-ownership="none">
            <doc xml:space="preserve">The switcher to which a page will be added</doc>
            <type name="Switcher" c:type="GdlSwitcher*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve">The page to add to the switcher</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="tab_widget" transfer-ownership="none">
            <doc xml:space="preserve">The  to add to the switcher</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label text for the button</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tooltips" transfer-ownership="none">
            <doc xml:space="preserve">The tooltip for the button</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <doc xml:space="preserve">The stock ID for the button icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pixbuf_icon" transfer-ownership="none">
            <doc xml:space="preserve">The pixbuf to use for the button icon</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">The position at which to create the page</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="switcher-style" writable="1" transfer-ownership="none">
        <type name="SwitcherStyle"/>
      </property>
      <property name="tab-pos" writable="1" transfer-ownership="none">
        <type name="Gtk.PositionType"/>
      </property>
      <property name="tab-reorderable" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv">
        <type name="SwitcherPrivate" c:type="GdlSwitcherPrivate*"/>
      </field>
    </class>
    <record name="SwitcherClass"
            c:type="GdlSwitcherClass"
            glib:is-gtype-struct-for="Switcher">
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="priv">
        <type name="SwitcherClassPrivate" c:type="GdlSwitcherClassPrivate*"/>
      </field>
    </record>
    <record name="SwitcherClassPrivate"
            c:type="GdlSwitcherClassPrivate"
            disguised="1">
    </record>
    <record name="SwitcherPrivate" c:type="GdlSwitcherPrivate" disguised="1">
    </record>
    <enumeration name="SwitcherStyle"
                 glib:type-name="GdlSwitcherStyle"
                 glib:get-type="gdl_switcher_style_get_type"
                 c:type="GdlSwitcherStyle">
      <doc xml:space="preserve">Used to customize the appearance of the tabs in #GdlDockNotebook.</doc>
      <member name="text"
              value="0"
              c:identifier="GDL_SWITCHER_STYLE_TEXT"
              glib:nick="text">
        <doc xml:space="preserve">Tabs display only text labels.</doc>
      </member>
      <member name="icon"
              value="1"
              c:identifier="GDL_SWITCHER_STYLE_ICON"
              glib:nick="icon">
        <doc xml:space="preserve">Tabs display only icons.</doc>
      </member>
      <member name="both"
              value="2"
              c:identifier="GDL_SWITCHER_STYLE_BOTH"
              glib:nick="both">
        <doc xml:space="preserve">Tabs display text and icons.</doc>
      </member>
      <member name="toolbar"
              value="3"
              c:identifier="GDL_SWITCHER_STYLE_TOOLBAR"
              glib:nick="toolbar">
        <doc xml:space="preserve">Same as @GDL_SWITCHER_STYLE_BOTH.</doc>
      </member>
      <member name="tabs"
              value="4"
              c:identifier="GDL_SWITCHER_STYLE_TABS"
              glib:nick="tabs">
        <doc xml:space="preserve">Tabs display like notebook tabs.</doc>
      </member>
      <member name="none"
              value="5"
              c:identifier="GDL_SWITCHER_STYLE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Do not display tabs.</doc>
      </member>
    </enumeration>
    <function name="marshal_VOID__OBJECT_ENUM_BOXED"
              c:identifier="gdl_marshal_VOID__OBJECT_ENUM_BOXED">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__OBJECT_INT_INT"
              c:identifier="gdl_marshal_VOID__OBJECT_INT_INT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__UINT_UINT"
              c:identifier="gdl_marshal_VOID__UINT_UINT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
