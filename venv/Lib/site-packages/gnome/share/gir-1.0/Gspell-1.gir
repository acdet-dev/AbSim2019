<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gtk" version="3.0"/>
  <include name="GtkSource" version="3.0"/>
  <package name="gspell-1"/>
  <c:include name="gspell/gspell.h"/>
  <namespace name="Gspell"
             version="1"
             shared-library="libgspell-1-0.dll"
             c:identifier-prefixes="Gspell"
             c:symbol-prefixes="gspell">
    <alias name="CheckerDialog_autoptr" c:type="GspellCheckerDialog_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="Checker_autoptr" c:type="GspellChecker_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="InlineCheckerGtv_autoptr"
           c:type="GspellInlineCheckerGtv_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="LanguageChooserButton_autoptr"
           c:type="GspellLanguageChooserButton_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="LanguageChooserDialog_autoptr"
           c:type="GspellLanguageChooserDialog_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="LanguageChooser_autoptr"
           c:type="GspellLanguageChooser_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="NavigatorGtv_autoptr" c:type="GspellNavigatorGtv_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="Navigator_autoptr" c:type="GspellNavigator_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <class name="Checker"
           c:symbol-prefix="checker"
           c:type="GspellChecker"
           parent="GObject.Object"
           glib:type-name="GspellChecker"
           glib:get-type="gspell_checker_get_type"
           glib:type-struct="CheckerClass">
      <constructor name="new" c:identifier="gspell_checker_new">
        <doc xml:space="preserve">Creates a new #GspellChecker. If @language is %NULL, finds the best available
language based on the current locale.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GspellChecker object.</doc>
          <type name="Checker" c:type="GspellChecker*"/>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the #GspellLanguage to use, or %NULL.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_quark" c:identifier="gspell_checker_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_available_languages"
                c:identifier="gspell_checker_get_available_languages">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of available
languages for the spell checking.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="Language"/>
          </type>
        </return-value>
      </function>
      <virtual-method name="add_word_to_personal"
                      invoker="add_word_to_personal">
        <doc xml:space="preserve">Adds a word to the personal dictionary. It is typically saved in the user
home directory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_word_to_session" invoker="add_word_to_session">
        <doc xml:space="preserve">Adds a word to the session dictionary. The session dictionary is lost when
the application exits. This function is typically called when an “Ignore All”
action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_session" invoker="clear_session">
        <doc xml:space="preserve">Clears the session dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_word_to_personal"
              c:identifier="gspell_checker_add_word_to_personal">
        <doc xml:space="preserve">Adds a word to the personal dictionary. It is typically saved in the user
home directory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_word_to_session"
              c:identifier="gspell_checker_add_word_to_session">
        <doc xml:space="preserve">Adds a word to the session dictionary. The session dictionary is lost when
the application exits. This function is typically called when an “Ignore All”
action is activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_word"
              c:identifier="gspell_checker_check_word"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @word is correctly spelled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the word to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_session" c:identifier="gspell_checker_clear_session">
        <doc xml:space="preserve">Clears the session dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="gspell_checker_get_language">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GspellLanguage currently used, or %NULL
if no dictionaries are available.</doc>
          <type name="Language" c:type="const GspellLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggestions"
              c:identifier="gspell_checker_get_suggestions">
        <doc xml:space="preserve">Gets the suggestions for @word. Free the return value with
g_slist_free_full(suggestions, g_free).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the list of suggestions.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a misspelled word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_correction"
              c:identifier="gspell_checker_set_correction">
        <doc xml:space="preserve">Informs the spell checker that @word is replaced/corrected by @replacement.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">a word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="replacement" transfer-ownership="none">
            <doc xml:space="preserve">the replacement word.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language" c:identifier="gspell_checker_set_language">
        <doc xml:space="preserve">Sets the language to use for the spell checking. If @language is %NULL, finds
the best available language based on the current locale.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the operation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the #GspellLanguage to use, or %NULL.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="language"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GspellLanguage used.</doc>
        <type name="Language"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="add-word-to-personal" when="last">
        <doc xml:space="preserve">Emitted when a word is added to the personal dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the added word.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="add-word-to-session" when="last">
        <doc xml:space="preserve">Emitted when a word is added to the session dictionary. The session
dictionary is lost when the application exits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the added word.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="clear-session" when="last">
        <doc xml:space="preserve">Emitted when the session dictionary is cleared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="CheckerClass"
            c:type="GspellCheckerClass"
            glib:is-gtype-struct-for="Checker">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_word_to_personal">
        <callback name="add_word_to_personal">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellChecker.</doc>
              <type name="Checker" c:type="GspellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:space="preserve">a word.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_word_to_session">
        <callback name="add_word_to_session">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellChecker.</doc>
              <type name="Checker" c:type="GspellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:space="preserve">a word.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_session">
        <callback name="clear_session">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellChecker.</doc>
              <type name="Checker" c:type="GspellChecker*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="CheckerDialog"
           c:symbol-prefix="checker_dialog"
           c:type="GspellCheckerDialog"
           parent="Gtk.Dialog"
           glib:type-name="GspellCheckerDialog"
           glib:get-type="gspell_checker_dialog_get_type"
           glib:type-struct="CheckerDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="gspell_checker_dialog_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GspellCheckerDialog widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">transient parent of the dialog.</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">the #GspellNavigator to use.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="spell-navigator"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GspellNavigator to use.</doc>
        <type name="Navigator"/>
      </property>
    </class>
    <record name="CheckerDialogClass"
            c:type="GspellCheckerDialogClass"
            glib:is-gtype-struct-for="CheckerDialog">
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <enumeration name="CheckerError" c:type="GspellCheckerError">
      <doc xml:space="preserve">An error code used with %GSPELL_CHECKER_ERROR in a #GError returned
from a spell-checker-related function.</doc>
      <member name="dictionary"
              value="0"
              c:identifier="GSPELL_CHECKER_ERROR_DICTIONARY">
        <doc xml:space="preserve">dictionary error.</doc>
      </member>
      <member name="no_language_set"
              value="1"
              c:identifier="GSPELL_CHECKER_ERROR_NO_LANGUAGE_SET">
        <doc xml:space="preserve">no language set.</doc>
      </member>
    </enumeration>
    <class name="InlineCheckerGtv"
           c:symbol-prefix="inline_checker_gtv"
           c:type="GspellInlineCheckerGtv"
           parent="GObject.Object"
           glib:type-name="GspellInlineCheckerGtv"
           glib:get-type="gspell_inline_checker_gtv_get_type"
           glib:type-struct="InlineCheckerGtvClass">
      <constructor name="new" c:identifier="gspell_inline_checker_gtv_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GspellInlineCheckerGtv object.</doc>
          <type name="InlineCheckerGtv" c:type="GspellInlineCheckerGtv*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkSourceBuffer.</doc>
            <type name="GtkSource.Buffer" c:type="GtkSourceBuffer*"/>
          </parameter>
          <parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attach_view"
              c:identifier="gspell_inline_checker_gtv_attach_view">
        <doc xml:space="preserve">Enables the inline spell checker for @view. @view must have the same buffer as
the #GspellInlineCheckerGtv:buffer property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spell" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellInlineCheckerGtv.</doc>
            <type name="InlineCheckerGtv" c:type="GspellInlineCheckerGtv*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextView.</doc>
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_view"
              c:identifier="gspell_inline_checker_gtv_detach_view">
        <doc xml:space="preserve">Disables the inline spell checker for @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spell" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellInlineCheckerGtv.</doc>
            <type name="InlineCheckerGtv" c:type="GspellInlineCheckerGtv*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextView.</doc>
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtkSourceBuffer. If a same buffer is used for several views, the
misspelled words are visible in all views, because #GtkTextTag's are
added to the buffer.</doc>
        <type name="GtkSource.Buffer"/>
      </property>
      <property name="spell-checker"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GspellChecker to use.</doc>
        <type name="Checker"/>
      </property>
    </class>
    <record name="InlineCheckerGtvClass"
            c:type="GspellInlineCheckerGtvClass"
            glib:is-gtype-struct-for="InlineCheckerGtv">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Language"
            c:type="GspellLanguage"
            glib:type-name="GspellLanguage"
            glib:get-type="gspell_language_get_type"
            c:symbol-prefix="language">
      <method name="copy" c:identifier="gspell_language_copy">
        <doc xml:space="preserve">Used by language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @lang.</doc>
          <type name="Language" c:type="GspellLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lang" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguage.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gspell_language_free">
        <doc xml:space="preserve">Used by language bindings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lang" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguage.</doc>
            <type name="Language" c:type="GspellLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_key" c:identifier="gspell_language_to_key">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lang" transfer-ownership="none">
            <type name="Language" c:type="const GspellLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gspell_language_to_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lang" transfer-ownership="none">
            <type name="Language" c:type="const GspellLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_key" c:identifier="gspell_language_from_key">
        <return-value transfer-ownership="none">
          <type name="Language" c:type="const GspellLanguage*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <interface name="LanguageChooser"
               c:symbol-prefix="language_chooser"
               c:type="GspellLanguageChooser"
               glib:type-name="GspellLanguageChooser"
               glib:get-type="gspell_language_chooser_get_type"
               glib:type-struct="LanguageChooserInterface">
      <virtual-method name="get_language" invoker="get_language">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the selected #GspellLanguage.</doc>
          <type name="Language" c:type="const GspellLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_language" invoker="set_language">
        <doc xml:space="preserve">Sets the selected language.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguage.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_language"
              c:identifier="gspell_language_chooser_get_language">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the selected #GspellLanguage.</doc>
          <type name="Language" c:type="const GspellLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="gspell_language_chooser_set_language">
        <doc xml:space="preserve">Sets the selected language.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chooser" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
            <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguage.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="language" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The selected #GspellLanguage.</doc>
        <type name="Language"/>
      </property>
    </interface>
    <class name="LanguageChooserButton"
           c:symbol-prefix="language_chooser_button"
           c:type="GspellLanguageChooserButton"
           parent="Gtk.Button"
           glib:type-name="GspellLanguageChooserButton"
           glib:get-type="gspell_language_chooser_button_get_type"
           glib:type-struct="LanguageChooserButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="LanguageChooser"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gspell_language_chooser_button_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GspellLanguageChooserButton widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="current_language" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellLanguage.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Button" c:type="GtkButton"/>
      </field>
    </class>
    <record name="LanguageChooserButtonClass"
            c:type="GspellLanguageChooserButtonClass"
            glib:is-gtype-struct-for="LanguageChooserButton">
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LanguageChooserDialog"
           c:symbol-prefix="language_chooser_dialog"
           c:type="GspellLanguageChooserDialog"
           parent="Gtk.Dialog"
           glib:type-name="GspellLanguageChooserDialog"
           glib:get-type="gspell_language_chooser_dialog_get_type"
           glib:type-struct="LanguageChooserDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="LanguageChooser"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="gspell_language_chooser_dialog_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GspellLanguageChooserDialog widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">transient parent of the dialog.</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="current_language" transfer-ownership="none">
            <doc xml:space="preserve">the #GspellLanguage to select initially.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="LanguageChooserDialogClass"
            c:type="GspellLanguageChooserDialogClass"
            glib:is-gtype-struct-for="LanguageChooserDialog">
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <record name="LanguageChooserInterface"
            c:type="GspellLanguageChooserInterface"
            glib:is-gtype-struct-for="LanguageChooser">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_language">
        <callback name="get_language">
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve">the selected #GspellLanguage.</doc>
            <type name="Language" c:type="const GspellLanguage*"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
              <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_language">
        <callback name="set_language">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="chooser" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellLanguageChooser.</doc>
              <type name="LanguageChooser" c:type="GspellLanguageChooser*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellLanguage.</doc>
              <type name="Language" c:type="const GspellLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="Navigator"
               c:symbol-prefix="navigator"
               c:type="GspellNavigator"
               glib:type-name="GspellNavigator"
               glib:get-type="gspell_navigator_get_type"
               glib:type-struct="NavigatorInterface">
      <virtual-method name="change" invoker="change">
        <doc xml:space="preserve">Changes the current @word by @change_to in the text. @word must be the same
as returned by the last call to gspell_navigator_goto_next().

This function doesn't call gspell_checker_set_correction(). A widget using a
#GspellNavigator should call gspell_checker_set_correction() in addition to
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the word to change.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="change_to" transfer-ownership="none">
            <doc xml:space="preserve">the replacement.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="change_all" invoker="change_all">
        <doc xml:space="preserve">Changes all occurrences of @word by @change_to in the text.

This function doesn't call gspell_checker_set_correction(). A widget using a
#GspellNavigator should call gspell_checker_set_correction() in addition to
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the word to change.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="change_to" transfer-ownership="none">
            <doc xml:space="preserve">the replacement.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="goto_next" invoker="goto_next" throws="1">
        <doc xml:space="preserve">Goes to the next misspelled word. When called the first time, goes to the
first misspelled word.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a next misspelled word has been found, %FALSE if the spell
checking is finished or if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">a location to store an allocated string, or %NULL.
  Use g_free() to free the returned string.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="spell_checker"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">a location to store the
  #GspellChecker used, or %NULL. Use g_object_unref() when no longer
  needed.</doc>
            <type name="Checker" c:type="GspellChecker**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="change" c:identifier="gspell_navigator_change">
        <doc xml:space="preserve">Changes the current @word by @change_to in the text. @word must be the same
as returned by the last call to gspell_navigator_goto_next().

This function doesn't call gspell_checker_set_correction(). A widget using a
#GspellNavigator should call gspell_checker_set_correction() in addition to
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the word to change.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="change_to" transfer-ownership="none">
            <doc xml:space="preserve">the replacement.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_all" c:identifier="gspell_navigator_change_all">
        <doc xml:space="preserve">Changes all occurrences of @word by @change_to in the text.

This function doesn't call gspell_checker_set_correction(). A widget using a
#GspellNavigator should call gspell_checker_set_correction() in addition to
this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">the word to change.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="change_to" transfer-ownership="none">
            <doc xml:space="preserve">the replacement.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="goto_next"
              c:identifier="gspell_navigator_goto_next"
              throws="1">
        <doc xml:space="preserve">Goes to the next misspelled word. When called the first time, goes to the
first misspelled word.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a next misspelled word has been found, %FALSE if the spell
checking is finished or if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigator" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellNavigator.</doc>
            <type name="Navigator" c:type="GspellNavigator*"/>
          </instance-parameter>
          <parameter name="word"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">a location to store an allocated string, or %NULL.
  Use g_free() to free the returned string.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="spell_checker"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">a location to store the
  #GspellChecker used, or %NULL. Use g_object_unref() when no longer
  needed.</doc>
            <type name="Checker" c:type="GspellChecker**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <class name="NavigatorGtv"
           c:symbol-prefix="navigator_gtv"
           c:type="GspellNavigatorGtv"
           parent="GObject.Object"
           glib:type-name="GspellNavigatorGtv"
           glib:get-type="gspell_navigator_gtv_get_type"
           glib:type-struct="NavigatorGtvClass">
      <implements name="Navigator"/>
      <function name="new" c:identifier="gspell_navigator_gtv_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GspellNavigatorGtv object.</doc>
          <type name="Navigator" c:type="GspellNavigator*"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextView.</doc>
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
          <parameter name="spell_checker" transfer-ownership="none">
            <doc xml:space="preserve">a #GspellChecker.</doc>
            <type name="Checker" c:type="GspellChecker*"/>
          </parameter>
        </parameters>
      </function>
      <property name="spell-checker"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GspellChecker to use.</doc>
        <type name="Checker"/>
      </property>
      <property name="view"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtkTextView. The buffer is not sufficient, the view is needed to
scroll to the misspelled words.</doc>
        <type name="Gtk.TextView"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="NavigatorGtvClass"
            c:type="GspellNavigatorGtvClass"
            glib:is-gtype-struct-for="NavigatorGtv">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NavigatorInterface"
            c:type="GspellNavigatorInterface"
            glib:is-gtype-struct-for="Navigator">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="goto_next">
        <callback name="goto_next" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if a next misspelled word has been found, %FALSE if the spell
checking is finished or if an error occurred.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="navigator" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellNavigator.</doc>
              <type name="Navigator" c:type="GspellNavigator*"/>
            </parameter>
            <parameter name="word"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve">a location to store an allocated string, or %NULL.
  Use g_free() to free the returned string.</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="spell_checker"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve">a location to store the
  #GspellChecker used, or %NULL. Use g_object_unref() when no longer
  needed.</doc>
              <type name="Checker" c:type="GspellChecker**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change">
        <callback name="change">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="navigator" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellNavigator.</doc>
              <type name="Navigator" c:type="GspellNavigator*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:space="preserve">the word to change.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="change_to" transfer-ownership="none">
              <doc xml:space="preserve">the replacement.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_all">
        <callback name="change_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="navigator" transfer-ownership="none">
              <doc xml:space="preserve">a #GspellNavigator.</doc>
              <type name="Navigator" c:type="GspellNavigator*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:space="preserve">the word to change.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="change_to" transfer-ownership="none">
              <doc xml:space="preserve">the replacement.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="language_from_key"
              c:identifier="gspell_language_from_key"
              moved-to="Language.from_key">
      <return-value transfer-ownership="none">
        <type name="Language" c:type="const GspellLanguage*"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
