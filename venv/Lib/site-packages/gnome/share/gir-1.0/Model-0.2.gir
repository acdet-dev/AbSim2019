<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <package name="model"/>
  <c:include name="model-implementation.h"/>
  <namespace name="Model"
             version="0.2"
             shared-library="libmodel-0.dll"
             c:identifier-prefixes="Model"
             c:symbol-prefixes="model">
    <class name="AbstractSortedList"
           c:symbol-prefix="abstract_sorted_list"
           c:type="ModelAbstractSortedList"
           parent="List"
           abstract="1"
           glib:type-name="ModelAbstractSortedList"
           glib:get-type="model_abstract_sorted_list_get_type"
           glib:type-struct="AbstractSortedListClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <virtual-method name="compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="AbstractSortedList" c:type="ModelAbstractSortedList*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="AbstractSortedList" c:type="ModelAbstractSortedList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="new_key" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
          <parameter name="new_object" transfer-ownership="none">
            <type name="Object" c:type="ModelObject**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="free_key">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="AbstractSortedList" c:type="ModelAbstractSortedList*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="warning">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="AbstractSortedList" c:type="ModelAbstractSortedList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="current_index" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="merge" c:identifier="model_abstract_sorted_list_merge">
        <doc xml:space="preserve">Modifies the list by performing insertions, replacements and
deletions.

@keys (of length @n_keys) is an array of pointers to the keys to
insert, replace or delete.  It must be sorted.  @keys is not modified
in any way, and the values in @keys are not used in any way except
for being passed in to the 'compare' and 'create_item' functions
specified in the #ModelAbstractSortedListClass.

@mode is a string.  It must either be a single character in length or
the same length as @keys.  If it is the length of @keys then each
character in @mode corresponds, respectively, with each item in
@keys.  If @mode is a single character, then that character is used
for all of the keys.

Each character of @mode may be only 'i', 'I', 'r', 'R', 'd', or 'D'.
The lowercase letters correspond to the operations "insert",
"replace" and "delete".  The uppercase letters correspond to the same
operations, but with warnings issued in case of an unexpected state.
A warning is issued in the case of inserting an item when that item
already exists or replacing or deleting an item when that item does
not exist.  The warnings are issued by calling the warning virtual
function defined in the #ModelAbstractSortedListClass.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sorted" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelAbstractSortedList</doc>
            <type name="AbstractSortedList" c:type="ModelAbstractSortedList*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">the mode string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:space="preserve">an array of keys to add or remove</doc>
            <type name="gpointer" c:type="const gconstpointer*"/>
          </parameter>
          <parameter name="n_keys" transfer-ownership="none">
            <doc xml:space="preserve">the length of @keys</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="ModelList"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AbstractSortedListPrivate"
              c:type="ModelAbstractSortedListPrivate*"/>
      </field>
    </class>
    <record name="AbstractSortedListClass"
            c:type="ModelAbstractSortedListClass"
            glib:is-gtype-struct-for="AbstractSortedList">
      <doc xml:space="preserve">The class structure for #ModelAbstractSortedList.  All virtual functions
must be implemented by each subclass.</doc>
      <field name="parent_class">
        <type name="ListClass" c:type="ModelListClass"/>
      </field>
      <field name="compare">
        <callback name="compare">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="AbstractSortedList"
                    c:type="ModelAbstractSortedList*"/>
            </parameter>
            <parameter name="a" transfer-ownership="none">
              <type name="gpointer" c:type="gconstpointer"/>
            </parameter>
            <parameter name="b" transfer-ownership="none">
              <type name="gpointer" c:type="gconstpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="warning">
        <callback name="warning">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="AbstractSortedList"
                    c:type="ModelAbstractSortedList*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="gpointer" c:type="gconstpointer"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="gchar" c:type="gchar"/>
            </parameter>
            <parameter name="current_index" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Object" c:type="ModelObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_item">
        <callback name="create_item">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="AbstractSortedList"
                    c:type="ModelAbstractSortedList*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="gpointer" c:type="gconstpointer"/>
            </parameter>
            <parameter name="new_key" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
            <parameter name="new_object" transfer-ownership="none">
              <type name="Object" c:type="ModelObject**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="free_key">
        <callback name="free_key">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="AbstractSortedList"
                    c:type="ModelAbstractSortedList*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AbstractSortedListPrivate"
            c:type="ModelAbstractSortedListPrivate"
            disguised="1">
    </record>
    <class name="Boolean"
           c:symbol-prefix="boolean"
           c:type="ModelBoolean"
           parent="Object"
           glib:type-name="ModelBoolean"
           glib:get-type="model_boolean_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_boolean_new">
        <doc xml:space="preserve">Creates a #ModelBoolean, containing @value.

This function should only be called by model implementations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelObject</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="model_boolean_get">
        <doc xml:space="preserve">Gets the boolean value of @object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the boolean value of @object</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelBoolean</doc>
            <type name="Boolean" c:type="ModelBoolean*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="Dictionary"
           c:symbol-prefix="dictionary"
           c:type="ModelDictionary"
           parent="Object"
           abstract="1"
           glib:type-name="ModelDictionary"
           glib:get-type="model_dictionary_get_type"
           glib:type-struct="DictionaryClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <virtual-method name="get_reference"
                      invoker="get_reference"
                      introspectable="0">
        <doc xml:space="preserve">Gets a #ModelReference object corresponding to @key on @dictionary.
@key must be a valid key on the dictionary.

Using this function (instead of model_dictionary_get_value()) allows
you to watch for changes in the value of the key.  Any changes to the
value of a key will be result in the "changed" signal being emitted
on the reference object returned by this function.

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">a #ModelReference for the key, owned by the caller</doc>
          <type name="Reference" c:type="ModelReference*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key to fetch the reference for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value" introspectable="0">
        <doc xml:space="preserve">Gets a #ModelObject corresponding to the current value of @key on
@dictionary.  @key must be a valid key on the dictionary.

This function is equivalent to calling
model_dictionary_get_reference() and model_reference_get_value() but
is often substantially more efficient (since the model implementation
need not setup watches for change notification).

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">a #ModelObject for the key, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key to fetch the reference for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_keys" invoker="list_keys" introspectable="0">
        <doc xml:space="preserve">Gets a list of the keys on @dictionary.

If length is non-%NULL then it will be set to the number of items in
the array that is returned.  It is appropriate for the caller to call
g_strfreev() on the return value.

This function allows dictionaries to be introspected for purposes of
debugging and testing, but if your model is well-constructed then you
should know which keys are on your dictionary objects.</doc>
        <return-value>
          <doc xml:space="preserve">a list of the keys on the dictionary, owned by the caller</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to the number of keys returned, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_reference"
              c:identifier="model_dictionary_get_reference"
              introspectable="0">
        <doc xml:space="preserve">Gets a #ModelReference object corresponding to @key on @dictionary.
@key must be a valid key on the dictionary.

Using this function (instead of model_dictionary_get_value()) allows
you to watch for changes in the value of the key.  Any changes to the
value of a key will be result in the "changed" signal being emitted
on the reference object returned by this function.

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">a #ModelReference for the key, owned by the caller</doc>
          <type name="Reference" c:type="ModelReference*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key to fetch the reference for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="model_dictionary_get_value"
              introspectable="0">
        <doc xml:space="preserve">Gets a #ModelObject corresponding to the current value of @key on
@dictionary.  @key must be a valid key on the dictionary.

This function is equivalent to calling
model_dictionary_get_reference() and model_reference_get_value() but
is often substantially more efficient (since the model implementation
need not setup watches for change notification).

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">a #ModelObject for the key, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key to fetch the reference for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_keys"
              c:identifier="model_dictionary_list_keys"
              introspectable="0">
        <doc xml:space="preserve">Gets a list of the keys on @dictionary.

If length is non-%NULL then it will be set to the number of items in
the array that is returned.  It is appropriate for the caller to call
g_strfreev() on the return value.

This function allows dictionaries to be introspected for purposes of
debugging and testing, but if your model is well-constructed then you
should know which keys are on your dictionary objects.</doc>
        <return-value>
          <doc xml:space="preserve">a list of the keys on the dictionary, owned by the caller</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelDictionary</doc>
            <type name="Dictionary" c:type="ModelDictionary*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to the number of keys returned, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="ModelObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DictionaryPrivate" c:type="ModelDictionaryPrivate*"/>
      </field>
    </class>
    <record name="DictionaryClass"
            c:type="ModelDictionaryClass"
            glib:is-gtype-struct-for="Dictionary">
      <doc xml:space="preserve">The class structure for #ModelDictionary.  All virtual functions must
be implemented by each subclass.</doc>
      <field name="parent_class">
        <type name="ObjectClass" c:type="ModelObjectClass"/>
      </field>
      <field name="get_reference" introspectable="0">
        <callback name="get_reference" introspectable="0">
          <return-value>
            <doc xml:space="preserve">a #ModelReference for the key, owned by the caller</doc>
            <type name="Reference" c:type="ModelReference*"/>
          </return-value>
          <parameters>
            <parameter name="dictionary" transfer-ownership="none">
              <doc xml:space="preserve">a #ModelDictionary</doc>
              <type name="Dictionary" c:type="ModelDictionary*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">the key to fetch the reference for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value" introspectable="0">
        <callback name="get_value" introspectable="0">
          <return-value>
            <doc xml:space="preserve">a #ModelObject for the key, owned by the caller</doc>
            <type name="Object" c:type="ModelObject*"/>
          </return-value>
          <parameters>
            <parameter name="dictionary" transfer-ownership="none">
              <doc xml:space="preserve">a #ModelDictionary</doc>
              <type name="Dictionary" c:type="ModelDictionary*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">the key to fetch the reference for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_keys" introspectable="0">
        <callback name="list_keys" introspectable="0">
          <return-value>
            <doc xml:space="preserve">a list of the keys on the dictionary, owned by the caller</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="dictionary" transfer-ownership="none">
              <doc xml:space="preserve">a #ModelDictionary</doc>
              <type name="Dictionary" c:type="ModelDictionary*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <doc xml:space="preserve">a pointer to the number of keys returned, or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DictionaryPrivate"
            c:type="ModelDictionaryPrivate"
            disguised="1">
    </record>
    <class name="Float"
           c:symbol-prefix="float"
           c:type="ModelFloat"
           parent="Object"
           glib:type-name="ModelFloat"
           glib:get-type="model_float_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_float_new">
        <doc xml:space="preserve">Creates a #ModelFloat, containing @value.

This function should only be called by model implementations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelObject</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="model_float_get">
        <doc xml:space="preserve">Gets the floating point value of @object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the double precision floating point value of @object</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelFloat</doc>
            <type name="Float" c:type="ModelFloat*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="Integer"
           c:symbol-prefix="integer"
           c:type="ModelInteger"
           parent="Object"
           glib:type-name="ModelInteger"
           glib:get-type="model_integer_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_integer_new">
        <doc xml:space="preserve">Creates a #ModelInteger, containing @value.

This function should only be called by model implementations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelObject</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="model_integer_get">
        <doc xml:space="preserve">Gets the integer value of @object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the integer value of @object</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelInteger</doc>
            <type name="Integer" c:type="ModelInteger*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="List"
           c:symbol-prefix="list"
           c:type="ModelList"
           parent="Object"
           abstract="1"
           glib:type-name="ModelList"
           glib:get-type="model_list_get_type"
           glib:type-struct="ListClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <virtual-method name="get_child" invoker="get_child" introspectable="0">
        <doc xml:space="preserve">Gets the child value at position @index of @list.  @index must be a
valid index in the array (ie: strictly less than the result of
model_list_n_children()).

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">the #ModelObject for the child value, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">a #modelList</doc>
            <type name="List" c:type="ModelList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">the index of the child value to get</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="n_children" invoker="n_children">
        <doc xml:space="preserve">Gets the number of items in @list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of items in @list</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelList</doc>
            <type name="List" c:type="ModelList*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="changed" c:identifier="model_list_changed">
        <doc xml:space="preserve">Emits the "changed" signal on @list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelList</doc>
            <type name="List" c:type="ModelList*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the position at which the change occurred</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve">the number of items removed in the change</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="inserted" transfer-ownership="none">
            <doc xml:space="preserve">the number of items inserted in the change</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="more" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if more changes are coming</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child"
              c:identifier="model_list_get_child"
              introspectable="0">
        <doc xml:space="preserve">Gets the child value at position @index of @list.  @index must be a
valid index in the array (ie: strictly less than the result of
model_list_n_children()).

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">the #ModelObject for the child value, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">a #modelList</doc>
            <type name="List" c:type="ModelList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">the index of the child value to get</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_children" c:identifier="model_list_n_children">
        <doc xml:space="preserve">Gets the number of items in @list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of items in @list</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelList</doc>
            <type name="List" c:type="ModelList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="ModelObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ListPrivate" c:type="ModelListPrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">This signal is emitted whenever the list has been changed (ie: has
had items removed or inserted).

One change signal can be emitted for several removes and inserts
occuring at the same position in the list.

The change occured at the index specified by @position.  Starting at
that point, @removed items were removed.  In their place, @inserted
new items were added.  As a simple example, if @list has 4 items in
it and the last item were removed, then a signal would be emitted
with @position equal to 3, @removed equal to 1 and @inserted equal
to 0.

If a single change to the list is too complex to be described by a
single block of removes and inserts then the signal handler will be
called multiple times.  Each time except for the last, @more will
be set to %TRUE.  On the last call, @more will be set to %FALSE.
No other visible action may occur meanwhile (such as emitting
signals elsewhere or returning to the mainloop).  A set of changes
may not contain overlapping items.

At the end of a set of change signals (ie: when @more is %FALSE),
@list will be consistent with its previous value, subject to all of
the changes.

In the midst of a set of changes, the exact state of @list may be
one of two things: it may either be in its final state (ie: equal
to the state that it will have at the end of the set of signals) or
it may be in an intermediate state where only the changes signaled
so far are visible.  In any case, it is valid (and only valid) for
the signal handler to call model_list_get_child() on the children
signaled as having been inserted by the current signal invocation
(model_list_n_children() may not be called at all).  As a model
implementor, this implies that if you decide to make all of the
changes immediately (ie: before the first signal) then you must
emit your set of changes in ascending order of @position.

As an example, assume @list contains [1, 2, 3, 4, 5] and it is
modified to contain [6, 3, 4, 7, 8].  There are many possible
combinations of signals that could describe this change.  We
give a simple one here:

Two signals are emitted.  First, (@position = 0, @removed = 2,
@inserted = 1, @more = %TRUE).  At this point, @list could either
equal its final value, or an intermediate value of [6, 3, 4, 5].
Note that in either case, calling model_list_get_child() on the one
item inserted at poisition 0 will return the same value -- 6.
Next, (@position = 3, @removed = 1, @inserted = 2, @more = %FALSE).
Note that @position is always given in terms of the partially
updated list -- not the original.  @list is now in its final state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the position at which the change occurred</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve">the number of items removed in the change</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="inserted" transfer-ownership="none">
            <doc xml:space="preserve">the number of items inserted in the change</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="more" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if more changes are coming</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ListClass"
            c:type="ModelListClass"
            glib:is-gtype-struct-for="List">
      <doc xml:space="preserve">The class structure for #ModelList.  All virtual functions must be
implemented by each subclass.</doc>
      <field name="parent_class">
        <type name="ObjectClass" c:type="ModelObjectClass"/>
      </field>
      <field name="n_children">
        <callback name="n_children">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the number of items in @list</doc>
            <type name="gulong" c:type="gulong"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <doc xml:space="preserve">a #ModelList</doc>
              <type name="List" c:type="ModelList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child" introspectable="0">
        <callback name="get_child" introspectable="0">
          <return-value>
            <doc xml:space="preserve">the #ModelObject for the child value, owned by the caller</doc>
            <type name="Object" c:type="ModelObject*"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <doc xml:space="preserve">a #modelList</doc>
              <type name="List" c:type="ModelList*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve">the index of the child value to get</doc>
              <type name="gulong" c:type="gulong"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ListPrivate" c:type="ModelListPrivate" disguised="1">
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="ModelObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="ModelObject"
           glib:get-type="model_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectPrivate" c:type="ModelObjectPrivate*"/>
      </field>
    </class>
    <record name="ObjectClass"
            c:type="ModelObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ObjectPrivate" c:type="ModelObjectPrivate" disguised="1">
    </record>
    <class name="Reference"
           c:symbol-prefix="reference"
           c:type="ModelReference"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="ModelReference"
           glib:get-type="model_reference_get_type"
           glib:type-struct="ReferenceClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <virtual-method name="get_value" invoker="get_value" introspectable="0">
        <doc xml:space="preserve">Reads the current value of the reference.  This is essentially the
dereference operation.

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">the current value of the reference, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReference</doc>
            <type name="Reference" c:type="ModelReference*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="changed" c:identifier="model_reference_changed">
        <doc xml:space="preserve">Emits the "changed" signal on @reference.  This should be done
whenever the reference takes on a new value (ie:
model_reference_get_value() will return something different than last
time).

This function should only be called by model implementations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReference</doc>
            <type name="Reference" c:type="ModelReference*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="model_reference_get_value"
              introspectable="0">
        <doc xml:space="preserve">Reads the current value of the reference.  This is essentially the
dereference operation.

It is appropriate for the caller to call g_object_unref() on the
return value.</doc>
        <return-value>
          <doc xml:space="preserve">the current value of the reference, owned by the caller</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReference</doc>
            <type name="Reference" c:type="ModelReference*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ReferencePrivate" c:type="ModelReferencePrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">This signal is emitted whenever the value of the reference has
changed (ie: calling model_reference_get_value() will have a
different result).

The new value of the reference is available to the signal handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ReferenceClass"
            c:type="ModelReferenceClass"
            glib:is-gtype-struct-for="Reference">
      <doc xml:space="preserve">The class structure for #ModelReference.  All virtual functions must
be implemented by each subclass.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_value" introspectable="0">
        <callback name="get_value" introspectable="0">
          <return-value>
            <doc xml:space="preserve">the current value of the reference, owned by the caller</doc>
            <type name="Object" c:type="ModelObject*"/>
          </return-value>
          <parameters>
            <parameter name="reference" transfer-ownership="none">
              <doc xml:space="preserve">a #ModelReference</doc>
              <type name="Reference" c:type="ModelReference*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ReferenceHelper"
           c:symbol-prefix="reference_helper"
           c:type="ModelReferenceHelper"
           parent="GObject.Object"
           glib:type-name="ModelReferenceHelper"
           glib:get-type="model_reference_helper_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_reference_helper_new">
        <doc xml:space="preserve">Creates a new model reference helper for use with @owner.  The
initial value of the helper is @value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelReferenceHelper</doc>
          <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
        </return-value>
        <parameters>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:space="preserve">the "owner" #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the #ModelObject with the initial value</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_boolean"
                   c:identifier="model_reference_helper_new_boolean">
        <doc xml:space="preserve">Creates a new #ModelReferenceHelper holding a boolean value.

This is a convenience wrapper around model_reference_helper_new() and
model_boolean_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelReferenceHelper</doc>
          <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
        </return-value>
        <parameters>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:space="preserve">the "owner" #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_float"
                   c:identifier="model_reference_helper_new_float">
        <doc xml:space="preserve">Creates a new #ModelReferenceHelper holding a floating point value.

This is a convenience wrapper around model_reference_helper_new() and
model_float_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelReferenceHelper</doc>
          <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
        </return-value>
        <parameters>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:space="preserve">the "owner" #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_integer"
                   c:identifier="model_reference_helper_new_integer">
        <doc xml:space="preserve">Creates a new #ModelReferenceHelper holding an integer.

This is a convenience wrapper around model_reference_helper_new() and
model_integer_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelReferenceHelper</doc>
          <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
        </return-value>
        <parameters>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:space="preserve">the "owner" #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string"
                   c:identifier="model_reference_helper_new_string">
        <doc xml:space="preserve">Creates a new #ModelReferenceHelper holding a string.

This is a convenience wrapper around model_reference_helper_new() and
model_string_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelReferenceHelper</doc>
          <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
        </return-value>
        <parameters>
          <parameter name="owner" transfer-ownership="none">
            <doc xml:space="preserve">the "owner" #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_reference"
              c:identifier="model_reference_helper_get_reference"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">a #ModelReference

Creates and returns a #ModelReference object for the value stored in
@helper.  Any #ModelReference created with this function will have
its "changed" signal emitted when model_reference_helper_set() is
called on @helper.

This function is not thread-safe with respect to g_object_unref()
being called in other threads.  See bug #548954 for why.</doc>
          <type name="Reference" c:type="ModelReference*"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="model_reference_helper_set">
        <doc xml:space="preserve">Changes the value held by @helper to @value.

If the helper has outstanding references (as returned by
model_reference_helper_get_reference()) then the "changed" signal
will be emitted on them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the #ModelObject to use as the new value, or %NULL</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="model_reference_helper_set_boolean">
        <doc xml:space="preserve">Updates the value of @helper to the given boolean value.

This is a convenience wrapper around model_reference_helper_set() and
model_boolean_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float" c:identifier="model_reference_helper_set_float">
        <doc xml:space="preserve">Updates the value of @helper to the given floating point value.

This is a convenience wrapper around model_reference_helper_set() and
model_float_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_integer"
              c:identifier="model_reference_helper_set_integer">
        <doc xml:space="preserve">Updates the value of @helper to the given integer.

This is a convenience wrapper around model_reference_helper_set() and
model_integer_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="model_reference_helper_set_string">
        <doc xml:space="preserve">Updates the value of @helper to the given string.

This is a convenience wrapper around model_reference_helper_set() and
model_string_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="helper" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelReferenceHelper</doc>
            <type name="ReferenceHelper" c:type="ModelReferenceHelper*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ReferencePrivate"
            c:type="ModelReferencePrivate"
            disguised="1">
    </record>
    <class name="SimpleDictionary"
           c:symbol-prefix="simple_dictionary"
           c:type="ModelSimpleDictionary"
           parent="Dictionary"
           glib:type-name="ModelSimpleDictionary"
           glib:get-type="model_simple_dictionary_get_type"
           glib:type-struct="SimpleDictionaryClass">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_simple_dictionary_new">
        <doc xml:space="preserve">Creates a new #ModelSimpleDictionary with no keys.

You must add the entire set of keys to it with
model_simple_dictionary_set() before using any of the
#ModelDictionary APIs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleDictionary</doc>
          <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
        </return-value>
      </constructor>
      <method name="set" c:identifier="model_simple_dictionary_set">
        <doc xml:space="preserve">Create a new key, @key, or set the value of an existing key.

The value is set to @value, which may be %NULL.

If @monitored is %TRUE, then @simple is kept alive for as long as
there is a #ModelReference for @key.  This allows subclasses of
#ModelSimpleDictionary to continue monitoring for changes in the
value.  If @monitored is %FALSE, then no extra effort is made to keep
@simple alive when #ModelReferences are being held for @key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleDictionary</doc>
            <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a string, the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the new value, a #ModelObject or %NULL</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
          <parameter name="monitored" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the key is being monitored</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="model_simple_dictionary_set_boolean">
        <doc xml:space="preserve">Updates the value of @key to the given boolean value.

This is a convenience wrapper around model_simple_dictionary_set()
and model_boolean_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleDictionary</doc>
            <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a string, the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="monitored" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the key is being monitored</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float"
              c:identifier="model_simple_dictionary_set_float">
        <doc xml:space="preserve">Updates the value of @key to the given floating point value.

This is a convenience wrapper around model_simple_dictionary_set()
and model_float_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleDictionary</doc>
            <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a string, the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="monitored" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the key is being monitored</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_integer"
              c:identifier="model_simple_dictionary_set_integer">
        <doc xml:space="preserve">Updates the value of @key to the given integer.

This is a convenience wrapper around model_simple_dictionary_set()
and model_integer_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleDictionary</doc>
            <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a string, the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="monitored" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the key is being monitored</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="model_simple_dictionary_set_string">
        <doc xml:space="preserve">Updates the value of @key to the given string.

This is a convenience wrapper around model_simple_dictionary_set()
and model_string_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleDictionary</doc>
            <type name="SimpleDictionary" c:type="ModelSimpleDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a string, the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="monitored" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the key is being monitored</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Dictionary" c:type="ModelDictionary"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleDictionaryPrivate"
              c:type="ModelSimpleDictionaryPrivate*"/>
      </field>
    </class>
    <record name="SimpleDictionaryClass"
            c:type="ModelSimpleDictionaryClass"
            glib:is-gtype-struct-for="SimpleDictionary">
      <field name="parent_class">
        <type name="DictionaryClass" c:type="ModelDictionaryClass"/>
      </field>
    </record>
    <record name="SimpleDictionaryPrivate"
            c:type="ModelSimpleDictionaryPrivate"
            disguised="1">
    </record>
    <class name="SimpleList"
           c:symbol-prefix="simple_list"
           c:type="ModelSimpleList"
           parent="List"
           glib:type-name="ModelSimpleList"
           glib:get-type="model_simple_list_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_simple_list_new">
        <return-value transfer-ownership="full">
          <type name="SimpleList" c:type="ModelSimpleList*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="model_simple_list_append">
        <doc xml:space="preserve">Appends an item to the end of the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="SimpleList" c:type="ModelSimpleList*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the item to insert into the list</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="model_simple_list_insert">
        <doc xml:space="preserve">Inserts a single item to the list.  @position is the index of the
item to insert before.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="SimpleList" c:type="ModelSimpleList*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the position to insert at</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the item to insert into the list</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="model_simple_list_remove">
        <doc xml:space="preserve">Removes a single item from the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="SimpleList" c:type="ModelSimpleList*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the index of the item to remove</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="splice" c:identifier="model_simple_list_splice">
        <doc xml:space="preserve">Performs a splice operation on the list.  This is similar to the
JavaScript list operation of the same name.

Starting at @position, @n_removes items are removed from the list.
In their place, the items given in @inserts are added.

This function takes its own references to each of the items in
@inserts, but does not modify the array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="SimpleList" c:type="ModelSimpleList*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the position at which to perform the splice</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="n_removes" transfer-ownership="none">
            <doc xml:space="preserve">the number of items to remove from @position</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="inserts" transfer-ownership="none">
            <doc xml:space="preserve">the list of items to insert at @position</doc>
            <type name="Object" c:type="ModelObject* const*"/>
          </parameter>
          <parameter name="n_inserts" transfer-ownership="none">
            <doc xml:space="preserve">the number of items to insert (the length of @inserts)</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="more" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if more events are coming</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="SimpleReference"
           c:symbol-prefix="simple_reference"
           c:type="ModelSimpleReference"
           parent="Reference"
           glib:type-name="ModelSimpleReference"
           glib:get-type="model_simple_reference_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_simple_reference_new">
        <doc xml:space="preserve">Creates a #ModelSimpleReference, using @value as the initial value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleReference</doc>
          <type name="SimpleReference" c:type="ModelSimpleReference*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelObject to use as the initial value, or %NULL</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_boolean"
                   c:identifier="model_simple_reference_new_boolean">
        <doc xml:space="preserve">Creates a new #ModelSimpleReference holding a boolean value.

This is a convenience wrapper around model_simple_reference_new() and
model_boolean_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleReference</doc>
          <type name="SimpleReference" c:type="ModelSimpleReference*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_float"
                   c:identifier="model_simple_reference_new_float">
        <doc xml:space="preserve">Creates a new #ModelSimpleReference holding a floating point value.

This is a convenience wrapper around model_simple_reference_new() and
model_float_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleReference</doc>
          <type name="SimpleReference" c:type="ModelSimpleReference*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_integer"
                   c:identifier="model_simple_reference_new_integer">
        <doc xml:space="preserve">Creates a new #ModelSimpleReference holding an integer.

This is a convenience wrapper around model_simple_reference_new() and
model_integer_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleReference</doc>
          <type name="SimpleReference" c:type="ModelSimpleReference*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string"
                   c:identifier="model_simple_reference_new_string">
        <doc xml:space="preserve">Creates a new #ModelSimpleReference holding a string.

This is a convenience wrapper around model_simple_reference_new() and
model_string_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelSimpleReference</doc>
          <type name="SimpleReference" c:type="ModelSimpleReference*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set" c:identifier="model_simple_reference_set">
        <doc xml:space="preserve">Changes the value held by @simple to @value and emits the "changed"
signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleReference</doc>
            <type name="SimpleReference" c:type="ModelSimpleReference*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the #ModelObject to use as the new value, or %NULL</doc>
            <type name="Object" c:type="ModelObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="model_simple_reference_set_boolean">
        <doc xml:space="preserve">Updates the value of @simple to the given boolean value.

This is a convenience wrapper around model_simple_reference_set() and
model_boolean_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleReference</doc>
            <type name="SimpleReference" c:type="ModelSimpleReference*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float" c:identifier="model_simple_reference_set_float">
        <doc xml:space="preserve">Updates the value of @simple to the given floating point value.

This is a convenience wrapper around model_simple_reference_set() and
model_float_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleReference</doc>
            <type name="SimpleReference" c:type="ModelSimpleReference*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a double precision floating point value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_integer"
              c:identifier="model_simple_reference_set_integer">
        <doc xml:space="preserve">Updates the value of @simple to the given integer.

This is a convenience wrapper around model_simple_reference_set() and
model_integer_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleReference</doc>
            <type name="SimpleReference" c:type="ModelSimpleReference*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="model_simple_reference_set_string">
        <doc xml:space="preserve">Updates the value of @simple to the given string.

This is a convenience wrapper around model_simple_reference_set() and
model_string_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="simple" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelSimpleReference</doc>
            <type name="SimpleReference" c:type="ModelSimpleReference*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="String"
           c:symbol-prefix="string"
           c:type="ModelString"
           parent="Object"
           glib:type-name="ModelString"
           glib:get-type="model_string_get_type">
      <doc xml:space="preserve">This is an opaque structure; it may not be accessed directly.</doc>
      <constructor name="new" c:identifier="model_string_new">
        <doc xml:space="preserve">Creates a #ModelString, containing @value.

This function should only be called by model implementations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #ModelObject</doc>
          <type name="Object" c:type="ModelObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string, non-%NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="model_string_get">
        <doc xml:space="preserve">Gets the string value of @object.

It is appropriate for the caller to call g_free() on the return
value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the string value of @object, owned by the caller</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelString</doc>
            <type name="String" c:type="ModelString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="model_string_peek">
        <doc xml:space="preserve">Peeks the string value of @object.  The result is owned by @object
and must not be modified or freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the string value of @object, owned by @object</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #ModelString</doc>
            <type name="String" c:type="ModelString*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
  </namespace>
</repository>
