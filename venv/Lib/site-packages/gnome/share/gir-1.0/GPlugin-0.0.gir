<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="glib-2.0"/>
  <package name="gmodule-2.0"/>
  <package name="gobject-2.0"/>
  <namespace name="GPlugin"
             version="0.0"
             shared-library="libgplugin.dll"
             c:identifier-prefixes="GPlugin"
             c:symbol-prefixes="gplugin">
    <constant name="EXTRA_VERSION" value="" c:type="GPLUGIN_EXTRA_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Loader"
           c:symbol-prefix="loader"
           c:type="GPluginLoader"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GPluginLoader"
           glib:get-type="gplugin_loader_get_type"
           glib:type-struct="LoaderClass">
      <virtual-method name="load" introspectable="0" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="plugin" transfer-ownership="none">
            <type c:type="GPluginPlugin*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query" introspectable="0" throws="1">
        <return-value>
          <type c:type="GPluginPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" introspectable="0" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="plugin" transfer-ownership="none">
            <type c:type="GPluginPlugin*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load_plugin"
              c:identifier="gplugin_loader_load_plugin"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @plugin was loaded successfully, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginLoader instance performing the load</doc>
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginPlugin instance to load
error: return location for a GError, or NULL</doc>
            <type c:type="GPluginPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_plugin"
              c:identifier="gplugin_loader_query_plugin"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GPluginPlugin instance or NULL on failure</doc>
          <type c:type="GPluginPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginLoader instance performing the query</doc>
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">filename to query
error: return location for a GError, or NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_plugin"
              c:identifier="gplugin_loader_unload_plugin"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @plugin was unloaded successfully, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginLoader instance performing the unload</doc>
            <type name="Loader" c:type="GPluginLoader*"/>
          </instance-parameter>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginPlugin instance to unload</doc>
            <type c:type="GPluginPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="_gplugin_reserved_1" introspectable="0">
        <callback name="_gplugin_reserved_1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_2" introspectable="0">
        <callback name="_gplugin_reserved_2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_3" introspectable="0">
        <callback name="_gplugin_reserved_3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_4" introspectable="0">
        <callback name="_gplugin_reserved_4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </class>
    <record name="LoaderClass"
            c:type="GPluginLoaderClass"
            glib:is-gtype-struct-for="Loader">
      <field name="gparent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="supported_extensions" introspectable="0">
        <callback name="supported_extensions" introspectable="0">
          <return-value>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="klass" transfer-ownership="none">
              <type name="LoaderClass" c:type="const GPluginLoaderClass*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query" introspectable="0">
        <callback name="query" introspectable="0" throws="1">
          <return-value>
            <type c:type="GPluginPlugin*"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="Loader" c:type="GPluginLoader*"/>
            </parameter>
            <parameter name="filename" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load" introspectable="0">
        <callback name="load" introspectable="0" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="Loader" c:type="GPluginLoader*"/>
            </parameter>
            <parameter name="plugin" transfer-ownership="none">
              <type c:type="GPluginPlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload" introspectable="0">
        <callback name="unload" introspectable="0" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="Loader" c:type="GPluginLoader*"/>
            </parameter>
            <parameter name="plugin" transfer-ownership="none">
              <type c:type="GPluginPlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gplugin_reserved_1" introspectable="0">
        <callback name="_gplugin_reserved_1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_2" introspectable="0">
        <callback name="_gplugin_reserved_2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_3" introspectable="0">
        <callback name="_gplugin_reserved_3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gplugin_reserved_4" introspectable="0">
        <callback name="_gplugin_reserved_4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <method name="get_supported_extensions"
              c:identifier="gplugin_loader_class_get_supported_extensions">
        <doc xml:space="preserve">Returns a #GSList of string for which extensions the loader supports.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GSList of
              extensions that the loader supports.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">#GPluginLoader instance</doc>
            <type name="LoaderClass" c:type="const GPluginLoaderClass*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="MAJOR_VERSION" value="0" c:type="GPLUGIN_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="20" c:type="GPLUGIN_MICRO_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="0" c:type="GPLUGIN_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="PluginState"
                 glib:type-name="GPluginPluginState"
                 glib:get-type="gplugin_plugin_state_get_type"
                 c:type="GPluginPluginState">
      <doc xml:space="preserve">The expected states of a plugin.</doc>
      <member name="unknown"
              value="-1"
              c:identifier="GPLUGIN_PLUGIN_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">The state of the plugin is unknown</doc>
      </member>
      <member name="error"
              value="0"
              c:identifier="GPLUGIN_PLUGIN_STATE_ERROR"
              glib:nick="error">
        <doc xml:space="preserve">There was an error loading or unloading the
 plugin</doc>
      </member>
      <member name="queried"
              value="1"
              c:identifier="GPLUGIN_PLUGIN_STATE_QUERIED"
              glib:nick="queried">
        <doc xml:space="preserve">The plugin has been queried but not loaded</doc>
      </member>
      <member name="requery"
              value="2"
              c:identifier="GPLUGIN_PLUGIN_STATE_REQUERY"
              glib:nick="requery">
        <doc xml:space="preserve">The plugin should be requeried</doc>
      </member>
      <member name="loaded"
              value="3"
              c:identifier="GPLUGIN_PLUGIN_STATE_LOADED"
              glib:nick="loaded">
        <doc xml:space="preserve">The plugin is loaded</doc>
      </member>
      <member name="load_failed"
              value="4"
              c:identifier="GPLUGIN_PLUGIN_STATE_LOAD_FAILED"
              glib:nick="load-failed">
        <doc xml:space="preserve">The plugin failed to load</doc>
      </member>
    </enumeration>
    <constant name="VERSION" value="0.0.20" c:type="GPLUGIN_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <callback name="VersionCompareFunc"
              c:type="GPluginVersionCompareFunc"
              throws="1">
      <doc xml:space="preserve">#GPluginVersionCompareFunc is used to compare two versions of a plugin.  It
should return -1 if @v1 is greater than @v2, 0 if @v1 is equal to @v2, and
1 if @v1 is less than @v2.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">-1 if @v1 is greater than @v2, 0 if @v1 is equal to @v1, and 1 if
         @v1 is less than @v2.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="v1" transfer-ownership="none">
          <doc xml:space="preserve">The first version to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="v2" transfer-ownership="none">
          <doc xml:space="preserve">The second version to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="get_option_group" c:identifier="gplugin_get_option_group">
      <doc xml:space="preserve">Returns a #GOptionGroup for the commandline arguments recognized by
GPlugin.  You should add this option group to your #GOptionContext with
g_option_context_add_group(), if you are using g_option_context_parse() to
parse your commandline arguments.

GPlugin must be initialized before you call this function.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GOptionGroup for the commandline arguments
                               recognized by GPlugin.</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="init" c:identifier="gplugin_init">
      <doc xml:space="preserve">Initializes the GPlugin library.

This function *MUST* be called before interacting with any other GPlugin API</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="manager_add_app_paths"
              c:identifier="gplugin_manager_add_app_paths">
      <doc xml:space="preserve">Adds the application installation path for @appname.  This will add
$prefix/@appname/plugins to the list as well as
${XDG_CONFIG_HOME}/@appname/plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="prefix" transfer-ownership="none">
          <doc xml:space="preserve">The installation prefix for the application.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="appname" transfer-ownership="none">
          <doc xml:space="preserve">The name of the application whose paths to add.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_add_default_paths"
              c:identifier="gplugin_manager_add_default_paths">
      <doc xml:space="preserve">Adds the path that GPlugin was installed to to the plugin search path, as
well as ${XDG_CONFIG_HOME}/gplugin.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="manager_append_path"
              c:identifier="gplugin_manager_append_path">
      <doc xml:space="preserve">Adds @path to the end of the list of paths to search for plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve">A path to add to the end of the plugin search paths</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_find_plugin"
              c:identifier="gplugin_manager_find_plugin"
              introspectable="0">
      <doc xml:space="preserve">Finds the first plugin matching @id.  This function uses
#gplugin_manager_find_plugins and returns the first plugin in the
list.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A referenced #GPluginPlugin instance or NULL
              if no plugin matching @id was found.</doc>
        <type c:type="GPluginPlugin*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">The id of the plugin to find.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_find_plugins"
              c:identifier="gplugin_manager_find_plugins"
              introspectable="0">
      <doc xml:space="preserve">Finds all plugins matching @id.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A #GSList of
              referenced #GPluginPlugin's matching @id.  Call
              #gplugin_manager_free_plugin_list on the returned value
              when you're done with it.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type/>
        </type>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">id string of the plugin to find</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_free_plugin_list"
              c:identifier="gplugin_manager_free_plugin_list"
              introspectable="0">
      <doc xml:space="preserve">Frees the return value of #gplugin_manager_find_plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugins_list" transfer-ownership="none">
          <doc xml:space="preserve">Returned value from
               #gplugin_manager_find_plugins</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="manager_get_instance"
              c:identifier="gplugin_manager_get_instance">
      <doc xml:space="preserve">Returns a #GObject that is the instance of the plugin manager that is being
used.

This is provided so that signals can be connected and should not be tinkered
with in any way.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The #GObject that is the instance of the
                               plugin manager.</doc>
        <type name="GObject.Object" c:type="GObject*"/>
      </return-value>
    </function>
    <function name="manager_get_paths"
              c:identifier="gplugin_manager_get_paths">
      <doc xml:space="preserve">Gets the list of paths which will be search for plugins.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">list of paths which will
              be searched for plugins.  free the list with g_list_free when
              done.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="manager_list_plugins"
              c:identifier="gplugin_manager_list_plugins">
      <doc xml:space="preserve">Returns a #GList of all plugin id's.  Each id should be queried directly
for more information.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A #GList of each unique
              plugin id.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="manager_load_plugin"
              c:identifier="gplugin_manager_load_plugin"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve">Loads @plugin and all of it's dependencies.  If a dependency can not be
loaded, @plugin will not be loaded either.  However, any other plugins that
@plugin depends on that were loaded from this call, will not be unloaded.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if @plugin was loaded successfully or already loaded,
              FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">#GPluginPlugin instance</doc>
          <type c:type="GPluginPlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_prepend_path"
              c:identifier="gplugin_manager_prepend_path">
      <doc xml:space="preserve">Adds @path to the beginning of the list of paths to search for plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve">A path to add to the beginning of the plugin search paths</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_refresh" c:identifier="gplugin_manager_refresh">
      <doc xml:space="preserve">Forces a refresh of all plugins found in the search paths.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="manager_register_loader"
              c:identifier="gplugin_manager_register_loader">
      <doc xml:space="preserve">Registers @type as an available loader.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">#GType of a #GPluginLoader</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_remove_path"
              c:identifier="gplugin_manager_remove_path">
      <doc xml:space="preserve">Removes @path from the list of paths to search for plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve">A path to remove from the plugin search paths</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_remove_paths"
              c:identifier="gplugin_manager_remove_paths">
      <doc xml:space="preserve">Clears all paths that are set to search for plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="manager_unload_plugin"
              c:identifier="gplugin_manager_unload_plugin"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve">Unloads @plugin.  If @plugin has dependencies, they are not unloaded.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if @plugin was unloaded successfully or not loaded,
              FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">#GPluginPlugin instance</doc>
          <type c:type="GPluginPlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_unregister_loader"
              c:identifier="gplugin_manager_unregister_loader">
      <doc xml:space="preserve">Unregisters @type as an available loader.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">#GType of a #GPluginLoader</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="uninit" c:identifier="gplugin_uninit">
      <doc xml:space="preserve">Uninitializes the GPlugin library</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="version_compare"
              c:identifier="gplugin_version_compare"
              throws="1">
      <doc xml:space="preserve">The default #GPluginVersionCompareFunc.  It handles the typical
MAJOR.MINOR.MICRO format and ignore any characters after the micro version.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">-1 if @v1 is greater than @v2, 0 if @v1 is equal to @v1, and 1 if
         @v1 is less than @v2.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="v1" transfer-ownership="none">
          <doc xml:space="preserve">The first version to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="v2" transfer-ownership="none">
          <doc xml:space="preserve">The second version to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
