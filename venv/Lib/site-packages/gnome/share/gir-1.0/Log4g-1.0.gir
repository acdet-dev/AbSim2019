<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <namespace name="Log4g"
             version="1.0"
             shared-library="liblog4g-1.0-0.dll"
             c:identifier-prefixes="Log4g"
             c:symbol-prefixes="log4g">
    <class name="Appender"
           c:symbol-prefix="appender"
           c:type="Log4gAppender"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="Log4gAppender"
           glib:get-type="log4g_appender_get_type"
           glib:type-struct="AppenderClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gAppender&lt;/structname&gt; structure does not have any
public members.</doc>
      <virtual-method name="activate_options"
                      invoker="activate_options"
                      version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_filter" invoker="add_filter" version="0.1">
        <doc xml:space="preserve">Calls the @add_filter function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">A filter to add to @self.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="append" invoker="append" version="0.1">
        <doc xml:space="preserve">Calls the @append function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve">An #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A log event.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="close" invoker="close" version="0.1">
        <doc xml:space="preserve">Calls the @close function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="do_append" invoker="do_append" version="0.1">
        <doc xml:space="preserve">Calls the @do_append function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The log event to append.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_error_handler"
                      invoker="get_error_handler"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Calls the @get_error_handler function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The error handler object used by @self.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_filter"
                      invoker="get_filter"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Calls the @get_filter function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The first filter in the filter chain.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_layout"
                      invoker="get_layout"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Calls the @get_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The layout set for @self.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" version="0.1">
        <doc xml:space="preserve">Calls the @get_name function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of @self (may be %NULL).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="requires_layout"
                      invoker="requires_layout"
                      version="0.1">
        <doc xml:space="preserve">Calls the @requires_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this appender requires a layout, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_error_handler"
                      invoker="set_error_handler"
                      version="0.1">
        <doc xml:space="preserve">Calls the @set_error_handler function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="handler" transfer-ownership="none">
            <doc xml:space="preserve">The new error handler object for @self.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_layout" invoker="set_layout" version="0.1">
        <doc xml:space="preserve">Calls the @set_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The new layout for @self.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_name" invoker="set_name" version="0.1">
        <doc xml:space="preserve">Calls the @set_name function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The new name for this appender.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_options"
              c:identifier="log4g_appender_activate_options"
              version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_filter"
              c:identifier="log4g_appender_add_filter"
              version="0.1">
        <doc xml:space="preserve">Calls the @add_filter function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">A filter to add to @self.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="log4g_appender_append" version="0.1">
        <doc xml:space="preserve">Calls the @append function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A log event.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_filters"
              c:identifier="log4g_appender_clear_filters"
              version="0.1">
        <doc xml:space="preserve">Remove all filters attached to this appender.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="log4g_appender_close" version="0.1">
        <doc xml:space="preserve">Calls the @close function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="do_append"
              c:identifier="log4g_appender_do_append"
              version="0.1">
        <doc xml:space="preserve">Calls the @do_append function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The log event to append.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_closed"
              c:identifier="log4g_appender_get_closed"
              version="0.1">
        <doc xml:space="preserve">Determine if an appender has been closed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this appender is closed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error_handler"
              c:identifier="log4g_appender_get_error_handler"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Calls the @get_error_handler function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The error handler object used by @self.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filter"
              c:identifier="log4g_appender_get_filter"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Calls the @get_filter function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The first filter in the filter chain.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_filter"
              c:identifier="log4g_appender_get_first_filter"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the first filter in the filter chain.</doc>
        <return-value>
          <doc xml:space="preserve">The first filter in the filter chain, or %NULL if there is none.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="log4g_appender_get_layout"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Calls the @get_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The layout set for @self.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="log4g_appender_get_name"
              version="0.1">
        <doc xml:space="preserve">Calls the @get_name function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of @self (may be %NULL).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_threshold"
              c:identifier="log4g_appender_get_threshold"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the threshold property.</doc>
        <return-value>
          <doc xml:space="preserve">The threshold value for this appender.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_as_severe_as"
              c:identifier="log4g_appender_is_as_severe_as"
              version="0.1">
        <doc xml:space="preserve">Determine if a log level is below the appender's threshold.

If there is no threshold set then the return value is always %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @level is above the level threshold of this appender,
         %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">A log level.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="requires_layout"
              c:identifier="log4g_appender_requires_layout"
              version="0.1">
        <doc xml:space="preserve">Calls the @requires_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_closed"
              c:identifier="log4g_appender_set_closed"
              version="0.1">
        <doc xml:space="preserve">Set the closed parameter.

Appenders should set this value appropriately. The default value is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this appender is closed, %FALSE otherwise.</doc>
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="closed" transfer-ownership="none">
            <doc xml:space="preserve">The new closed value for @self.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error_handler"
              c:identifier="log4g_appender_set_error_handler"
              version="0.1">
        <doc xml:space="preserve">Calls the @set_error_handler function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="handler" transfer-ownership="none">
            <doc xml:space="preserve">The new error handler object for @self.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layout"
              c:identifier="log4g_appender_set_layout"
              version="0.1">
        <doc xml:space="preserve">Calls the @set_layout function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">The new layout for @self.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="log4g_appender_set_name"
              version="0.1">
        <doc xml:space="preserve">Calls the @set_name function from the #Log4gAppenderClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The new name for this appender.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_threshold"
              c:identifier="log4g_appender_set_threshold"
              version="0.1">
        <doc xml:space="preserve">Set the threshold property for this appender.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gAppender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </instance-parameter>
          <parameter name="threshold" transfer-ownership="none">
            <doc xml:space="preserve">A string representation of a log level.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="threshold"
                version="0.1"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The level threshold for this appender.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <callback name="AppenderActivateOptions"
              c:type="Log4gAppenderActivateOptions"
              version="0.1">
      <doc xml:space="preserve">Activate all options set for this appender.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAddFilter"
              c:type="Log4gAppenderAddFilter"
              version="0.1">
      <doc xml:space="preserve">Add a filter to the end of the filter chain.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve">A filter to add to @self.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAppend" c:type="Log4gAppenderAppend" version="0.1">
      <doc xml:space="preserve">Sub-classes should implement this abstract virtual function to perform
actual logging.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="base" transfer-ownership="none">
          <doc xml:space="preserve">An #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">A log event.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="AppenderAttachable"
               c:symbol-prefix="appender_attachable"
               c:type="Log4gAppenderAttachable"
               glib:type-name="Log4gAppenderAttachable"
               glib:get-type="log4g_appender_attachable_get_type"
               glib:type-struct="AppenderAttachableInterface">
      <virtual-method name="add_appender" invoker="add_appender" version="0.1">
        <doc xml:space="preserve">Call the @add_appender function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">An appender.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_all_appenders"
                      invoker="get_all_appenders"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_all_appenders function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array of appenders attached to @self.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_appender"
                      invoker="get_appender"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_appender function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The appender named @name, or %NULL if not found.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_attached" invoker="is_attached" version="0.1">
        <doc xml:space="preserve">Call the @is_attached function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the named appender is attached to @self, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to check.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_all_appenders"
                      invoker="remove_all_appenders"
                      version="0.1">
        <doc xml:space="preserve">Call the @remove_all_appenders function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_appender"
                      invoker="remove_appender"
                      version="0.1">
        <doc xml:space="preserve">Call the @remove_appender function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to remove.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_appender_name"
                      invoker="remove_appender_name"
                      version="0.1">
        <doc xml:space="preserve">Call the @remove_appender_name function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_appender"
              c:identifier="log4g_appender_attachable_add_appender"
              version="0.1">
        <doc xml:space="preserve">Call the @add_appender function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">An appender.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_appenders"
              c:identifier="log4g_appender_attachable_get_all_appenders"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_all_appenders function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array of appenders attached to @self.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_appender"
              c:identifier="log4g_appender_attachable_get_appender"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_appender function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The appender named @name, or %NULL if not found.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="impl_append_loop_on_appenders"
              c:identifier="log4g_appender_attachable_impl_append_loop_on_appenders"
              version="0.1">
        <doc xml:space="preserve">Call the Log4gAppenderInterface.do_append virtual function for all
attached appenders.</doc>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable implementation object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A log event to append.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_attached"
              c:identifier="log4g_appender_attachable_is_attached"
              version="0.1">
        <doc xml:space="preserve">Call the @is_attached function from the #Log4gAppenderAttachableInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to check.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_all_appenders"
              c:identifier="log4g_appender_attachable_remove_all_appenders"
              version="0.1">
        <doc xml:space="preserve">Call the @remove_all_appenders function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_appender"
              c:identifier="log4g_appender_attachable_remove_appender"
              version="0.1">
        <doc xml:space="preserve">Call the @remove_appender function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to remove.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_appender_name"
              c:identifier="log4g_appender_attachable_remove_appender_name"
              version="0.1">
        <doc xml:space="preserve">Call the @remove_appender_name function from the
#Log4gAppenderAttachableInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An appender attachable object.</doc>
            <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="AppenderAttachableAddAppender"
              c:type="Log4gAppenderAttachableAddAppender"
              version="0.1">
      <doc xml:space="preserve">Attach an appender to an object.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">An appender.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAttachableGetAllAppenders"
              c:type="Log4gAppenderAttachableGetAllAppenders"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve all previously attached appenders in an array.

&lt;note&gt;&lt;para&gt;
It is the responsibility of the caller to call g_array_free() on the
returned value.
&lt;/para&gt;&lt;/note&gt;</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">An array of appenders attached to @self.</doc>
        <array name="GLib.Array" c:type="const GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAttachableGetAppender"
              c:type="Log4gAppenderAttachableGetAppender"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve an attached appender by name.</doc>
      <return-value>
        <doc xml:space="preserve">The appender named @name, or %NULL if not found.</doc>
        <type name="Appender" c:type="Log4gAppender*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the appender to retrieve.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="AppenderAttachableImpl"
           c:symbol-prefix="appender_attachable_impl"
           c:type="Log4gAppenderAttachableImpl"
           parent="GObject.Object"
           glib:type-name="Log4gAppenderAttachableImpl"
           glib:get-type="log4g_appender_attachable_impl_get_type"
           glib:type-struct="AppenderAttachableImplClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gAppenderAttachableImpl&lt;/structname&gt; structure does not
have any public members.</doc>
      <implements name="AppenderAttachable"/>
      <function name="new"
                c:identifier="log4g_appender_attachable_impl_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new appender attachable implementation object.</doc>
        <return-value>
          <doc xml:space="preserve">A new appender attachable implementation object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="AppenderAttachableImplClass"
            c:type="Log4gAppenderAttachableImplClass"
            glib:is-gtype-struct-for="AppenderAttachableImpl">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gAppenderAttachableImplClass&lt;/structname&gt; structure does
not have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AppenderAttachableInterface"
            c:type="Log4gAppenderAttachableInterface"
            glib:is-gtype-struct-for="AppenderAttachable">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="add_appender">
        <doc xml:space="preserve">Attach an appender to an object.</doc>
        <type name="AppenderAttachableAddAppender"
              c:type="Log4gAppenderAttachableAddAppender"/>
      </field>
      <field name="get_all_appenders" introspectable="0">
        <doc xml:space="preserve">Get all appenders attached to an object.</doc>
        <type name="AppenderAttachableGetAllAppenders"
              c:type="Log4gAppenderAttachableGetAllAppenders"/>
      </field>
      <field name="get_appender" introspectable="0">
        <doc xml:space="preserve">Get an appender attached to an object by name.</doc>
        <type name="AppenderAttachableGetAppender"
              c:type="Log4gAppenderAttachableGetAppender"/>
      </field>
      <field name="is_attached">
        <doc xml:space="preserve">Determine if an appender is attached to an object.</doc>
        <type name="AppenderAttachableIsAttached"
              c:type="Log4gAppenderAttachableIsAttached"/>
      </field>
      <field name="remove_all_appenders">
        <doc xml:space="preserve">Remove all appenders attached to an object.</doc>
        <type name="AppenderAttachableRemoveAllAppenders"
              c:type="Log4gAppenderAttachableRemoveAllAppenders"/>
      </field>
      <field name="remove_appender">
        <doc xml:space="preserve">Remove an appender attached to an object.</doc>
        <type name="AppenderAttachableRemoveAppender"
              c:type="Log4gAppenderAttachableRemoveAppender"/>
      </field>
      <field name="remove_appender_name">
        <doc xml:space="preserve">Remove an appender attached to an object by name.</doc>
        <type name="AppenderAttachableRemoveAppenderName"
              c:type="Log4gAppenderAttachableRemoveAppenderName"/>
      </field>
    </record>
    <callback name="AppenderAttachableIsAttached"
              c:type="Log4gAppenderAttachableIsAttached"
              version="0.1">
      <doc xml:space="preserve">Determine if an appender is attached to an object.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the named appender is attached to @self, %FALSE
         otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">The appender to check.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAttachableRemoveAllAppenders"
              c:type="Log4gAppenderAttachableRemoveAllAppenders"
              version="0.1">
      <doc xml:space="preserve">Remove all attached appenders from an object.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAttachableRemoveAppender"
              c:type="Log4gAppenderAttachableRemoveAppender"
              version="0.1">
      <doc xml:space="preserve">Remove an attached appender from an object.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">The appender to remove.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderAttachableRemoveAppenderName"
              c:type="Log4gAppenderAttachableRemoveAppenderName"
              version="0.1">
      <doc xml:space="preserve">Remove a named appender from an object.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An appender attachable object.</doc>
          <type name="AppenderAttachable" c:type="Log4gAppenderAttachable*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the appender to remove.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AppenderClass"
            c:type="Log4gAppenderClass"
            glib:is-gtype-struct-for="Appender">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_filter">
        <doc xml:space="preserve">Add a filter to the end of the filter chain.</doc>
        <type name="AppenderAddFilter" c:type="Log4gAppenderAddFilter"/>
      </field>
      <field name="get_filter" introspectable="0">
        <doc xml:space="preserve">Get the first filter in the filter chain.</doc>
        <type name="AppenderGetFilter" c:type="Log4gAppenderGetFilter"/>
      </field>
      <field name="close">
        <doc xml:space="preserve">Release all resources.</doc>
        <type name="AppenderClose" c:type="Log4gAppenderClose"/>
      </field>
      <field name="append">
        <doc xml:space="preserve">Perform actial logging.</doc>
        <type name="AppenderAppend" c:type="Log4gAppenderAppend"/>
      </field>
      <field name="do_append">
        <doc xml:space="preserve">Log in an appender-specific way.</doc>
        <type name="AppenderDoAppend" c:type="Log4gAppenderDoAppend"/>
      </field>
      <field name="set_name">
        <doc xml:space="preserve">Set the name of this appender.</doc>
        <type name="AppenderSetName" c:type="Log4gAppenderSetName"/>
      </field>
      <field name="get_name">
        <doc xml:space="preserve">Retrieve the name of this appender.</doc>
        <type name="AppenderGetName" c:type="Log4gAppenderGetName"/>
      </field>
      <field name="set_error_handler">
        <doc xml:space="preserve">Set the error handler for this appender.</doc>
        <type name="AppenderSetErrorHandler"
              c:type="Log4gAppenderSetErrorHandler"/>
      </field>
      <field name="get_error_handler" introspectable="0">
        <doc xml:space="preserve">Retrieve the error handler for this appender.</doc>
        <type name="AppenderGetErrorHandler"
              c:type="Log4gAppenderGetErrorHandler"/>
      </field>
      <field name="set_layout">
        <doc xml:space="preserve">Set the layout for this appender.</doc>
        <type name="AppenderSetLayout" c:type="Log4gAppenderSetLayout"/>
      </field>
      <field name="get_layout" introspectable="0">
        <doc xml:space="preserve">Get the layout for this appender.</doc>
        <type name="AppenderGetLayout" c:type="Log4gAppenderGetLayout"/>
      </field>
      <field name="requires_layout">
        <doc xml:space="preserve">Determine if this appender requires a layout.</doc>
        <type name="AppenderRequiresLayout"
              c:type="Log4gAppenderRequiresLayout"/>
      </field>
      <field name="activate_options">
        <doc xml:space="preserve">Activate all options set for this appender.</doc>
        <type name="AppenderActivateOptions"
              c:type="Log4gAppenderActivateOptions"/>
      </field>
    </record>
    <callback name="AppenderClose" c:type="Log4gAppenderClose" version="0.1">
      <doc xml:space="preserve">Release any resources allocated within the appender such as file
handles, network connections, etc. A closed appender is no longer
usable by the Log4g system.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderDoAppend"
              c:type="Log4gAppenderDoAppend"
              version="0.1">
      <doc xml:space="preserve">Loggers will call this function in order to log events.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">The log event to append.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderGetErrorHandler"
              c:type="Log4gAppenderGetErrorHandler"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve the error handler for an appender.</doc>
      <return-value>
        <doc xml:space="preserve">The error handler object used by @self.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderGetFilter"
              c:type="Log4gAppenderGetFilter"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Filters are organized in a linked list so all filters are available
through the result of this function.</doc>
      <return-value>
        <doc xml:space="preserve">The first filter in the filter chain.</doc>
        <type name="Filter" c:type="Log4gFilter*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderGetLayout"
              c:type="Log4gAppenderGetLayout"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve the layout for this appender.</doc>
      <return-value>
        <doc xml:space="preserve">The layout set for @self.</doc>
        <type name="Layout" c:type="Log4gLayout*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderGetName"
              c:type="Log4gAppenderGetName"
              version="0.1">
      <doc xml:space="preserve">The name uniquely identifies this appender.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The name of @self (may be %NULL).</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderRequiresLayout"
              c:type="Log4gAppenderRequiresLayout"
              version="0.1">
      <doc xml:space="preserve">Configurators may call this method to determine if an appender requires
a layout.

In the exceptional case where an appender accepts a layout but can also
work without it the appender should return %TRUE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if this appender requires a layout, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderSetErrorHandler"
              c:type="Log4gAppenderSetErrorHandler"
              version="0.1">
      <doc xml:space="preserve">Set the error handler for this appender.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="handler" transfer-ownership="none">
          <doc xml:space="preserve">The new error handler object for @self.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderSetLayout"
              c:type="Log4gAppenderSetLayout"
              version="0.1">
      <doc xml:space="preserve">Set the layout for this appender.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve">The new layout for @self.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AppenderSetName"
              c:type="Log4gAppenderSetName"
              version="0.1">
      <doc xml:space="preserve">The name may be used by other components to uniquely identify the
appender.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gAppender object.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The new name for this appender.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="Configurator"
               c:symbol-prefix="configurator"
               c:type="Log4gConfigurator"
               glib:type-name="Log4gConfigurator"
               glib:get-type="log4g_configurator_get_type"
               glib:type-struct="ConfiguratorInterface">
      <virtual-method name="do_configure"
                      invoker="do_configure"
                      version="0.1"
                      throws="1">
        <doc xml:space="preserve">Calls the @do_configure function from the #Log4gConfiguratorInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the configuration was successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A configurator object.</doc>
            <type name="Configurator" c:type="Log4gConfigurator*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">The URI from which load configuration.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="repository" transfer-ownership="none">
            <doc xml:space="preserve">The repository to configure.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="do_configure"
              c:identifier="log4g_configurator_do_configure"
              version="0.1"
              throws="1">
        <doc xml:space="preserve">Calls the @do_configure function from the #Log4gConfiguratorInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the configuration was successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A configurator object.</doc>
            <type name="Configurator" c:type="Log4gConfigurator*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">The URI from which load configuration.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="repository" transfer-ownership="none">
            <doc xml:space="preserve">The repository to configure.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ConfiguratorDoConfigure"
              c:type="Log4gConfiguratorDoConfigure"
              version="0.1"
              throws="1">
      <doc xml:space="preserve">Interpret a resource pointed to a URI and configure Log4g.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the configuration was successful, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A configurator object.</doc>
          <type name="Configurator" c:type="Log4gConfigurator*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">The URI from which load configuration.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="repository" transfer-ownership="none">
          <doc xml:space="preserve">The repository to configure.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ConfiguratorInterface"
            c:type="Log4gConfiguratorInterface"
            glib:is-gtype-struct-for="Configurator">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="do_configure">
        <doc xml:space="preserve">Perform configuration actions.</doc>
        <type name="ConfiguratorDoConfigure"
              c:type="Log4gConfiguratorDoConfigure"/>
      </field>
    </record>
    <class name="DOMConfigurator"
           c:symbol-prefix="dom_configurator"
           c:type="Log4gDOMConfigurator"
           parent="GObject.Object"
           glib:type-name="Log4gDOMConfigurator"
           glib:get-type="log4g_dom_configurator_get_type"
           glib:type-struct="DOMConfiguratorClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDOMConfigurator&lt;/structname&gt; structure does not have
any public members.</doc>
      <implements name="Configurator"/>
      <function name="configure"
                c:identifier="log4g_dom_configurator_configure"
                version="0.1"
                throws="1">
        <doc xml:space="preserve">Configure Log4g by reading a log4g.dtd compliant XML configuration file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the configuration was successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">A file or URI to load the configuration from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="log4g_dom_configurator_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new DOM configurator.</doc>
        <return-value>
          <doc xml:space="preserve">A new DOM configurator object.</doc>
          <type name="Configurator" c:type="Log4gConfigurator*"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DOMConfiguratorClass"
            c:type="Log4gDOMConfiguratorClass"
            glib:is-gtype-struct-for="DOMConfigurator">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDOMConfiguratorClass&lt;/structname&gt; structure does not
have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DefaultLoggerFactory"
           c:symbol-prefix="default_logger_factory"
           c:type="Log4gDefaultLoggerFactory"
           parent="GObject.Object"
           glib:type-name="Log4gDefaultLoggerFactory"
           glib:get-type="log4g_default_logger_factory_get_type"
           glib:type-struct="DefaultLoggerFactoryClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultLoggerFactory&lt;/structname&gt; structure does not
have any public members.</doc>
      <implements name="LoggerFactory"/>
      <function name="new"
                c:identifier="log4g_default_logger_factory_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new default logger factory object.</doc>
        <return-value>
          <doc xml:space="preserve">A new default logger factory object.</doc>
          <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DefaultLoggerFactoryClass"
            c:type="Log4gDefaultLoggerFactoryClass"
            glib:is-gtype-struct-for="DefaultLoggerFactory">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultLoggerFactoryClass&lt;/structname&gt; structure does
not have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DefaultModuleLoader"
           c:symbol-prefix="default_module_loader"
           c:type="Log4gDefaultModuleLoader"
           parent="GObject.Object"
           glib:type-name="Log4gDefaultModuleLoader"
           glib:get-type="log4g_default_module_loader_get_type"
           glib:type-struct="DefaultModuleLoaderClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultModuleLoader&lt;/structname&gt; structure does not
have any public members.</doc>
      <implements name="ModuleLoader"/>
      <function name="new"
                c:identifier="log4g_default_module_loader_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new default repository selector object.</doc>
        <return-value>
          <doc xml:space="preserve">A new default repository selector object.</doc>
          <type name="ModuleLoader" c:type="Log4gModuleLoader*"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DefaultModuleLoaderClass"
            c:type="Log4gDefaultModuleLoaderClass"
            glib:is-gtype-struct-for="DefaultModuleLoader">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultModuleLoaderClass&lt;/structname&gt; structure does
not have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DefaultRepositorySelector"
           c:symbol-prefix="default_repository_selector"
           c:type="Log4gDefaultRepositorySelector"
           parent="GObject.Object"
           glib:type-name="Log4gDefaultRepositorySelector"
           glib:get-type="log4g_default_repository_selector_get_type"
           glib:type-struct="DefaultRepositorySelectorClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultRepositorySelector&lt;/structname&gt; structure does
not have any public members.</doc>
      <implements name="RepositorySelector"/>
      <function name="new"
                c:identifier="log4g_default_repository_selector_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new default repository selector object.</doc>
        <return-value>
          <doc xml:space="preserve">A new default repository selector object.</doc>
          <type name="RepositorySelector" c:type="Log4gRepositorySelector*"/>
        </return-value>
        <parameters>
          <parameter name="repository" transfer-ownership="none">
            <doc xml:space="preserve">The logger repository to be selected.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DefaultRepositorySelectorClass"
            c:type="Log4gDefaultRepositorySelectorClass"
            glib:is-gtype-struct-for="DefaultRepositorySelector">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gDefaultRepositorySelectorClass&lt;/structname&gt; structure
does not have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="Error"
                 c:type="Log4gError"
                 glib:error-domain="log4g-error-quark">
      <member name="failure" value="0" c:identifier="LOG4G_ERROR_FAILURE">
        <doc xml:space="preserve">General Log4g failure</doc>
      </member>
      <member name="max" value="1" c:identifier="LOG4G_ERROR_MAX">
        <doc xml:space="preserve">Sentinel value</doc>
      </member>
    </enumeration>
    <interface name="ErrorHandler"
               c:symbol-prefix="error_handler"
               c:type="Log4gErrorHandler"
               glib:type-name="Log4gErrorHandler"
               glib:get-type="log4g_error_handler_get_type"
               glib:type-struct="ErrorHandlerInterface">
      <virtual-method name="error"
                      invoker="error"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @error function from the #Log4gErrorHandlerInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The event for which the error occurred.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A printf formatted error message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_appender" invoker="set_appender" version="0.1">
        <doc xml:space="preserve">Call the @set_appender function from the #Log4gErrorHandlerInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to set for @self.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_backup_appender"
                      invoker="set_backup_appender"
                      version="0.1">
        <doc xml:space="preserve">Call the @set_backup_appender function from the #Log4gErrorHandlerInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The backup appender to set for @self.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_logger" invoker="set_logger" version="0.1">
        <doc xml:space="preserve">Call the @set_logger function for the #Log4gErrorHandlerInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger to set for @self.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="error"
              c:identifier="log4g_error_handler_error"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @error function from the #Log4gErrorHandlerInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The event for which the error occurred.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A printf formatted error message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">Format parameters.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_appender"
              c:identifier="log4g_error_handler_set_appender"
              version="0.1">
        <doc xml:space="preserve">Call the @set_appender function from the #Log4gErrorHandlerInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to set for @self.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backup_appender"
              c:identifier="log4g_error_handler_set_backup_appender"
              version="0.1">
        <doc xml:space="preserve">Call the @set_backup_appender function from the #Log4gErrorHandlerInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The backup appender to set for @self.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logger"
              c:identifier="log4g_error_handler_set_logger"
              version="0.1">
        <doc xml:space="preserve">Call the @set_logger function for the #Log4gErrorHandlerInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An error handler object.</doc>
            <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger to set for @self.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ErrorHandlerError"
              c:type="Log4gErrorHandlerError"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Invoke this function to handler the error.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An error handler object.</doc>
          <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">The event for which the error occurred.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve">A printf formatted error message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ap" transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ErrorHandlerInterface"
            c:type="Log4gErrorHandlerInterface"
            glib:is-gtype-struct-for="ErrorHandler">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_logger">
        <doc xml:space="preserve">Add a reference to a logger with an attached that failed.</doc>
        <type name="ErrorHandlerSetLogger"
              c:type="Log4gErrorHandlerSetLogger"/>
      </field>
      <field name="error" introspectable="0">
        <callback name="error" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An error handler object.</doc>
              <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve">The event for which the error occurred.</doc>
              <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve">A printf formatted error message.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="ap" transfer-ownership="none">
              <type name="va_list" c:type="va_list"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_appender">
        <doc xml:space="preserve">Set an appender to handle error messages.</doc>
        <type name="ErrorHandlerSetAppender"
              c:type="Log4gErrorHandlerSetAppender"/>
      </field>
      <field name="set_backup_appender">
        <doc xml:space="preserve">Set a backup appender in case of failure.</doc>
        <type name="ErrorHandlerSetBackupAppender"
              c:type="Log4gErrorHandlerSetBackupAppender"/>
      </field>
    </record>
    <callback name="ErrorHandlerSetAppender"
              c:type="Log4gErrorHandlerSetAppender"
              version="0.1">
      <doc xml:space="preserve">Set the appender for which errors are handled.

This function is usually called when the error handler is configured.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An error handler object.</doc>
          <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
        </parameter>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">The appender to set for @self.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ErrorHandlerSetBackupAppender"
              c:type="Log4gErrorHandlerSetBackupAppender"
              version="0.1">
      <doc xml:space="preserve">Set the appender to fall back on in case of failure.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An error handler object.</doc>
          <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
        </parameter>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">The backup appender to set for @self.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ErrorHandlerSetLogger"
              c:type="Log4gErrorHandlerSetLogger"
              version="0.1">
      <doc xml:space="preserve">Add a reference to a logger to which the failing appender might be attached.

The failing appender will be searched an replaced only in the loggers
you add through this method.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">An error handler object.</doc>
          <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
        </parameter>
        <parameter name="logger" transfer-ownership="none">
          <doc xml:space="preserve">The logger to set for @self.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Filter"
           c:symbol-prefix="filter"
           c:type="Log4gFilter"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="Log4gFilter"
           glib:get-type="log4g_filter_get_type"
           glib:type-struct="FilterClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gFilter&lt;/structname&gt; structure does not have any
public members.</doc>
      <virtual-method name="activate_options"
                      invoker="activate_options"
                      version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gFilterClass of @self.

Filters generally need to have their options activated before they can
be used. This class provides a do-nothing implementation for convenience.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gFilter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decide" invoker="decide" version="0.1">
        <doc xml:space="preserve">Calls the @decide function from the #Log4gFilterClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A filter decision based upon the logging event.</doc>
          <type name="FilterDecision" c:type="Log4gFilterDecision"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gFilter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A logging event.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_options"
              c:identifier="log4g_filter_activate_options"
              version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gFilterClass of @self.

Filters generally need to have their options activated before they can
be used. This class provides a do-nothing implementation for convenience.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gFilter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="decide" c:identifier="log4g_filter_decide" version="0.1">
        <doc xml:space="preserve">Calls the @decide function from the #Log4gFilterClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A filter decision based upon the logging event.</doc>
          <type name="FilterDecision" c:type="Log4gFilterDecision"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gFilter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A logging event.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_next"
              c:identifier="log4g_filter_get_next"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the next filter in the chain.

Filters are chained together. This function returns the next filter in
the chain, or %NULL if there are no more.</doc>
        <return-value>
          <doc xml:space="preserve">The next filter in the chain, or \e NULL if there are no more.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gFilter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_next"
              c:identifier="log4g_filter_set_next"
              version="0.1">
        <doc xml:space="preserve">Set the next filter in the chain.

Filters are chained together. This function sets the filter that will
follow this one in the chain.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A filter object.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </instance-parameter>
          <parameter name="next" transfer-ownership="none">
            <doc xml:space="preserve">The filter to set as the next in the chain.</doc>
            <type name="Filter" c:type="Log4gFilter*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <callback name="FilterActivateOptions"
              c:type="Log4gFilterActivateOptions"
              version="0.1">
      <doc xml:space="preserve">Activate all options set for this filter.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gFilter object.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="FilterClass"
            c:type="Log4gFilterClass"
            glib:is-gtype-struct-for="Filter">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="decide">
        <doc xml:space="preserve">Implements the filter decision.</doc>
        <type name="FilterDecide" c:type="Log4gFilterDecide"/>
      </field>
      <field name="activate_options">
        <doc xml:space="preserve">Activate all options set for this filter.</doc>
        <type name="FilterActivateOptions"
              c:type="Log4gFilterActivateOptions"/>
      </field>
    </record>
    <callback name="FilterDecide" c:type="Log4gFilterDecide" version="0.1">
      <doc xml:space="preserve">If the decision is %LOG4G_FILTER_DENY, the even will be dropped. If
the decision is %LOG4G_FILTER_ACCEPT, then any remaining filters
will be invoked. If the decision is %LOG4G_FILTER_ACCEPT the
event will be logged without consulting any other filters in the
chain.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A filter decision based upon the logging event.</doc>
        <type name="FilterDecision" c:type="Log4gFilterDecision"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gFilter object.</doc>
          <type name="Filter" c:type="Log4gFilter*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">A logging event.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FilterDecision" c:type="Log4gFilterDecision">
      <member name="accept" value="1" c:identifier="LOG4G_FILTER_ACCEPT">
        <doc xml:space="preserve">The log event must be logged immediately. The
                      remaining filters (if any) should not be consulted.</doc>
      </member>
      <member name="neutral" value="0" c:identifier="LOG4G_FILTER_NEUTRAL">
        <doc xml:space="preserve">This filter is neutral regarding the event. The
                       remaining filters (if any) should be consulted for a
                       final decision.</doc>
      </member>
      <member name="deny" value="-1" c:identifier="LOG4G_FILTER_DENY">
        <doc xml:space="preserve">The log event must dropped immediately. The remaining
                    filters (if any) should not be consulted.</doc>
      </member>
    </enumeration>
    <class name="Hierarchy"
           c:symbol-prefix="hierarchy"
           c:type="Log4gHierarchy"
           parent="GObject.Object"
           glib:type-name="Log4gHierarchy"
           glib:get-type="log4g_hierarchy_get_type"
           glib:type-struct="HierarchyClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gHierarchy&lt;/structname&gt; structure does not have any
public members.</doc>
      <implements name="LoggerRepository"/>
      <function name="clear"
                c:identifier="log4g_hierarchy_clear"
                version="0.1">
        <doc xml:space="preserve">Clear a logger hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve">The logger hierarchy to clear.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="log4g_hierarchy_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new logger hierarchy.</doc>
        <return-value>
          <doc xml:space="preserve">A new logger hierarchy.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:space="preserve">The root logger for the new hierarchy.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="HierarchyClass"
            c:type="Log4gHierarchyClass"
            glib:is-gtype-struct-for="Hierarchy">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gHierarchyClass&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="LAYOUT_LINE_SEP" value="
" c:type="LOG4G_LAYOUT_LINE_SEP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LOG_DOMAIN" value="" c:type="LOG4G_LOG_DOMAIN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Layout"
           c:symbol-prefix="layout"
           c:type="Log4gLayout"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="Log4gLayout"
           glib:get-type="log4g_layout_get_type"
           glib:type-struct="LayoutClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLayout&lt;/structname&gt; structure does not have any
public members.</doc>
      <virtual-method name="activate_options"
                      invoker="activate_options"
                      version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gLayoutClass of @self.

Layouts generally need to have their options activated before they can be
used. This class provides a do-nothing implementation for convenience.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="format" invoker="format" version="0.1">
        <doc xml:space="preserve">Calls the @format function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The formatted logging event.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object to be laid out.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_content_type"
                      invoker="get_content_type"
                      version="0.1">
        <doc xml:space="preserve">Calls the @get_content_type function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout content type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_footer" invoker="get_footer" version="0.1">
        <doc xml:space="preserve">Calls the @get_footer function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout footer.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_header" invoker="get_header" version="0.1">
        <doc xml:space="preserve">Calls the @get_header function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout header.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate_options"
              c:identifier="log4g_layout_activate_options"
              version="0.1">
        <doc xml:space="preserve">Calls the @activate_options function from the #Log4gLayoutClass of @self.

Layouts generally need to have their options activated before they can be
used. This class provides a do-nothing implementation for convenience.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="format" c:identifier="log4g_layout_format" version="0.1">
        <doc xml:space="preserve">Calls the @format function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The formatted logging event.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object to be laid out.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="log4g_layout_get_content_type"
              version="0.1">
        <doc xml:space="preserve">Calls the @get_content_type function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout content type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_footer"
              c:identifier="log4g_layout_get_footer"
              version="0.1">
        <doc xml:space="preserve">Calls the @get_footer function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout footer.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header"
              c:identifier="log4g_layout_get_header"
              version="0.1">
        <doc xml:space="preserve">Calls the @get_header function from the #Log4gLayoutClass of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The layout header.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A layout object.</doc>
            <type name="Layout" c:type="Log4gLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <callback name="LayoutActivateOptions"
              c:type="Log4gLayoutActivateOptions"
              version="0.1">
      <doc xml:space="preserve">Activate all options set for this layout.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A layout object.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="LayoutClass"
            c:type="Log4gLayoutClass"
            glib:is-gtype-struct-for="Layout">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="format">
        <doc xml:space="preserve">Implement this function to create your own layout format.</doc>
        <type name="LayoutFormat" c:type="Log4gLayoutFormat"/>
      </field>
      <field name="get_content_type">
        <doc xml:space="preserve">Retrieve the content type output by this layout.</doc>
        <type name="LayoutGetContentType" c:type="Log4gLayoutGetContentType"/>
      </field>
      <field name="get_header">
        <doc xml:space="preserve">Retrieve the header for this layout.</doc>
        <type name="LayoutGetHeader" c:type="Log4gLayoutGetHeader"/>
      </field>
      <field name="get_footer">
        <doc xml:space="preserve">Retrieve the footer for this layout.</doc>
        <type name="LayoutGetFooter" c:type="Log4gLayoutGetFooter"/>
      </field>
      <field name="activate_options">
        <doc xml:space="preserve">Activate all options set for this layout.</doc>
        <type name="LayoutActivateOptions"
              c:type="Log4gLayoutActivateOptions"/>
      </field>
    </record>
    <callback name="LayoutFormat" c:type="Log4gLayoutFormat" version="0.1">
      <doc xml:space="preserve">Implement this function to create your own layout format.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The formatted logging event.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A layout object.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">A logging event object to be laid out.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LayoutGetContentType"
              c:type="Log4gLayoutGetContentType"
              version="0.1">
      <doc xml:space="preserve">Retrieve the content type output by this layout.

The base class returns "text/plain".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The layout content type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A layout object.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LayoutGetFooter"
              c:type="Log4gLayoutGetFooter"
              version="0.1">
      <doc xml:space="preserve">Retrieve the footer for the layout format.

The base class returns \e NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The layout footer.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A layout object.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LayoutGetHeader"
              c:type="Log4gLayoutGetHeader"
              version="0.1">
      <doc xml:space="preserve">Retrieve the header for the layout format.

The base class returns \e NULL.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The layout header.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A layout object.</doc>
          <type name="Layout" c:type="Log4gLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Level"
           c:symbol-prefix="level"
           c:type="Log4gLevel"
           parent="GObject.Object"
           glib:type-name="Log4gLevel"
           glib:get-type="log4g_level_get_type"
           glib:type-struct="LevelClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLevel&lt;/structname&gt; structure does not have any public
members.</doc>
      <constructor name="new" c:identifier="log4g_level_new" version="0.1">
        <doc xml:space="preserve">Create a Log4gLevel object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new Log4gLevel object.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The log priority.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve">The string representation of this level.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="syslog" transfer-ownership="none">
            <doc xml:space="preserve">The syslog equivalent of this level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="ALL"
                c:identifier="log4g_level_ALL"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.ALL.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.ALL.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="DEBUG"
                c:identifier="log4g_level_DEBUG"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.DEBUG.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.DEBUG.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="ERROR"
                c:identifier="log4g_level_ERROR"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.ERROR.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.ERROR.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="FATAL"
                c:identifier="log4g_level_FATAL"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.FATAL.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.FATAL.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="INFO"
                c:identifier="log4g_level_INFO"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.INFO.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.INFO.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="OFF"
                c:identifier="log4g_level_OFF"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.OFF.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.OFF.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="TRACE"
                c:identifier="log4g_level_TRACE"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.TRACE.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.TRACE.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="WARN"
                c:identifier="log4g_level_WARN"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the log level #Log4gLevelClass.WARN.</doc>
        <return-value>
          <doc xml:space="preserve">The log level #Log4gLevelClass.WARN.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
      </function>
      <function name="int_to_level"
                c:identifier="log4g_level_int_to_level"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Calls the @int_to_level function from the #Log4gLevelClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The level represented by @level.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">An integer representation of a level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="int_to_level_default"
                c:identifier="log4g_level_int_to_level_default"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Calls the @int_to_level_default from the #Log4gLevelClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The level represented by @level or @def if the conversion failed.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">An integer representation of a level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="def" transfer-ownership="none">
            <doc xml:space="preserve">The level to return if the conversion failed.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </function>
      <function name="string_to_level"
                c:identifier="log4g_level_string_to_level"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Calls the @string_to_level function from the #Log4gLevelClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The level represented by @string.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve">A string representation of a level.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="string_to_level_default"
                c:identifier="log4g_level_string_to_level_default"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Calls the @string_to_level_default function of the #Log4gLevelClass of
@self.</doc>
        <return-value>
          <doc xml:space="preserve">The level represented by @string or @def if the conversion failed.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve">A string representation of a level.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="def" transfer-ownership="none">
            <doc xml:space="preserve">The level to return if the conversion failed.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </function>
      <method name="equals" c:identifier="log4g_level_equals" version="0.1">
        <doc xml:space="preserve">Determine if two log levels are equal.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self &amp; @level are equal, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A level object.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">A level to compare with @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_syslog_equivalent"
              c:identifier="log4g_level_get_syslog_equivalent"
              version="0.1">
        <doc xml:space="preserve">Retrieve the syslog(3) equivalent integer of level object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The syslog equivalent integer of @self.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A level object.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_greater_or_equal"
              c:identifier="log4g_level_is_greater_or_equal"
              version="0.1">
        <doc xml:space="preserve">Determine if a level is greater or equal than another level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @level is greater than or equal to @self, or %FALSE if
         @self is greater than @level.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A level object.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">A level object to compare with @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_int" c:identifier="log4g_level_to_int" version="0.1">
        <doc xml:space="preserve">Retrieve the integer representation of a level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The integer representation of @self.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A level object.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="log4g_level_to_string">
        <doc xml:space="preserve">Retrieve the string representation of a level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representation of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A level object.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LevelClass"
            c:type="Log4gLevelClass"
            glib:is-gtype-struct-for="Level">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="string_to_level" introspectable="0">
        <doc xml:space="preserve">Convert a string passed as an argument to a level.</doc>
        <type name="LevelStringToLevel" c:type="Log4gLevelStringToLevel"/>
      </field>
      <field name="string_to_level_default" introspectable="0">
        <doc xml:space="preserve">Convert a string passed as an argument to a level.</doc>
        <type name="LevelStringToLevelDefault"
              c:type="Log4gLevelStringToLevelDefault"/>
      </field>
      <field name="int_to_level" introspectable="0">
        <doc xml:space="preserve">Convert an integer passed as an argument to a level.</doc>
        <type name="LevelIntToLevel" c:type="Log4gLevelIntToLevel"/>
      </field>
      <field name="int_to_level_default" introspectable="0">
        <doc xml:space="preserve">Convert an integer passed as an argument to a level.</doc>
        <type name="LevelIntToLevelDefault"
              c:type="Log4gLevelIntToLevelDefault"/>
      </field>
      <field name="ALL">
        <doc xml:space="preserve">Has the lowest possible rank and is intended to turn on all logging.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="TRACE">
        <doc xml:space="preserve">Indicates finer-grained information than #Log4gLevelClass.DEBUG.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="DEBUG">
        <doc xml:space="preserve">Indicates fine-grained events that are useful for debugging.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="INFO">
        <doc xml:space="preserve">Indicates messages that highlight the progress of the application at
       a coarse-grained level.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="WARN">
        <doc xml:space="preserve">Indicates potentially harmful situations.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="ERROR">
        <doc xml:space="preserve">Indicates an error event that may allow the application to continue.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="FATAL">
        <doc xml:space="preserve">Indicates a very severe error that will presumably lead the
        application to abort.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
      <field name="OFF">
        <doc xml:space="preserve">Has the highest possible rank and is intended to turn off logging.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </field>
    </record>
    <enumeration name="LevelInt" c:type="Log4gLevelInt">
      <member name="all_int"
              value="-2147483648"
              c:identifier="LOG4G_LEVEL_ALL_INT">
        <doc xml:space="preserve">ALL level integer value</doc>
      </member>
      <member name="trace_int"
              value="5000"
              c:identifier="LOG4G_LEVEL_TRACE_INT">
        <doc xml:space="preserve">TRACE level integer value</doc>
      </member>
      <member name="debug_int"
              value="10000"
              c:identifier="LOG4G_LEVEL_DEBUG_INT">
        <doc xml:space="preserve">DEBUG level integer value</doc>
      </member>
      <member name="info_int"
              value="20000"
              c:identifier="LOG4G_LEVEL_INFO_INT">
        <doc xml:space="preserve">INFO level integer value</doc>
      </member>
      <member name="warn_int"
              value="30000"
              c:identifier="LOG4G_LEVEL_WARN_INT">
        <doc xml:space="preserve">WARN level integer value</doc>
      </member>
      <member name="error_int"
              value="40000"
              c:identifier="LOG4G_LEVEL_ERROR_INT">
        <doc xml:space="preserve">ERROR level integer value</doc>
      </member>
      <member name="fatal_int"
              value="50000"
              c:identifier="LOG4G_LEVEL_FATAL_INT">
        <doc xml:space="preserve">FATAL level integer value</doc>
      </member>
      <member name="off_int"
              value="2147483647"
              c:identifier="LOG4G_LEVEL_OFF_INT">
        <doc xml:space="preserve">OFF level integer value</doc>
      </member>
    </enumeration>
    <callback name="LevelIntToLevel"
              c:type="Log4gLevelIntToLevel"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Convert an integer passed as an argument to a level.</doc>
      <return-value>
        <doc xml:space="preserve">The level represented by @level or DEBUG if the conversion failed.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">An integer representation of a level.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LevelIntToLevelDefault"
              c:type="Log4gLevelIntToLevelDefault"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Convert an integer passed as an argument to a level.</doc>
      <return-value>
        <doc xml:space="preserve">The level represented by @level or @def if the conversion failed.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">An integer representation of a level.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="def" transfer-ownership="none">
          <doc xml:space="preserve">The level to return if the conversion fails.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LevelStringToLevel"
              c:type="Log4gLevelStringToLevel"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Convert a string passed as an argument to a level.</doc>
      <return-value>
        <doc xml:space="preserve">The level represented by @string or DEBUG if the conversion failed.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">A string representation of a level.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LevelStringToLevelDefault"
              c:type="Log4gLevelStringToLevelDefault"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Convert a string passed as an argument to a level.</doc>
      <return-value>
        <doc xml:space="preserve">The level represented by @string or @def if the conversion failed.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">A string representation of a level.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="def" transfer-ownership="none">
          <doc xml:space="preserve">The level to return if the conversion fails.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="LogManager"
           c:symbol-prefix="log_manager"
           c:type="Log4gLogManager"
           parent="GObject.Object"
           glib:type-name="Log4gLogManager"
           glib:get-type="log4g_log_manager_get_type"
           glib:type-struct="LogManagerClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLogManager&lt;/structname&gt; structure does not have any
public members.</doc>
      <function name="exists"
                c:identifier="log4g_log_manager_exists"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve a named logger if it already exists.

If @name does not exist it will not be created.</doc>
        <return-value>
          <doc xml:space="preserve">A logger named @name or %NULL if @name does not exist.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_current_loggers"
                c:identifier="log4g_log_manager_get_current_loggers"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve an array containing all current existing loggers.

&lt;note&gt;&lt;para&gt;
It is the callers responsibility to call g_array_free() for the returned
value.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array containing all current loggers.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
      </function>
      <function name="get_logger"
                c:identifier="log4g_log_manager_get_logger"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve a named logger.

If the named logger does not exist it will be created.</doc>
        <return-value>
          <doc xml:space="preserve">A logger instance.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_logger_factory"
                c:identifier="log4g_log_manager_get_logger_factory"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve a named logger.

If the named logger does not exist it will be created using the provided
logger factory.</doc>
        <return-value>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">The factory to use if @name does not already exist.</doc>
            <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_logger_repository"
                c:identifier="log4g_log_manager_get_logger_repository"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the current logger repository.</doc>
        <return-value>
          <doc xml:space="preserve">The current logger repository.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </return-value>
      </function>
      <function name="get_root_logger"
                c:identifier="log4g_log_manager_get_root_logger"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the root logger.</doc>
        <return-value>
          <doc xml:space="preserve">The root logger.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
      </function>
      <function name="remove_instance"
                c:identifier="log4g_log_manager_remove_instance"
                version="0.1">
        <doc xml:space="preserve">Remove the current log manager instance.

&lt;note&gt;&lt;para&gt;
Do not call this function unless you really know what you are doing.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="reset_configuration"
                c:identifier="log4g_log_manager_reset_configuration"
                version="0.1">
        <doc xml:space="preserve">Reset the configuration for the current logger repository.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="set_repository_selector"
                c:identifier="log4g_log_manager_set_repository_selector"
                version="0.1">
        <doc xml:space="preserve">Sets a new repository selector. If a guard object has been set then it
must be supplied.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">The new repository selector.</doc>
            <type name="RepositorySelector" c:type="Log4gRepositorySelector*"/>
          </parameter>
          <parameter name="guard" transfer-ownership="none">
            <doc xml:space="preserve">The previous guard object (if one was set).</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="shutdown"
                c:identifier="log4g_log_manager_shutdown"
                version="0.1">
        <doc xml:space="preserve">Shut down the current logger repository.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LogManagerClass"
            c:type="Log4gLogManagerClass"
            glib:is-gtype-struct-for="LogManager">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLogManagerClass&lt;/structname&gt; structure does not have
any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Logger"
           c:symbol-prefix="logger"
           c:type="Log4gLogger"
           parent="GObject.Object"
           glib:type-name="Log4gLogger"
           glib:get-type="log4g_logger_get_type"
           glib:type-struct="LoggerClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLogger&lt;/structname&gt; structure does not have any public
members.</doc>
      <implements name="AppenderAttachable"/>
      <constructor name="new" c:identifier="log4g_logger_new" version="0.1">
        <doc xml:space="preserve">Create a new logger object and set its name.

This fuction is intended for internal use. You should not create Loggers
directly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #Log4gLogger object.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The fully qualified name for the new logger.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_logger"
                c:identifier="log4g_logger_get_logger"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve a named logger.

If the named logger already exists, then the existing instance will be
returned. Otherwise a new instance is created.

Loggers inherit their default level from their nearest ancestor with a
set level.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_logger_factory"
                c:identifier="log4g_logger_get_logger_factory"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve a named logger.

If the named logger already exists, then the existing instance will be
returned. Otherwise @factory is used to create a new instance.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">The logger factory to use if a logger named @name does not already
          exist.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_root_logger"
                c:identifier="log4g_logger_get_root_logger"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Retrieve the root logger for the current logger repository.

Calling log4g_logger_get_name() on the root logger always returns the
string "root". Calling log4g_logger_get_logger("root") however does not
retrieve the root logger but a logger just under root named "root".

Calling this function is the only way to retrieve the root logger.</doc>
        <return-value>
          <doc xml:space="preserve">The root logger.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
      </function>
      <virtual-method name="get_effective_level"
                      invoker="get_effective_level"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Calls the @get_effective_level function from the #Log4gLoggerClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The effective level threshold of @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_level" invoker="set_level" version="0.1">
        <doc xml:space="preserve">Calls the @set_level function from the #Log4gLoggerClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The new log level threshold for @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_appender"
              c:identifier="log4g_logger_add_appender"
              version="0.1">
        <doc xml:space="preserve">Add an appender to the list of appenders for @self.

If @appender is already in the list of appenders for @self then
it will not be added again.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender to add to @self.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_appenders"
              c:identifier="log4g_logger_call_appenders"
              version="0.1">
        <doc xml:space="preserve">Append a logging event to all appenders attached to this logger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">An event to log.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_nested_appenders"
              c:identifier="log4g_logger_close_nested_appenders"
              version="0.1">
        <doc xml:space="preserve">Close all attached appenders implementing the #Log4gAppenderAttachable
interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="forced_log"
              c:identifier="log4g_logger_forced_log"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Create and log a new event without further checks.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The level of the log event.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
          <parameter name="function" transfer-ownership="none">
            <doc xml:space="preserve">The function where the event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">The file where the event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve">The line in @file where the event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">A printf message format.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve">Format parameters.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_additivity"
              c:identifier="log4g_logger_get_additivity"
              version="0.1">
        <doc xml:space="preserve">Retrieve the additivity flag for a logger.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is additive, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_appenders"
              c:identifier="log4g_logger_get_all_appenders"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve all appenders attached to a @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GArray of appenders attached to @self or %NULL if there are
         none.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_appender"
              c:identifier="log4g_logger_get_appender"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve an appender attached to a logger by name.</doc>
        <return-value>
          <doc xml:space="preserve">The appender named @name or %NULL if no such appender is attached.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_effective_level"
              c:identifier="log4g_logger_get_effective_level"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Calls the @get_effective_level function from the #Log4gLoggerClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The effective level threshold of @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="log4g_logger_get_level"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the level threshold of a logger.</doc>
        <return-value>
          <doc xml:space="preserve">The log level threshold of @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logger_repository"
              c:identifier="log4g_logger_get_logger_repository"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the repository where a logger is attached. See
#Log4gLoggerRepositoryInterface.</doc>
        <return-value>
          <doc xml:space="preserve">The logger repository @self is attached to.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="log4g_logger_get_name"
              version="0.1">
        <doc xml:space="preserve">Retrieve the fully-qualified name of a logger.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="log4g_logger_get_parent"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the parent of this logger.

&lt;note&gt;&lt;para&gt;
The parent of a logger may change during its lifetime. The root logger
will return %NULL.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value>
          <doc xml:space="preserve">The parent of @self.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_attached"
              c:identifier="log4g_logger_is_attached"
              version="0.1">
        <doc xml:space="preserve">Determine if an appender is attached to a logger.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @appender is attached to @self, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">An appender object.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_debug_enabled"
              c:identifier="log4g_logger_is_debug_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_DEBUG level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_DEBUG level, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_error_enabled"
              c:identifier="log4g_logger_is_error_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_ERROR level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_ERROR level, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_fatal_enabled"
              c:identifier="log4g_logger_is_fatal_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_FATAL level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_FATAL level, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_info_enabled"
              c:identifier="log4g_logger_is_info_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_INFO level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_INFO level, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_trace_enabled"
              c:identifier="log4g_logger_is_trace_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_TRACE level.

This function is useful if you have a to perform a costly operation to
construct a log message.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_TRACE level, %FALSE
        otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_warn_enabled"
              c:identifier="log4g_logger_is_warn_enabled"
              version="0.1">
        <doc xml:space="preserve">Check if a logger is enabled for the @LOG4G_LEVEL_WARN level.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is enabled for the @LOG4G_LEVEL_WARN level, %FALSE
         otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_all_appenders"
              c:identifier="log4g_logger_remove_all_appenders"
              version="0.1">
        <doc xml:space="preserve">Remove all appenders from a logger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_appender"
              c:identifier="log4g_logger_remove_appender"
              version="0.1">
        <doc xml:space="preserve">Remove an appender from a logger.

If @appender is not attached to @self then this function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">An appender to remove.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_appender_name"
              c:identifier="log4g_logger_remove_appender_name"
              version="0.1">
        <doc xml:space="preserve">Remove an appender from a logger by name.

If @name is not found then this function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the appender to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_additivity"
              c:identifier="log4g_logger_set_additivity"
              version="0.1">
        <doc xml:space="preserve">Set the additivity flag for a logger.

Logger additivity determines if a logger inherits the appenders of its
ancestors. If this flag is set to %TRUE (the default value is %TRUE)
then events logged to this logger will be propagated to the appenders of
its ancestors. If this flags is set to %FALSE then the appenders of this
logger will not be inherited.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="additive" transfer-ownership="none">
            <doc xml:space="preserve">The new additivity flag for @self.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level"
              c:identifier="log4g_logger_set_level"
              version="0.1">
        <doc xml:space="preserve">Calls the @set_level function from the #Log4gLoggerClass of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The new log level threshold for @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logger_repository"
              c:identifier="log4g_logger_set_logger_repository"
              version="0.1">
        <doc xml:space="preserve">Set the repository a logger is attached to.

You probably do not want to call this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="repository" transfer-ownership="none">
            <doc xml:space="preserve">The new repository to attach to @self.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="log4g_logger_set_name"
              version="0.1">
        <doc xml:space="preserve">Set the name of a logger.

This method should only be called by sub-classes. Calling this method on
a logger in the logger repository will have disastrous effects on the
logger hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The new name of @self.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent"
              c:identifier="log4g_logger_set_parent"
              version="0.1">
        <doc xml:space="preserve">Set the parent of a logger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #Log4gLogger object.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">The new parent of @self.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LoggerClass"
            c:type="Log4gLoggerClass"
            glib:is-gtype-struct-for="Logger">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_effective_level" introspectable="0">
        <doc xml:space="preserve">Retrieve the effective level threshold of the logger.</doc>
        <type name="LoggerGetEffectiveLevel"
              c:type="Log4gLoggerGetEffectiveLevel"/>
      </field>
      <field name="set_level">
        <doc xml:space="preserve">Set the level threshold of the logger.</doc>
        <type name="LoggerSetLevel" c:type="Log4gLoggerSetLevel"/>
      </field>
    </record>
    <interface name="LoggerFactory"
               c:symbol-prefix="logger_factory"
               c:type="Log4gLoggerFactory"
               glib:type-name="Log4gLoggerFactory"
               glib:get-type="log4g_logger_factory_get_type"
               glib:type-struct="LoggerFactoryInterface">
      <virtual-method name="make_new_logger_instance"
                      invoker="make_new_logger_instance"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @make_new_logger_instance function from the
#Log4gLoggerFactoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">A new logger named \e name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger factory object.</doc>
            <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="make_new_logger_instance"
              c:identifier="log4g_logger_factory_make_new_logger_instance"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @make_new_logger_instance function from the
#Log4gLoggerFactoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">A new logger named \e name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger factory object.</doc>
            <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="LoggerFactoryInterface"
            c:type="Log4gLoggerFactoryInterface"
            glib:is-gtype-struct-for="LoggerFactory">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="make_new_logger_instance" introspectable="0">
        <doc xml:space="preserve">Create a new logger object.</doc>
        <type name="LoggerFactoryMakeNewLoggerInstance"
              c:type="Log4gLoggerFactoryMakeNewLoggerInstance"/>
      </field>
    </record>
    <callback name="LoggerFactoryMakeNewLoggerInstance"
              c:type="Log4gLoggerFactoryMakeNewLoggerInstance"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Create a new logger object.</doc>
      <return-value>
        <doc xml:space="preserve">A new logger named \e name.</doc>
        <type name="Logger" c:type="Log4gLogger*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger factory object.</doc>
          <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the logger to create.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerGetEffectiveLevel"
              c:type="Log4gLoggerGetEffectiveLevel"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Starting from this category, search the category hierarchy for a
non-%NULL and return it. If a non-%NULL level is not found, this
function returns the level of the root logger.</doc>
      <return-value>
        <doc xml:space="preserve">The effective level threshold of @self.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gLogger object.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="LoggerRepository"
               c:symbol-prefix="logger_repository"
               c:type="Log4gLoggerRepository"
               glib:type-name="Log4gLoggerRepository"
               glib:get-type="log4g_logger_repository_get_type"
               glib:type-struct="LoggerRepositoryInterface">
      <virtual-method name="emit_no_appender_warning"
                      invoker="emit_no_appender_warning"
                      version="0.1">
        <doc xml:space="preserve">Call the @emit_no_appender_warning function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger that produced the warning.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="exists"
                      invoker="exists"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @exists function from the #Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name or %NULL if it does not exist.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_current_loggers"
                      invoker="get_current_loggers"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_current_loggers function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array containing all loggers in the repository or %NULL
         if there are none.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_logger"
                      invoker="get_logger"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_logger function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_logger_factory"
                      invoker="get_logger_factory"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_logger_factory function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">The factory to use.</doc>
            <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_root_logger"
                      invoker="get_root_logger"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_root_logger function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The root logger.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_threshold"
                      invoker="get_threshold"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_threshold function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The threshold level for @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_disabled" invoker="is_disabled" version="0.1">
        <doc xml:space="preserve">Call the @is_disabled function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is disabled for @level, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The integer representation of a log level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset_configuration"
                      invoker="reset_configuration"
                      version="0.1">
        <doc xml:space="preserve">Call the @reset_configuration function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_threshold"
                      invoker="set_threshold"
                      version="0.1">
        <doc xml:space="preserve">Call the @set_threshold function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The new threshold for @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_threshold_string"
                      invoker="set_threshold_string"
                      version="0.1">
        <doc xml:space="preserve">Call the @set_threshold_string function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The new threshold level name to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="shutdown" invoker="shutdown" version="0.1">
        <doc xml:space="preserve">Call the @shutdown function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="emit_add_appender_signal"
              c:identifier="log4g_logger_repository_emit_add_appender_signal"
              version="0.1">
        <doc xml:space="preserve">Emit the the add-appender signal of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger from to @appender was added.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender that was added.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_no_appender_warning"
              c:identifier="log4g_logger_repository_emit_no_appender_warning"
              version="0.1">
        <doc xml:space="preserve">Call the @emit_no_appender_warning function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger that produced the warning.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_remove_appender_signal"
              c:identifier="log4g_logger_repository_emit_remove_appender_signal"
              version="0.1">
        <doc xml:space="preserve">Emit the remove-appender signal of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The logger from which @appender was removed.</doc>
            <type name="Logger" c:type="Log4gLogger*"/>
          </parameter>
          <parameter name="appender" transfer-ownership="none">
            <doc xml:space="preserve">The appender that was removed.</doc>
            <type name="Appender" c:type="Log4gAppender*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exists"
              c:identifier="log4g_logger_repository_exists"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @exists function from the #Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name or %NULL if it does not exist.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_loggers"
              c:identifier="log4g_logger_repository_get_current_loggers"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_current_loggers function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array containing all loggers in the repository or %NULL
         if there are none.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logger"
              c:identifier="log4g_logger_repository_get_logger"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_logger function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_logger_factory"
              c:identifier="log4g_logger_repository_get_logger_factory"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_logger_factory function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger named @name.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">The factory to use.</doc>
            <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_logger"
              c:identifier="log4g_logger_repository_get_root_logger"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_root_logger function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The root logger.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_threshold"
              c:identifier="log4g_logger_repository_get_threshold"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_threshold function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The threshold level for @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disabled"
              c:identifier="log4g_logger_repository_is_disabled"
              version="0.1">
        <doc xml:space="preserve">Call the @is_disabled function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self is disabled for @level, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The integer representation of a log level.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_configuration"
              c:identifier="log4g_logger_repository_reset_configuration"
              version="0.1">
        <doc xml:space="preserve">Call the @reset_configuration function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_threshold"
              c:identifier="log4g_logger_repository_set_threshold"
              version="0.1">
        <doc xml:space="preserve">Call the @set_threshold function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The new threshold for @self.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_threshold_string"
              c:identifier="log4g_logger_repository_set_threshold_string"
              version="0.1">
        <doc xml:space="preserve">Call the @set_threshold_string function from the
#Log4gLoggerRepositoryInterface of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve">The name of the new threshold to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown"
              c:identifier="log4g_logger_repository_shutdown"
              version="0.1">
        <doc xml:space="preserve">Call the @shutdown function from the #Log4gLoggerRepositoryInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logger repository object.</doc>
            <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="add-appender" when="first" detailed="1">
        <doc xml:space="preserve">The ::add-appender signal is emitted when an appender is added to
a logger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-appender" when="first" detailed="1">
        <doc xml:space="preserve">The ::remove-appender signal is emitted when an appender is removed
from a logger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <callback name="LoggerRepositoryEmitNoAppenderWarning"
              c:type="Log4gLoggerRepositoryEmitNoAppenderWarning">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="logger" transfer-ownership="none">
          <doc xml:space="preserve">The logger that produced the warning.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryExists"
              c:type="Log4gLoggerRepositoryExists"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Determine if a named logger exists.

If the named logger does not exist it is not created.</doc>
      <return-value>
        <doc xml:space="preserve">The logger named @name or %NULL if it does not exist.</doc>
        <type name="Logger" c:type="Log4gLogger*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the logger to check.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryGetCurrentLoggers"
              c:type="Log4gLoggerRepositoryGetCurrentLoggers"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve all loggers in the repository.

&lt;note&gt;&lt;para&gt;
It is the responsibility of the caller to call g_array_free() for the
returned value.
&lt;/para&gt;&lt;/note&gt;</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">An array containing all loggers in the repository or %NULL
         if there are none.</doc>
        <array name="GLib.Array" c:type="const GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryGetLogger"
              c:type="Log4gLoggerRepositoryGetLogger"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve a named logger from the repository.

If the logger named @name does not already exist it should be
created and added to the repository.</doc>
      <return-value>
        <doc xml:space="preserve">The logger named @name.</doc>
        <type name="Logger" c:type="Log4gLogger*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the logger to retrieve.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryGetLoggerFactory"
              c:type="Log4gLoggerRepositoryGetLoggerFactory"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve a named logger from the repository.

If the logger named @name does not already exist it should be
created using @factory and added to the repository.</doc>
      <return-value>
        <doc xml:space="preserve">The logger named @name.</doc>
        <type name="Logger" c:type="Log4gLogger*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the logger to retrieve.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="factory" transfer-ownership="none">
          <doc xml:space="preserve">The factory to use.</doc>
          <type name="LoggerFactory" c:type="Log4gLoggerFactory*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryGetRootLogger"
              c:type="Log4gLoggerRepositoryGetRootLogger"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve the root logger.</doc>
      <return-value>
        <doc xml:space="preserve">The root logger.</doc>
        <type name="Logger" c:type="Log4gLogger*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryGetThreshold"
              c:type="Log4gLoggerRepositoryGetThreshold"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve the repository threshold.</doc>
      <return-value>
        <doc xml:space="preserve">The threshold level for @self.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="LoggerRepositoryInterface"
            c:type="Log4gLoggerRepositoryInterface"
            glib:is-gtype-struct-for="LoggerRepository">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="exists" introspectable="0">
        <doc xml:space="preserve">Determine if a given logger exists in the repository.</doc>
        <type name="LoggerRepositoryExists"
              c:type="Log4gLoggerRepositoryExists"/>
      </field>
      <field name="get_current_loggers" introspectable="0">
        <doc xml:space="preserve">Get all loggers in the repository.</doc>
        <type name="LoggerRepositoryGetCurrentLoggers"
              c:type="Log4gLoggerRepositoryGetCurrentLoggers"/>
      </field>
      <field name="get_logger" introspectable="0">
        <doc xml:space="preserve">Get an existing logger or create a new one.</doc>
        <type name="LoggerRepositoryGetLogger"
              c:type="Log4gLoggerRepositoryGetLogger"/>
      </field>
      <field name="get_logger_factory" introspectable="0">
        <doc xml:space="preserve">Get an existing logger or create it with a factory.</doc>
        <type name="LoggerRepositoryGetLoggerFactory"
              c:type="Log4gLoggerRepositoryGetLoggerFactory"/>
      </field>
      <field name="get_root_logger" introspectable="0">
        <doc xml:space="preserve">Get the root logger.</doc>
        <type name="LoggerRepositoryGetRootLogger"
              c:type="Log4gLoggerRepositoryGetRootLogger"/>
      </field>
      <field name="get_threshold" introspectable="0">
        <doc xml:space="preserve">Get the repository threshold.</doc>
        <type name="LoggerRepositoryGetThreshold"
              c:type="Log4gLoggerRepositoryGetThreshold"/>
      </field>
      <field name="is_disabled">
        <doc xml:space="preserve">Determine if the repository is disabled at a given level.</doc>
        <type name="LoggerRepositoryIsDisabled"
              c:type="Log4gLoggerRepositoryIsDisabled"/>
      </field>
      <field name="reset_configuration">
        <doc xml:space="preserve">Reset the repository configuration.</doc>
        <type name="LoggerRepositoryResetConfiguration"
              c:type="Log4gLoggerRepositoryResetConfiguration"/>
      </field>
      <field name="set_threshold">
        <doc xml:space="preserve">Set the repository threshold.</doc>
        <type name="LoggerRepositorySetThreshold"
              c:type="Log4gLoggerRepositorySetThreshold"/>
      </field>
      <field name="set_threshold_string">
        <doc xml:space="preserve">Set the repository threshold by string value.</doc>
        <type name="LoggerRepositorySetThresholdString"
              c:type="Log4gLoggerRepositorySetThresholdString"/>
      </field>
      <field name="shutdown">
        <doc xml:space="preserve">Shut down the logger repository.</doc>
        <type name="LoggerRepositoryShutdown"
              c:type="Log4gLoggerRepositoryShutdown"/>
      </field>
      <field name="emit_no_appender_warning">
        <doc xml:space="preserve">Emit a warning if no appenders are attached.</doc>
        <type name="LoggerRepositoryEmitNoAppenderWarning"
              c:type="Log4gLoggerRepositoryEmitNoAppenderWarning"/>
      </field>
    </record>
    <callback name="LoggerRepositoryIsDisabled"
              c:type="Log4gLoggerRepositoryIsDisabled"
              version="0.1">
      <doc xml:space="preserve">Determine if the repository is disabled for a given log level.

\see #Log4gLevelClass, #Log4gLoggerRepositoryInterface.set_threshold</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @self is disabled for @level, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">The integer representation of a log level.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryResetConfiguration"
              c:type="Log4gLoggerRepositoryResetConfiguration"
              version="0.1">
      <doc xml:space="preserve">Reset a repository to its initial state.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositorySetThreshold"
              c:type="Log4gLoggerRepositorySetThreshold"
              version="0.1">
      <doc xml:space="preserve">Set the repository threshold.

All logging requests below the threshold are immediately dropped.
By default the threshold is set to @ALL, which has the lowest
possible rank.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">The new threshold for @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositorySetThresholdString"
              c:type="Log4gLoggerRepositorySetThresholdString"
              version="0.1">
      <doc xml:space="preserve">Set the repository threshold from a string.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">The new threshold level name to set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerRepositoryShutdown"
              c:type="Log4gLoggerRepositoryShutdown"
              version="0.1">
      <doc xml:space="preserve">Shutdown the repository.

Once the repository is shut down it cannot be used by the Log4g system.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logger repository object.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LoggerSetLevel" c:type="Log4gLoggerSetLevel" version="0.1">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A #Log4gLogger object.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">The new log level threshold for @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="LoggingEvent"
           c:symbol-prefix="logging_event"
           c:type="Log4gLoggingEvent"
           parent="GObject.Object"
           glib:type-name="Log4gLoggingEvent"
           glib:get-type="log4g_logging_event_get_type"
           glib:type-struct="LoggingEventClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gLoggingEvent&lt;/structname&gt; structure does not have any
public members.</doc>
      <constructor name="new"
                   c:identifier="log4g_logging_event_new"
                   version="0.1"
                   introspectable="0">
        <doc xml:space="preserve">Create a new logging event.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new logging event object.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </return-value>
        <parameters>
          <parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve">The name of the logger that is creating this event.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The log level of this event.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
          <parameter name="function" transfer-ownership="none">
            <doc xml:space="preserve">The function where this event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">The file where this event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve">The line in @file where this event was logged.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A printf formatted log message.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve">Format parameters.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_start_time"
                c:identifier="log4g_logging_event_get_start_time"
                version="0.1">
        <doc xml:space="preserve">Retrieve the time when the log system was initialized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of seconds elapsed since the Unix epoch when the log
        system was initialized</doc>
          <type name="glong" c:type="glong"/>
        </return-value>
      </function>
      <virtual-method name="get_level"
                      invoker="get_level"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Calls the @get_level function from the #Log4gLoggingEventClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The log level of @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_file_name"
              c:identifier="log4g_logging_event_get_file_name"
              version="0.1">
        <doc xml:space="preserve">Retrieve the file where a logging event was logged.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The file where @self was logged.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_info"
              c:identifier="log4g_logging_event_get_full_info"
              version="0.1">
        <doc xml:space="preserve">Retrieve the full location information where a logging event was logged.

The full location information is in the format:

|[
function(file:line)
]|</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The full log location information for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_function_name"
              c:identifier="log4g_logging_event_get_function_name"
              version="0.1">
        <doc xml:space="preserve">Retrieve the function where a logging event was logged.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The function where @self was logged.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="log4g_logging_event_get_level"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Calls the @get_level function from the #Log4gLoggingEventClass of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The log level of @self.</doc>
          <type name="Level" c:type="Log4gLevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_number"
              c:identifier="log4g_logging_event_get_line_number"
              version="0.1">
        <doc xml:space="preserve">Retrieve the line number where a logging event was logged.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The line number where @self was logged.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logger_name"
              c:identifier="log4g_logging_event_get_logger_name"
              version="0.1">
        <doc xml:space="preserve">Retrieve the name of the logger that created a logging event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the logger that created @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdc"
              c:identifier="log4g_logging_event_get_mdc"
              version="0.1">
        <doc xml:space="preserve">Retrieve a mapped data context value for a logging event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The MDC value for @key.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A mapped data context key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mdc_copy"
              c:identifier="log4g_logging_event_get_mdc_copy"
              version="0.1">
        <doc xml:space="preserve">Copy the current mapped data context into a logging event.

Asynchronous appenders should call this function.

@See #Log4gMDC</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="log4g_logging_event_get_message"
              version="0.1">
        <doc xml:space="preserve">Retrieve the log message.

This function is equivalent to log4g_logging_event_get_rendered_message().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The log message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ndc"
              c:identifier="log4g_logging_event_get_ndc"
              version="0.1">
        <doc xml:space="preserve">Retrieve the nested data context for a logging event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The rendered NDC string for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ndc_copy"
              c:identifier="log4g_logging_event_get_ndc_copy"
              version="0.1">
        <doc xml:space="preserve">Copy the current nested data context into a logging event.

Asynchronous appenders should call this function.

@See #Log4gNDC</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_property_key_set"
              c:identifier="log4g_logging_event_get_property_key_set"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Get the MDC keys (if any) for this event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array of keys, or %NULL if no keys exist.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rendered_message"
              c:identifier="log4g_logging_event_get_rendered_message"
              version="0.1">
        <doc xml:space="preserve">Retrieve the rendered logging message.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The rendered logging message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thread_copy"
              c:identifier="log4g_logging_event_get_thread_copy">
        <doc xml:space="preserve">Copy the current thread name into a logging object.

Asynchronous appenders should call this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thread_name"
              c:identifier="log4g_logging_event_get_thread_name"
              version="0.1">
        <doc xml:space="preserve">Retrieve the name of the thread where a logging event was logged.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the thread where @self was logged.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_stamp"
              c:identifier="log4g_logging_event_get_time_stamp"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the timestamp of a logging event.</doc>
        <return-value>
          <doc xml:space="preserve">The timestamp of @self.</doc>
          <type name="GLib.TimeVal" c:type="GTimeVal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A logging event object.</doc>
            <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LoggingEventClass"
            c:type="Log4gLoggingEventClass"
            glib:is-gtype-struct-for="LoggingEvent">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="start" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="get_level" introspectable="0">
        <doc xml:space="preserve">Retrieve the log level of a logging event.</doc>
        <type name="LoggingEventGetLevel" c:type="Log4gLoggingEventGetLevel"/>
      </field>
    </record>
    <callback name="LoggingEventGetLevel"
              c:type="Log4gLoggingEventGetLevel"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Retrieve the log level of a logging event.</doc>
      <return-value>
        <doc xml:space="preserve">The log level of @self.</doc>
        <type name="Level" c:type="Log4gLevel*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A logging event object.</doc>
          <type name="LoggingEvent" c:type="Log4gLoggingEvent*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="MDC"
           c:symbol-prefix="mdc"
           c:type="Log4gMDC"
           parent="GObject.Object"
           glib:type-name="Log4gMDC"
           glib:get-type="log4g_mdc_get_type"
           glib:type-struct="MDCClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gMDC&lt;/structname&gt; structure does not have any public
members.</doc>
      <function name="get" c:identifier="log4g_mdc_get" version="0.1">
        <doc xml:space="preserve">Retrieve a the context value associated with a @key from the current
thread's context map.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The context value associated with @key.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to retrieve.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_context"
                c:identifier="log4g_mdc_get_context"
                version="0.1">
        <doc xml:space="preserve">Retrieve the current thread's MDC as a hash table.

This function is used internally by appenders that log asynchronously.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The current MDC context as a hash table.</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </function>
      <function name="put"
                c:identifier="log4g_mdc_put"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Put a context @value as identified by a @key into the current thread's
context map.

If a context map has not been created for the current thread it will be
created as a side-effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to associate with @value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to associate with @key (accepts printf formats).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">Format parameters.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="remove" c:identifier="log4g_mdc_remove" version="0.1">
        <doc xml:space="preserve">Remove a context value associated with a @key from the current thread's
context map.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MDCClass"
            c:type="Log4gMDCClass"
            glib:is-gtype-struct-for="MDC">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gMDCClass&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Module"
           c:symbol-prefix="module"
           c:type="Log4gModule"
           parent="GObject.TypeModule"
           glib:type-name="Log4gModule"
           glib:get-type="log4g_module_get_type"
           glib:type-struct="ModuleClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gModule&lt;/structname&gt; structure does not have any public
members.</doc>
      <implements name="GObject.TypePlugin"/>
      <constructor name="new" c:identifier="log4g_module_new" version="0.1">
        <doc xml:space="preserve">Create a new module.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new module object.</doc>
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">The path of the file to load as a module.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="load" c:identifier="log4g_module_load" version="0.1">
        <doc xml:space="preserve">Extension modules must implement this function.

This function is run after the module has been loaded in order to load
dynamic types for use by the Log4g system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve">A Log4gModule object.</doc>
            <type name="GObject.TypeModule" c:type="GTypeModule*"/>
          </parameter>
        </parameters>
      </function>
      <property name="filename"
                version="0.1"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The filename of the external module to load.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.TypeModule" c:type="GTypeModule"/>
      </field>
    </class>
    <record name="ModuleClass"
            c:type="Log4gModuleClass"
            glib:is-gtype-struct-for="Module">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gModuleClass&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.TypeModuleClass" c:type="GTypeModuleClass"/>
      </field>
    </record>
    <interface name="ModuleLoader"
               c:symbol-prefix="module_loader"
               c:type="Log4gModuleLoader"
               glib:type-name="Log4gModuleLoader"
               glib:get-type="log4g_module_loader_get_type"
               glib:type-struct="ModuleLoaderInterface">
      <virtual-method name="load_modules" invoker="load_modules" version="0.1">
        <doc xml:space="preserve">Call the @load_modules function from the #Log4gModuleLoaderInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A module loader object.</doc>
            <type name="ModuleLoader" c:type="Log4gModuleLoader*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="load_modules"
              c:identifier="log4g_module_loader_load_modules"
              version="0.1">
        <doc xml:space="preserve">Call the @load_modules function from the #Log4gModuleLoaderInterface
of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A module loader object.</doc>
            <type name="ModuleLoader" c:type="Log4gModuleLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ModuleLoaderInterface"
            c:type="Log4gModuleLoaderInterface"
            glib:is-gtype-struct-for="ModuleLoader">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load_modules">
        <doc xml:space="preserve">Load external modules.</doc>
        <type name="ModuleLoaderLoadModules"
              c:type="Log4gModuleLoaderLoadModules"/>
      </field>
    </record>
    <callback name="ModuleLoaderLoadModules"
              c:type="Log4gModuleLoaderLoadModules"
              version="0.1">
      <doc xml:space="preserve">Load external modules for the current application context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A module loader object.</doc>
          <type name="ModuleLoader" c:type="Log4gModuleLoader*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="NDC"
           c:symbol-prefix="ndc"
           c:type="Log4gNDC"
           parent="GObject.Object"
           glib:type-name="Log4gNDC"
           glib:get-type="log4g_ndc_get_type"
           glib:type-struct="NDCClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gNDC&lt;/structname&gt; structure does not have any public
members.</doc>
      <function name="clear" c:identifier="log4g_ndc_clear" version="0.1">
        <doc xml:space="preserve">Clear current nested data context.

This function is useful when a thread is used again in a different
unrelated context (e.g. thread pools).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="clone"
                c:identifier="log4g_ndc_clone"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Clone the current nested data context.

Another thread may inherit the value returned by this function by calling
log4g_ndc_inherit().

&lt;note&gt;&lt;para&gt;
The caller is responsible for calling g_array_free() or log4g_ndc_inherit()
for the returned value.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value>
          <doc xml:space="preserve">A clone of the current nested data context.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
      </function>
      <function name="get" c:identifier="log4g_ndc_get" version="0.1">
        <doc xml:space="preserve">Retrieve the current diagnostic context formatted as a string.

&lt;note&gt;&lt;para&gt;
You should call log4g_logging_event_get_ndc() instead of this function.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The current diagnostic context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="inherit"
                c:identifier="log4g_ndc_inherit"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Inherit a cloned nested data context.

&lt;note&gt;&lt;para&gt;
After calling this function the caller should no longer reference @stack.
&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">A cloned nested data context.</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="peek" c:identifier="log4g_ndc_peek" version="0.1">
        <doc xml:space="preserve">Look at the innermost diagnostic context without removing it.

The returned value is the the value that most recently added with
log4g_ndc_push(). If no context is available, this function returns
%NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The innermost diagnostic context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="pop" c:identifier="log4g_ndc_pop" version="0.1">
        <doc xml:space="preserve">Call this function before leaving a diagnostic context.

The returned value is the the value that most recently added with
log4g_ndc_push(). If no context is available, this function returns
%NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The innermost diagnostic context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="push"
                c:identifier="log4g_ndc_push"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Push new diagnostic context information for the current thread.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A NDC message (accepts printf formats).</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">Format parameters.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="remove" c:identifier="log4g_ndc_remove" version="0.1">
        <doc xml:space="preserve">Remove all diagnostic context for the current thread.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="set_max_depth"
                c:identifier="log4g_ndc_set_max_depth"
                version="0.1">
        <doc xml:space="preserve">Set the maximum depth of the current diagnostic context.

If the current depth is smaller or equal to @maxdepth then no action
is taken.

This function is a convenient alternative to calling log4g_ndc_pop()
multiple times. The following code example will preserve the depth of the
diagnostic context stack after a complex sequence of calls:

|[
void foo()
{
    guint depth = log4g_ndc_get_size();
    ... complex sequence of calls ...
    log4g_ndc_set_max_depth(depth);
}
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="maxdepth" transfer-ownership="none">
            <doc xml:space="preserve">The new size to truncate the context stack to.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="size" c:identifier="log4g_ndc_size" version="0.1">
        <doc xml:space="preserve">Retrieve the size (depth) of the current nested data context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of elements on the nested data context stack.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="NDCClass"
            c:type="Log4gNDCClass"
            glib:is-gtype-struct-for="NDC">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gNDCClass&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="OnlyOnceErrorHandler"
           c:symbol-prefix="only_once_error_handler"
           c:type="Log4gOnlyOnceErrorHandler"
           parent="GObject.Object"
           glib:type-name="Log4gOnlyOnceErrorHandler"
           glib:get-type="log4g_only_once_error_handler_get_type"
           glib:type-struct="OnlyOnceErrorHandlerClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gOnlyOnceErrorHandler&lt;/structname&gt; structure does not
have any public members.</doc>
      <implements name="ErrorHandler"/>
      <function name="new"
                c:identifier="log4g_only_once_error_handler_new"
                version="0.1"
                introspectable="0">
        <doc xml:space="preserve">Create a new only once error handler object.</doc>
        <return-value>
          <doc xml:space="preserve">A new only once error handler object.</doc>
          <type name="ErrorHandler" c:type="Log4gErrorHandler*"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="OnlyOnceErrorHandlerClass"
            c:type="Log4gOnlyOnceErrorHandlerClass"
            glib:is-gtype-struct-for="OnlyOnceErrorHandler">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gOnlyOnceErrorHandlerClass&lt;/structname&gt; structure does
not have any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ProvisionNode"
           c:symbol-prefix="provision_node"
           c:type="Log4gProvisionNode"
           parent="GObject.Object"
           glib:type-name="Log4gProvisionNode"
           glib:get-type="log4g_provision_node_get_type"
           glib:type-struct="ProvisionNodeClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gProvisionNode&lt;/structname&gt; structure does not have any
public members.</doc>
      <constructor name="new"
                   c:identifier="log4g_provision_node_new"
                   version="0.1">
        <doc xml:space="preserve">Create a #Log4gProvisionNode object and add an element.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new Log4gProvisionNode object.</doc>
          <type name="ProvisionNode" c:type="Log4gProvisionNode*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">The object to add to this provision node.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_element"
              c:identifier="log4g_provision_node_add_element"
              version="0.1">
        <doc xml:space="preserve">Add an element to a provision node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A provision node object.</doc>
            <type name="ProvisionNode" c:type="Log4gProvisionNode*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">The object to add to @self.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="element_at"
              c:identifier="log4g_provision_node_element_at"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Retrieve an indexed element from a provision node.</doc>
        <return-value>
          <doc xml:space="preserve">The object at @index or %NULL if none exists.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A provision node object.</doc>
            <type name="ProvisionNode" c:type="Log4gProvisionNode*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">The object index to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="size"
              c:identifier="log4g_provision_node_size"
              version="0.1">
        <doc xml:space="preserve">Retrieve the number of objects in a provision node.</doc>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A provision node object.</doc>
            <type name="ProvisionNode" c:type="Log4gProvisionNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ProvisionNodeClass"
            c:type="Log4gProvisionNodeClass"
            glib:is-gtype-struct-for="ProvisionNode">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gProvisionNodeClass&lt;/structname&gt; structure does not have
any public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="RepositorySelector"
               c:symbol-prefix="repository_selector"
               c:type="Log4gRepositorySelector"
               glib:type-name="Log4gRepositorySelector"
               glib:get-type="log4g_repository_selector_get_type"
               glib:type-struct="RepositorySelectorInterface">
      <virtual-method name="get_logger_repository"
                      invoker="get_logger_repository"
                      version="0.1"
                      introspectable="0">
        <doc xml:space="preserve">Call the @get_logger_repository function from the
#Log4gRepositorySelectorInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger repository for the current application context.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A repository selector object.</doc>
            <type name="RepositorySelector" c:type="Log4gRepositorySelector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_logger_repository"
              c:identifier="log4g_repository_selector_get_logger_repository"
              version="0.1"
              introspectable="0">
        <doc xml:space="preserve">Call the @get_logger_repository function from the
#Log4gRepositorySelectorInterface of @self.</doc>
        <return-value>
          <doc xml:space="preserve">The logger repository for the current application context.</doc>
          <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A repository selector object.</doc>
            <type name="RepositorySelector" c:type="Log4gRepositorySelector*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <callback name="RepositorySelectorGetLoggerRepository"
              c:type="Log4gRepositorySelectorGetLoggerRepository"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Select the logger repository for the current application context.

Implementors must assure that a valid (non-%NULL) logger repository
is returned.</doc>
      <return-value>
        <doc xml:space="preserve">The logger repository for the current application context.</doc>
        <type name="LoggerRepository" c:type="Log4gLoggerRepository*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve">A repository selector object.</doc>
          <type name="RepositorySelector" c:type="Log4gRepositorySelector*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RepositorySelectorInterface"
            c:type="Log4gRepositorySelectorInterface"
            glib:is-gtype-struct-for="RepositorySelector">
      <field name="parent_interface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_logger_repository" introspectable="0">
        <doc xml:space="preserve">Select the current logger repository.</doc>
        <type name="RepositorySelectorGetLoggerRepository"
              c:type="Log4gRepositorySelectorGetLoggerRepository"/>
      </field>
    </record>
    <class name="RootLogger"
           c:symbol-prefix="root_logger"
           c:type="Log4gRootLogger"
           parent="Logger"
           glib:type-name="Log4gRootLogger"
           glib:get-type="log4g_root_logger_get_type"
           glib:type-struct="RootLoggerClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gRootLogger&lt;/structname&gt; structure does not have any
public members.</doc>
      <implements name="AppenderAttachable"/>
      <constructor name="new"
                   c:identifier="log4g_root_logger_new"
                   version="0.1">
        <doc xml:space="preserve">Create a new root logger.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new root logger object.</doc>
          <type name="Logger" c:type="Log4gLogger*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The level threshold of this root logger.</doc>
            <type name="Level" c:type="Log4gLevel*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Logger" c:type="Log4gLogger"/>
      </field>
    </class>
    <record name="RootLoggerClass"
            c:type="Log4gRootLoggerClass"
            glib:is-gtype-struct-for="RootLogger">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gRootLogger&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="LoggerClass" c:type="Log4gLoggerClass"/>
      </field>
    </record>
    <class name="Thread"
           c:symbol-prefix="thread"
           c:type="Log4gThread"
           parent="GObject.Object"
           glib:type-name="Log4gThread"
           glib:get-type="log4g_thread_get_type"
           glib:type-struct="ThreadClass">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gThread&lt;/structname&gt; structure does not have any public
members.</doc>
      <function name="get_name"
                c:identifier="log4g_thread_get_name"
                version="0.1">
        <doc xml:space="preserve">Retrieve the name of the current thread.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the current thread.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="set_name"
                c:identifier="log4g_thread_set_name"
                version="0.1">
        <doc xml:space="preserve">Set the name of the current thread.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The new name of the current thread.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ThreadClass"
            c:type="Log4gThreadClass"
            glib:is-gtype-struct-for="Thread">
      <doc xml:space="preserve">The &lt;structname&gt;Log4gThreadClass&lt;/structname&gt; structure does not have any
public members.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="basic_configurator_configure"
              c:identifier="log4g_basic_configurator_configure"
              version="0.1">
      <doc xml:space="preserve">Quickly configure Log4g.

This function adds a console appender to the root logger that uses the
TTCC layout and prints to stdout.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="basic_configurator_configure_appender"
              c:identifier="log4g_basic_configurator_configure_appender"
              version="0.1">
      <doc xml:space="preserve">Add an appender to the root category.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="appender" transfer-ownership="none">
          <doc xml:space="preserve">The appender to add to the root category.</doc>
          <type name="Appender" c:type="Log4gAppender*"/>
        </parameter>
      </parameters>
    </function>
    <function name="basic_configurator_reset_configuration"
              c:identifier="log4g_basic_configurator_reset_configuration"
              version="0.1">
      <doc xml:space="preserve">Reset the default hierarchy to its default state.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="error_quark" c:identifier="log4g_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="finalize" c:identifier="log4g_finalize" version="0.1">
      <doc xml:space="preserve">Finalize the Log4g package.

It is not strictly necessary to call this function to use Log4g.

Calling this function will destroy the logger hierarchy and any cleanup
any instance data used by Log4g. One advantage of calling log4g_finalize()
is to allow asynchronous appenders a chance to flush any pending log
messages before your application exits.

Example (initialize &amp; cleanup Log4g):

|[
#include &amp;lt;log4g/log4g.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int
main(int argc, char **argv)
{
    g_thread_init(NULL);
    log4g_init(&amp;argc, &amp;argv);
    log4g_info("Log4g is initialized &amp; ready to go!");
    log4g_finalize();
    return EXIT_SUCCESS;
}
]|

If you call this function you must call log4g_init() again before using
the Log4g API.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="get_option_group"
              c:identifier="log4g_get_option_group"
              version="0.1">
      <doc xml:space="preserve">Retrieve the option group used by the Log4g package.

If your application is using the GLib option parser then you may call
this function to retrieve the option group parsed by Log4g.

Example (initialize Log4g via a GOptionGroup):

|[
#include &lt;log4g/log4g.h&gt;
#include &lt;stdlib.h&gt;

#define GETTEXT_PACKAGE "test-app"
#include &lt;glib/gi18n-lib.h&gt;

int
main(int argc, char **argv)
{
    GError *error = NULL;
    GOptionContext *context;
    GOptionEntry entries[] = {
        { NULL }
    };
    g_thread_init(NULL);
    context = g_option_context_new("- demonstrate Log4g initialization");
    if (!context) {
        return EXIT_FAILURE;
    }
    g_option_context_add_main_entries(context, entries, GETTEXT_PACKAGE);
    g_option_context_add_group(context, log4g_get_option_group())
    if (!g_option_context_parse(context, &amp;argc, &amp;argv, &amp;error)) {
        log4g_error("failed to parse options: %s", error-&gt;mesasge);
        g_error_free(error);
        return EXIT_FAILURE;
    }
    g_option_context_free();
    log4g_info("Log4g is initialized &amp; ready to go!");
    log4g_finalize();
    return EXIT_SUCCESS;
}
]|

If you use the returned option group in a GLib option parser you do not
need to call log4g_init().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A GLib option group.</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="init" c:identifier="log4g_init" version="0.1">
      <doc xml:space="preserve">Initialize the Log4g package.

Log4g accepts some standard command line arguments (all prepended with
"log4g"). Calling this function will parse out the arguments Log4g
understands and removes them from the argument list. If you call
log4g_init() before parsing application options your application will
not see the Log4g arguments.

Example (initialize Log4g):

|[
#include &amp;lt;log4g/log4g.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int
main(int argc, char **argv)
{
    g_thread_init(NULL);
    log4g_init(&amp;argc, &amp;argv);
    log4g_info("Log4g is initialized &amp; ready to go!");
    return EXIT_SUCCESS;
}
]|

Log4g accepts the following command line arguments:

&lt;emphasis&gt;--log4g-configuration=&amp;lt;FILE.xml&amp;gt;&lt;/emphasis&gt;

Specify an XML configuration file to load. If the XML configuration file
could not be loaded (or if none was specified) then Log4g will be
configured using the basic configurator.

&lt;emphasis&gt;--log4g-flags=&amp;lt;FLAGS&amp;gt;&lt;/emphasis&gt;

Specify flags that modify the behavior of Log4g. Currently Log4g
understands two flags.
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;debug: enable debug output on stdout&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;quiet: disable all error and debug output&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

&lt;emphasis&gt;--log4g-main-thread=&amp;lt;NAME&amp;gt;&lt;/emphasis&gt;

Set the name of the main thread (the default is "main").

After calling this function the Log4g API is ready for use within your
application.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve">A pointer to main's @argc variable.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve">A pointer to main's @argv variable.</doc>
          <type name="utf8" c:type="char***"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_debug"
              c:identifier="log4g_log_debug"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log an debugging message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="log_debugv"
              c:identifier="log4g_log_debugv"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log an debugging message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ap" transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_error"
              c:identifier="log4g_log_error"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log an error message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="log_errorv"
              c:identifier="log4g_log_errorv"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log an error message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ap" transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_warn"
              c:identifier="log4g_log_warn"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log a warning message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="log_warnv"
              c:identifier="log4g_log_warnv"
              version="0.1"
              introspectable="0">
      <doc xml:space="preserve">Log an warning message.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">A printf message format.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ap" transfer-ownership="none">
          <doc xml:space="preserve">Format parameters.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_internal_debugging"
              c:identifier="log4g_set_internal_debugging"
              version="0.1">
      <doc xml:space="preserve">Set the internal debugging flag.

If the debugging flag is %TRUE then Log4g will print debugging messages
to stdout.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The new debugging flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_quiet_mode"
              c:identifier="log4g_set_quiet_mode"
              version="0.1">
      <doc xml:space="preserve">Set the quiet mode flag.

If the quiet mode flag is %TRUE then Log4g will not print any messages.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The new quiet mode flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
