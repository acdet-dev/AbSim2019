<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Rest" version="0.7"/>
  <c:include name="govirt/govirt.h"/>
  <namespace name="GoVirt"
             version="1.0"
             shared-library="libgovirt-2.dll"
             c:identifier-prefixes="Ovirt"
             c:symbol-prefixes="ovirt">
    <class name="Api"
           c:symbol-prefix="api"
           c:type="OvirtApi"
           parent="Resource"
           glib:type-name="OvirtApi"
           glib:get-type="ovirt_api_get_type"
           glib:type-struct="ApiClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ovirt_api_new">
        <return-value transfer-ownership="full">
          <type name="Api" c:type="OvirtApi*"/>
        </return-value>
      </constructor>
      <method name="get_storage_domains"
              c:identifier="ovirt_api_get_storage_domains">
        <return-value transfer-ownership="none">
          <type name="Collection" c:type="OvirtCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="api" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtApi</doc>
            <type name="Api" c:type="OvirtApi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vm_pools" c:identifier="ovirt_api_get_vm_pools">
        <return-value transfer-ownership="none">
          <type name="Collection" c:type="OvirtCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="api" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtApi</doc>
            <type name="Api" c:type="OvirtApi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vms" c:identifier="ovirt_api_get_vms">
        <return-value transfer-ownership="none">
          <type name="Collection" c:type="OvirtCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="api" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtApi</doc>
            <type name="Api" c:type="OvirtApi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Resource" c:type="OvirtResource"/>
      </field>
      <field name="priv">
        <type name="ApiPrivate" c:type="OvirtApiPrivate*"/>
      </field>
    </class>
    <record name="ApiClass"
            c:type="OvirtApiClass"
            glib:is-gtype-struct-for="Api">
      <field name="parent_class">
        <type name="ResourceClass" c:type="OvirtResourceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ApiPrivate" c:type="OvirtApiPrivate" disguised="1">
    </record>
    <class name="Cdrom"
           c:symbol-prefix="cdrom"
           c:type="OvirtCdrom"
           parent="Resource"
           glib:type-name="OvirtCdrom"
           glib:get-type="ovirt_cdrom_get_type"
           glib:type-struct="CdromClass">
      <implements name="Gio.Initable"/>
      <method name="update" c:identifier="ovirt_cdrom_update" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdrom" transfer-ownership="none">
            <type name="Cdrom" c:type="OvirtCdrom*"/>
          </instance-parameter>
          <parameter name="current" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="ovirt_cdrom_update_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdrom" transfer-ownership="none">
            <type name="Cdrom" c:type="OvirtCdrom*"/>
          </instance-parameter>
          <parameter name="current" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="ovirt_cdrom_update_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cdrom" transfer-ownership="none">
            <type name="Cdrom" c:type="OvirtCdrom*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="file" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="OvirtResource"/>
      </field>
      <field name="priv">
        <type name="CdromPrivate" c:type="OvirtCdromPrivate*"/>
      </field>
    </class>
    <record name="CdromClass"
            c:type="OvirtCdromClass"
            glib:is-gtype-struct-for="Cdrom">
      <field name="parent_class">
        <type name="ResourceClass" c:type="OvirtResourceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="CdromPrivate" c:type="OvirtCdromPrivate" disguised="1">
    </record>
    <class name="Collection"
           c:symbol-prefix="collection"
           c:type="OvirtCollection"
           parent="GObject.Object"
           glib:type-name="OvirtCollection"
           glib:get-type="ovirt_collection_get_type"
           glib:type-struct="CollectionClass">
      <method name="fetch" c:identifier="ovirt_collection_fetch" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtCollection</doc>
            <type name="Collection" c:type="OvirtCollection*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_async" c:identifier="ovirt_collection_fetch_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtCollection</doc>
            <type name="Collection" c:type="OvirtCollection*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_finish"
              c:identifier="ovirt_collection_fetch_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise, with @error set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtCollection</doc>
            <type name="Collection" c:type="OvirtCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resources"
              c:identifier="ovirt_collection_get_resources">
        <return-value transfer-ownership="none">
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="Resource"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <type name="Collection" c:type="OvirtCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_resource"
              c:identifier="ovirt_collection_lookup_resource">
        <doc xml:space="preserve">Looks up a resource in @collection whose name is @name. If it cannot be
found, NULL is returned. This method does not initiate any network
activity, the remote collection content must have been fetched with
ovirt_collection_fetch() or ovirt_collection_fetch_async() before
calling this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #OvirtResource whose name is @name
or NULL</doc>
          <type name="Resource" c:type="OvirtResource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtCollection</doc>
            <type name="Collection" c:type="OvirtCollection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the resource to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="collection-xml-name"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="href"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resource-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="resource-xml-name"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CollectionPrivate" c:type="OvirtCollectionPrivate*"/>
      </field>
    </class>
    <record name="CollectionClass"
            c:type="OvirtCollectionClass"
            glib:is-gtype-struct-for="Collection">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="CollectionPrivate"
            c:type="OvirtCollectionPrivate"
            disguised="1">
    </record>
    <enumeration name="Error"
                 glib:type-name="OvirtError"
                 glib:get-type="ovirt_error_get_type"
                 c:type="OvirtError"
                 glib:error-domain="ovirt-error-quark">
      <member name="failed"
              value="0"
              c:identifier="OVIRT_ERROR_FAILED"
              glib:nick="failed">
      </member>
      <member name="parsing_failed"
              value="1"
              c:identifier="OVIRT_ERROR_PARSING_FAILED"
              glib:nick="parsing-failed">
      </member>
      <member name="not_supported"
              value="2"
              c:identifier="OVIRT_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported">
      </member>
      <member name="action_failed"
              value="3"
              c:identifier="OVIRT_ERROR_ACTION_FAILED"
              glib:nick="action-failed">
      </member>
      <member name="bad_uri"
              value="4"
              c:identifier="OVIRT_ERROR_BAD_URI"
              glib:nick="bad-uri">
      </member>
      <function name="quark" c:identifier="ovirt_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Proxy"
           c:symbol-prefix="proxy"
           c:type="OvirtProxy"
           parent="Rest.Proxy"
           glib:type-name="OvirtProxy"
           glib:get-type="ovirt_proxy_get_type"
           glib:type-struct="ProxyClass">
      <constructor name="new" c:identifier="ovirt_proxy_new">
        <return-value transfer-ownership="full">
          <type name="Proxy" c:type="OvirtProxy*"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="fetch_api" c:identifier="ovirt_proxy_fetch_api" throws="1">
        <return-value transfer-ownership="none">
          <type name="Api" c:type="OvirtApi*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fetch_api_async"
              c:identifier="ovirt_proxy_fetch_api_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_api_finish"
              c:identifier="ovirt_proxy_fetch_api_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an #OvirtApi instance to interact with
oVirt/RHEV REST API.</doc>
          <type name="Api" c:type="OvirtApi*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_ca_certificate"
              c:identifier="ovirt_proxy_fetch_ca_certificate"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fetch_ca_certificate_async"
              c:identifier="ovirt_proxy_fetch_ca_certificate_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_ca_certificate_finish"
              c:identifier="ovirt_proxy_fetch_ca_certificate_finish"
              throws="1">
        <return-value transfer-ownership="full">
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_vms" c:identifier="ovirt_proxy_fetch_vms" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fetch_vms_async"
              c:identifier="ovirt_proxy_fetch_vms_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_vms_finish"
              c:identifier="ovirt_proxy_fetch_vms_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of
#OvirtVm associated with #OvirtProxy. The returned list should not be
freed nor modified, and can become invalid any time a #OvirtProxy call
completes.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Vm"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vms" c:identifier="ovirt_proxy_get_vms">
        <doc xml:space="preserve">Gets the list of remote VMs from the proxy object.
This method does not initiate any network activity, the remote VM list
must have been fetched with ovirt_proxy_fetch_vms() or
ovirt_proxy_fetch_vms_async() before calling this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of
#OvirtVm associated with #OvirtProxy.
The returned list should not be freed nor modified, and can become
invalid any time a #OvirtProxy call completes.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Vm"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_vm" c:identifier="ovirt_proxy_lookup_vm">
        <doc xml:space="preserve">Looks up a virtual machine whose name is @name. If it cannot be found,
NULL is returned. This method does not initiate any network activity,
the remote VM list must have been fetched with ovirt_proxy_fetch_vms()
or ovirt_proxy_fetch_vms_async() before calling this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #OvirtVm whose name is @name or NULL</doc>
          <type name="Vm" c:type="OvirtVm*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtProxy</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </instance-parameter>
          <parameter name="vm_name" transfer-ownership="none">
            <doc xml:space="preserve">name of the virtual machine to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="admin" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ca-cert" writable="1" transfer-ownership="none">
        <array name="GLib.ByteArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="session-id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Rest.Proxy" c:type="RestProxy"/>
      </field>
      <field name="priv">
        <type name="ProxyPrivate" c:type="OvirtProxyPrivate*"/>
      </field>
    </class>
    <record name="ProxyClass"
            c:type="OvirtProxyClass"
            glib:is-gtype-struct-for="Proxy">
      <field name="parent_class">
        <type name="Rest.ProxyClass" c:type="RestProxyClass"/>
      </field>
    </record>
    <record name="ProxyPrivate" c:type="OvirtProxyPrivate" disguised="1">
    </record>
    <class name="Resource"
           c:symbol-prefix="resource"
           c:type="OvirtResource"
           parent="GObject.Object"
           glib:type-name="OvirtResource"
           glib:get-type="ovirt_resource_get_type"
           glib:type-struct="ResourceClass">
      <implements name="Gio.Initable"/>
      <virtual-method name="init_from_xml" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="Rest.XmlNode" c:type="RestXmlNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="to_xml">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="delete" c:identifier="ovirt_resource_delete" throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the call was successful, FALSE otherwise.

Sends an HTTP DELETE request to @resource.

The calling thread is blocked until this request is processed, see
ovirt_resource_delete_async() for the asynchronous version of this method.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">an #OvirtResource.</doc>
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">an #OvirtProxy.</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async" c:identifier="ovirt_resource_delete_async">
        <doc xml:space="preserve">Asynchronously send an HTTP DELETE request to @resource.

When the call is complete, @callback will be invoked. You can then call
ovirt_resource_delete_finish() to get the result of the call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">an #OvirtResource.</doc>
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">an #OvirtProxy.</doc>
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the call completes, or NULL
if you don't care about the result of the method invocation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="ovirt_resource_delete_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the call was successful, FALSE otherwise.

Finishes an asynchronous HTTP DELETE request on @resource.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">an #OvirtResource.</doc>
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sub_collection"
              c:identifier="ovirt_resource_get_sub_collection">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="sub_collection" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="ovirt_resource_refresh" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async" c:identifier="ovirt_resource_refresh_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="ovirt_resource_refresh_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ovirt_resource_update" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="ovirt_resource_update_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="ovirt_resource_update_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="OvirtResource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="guid" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="href" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="xml-node"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Rest.XmlNode"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ResourcePrivate" c:type="OvirtResourcePrivate*"/>
      </field>
    </class>
    <record name="ResourceClass"
            c:type="OvirtResourceClass"
            glib:is-gtype-struct-for="Resource">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="init_from_xml">
        <callback name="init_from_xml" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="resource" transfer-ownership="none">
              <type name="Resource" c:type="OvirtResource*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="Rest.XmlNode" c:type="RestXmlNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="to_xml">
        <callback name="to_xml">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="resource" transfer-ownership="none">
              <type name="Resource" c:type="OvirtResource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding0">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="18">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ResourcePrivate" c:type="OvirtResourcePrivate" disguised="1">
    </record>
    <enumeration name="RestCallError"
                 glib:type-name="OvirtRestCallError"
                 glib:get-type="ovirt_rest_call_error_get_type"
                 c:type="OvirtRestCallError"
                 glib:error-domain="ovirt-rest-call">
      <member name="xml"
              value="0"
              c:identifier="OVIRT_REST_CALL_ERROR_XML"
              glib:nick="xml">
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="OVIRT_REST_CALL_ERROR_CANCELLED"
              glib:nick="cancelled">
      </member>
      <function name="quark" c:identifier="ovirt_rest_call_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="StorageDomain"
           c:symbol-prefix="storage_domain"
           c:type="OvirtStorageDomain"
           parent="Resource"
           glib:type-name="OvirtStorageDomain"
           glib:get-type="ovirt_storage_domain_get_type"
           glib:type-struct="StorageDomainClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ovirt_storage_domain_new">
        <return-value transfer-ownership="full">
          <type name="StorageDomain" c:type="OvirtStorageDomain*"/>
        </return-value>
      </constructor>
      <method name="get_files" c:identifier="ovirt_storage_domain_get_files">
        <doc xml:space="preserve">Gets a #OvirtCollection representing the list of remote files from a
storage domain object.  This method does not initiate any network
activity, the remote file list must be then be fetched using
ovirt_collection_fetch() or ovirt_collection_fetch_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #OvirtCollection representing the list
of files associated with @domain.</doc>
          <type name="Collection" c:type="OvirtCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtStorageDomain</doc>
            <type name="StorageDomain" c:type="OvirtStorageDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="available" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="committed" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="master" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <type name="StorageDomainState"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="StorageDomainType"/>
      </property>
      <property name="used" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="version" writable="1" transfer-ownership="none">
        <type name="StorageDomainFormatVersion"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="OvirtResource"/>
      </field>
      <field name="priv">
        <type name="StorageDomainPrivate" c:type="OvirtStorageDomainPrivate*"/>
      </field>
    </class>
    <record name="StorageDomainClass"
            c:type="OvirtStorageDomainClass"
            glib:is-gtype-struct-for="StorageDomain">
      <field name="parent_class">
        <type name="ResourceClass" c:type="OvirtResourceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="StorageDomainFormatVersion"
                 glib:type-name="OvirtStorageDomainFormatVersion"
                 glib:get-type="ovirt_storage_domain_format_version_get_type"
                 c:type="OvirtStorageDomainFormatVersion">
      <member name="v1"
              value="0"
              c:identifier="OVIRT_STORAGE_DOMAIN_FORMAT_VERSION_V1"
              glib:nick="v1">
      </member>
      <member name="v2"
              value="1"
              c:identifier="OVIRT_STORAGE_DOMAIN_FORMAT_VERSION_V2"
              glib:nick="v2">
      </member>
      <member name="v3"
              value="2"
              c:identifier="OVIRT_STORAGE_DOMAIN_FORMAT_VERSION_V3"
              glib:nick="v3">
      </member>
    </enumeration>
    <record name="StorageDomainPrivate"
            c:type="OvirtStorageDomainPrivate"
            disguised="1">
    </record>
    <enumeration name="StorageDomainState"
                 glib:type-name="OvirtStorageDomainState"
                 glib:get-type="ovirt_storage_domain_state_get_type"
                 c:type="OvirtStorageDomainState">
      <member name="active"
              value="0"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_ACTIVE"
              glib:nick="active">
      </member>
      <member name="inactive"
              value="1"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_INACTIVE"
              glib:nick="inactive">
      </member>
      <member name="locked"
              value="2"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_LOCKED"
              glib:nick="locked">
      </member>
      <member name="mixed"
              value="3"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_MIXED"
              glib:nick="mixed">
      </member>
      <member name="unattached"
              value="4"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_UNATTACHED"
              glib:nick="unattached">
      </member>
      <member name="maintenance"
              value="5"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_MAINTENANCE"
              glib:nick="maintenance">
      </member>
      <member name="unknown"
              value="6"
              c:identifier="OVIRT_STORAGE_DOMAIN_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
    </enumeration>
    <enumeration name="StorageDomainType"
                 glib:type-name="OvirtStorageDomainType"
                 glib:get-type="ovirt_storage_domain_type_get_type"
                 c:type="OvirtStorageDomainType">
      <member name="data"
              value="0"
              c:identifier="OVIRT_STORAGE_DOMAIN_TYPE_DATA"
              glib:nick="data">
      </member>
      <member name="iso"
              value="1"
              c:identifier="OVIRT_STORAGE_DOMAIN_TYPE_ISO"
              glib:nick="iso">
      </member>
      <member name="export"
              value="2"
              c:identifier="OVIRT_STORAGE_DOMAIN_TYPE_EXPORT"
              glib:nick="export">
      </member>
      <member name="image"
              value="3"
              c:identifier="OVIRT_STORAGE_DOMAIN_TYPE_IMAGE"
              glib:nick="image">
      </member>
    </enumeration>
    <class name="Vm"
           c:symbol-prefix="vm"
           c:type="OvirtVm"
           parent="Resource"
           glib:type-name="OvirtVm"
           glib:get-type="ovirt_vm_get_type"
           glib:type-struct="VmClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ovirt_vm_new">
        <return-value transfer-ownership="full">
          <type name="Vm" c:type="OvirtVm*"/>
        </return-value>
      </constructor>
      <method name="get_cdroms" c:identifier="ovirt_vm_get_cdroms">
        <doc xml:space="preserve">Gets a #OvirtCollection representing the list of remote cdroms from a
virtual machine object.  This method does not initiate any network
activity, the remote cdrom list must be then be fetched using
ovirt_collection_fetch() or ovirt_collection_fetch_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #OvirtCollection representing the list
of cdroms associated with @vm.</doc>
          <type name="Collection" c:type="OvirtCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <doc xml:space="preserve">a #OvirtVm</doc>
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ticket" c:identifier="ovirt_vm_get_ticket" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ticket_async" c:identifier="ovirt_vm_get_ticket_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ticket_finish"
              c:identifier="ovirt_vm_get_ticket_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async" c:identifier="ovirt_vm_refresh_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="ovirt_vm_refresh_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ovirt_vm_start" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async" c:identifier="ovirt_vm_start_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="ovirt_vm_start_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ovirt_vm_stop" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_async" c:identifier="ovirt_vm_stop_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_finish"
              c:identifier="ovirt_vm_stop_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm" transfer-ownership="none">
            <type name="Vm" c:type="OvirtVm*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display" writable="1" transfer-ownership="none">
        <type name="VmDisplay"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <type name="VmState"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="OvirtResource"/>
      </field>
      <field name="priv">
        <type name="VmPrivate" c:type="OvirtVmPrivate*"/>
      </field>
    </class>
    <record name="VmClass" c:type="OvirtVmClass" glib:is-gtype-struct-for="Vm">
      <field name="parent_class">
        <type name="ResourceClass" c:type="OvirtResourceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="VmDisplay"
           c:symbol-prefix="vm_display"
           c:type="OvirtVmDisplay"
           parent="GObject.Object"
           glib:type-name="OvirtVmDisplay"
           glib:get-type="ovirt_vm_display_get_type"
           glib:type-struct="VmDisplayClass">
      <constructor name="new" c:identifier="ovirt_vm_display_new">
        <return-value transfer-ownership="full">
          <type name="VmDisplay" c:type="OvirtVmDisplay*"/>
        </return-value>
      </constructor>
      <property name="address" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="allow-override" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expiry" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="host-subject" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="monitor-count" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="proxy-url" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="secure-port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="smartcard" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ticket" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="VmDisplayType"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="VmDisplayPrivate" c:type="OvirtVmDisplayPrivate*"/>
      </field>
    </class>
    <record name="VmDisplayClass"
            c:type="OvirtVmDisplayClass"
            glib:is-gtype-struct-for="VmDisplay">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VmDisplayPrivate"
            c:type="OvirtVmDisplayPrivate"
            disguised="1">
    </record>
    <enumeration name="VmDisplayType"
                 glib:type-name="OvirtVmDisplayType"
                 glib:get-type="ovirt_vm_display_type_get_type"
                 c:type="OvirtVmDisplayType">
      <member name="spice"
              value="0"
              c:identifier="OVIRT_VM_DISPLAY_SPICE"
              glib:nick="spice">
      </member>
      <member name="vnc"
              value="1"
              c:identifier="OVIRT_VM_DISPLAY_VNC"
              glib:nick="vnc">
      </member>
    </enumeration>
    <class name="VmPool"
           c:symbol-prefix="vm_pool"
           c:type="OvirtVmPool"
           parent="Resource"
           glib:type-name="OvirtVmPool"
           glib:get-type="ovirt_vm_pool_get_type"
           glib:type-struct="VmPoolClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ovirt_vm_pool_new">
        <return-value transfer-ownership="full">
          <type name="VmPool" c:type="OvirtVmPool*"/>
        </return-value>
      </constructor>
      <method name="allocate_vm"
              c:identifier="ovirt_vm_pool_allocate_vm"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm_pool" transfer-ownership="none">
            <type name="VmPool" c:type="OvirtVmPool*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="allocate_vm_async"
              c:identifier="ovirt_vm_pool_allocate_vm_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm_pool" transfer-ownership="none">
            <type name="VmPool" c:type="OvirtVmPool*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="Proxy" c:type="OvirtProxy*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="allocate_vm_finish"
              c:identifier="ovirt_vm_pool_allocate_vm_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vm_pool" transfer-ownership="none">
            <type name="VmPool" c:type="OvirtVmPool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-user-vms" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="prestarted-vms" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="OvirtResource"/>
      </field>
      <field name="priv">
        <type name="VmPoolPrivate" c:type="OvirtVmPoolPrivate*"/>
      </field>
    </class>
    <record name="VmPoolClass"
            c:type="OvirtVmPoolClass"
            glib:is-gtype-struct-for="VmPool">
      <field name="parent_class">
        <type name="ResourceClass" c:type="OvirtResourceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VmPoolPrivate" c:type="OvirtVmPoolPrivate" disguised="1">
    </record>
    <record name="VmPrivate" c:type="OvirtVmPrivate" disguised="1">
    </record>
    <enumeration name="VmState"
                 glib:type-name="OvirtVmState"
                 glib:get-type="ovirt_vm_state_get_type"
                 c:type="OvirtVmState">
      <member name="down"
              value="0"
              c:identifier="OVIRT_VM_STATE_DOWN"
              glib:nick="down">
      </member>
      <member name="up"
              value="1"
              c:identifier="OVIRT_VM_STATE_UP"
              glib:nick="up">
      </member>
      <member name="rebooting"
              value="2"
              c:identifier="OVIRT_VM_STATE_REBOOTING"
              glib:nick="rebooting">
      </member>
      <member name="powering_up"
              value="3"
              c:identifier="OVIRT_VM_STATE_POWERING_UP"
              glib:nick="powering_up">
      </member>
      <member name="powered_down"
              value="4"
              c:identifier="OVIRT_VM_STATE_POWERED_DOWN"
              glib:nick="powered_down">
      </member>
      <member name="paused"
              value="5"
              c:identifier="OVIRT_VM_STATE_PAUSED"
              glib:nick="paused">
      </member>
      <member name="migrating"
              value="6"
              c:identifier="OVIRT_VM_STATE_MIGRATING"
              glib:nick="migrating">
      </member>
      <member name="unknown"
              value="7"
              c:identifier="OVIRT_VM_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="not_responding"
              value="8"
              c:identifier="OVIRT_VM_STATE_NOT_RESPONDING"
              glib:nick="not_responding">
      </member>
      <member name="wait_for_launch"
              value="9"
              c:identifier="OVIRT_VM_STATE_WAIT_FOR_LAUNCH"
              glib:nick="wait_for_launch">
      </member>
      <member name="reboot_in_progress"
              value="10"
              c:identifier="OVIRT_VM_STATE_REBOOT_IN_PROGRESS"
              glib:nick="reboot_in_progress">
      </member>
      <member name="saving_state"
              value="11"
              c:identifier="OVIRT_VM_STATE_SAVING_STATE"
              glib:nick="saving_state">
      </member>
      <member name="restoring_state"
              value="12"
              c:identifier="OVIRT_VM_STATE_RESTORING_STATE"
              glib:nick="restoring_state">
      </member>
      <member name="suspended"
              value="13"
              c:identifier="OVIRT_VM_STATE_SUSPENDED"
              glib:nick="suspended">
      </member>
      <member name="image_locked"
              value="14"
              c:identifier="OVIRT_VM_STATE_IMAGE_LOCKED"
              glib:nick="image_locked">
      </member>
      <member name="powering_down"
              value="15"
              c:identifier="OVIRT_VM_STATE_POWERING_DOWN"
              glib:nick="powering_down">
      </member>
    </enumeration>
    <function name="error_quark"
              c:identifier="ovirt_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_option_group"
              c:identifier="ovirt_get_option_group"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GOptionGroup for the commandline
arguments specific to libgovirt.  You have to call
ovirt_set_proxy_options() after to set the options on a
#OvirtProxy.</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="rest_call_error_quark"
              c:identifier="ovirt_rest_call_error_quark"
              moved-to="RestCallError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="set_proxy_options" c:identifier="ovirt_set_proxy_options">
      <doc xml:space="preserve">Set various properties on @proxy, according to the commandline
arguments given to ovirt_get_option_group() option group.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:space="preserve">a #OvirtProxy to set options upon</doc>
          <type name="Proxy" c:type="OvirtProxy*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
