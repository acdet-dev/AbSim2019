<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <package name="groonga-gobject"/>
  <namespace name="Groonga"
             version="1.0"
             shared-library="libgroonga-gobject-0.dll"
             c:identifier-prefixes="GGrn"
             c:symbol-prefixes="ggrn">
    <class name="Command"
           c:symbol-prefix="command"
           c:type="GGrnCommand"
           parent="GObject.Object"
           glib:type-name="GGrnCommand"
           glib:get-type="ggrn_command_get_type"
           glib:type-struct="CommandClass">
      <doc xml:space="preserve">A GGrnCommand is an object to create a Groonga command string. It
is executable by ggrn_context_execute_command().</doc>
      <constructor name="new" c:identifier="ggrn_command_new" version="1.0.0">
        <doc xml:space="preserve">Allocates a new #GGrnCommand.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GGrnCommand.</doc>
          <type name="Command" c:type="GGrnCommand*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The command name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_argument"
              c:identifier="ggrn_command_add_argument"
              version="1.0.0">
        <doc xml:space="preserve">Adds an argument of the command.

If you add the same name argument twice, the old argument value is
overrode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the argument.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value of the argument.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="escape" c:identifier="ggrn_command_escape" version="1.0.1">
        <doc xml:space="preserve">Escapes @target_characters in @value by @escape_chracter.

For example:
|[
gchar *escaped;
escaped = ggrn_command_escape(command,
                              "aA'\"()19",
                              "'\"()",
                              '\\');
g_print("%s\n", escaped); // -&gt; aA\'\"\(\)19
g_free(escaped);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The escaped characters. It must be freed with
  g_free() when no longer needed.

  It returns %NULL for invalid input.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The argument value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target_characters" transfer-ownership="none">
            <doc xml:space="preserve">The characters to be escaped.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="escape_character" transfer-ownership="none">
            <doc xml:space="preserve">The character to escape a character.</doc>
            <type name="gchar" c:type="char"/>
          </parameter>
        </parameters>
      </method>
      <method name="escape_query"
              c:identifier="ggrn_command_escape_query"
              version="1.0.1">
        <doc xml:space="preserve">Escapes [special characters of query
syntax](http://groonga.org/docs/reference/grn_expr/query_syntax.html#escape)
in @query.

For example:

|[
gchar *escaped_query;
escaped_query = ggrn_command_escape_query(command, "column:aA'\"()19");
g_print("%s\n", escaped_query); // -&gt; column\:aA'\"\(\)19
g_free(escaped_query);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The escaped query. It must be freed with
  g_free() when no longer needed.

  It returns %NULL for invalid input.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">The query argument value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="ggrn_command_execute"
              version="1.0.0">
        <doc xml:space="preserve">Executes the command and returns the executed result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The executed result of @command. It must be freed with
  g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_command_line"
              c:identifier="ggrn_command_to_command_line"
              version="1.0.0">
        <doc xml:space="preserve">Formats the command as command line format like the following:

|[
table_create --name Logs --flags TABLE_NO_KEY
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The command line format command. It must be freed with
  g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_path"
              c:identifier="ggrn_command_to_path"
              version="1.0.0">
        <doc xml:space="preserve">Formats the command as path format like the following:

|[
/d/table_create?name=Logs&amp;flags=TABLE_NO_KEY
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The path format command. It must be freed with
  g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnCommand.</doc>
            <type name="Command" c:type="GGrnCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="CommandClass"
            c:type="GGrnCommandClass"
            glib:is-gtype-struct-for="Command">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="GGrnContext"
           parent="GObject.Object"
           glib:type-name="GGrnContext"
           glib:get-type="ggrn_context_get_type"
           glib:type-struct="ContextClass">
      <doc xml:space="preserve">A GGrnContext is the operation context for a database.</doc>
      <constructor name="new" c:identifier="ggrn_context_new" version="1.0.0">
        <doc xml:space="preserve">Allocates a new #GGrnContext.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GGrnContext.</doc>
          <type name="Context" c:type="GGrnContext*"/>
        </return-value>
      </constructor>
      <method name="create_database"
              c:identifier="ggrn_context_create_database"
              version="1.0.0"
              throws="1">
        <doc xml:space="preserve">Creates a new database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE on success, FALSE if an error is occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The path of the database to be created, or %NULL
  for temporary database.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_command"
              c:identifier="ggrn_context_execute_command"
              version="1.0.0">
        <doc xml:space="preserve">Executes a Groonga command and returns the executed result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The executed result of @command. It must be freed with
  g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">The Groonga command to be executed. See
  http://groonga.org/docs/reference/command.html about Groonga command.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_database"
              c:identifier="ggrn_context_open_database"
              version="1.0.0"
              throws="1">
        <doc xml:space="preserve">Opens a database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE on success, FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">The path of the database to be opened.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="receive_result"
              c:identifier="ggrn_context_receive_result"
              version="1.0.0">
        <doc xml:space="preserve">Receives the result of the sent command by ggrn_context_send_command().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The result of the sent command. It must be freed with
  g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_command"
              c:identifier="ggrn_context_send_command"
              version="1.0.0"
              throws="1">
        <doc xml:space="preserve">Sends a Groonga command. Use ggrn_context_receive_result() to
receive the result of the sent command.

Normally, you should use high-level API
ggrn_context_execute_command(). If you want to get error details of
the executed command, use this API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE on success, FALSE if an error is occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A #GGrnContext.</doc>
            <type name="Context" c:type="GGrnContext*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve">The Groonga command to be sent. See
  http://groonga.org/docs/reference/command.html about Groonga command.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ContextClass"
            c:type="GGrnContextClass"
            glib:is-gtype-struct-for="Context">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="Error"
                 c:type="GGrnError"
                 glib:error-domain="ggrn-error-quark">
      <member name="end_of_data"
              value="1"
              c:identifier="GGRN_ERROR_END_OF_DATA">
      </member>
      <member name="unknown_error"
              value="-1"
              c:identifier="GGRN_ERROR_UNKNOWN_ERROR">
      </member>
      <member name="operation_not_permitted"
              value="-2"
              c:identifier="GGRN_ERROR_OPERATION_NOT_PERMITTED">
      </member>
      <member name="no_such_file_or_directory"
              value="-3"
              c:identifier="GGRN_ERROR_NO_SUCH_FILE_OR_DIRECTORY">
      </member>
      <member name="no_such_process"
              value="-4"
              c:identifier="GGRN_ERROR_NO_SUCH_PROCESS">
      </member>
      <member name="interrupted_function_call"
              value="-5"
              c:identifier="GGRN_ERROR_INTERRUPTED_FUNCTION_CALL">
      </member>
      <member name="input_output_error"
              value="-6"
              c:identifier="GGRN_ERROR_INPUT_OUTPUT_ERROR">
      </member>
      <member name="no_such_device_or_address"
              value="-7"
              c:identifier="GGRN_ERROR_NO_SUCH_DEVICE_OR_ADDRESS">
      </member>
      <member name="arg_list_too_long"
              value="-8"
              c:identifier="GGRN_ERROR_ARG_LIST_TOO_LONG">
      </member>
      <member name="exec_format_error"
              value="-9"
              c:identifier="GGRN_ERROR_EXEC_FORMAT_ERROR">
      </member>
      <member name="bad_file_descriptor"
              value="-10"
              c:identifier="GGRN_ERROR_BAD_FILE_DESCRIPTOR">
      </member>
      <member name="no_child_processes"
              value="-11"
              c:identifier="GGRN_ERROR_NO_CHILD_PROCESSES">
      </member>
      <member name="resource_temporarily_unavailable"
              value="-12"
              c:identifier="GGRN_ERROR_RESOURCE_TEMPORARILY_UNAVAILABLE">
      </member>
      <member name="not_enough_space"
              value="-13"
              c:identifier="GGRN_ERROR_NOT_ENOUGH_SPACE">
      </member>
      <member name="permission_denied"
              value="-14"
              c:identifier="GGRN_ERROR_PERMISSION_DENIED">
      </member>
      <member name="bad_address"
              value="-15"
              c:identifier="GGRN_ERROR_BAD_ADDRESS">
      </member>
      <member name="resource_busy"
              value="-16"
              c:identifier="GGRN_ERROR_RESOURCE_BUSY">
      </member>
      <member name="file_exists"
              value="-17"
              c:identifier="GGRN_ERROR_FILE_EXISTS">
      </member>
      <member name="improper_link"
              value="-18"
              c:identifier="GGRN_ERROR_IMPROPER_LINK">
      </member>
      <member name="no_such_device"
              value="-19"
              c:identifier="GGRN_ERROR_NO_SUCH_DEVICE">
      </member>
      <member name="not_a_directory"
              value="-20"
              c:identifier="GGRN_ERROR_NOT_A_DIRECTORY">
      </member>
      <member name="is_a_directory"
              value="-21"
              c:identifier="GGRN_ERROR_IS_A_DIRECTORY">
      </member>
      <member name="invalid_argument"
              value="-22"
              c:identifier="GGRN_ERROR_INVALID_ARGUMENT">
      </member>
      <member name="too_many_open_files_in_system"
              value="-23"
              c:identifier="GGRN_ERROR_TOO_MANY_OPEN_FILES_IN_SYSTEM">
      </member>
      <member name="too_many_open_files"
              value="-24"
              c:identifier="GGRN_ERROR_TOO_MANY_OPEN_FILES">
      </member>
      <member name="inappropriate_io_control_operation"
              value="-25"
              c:identifier="GGRN_ERROR_INAPPROPRIATE_IO_CONTROL_OPERATION">
      </member>
      <member name="file_too_large"
              value="-26"
              c:identifier="GGRN_ERROR_FILE_TOO_LARGE">
      </member>
      <member name="no_space_left_on_device"
              value="-27"
              c:identifier="GGRN_ERROR_NO_SPACE_LEFT_ON_DEVICE">
      </member>
      <member name="invalid_seek"
              value="-28"
              c:identifier="GGRN_ERROR_INVALID_SEEK">
      </member>
      <member name="read_only_file_system"
              value="-29"
              c:identifier="GGRN_ERROR_READ_ONLY_FILE_SYSTEM">
      </member>
      <member name="too_many_links"
              value="-30"
              c:identifier="GGRN_ERROR_TOO_MANY_LINKS">
      </member>
      <member name="broken_pipe"
              value="-31"
              c:identifier="GGRN_ERROR_BROKEN_PIPE">
      </member>
      <member name="domain_error"
              value="-32"
              c:identifier="GGRN_ERROR_DOMAIN_ERROR">
      </member>
      <member name="result_too_large"
              value="-33"
              c:identifier="GGRN_ERROR_RESULT_TOO_LARGE">
      </member>
      <member name="resource_deadlock_avoided"
              value="-34"
              c:identifier="GGRN_ERROR_RESOURCE_DEADLOCK_AVOIDED">
      </member>
      <member name="no_memory_available"
              value="-35"
              c:identifier="GGRN_ERROR_NO_MEMORY_AVAILABLE">
      </member>
      <member name="filename_too_long"
              value="-36"
              c:identifier="GGRN_ERROR_FILENAME_TOO_LONG">
      </member>
      <member name="no_locks_available"
              value="-37"
              c:identifier="GGRN_ERROR_NO_LOCKS_AVAILABLE">
      </member>
      <member name="function_not_implemented"
              value="-38"
              c:identifier="GGRN_ERROR_FUNCTION_NOT_IMPLEMENTED">
      </member>
      <member name="directory_not_empty"
              value="-39"
              c:identifier="GGRN_ERROR_DIRECTORY_NOT_EMPTY">
      </member>
      <member name="illegal_byte_sequence"
              value="-40"
              c:identifier="GGRN_ERROR_ILLEGAL_BYTE_SEQUENCE">
      </member>
      <member name="socket_not_initialized"
              value="-41"
              c:identifier="GGRN_ERROR_SOCKET_NOT_INITIALIZED">
      </member>
      <member name="operation_would_block"
              value="-42"
              c:identifier="GGRN_ERROR_OPERATION_WOULD_BLOCK">
      </member>
      <member name="address_is_not_available"
              value="-43"
              c:identifier="GGRN_ERROR_ADDRESS_IS_NOT_AVAILABLE">
      </member>
      <member name="network_is_down"
              value="-44"
              c:identifier="GGRN_ERROR_NETWORK_IS_DOWN">
      </member>
      <member name="no_buffer" value="-45" c:identifier="GGRN_ERROR_NO_BUFFER">
      </member>
      <member name="socket_is_already_connected"
              value="-46"
              c:identifier="GGRN_ERROR_SOCKET_IS_ALREADY_CONNECTED">
      </member>
      <member name="socket_is_not_connected"
              value="-47"
              c:identifier="GGRN_ERROR_SOCKET_IS_NOT_CONNECTED">
      </member>
      <member name="socket_is_already_shutdowned"
              value="-48"
              c:identifier="GGRN_ERROR_SOCKET_IS_ALREADY_SHUTDOWNED">
      </member>
      <member name="operation_timeout"
              value="-49"
              c:identifier="GGRN_ERROR_OPERATION_TIMEOUT">
      </member>
      <member name="connection_refused"
              value="-50"
              c:identifier="GGRN_ERROR_CONNECTION_REFUSED">
      </member>
      <member name="range_error"
              value="-51"
              c:identifier="GGRN_ERROR_RANGE_ERROR">
      </member>
      <member name="tokenizer_error"
              value="-52"
              c:identifier="GGRN_ERROR_TOKENIZER_ERROR">
      </member>
      <member name="file_corrupt"
              value="-53"
              c:identifier="GGRN_ERROR_FILE_CORRUPT">
      </member>
      <member name="invalid_format"
              value="-54"
              c:identifier="GGRN_ERROR_INVALID_FORMAT">
      </member>
      <member name="object_corrupt"
              value="-55"
              c:identifier="GGRN_ERROR_OBJECT_CORRUPT">
      </member>
      <member name="too_many_symbolic_links"
              value="-56"
              c:identifier="GGRN_ERROR_TOO_MANY_SYMBOLIC_LINKS">
      </member>
      <member name="not_socket"
              value="-57"
              c:identifier="GGRN_ERROR_NOT_SOCKET">
      </member>
      <member name="operation_not_supported"
              value="-58"
              c:identifier="GGRN_ERROR_OPERATION_NOT_SUPPORTED">
      </member>
      <member name="address_is_in_use"
              value="-59"
              c:identifier="GGRN_ERROR_ADDRESS_IS_IN_USE">
      </member>
      <member name="zlib_error"
              value="-60"
              c:identifier="GGRN_ERROR_ZLIB_ERROR">
      </member>
      <member name="lzo_error" value="-61" c:identifier="GGRN_ERROR_LZO_ERROR">
      </member>
      <member name="stack_over_flow"
              value="-62"
              c:identifier="GGRN_ERROR_STACK_OVER_FLOW">
      </member>
      <member name="syntax_error"
              value="-63"
              c:identifier="GGRN_ERROR_SYNTAX_ERROR">
      </member>
      <member name="retry_max" value="-64" c:identifier="GGRN_ERROR_RETRY_MAX">
      </member>
      <member name="incompatible_file_format"
              value="-65"
              c:identifier="GGRN_ERROR_INCOMPATIBLE_FILE_FORMAT">
      </member>
      <member name="update_not_allowed"
              value="-66"
              c:identifier="GGRN_ERROR_UPDATE_NOT_ALLOWED">
      </member>
      <member name="too_small_offset"
              value="-67"
              c:identifier="GGRN_ERROR_TOO_SMALL_OFFSET">
      </member>
      <member name="too_large_offset"
              value="-68"
              c:identifier="GGRN_ERROR_TOO_LARGE_OFFSET">
      </member>
      <member name="too_small_limit"
              value="-69"
              c:identifier="GGRN_ERROR_TOO_SMALL_LIMIT">
      </member>
      <member name="cas_error" value="-70" c:identifier="GGRN_ERROR_CAS_ERROR">
      </member>
      <member name="unsupported_command_version"
              value="-71"
              c:identifier="GGRN_ERROR_UNSUPPORTED_COMMAND_VERSION">
      </member>
      <member name="normalizer_error"
              value="-72"
              c:identifier="GGRN_ERROR_NORMALIZER_ERROR">
      </member>
    </enumeration>
    <function name="error_quark" c:identifier="ggrn_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_to_string" c:identifier="ggrn_error_to_string">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <type name="Error" c:type="GGrnError"/>
        </parameter>
      </parameters>
    </function>
    <function name="fin" c:identifier="ggrn_fin" throws="1">
      <doc xml:space="preserve">Finalize Groonga GObject. You must call this function after you
finish to use Groonga GObject.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, FALSE if an error occurred.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="init" c:identifier="ggrn_init" throws="1">
      <doc xml:space="preserve">Initialize Groonga GObject. You must call this function before
you use any Groonga GObject functions.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, FALSE if an error occurred.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
  </namespace>
</repository>
