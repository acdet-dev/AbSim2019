<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="xapian-glib-1.0"/>
  <c:include name="xapian-glib.h"/>
  <namespace name="Xapian"
             version="1.0"
             shared-library="libxapian-glib-1.0-0.dll"
             c:identifier-prefixes="Xapian"
             c:symbol-prefixes="xapian">
    <class name="Database"
           c:symbol-prefix="database"
           c:type="XapianDatabase"
           parent="GObject.Object"
           glib:type-name="XapianDatabase"
           glib:get-type="xapian_database_get_type"
           glib:type-struct="DatabaseClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="xapian_database_new" throws="1">
        <doc xml:space="preserve">Creates and initializes a new, empty #XapianDatabase instance.

If the initialization was not successful, @error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianDatabase instance,
  or %NULL if the initialization failed</doc>
          <type name="Database" c:type="XapianDatabase*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_path"
                   c:identifier="xapian_database_new_with_path"
                   throws="1">
        <doc xml:space="preserve">Creates and initializes a new #XapianDatabase at @path.

If the initialization was not successful, @error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianDatabase instance
  for the given @path, or %NULL if the initialization failed</doc>
          <type name="Database" c:type="XapianDatabase*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">the path to the database</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_database" c:identifier="xapian_database_add_database">
        <doc xml:space="preserve">Adds an existing database (or group of databases) to those
accessed by @db.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
          <parameter name="new_db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="xapian_database_close">
        <doc xml:space="preserve">Explicitly closes a database.

#XapianDatabase instances are implicitly closed when being
finalized, so you'll rarely need to call this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="xapian_database_get_description">
        <doc xml:space="preserve">Retrieves a string describing the #XapianDatabase.

Typically, this function is used when debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description of the database</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_doc_count"
              c:identifier="xapian_database_get_doc_count">
        <doc xml:space="preserve">Retrieves the number of documents in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of documents in the database</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document"
              c:identifier="xapian_database_get_document"
              throws="1">
        <doc xml:space="preserve">Retrieves the #XapianDocument with the given @docid inside
the database.

If the @docid was not found, @error is set and %NULL is
returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #XapianDocument instance</doc>
          <type name="Document" c:type="XapianDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">the document id to retrieve</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_doc_id"
              c:identifier="xapian_database_get_last_doc_id">
        <doc xml:space="preserve">Retrieves the highest document id in use in the database</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the highest document id in use</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="xapian_database_get_metadata"
              throws="1">
        <doc xml:space="preserve">Retrieves custom metadata associated to a key inside the
#XapianDatabase.

In case of error, this function returns %NULL and sets
the @error argument.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the stored metadata.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a key to access in the database metadata</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="xapian_database_get_uuid">
        <doc xml:space="preserve">Retrieves a unique identifier for a #XapianDatabase.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a unique identifier for the database</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reopen"
              c:identifier="xapian_database_reopen"
              version="1.2">
        <doc xml:space="preserve">Reopens a #XapianDatabase.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The path to the database directory.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <enumeration name="DatabaseAction"
                 glib:type-name="XapianDatabaseAction"
                 glib:get-type="xapian_database_action_get_type"
                 c:type="XapianDatabaseAction">
      <doc xml:space="preserve">Actions for #XapianWritableDatabase.</doc>
      <member name="create_or_open"
              value="1"
              c:identifier="XAPIAN_DATABASE_ACTION_CREATE_OR_OPEN"
              glib:nick="create-or-open">
        <doc xml:space="preserve">Create a database or open if it
  already exists</doc>
      </member>
      <member name="create"
              value="2"
              c:identifier="XAPIAN_DATABASE_ACTION_CREATE"
              glib:nick="create">
        <doc xml:space="preserve">Create a database</doc>
      </member>
      <member name="create_or_overwrite"
              value="3"
              c:identifier="XAPIAN_DATABASE_ACTION_CREATE_OR_OVERWRITE"
              glib:nick="create-or-overwrite">
        <doc xml:space="preserve">Create a database and overwrite
  it if one already exists</doc>
      </member>
      <member name="open"
              value="4"
              c:identifier="XAPIAN_DATABASE_ACTION_OPEN"
              glib:nick="open">
        <doc xml:space="preserve">Open a database</doc>
      </member>
    </enumeration>
    <record name="DatabaseClass"
            c:type="XapianDatabaseClass"
            glib:is-gtype-struct-for="Database">
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Document"
           c:symbol-prefix="document"
           c:type="XapianDocument"
           parent="GObject.Object"
           glib:type-name="XapianDocument"
           glib:get-type="xapian_document_get_type"
           glib:type-struct="DocumentClass">
      <constructor name="new" c:identifier="xapian_document_new">
        <doc xml:space="preserve">Creates a new, empty document.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianDocument</doc>
          <type name="Document" c:type="XapianDocument*"/>
        </return-value>
      </constructor>
      <method name="add_boolean_term"
              c:identifier="xapian_document_add_boolean_term">
        <doc xml:space="preserve">Adds a term to the document without incrementing the WDF.

This function is the equivalent of xapian_document_add_term_full()
with a WDF increment set to 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_posting" c:identifier="xapian_document_add_posting">
        <doc xml:space="preserve">Adds a term to the document, with positional information.

See also: xapian_document_add_term(), xapian_document_add_term_full()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="term_pos" transfer-ownership="none">
            <doc xml:space="preserve">the position of @tname</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="wdf_increment" transfer-ownership="none">
            <doc xml:space="preserve">the increment to be applied to the WDF</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_term" c:identifier="xapian_document_add_term">
        <doc xml:space="preserve">Adds a term to the document, without positional information,
and with a default WDF increment of 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_term_full"
              c:identifier="xapian_document_add_term_full">
        <doc xml:space="preserve">Adds a term to the document, without positional information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="wdf_increment" transfer-ownership="none">
            <doc xml:space="preserve">the increment to be applied to the WDF</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_value" c:identifier="xapian_document_add_value">
        <doc xml:space="preserve">Sets (or replaces) @value at the given @slot number inside
the @document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a slot number</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value to associate to the @slot number</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_terms" c:identifier="xapian_document_clear_terms">
        <doc xml:space="preserve">Clears all the terms stored in the @document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_values" c:identifier="xapian_document_clear_values">
        <doc xml:space="preserve">Removes all values from @document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="xapian_document_get_data">
        <doc xml:space="preserve">Retrieves the content of @document.

This is a potentially expensive operation, so it should not be
used when matching a document; typically, you should use the
values API (xapian_document_add_value() and xapian_document_get_value())
for fast access to matching terms or data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string containing the contents
  of the document</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="xapian_document_get_description">
        <doc xml:space="preserve">Retrieves a description of @document, typically used when
debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description of the document</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_doc_id" c:identifier="xapian_document_get_doc_id">
        <doc xml:space="preserve">Retrieves the document id of @document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the document id</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_termlist_count"
              c:identifier="xapian_document_get_termlist_count">
        <doc xml:space="preserve">Retrieves the number of terms registered in the @document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of terms</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="xapian_document_get_value">
        <doc xml:space="preserve">Retrieves the value associated to the @slot number inside @document.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the value, or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a slot number</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values_count"
              c:identifier="xapian_document_get_values_count">
        <doc xml:space="preserve">Retrieves the number of values in the @document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of values</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_posting"
              c:identifier="xapian_document_remove_posting">
        <doc xml:space="preserve">Removes a posting of a term inside @document.

Note that the term will still index the document, even if all the
occurrences have been removed. To completely remove @tname from
the @document, use xapian_document_remove_term() instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="term_pos" transfer-ownership="none">
            <doc xml:space="preserve">the position of the term</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="wdf_decrement" transfer-ownership="none">
            <doc xml:space="preserve">the decrement to be applied to the WDF when
  removing the term</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_term" c:identifier="xapian_document_remove_term">
        <doc xml:space="preserve">Removes @tname from the list of terms stored inside @document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="tname" transfer-ownership="none">
            <doc xml:space="preserve">the term to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_value" c:identifier="xapian_document_remove_value">
        <doc xml:space="preserve">Removes any value associated with the @slot number.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a slot number</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="xapian_document_set_data">
        <doc xml:space="preserve">Sets the contents of the @document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the content of the document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DocumentClass"
            c:type="XapianDocumentClass"
            glib:is-gtype-struct-for="Document">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Enquire"
           c:symbol-prefix="enquire"
           c:type="XapianEnquire"
           parent="GObject.Object"
           glib:type-name="XapianEnquire"
           glib:get-type="xapian_enquire_get_type"
           glib:type-struct="EnquireClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="xapian_enquire_new" throws="1">
        <doc xml:space="preserve">Creates and initializes a new #XapianEnquire instance for the
given #XapianDatabase.

If the initializion failed, @error is set, and this function
will return %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianEnquire instance</doc>
          <type name="Enquire" c:type="XapianEnquire*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_mset"
              c:identifier="xapian_enquire_get_mset"
              throws="1">
        <doc xml:space="preserve">Retrieves @max_items items matching the #XapianQuery used with
the @enquire instance.

If @first is zero, the first item returned will be the one with
the highest score. If non-zero, the value will be the number of
items ignored. A combination of @first and @max_items can be used
to paginate the matching results.

In case of error, @error will be set, and this function will
return %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #XapianMSet containing the matching
  documents</doc>
          <type name="MSet" c:type="XapianMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="first" transfer-ownership="none">
            <doc xml:space="preserve">the first item in the result set</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="max_items" transfer-ownership="none">
            <doc xml:space="preserve">the maximum number of results to return</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_query" c:identifier="xapian_enquire_get_query">
        <doc xml:space="preserve">Retrieves the #XapianQuery set using xapian_enquire_set_query().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #XapianQuery or %NULL if none is set</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_collapse_key"
              c:identifier="xapian_enquire_set_collapse_key"
              version="1.2">
        <doc xml:space="preserve">Sets the collapse key for the #XapianEnquire instance with the default
collapse_max value of 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="collapse_key" transfer-ownership="none">
            <doc xml:space="preserve">value number to collapse on</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_collapse_key_full"
              c:identifier="xapian_enquire_set_collapse_key_full"
              version="1.2">
        <doc xml:space="preserve">Sets the collapse key for the #XapianEnquire instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="collapse_key" transfer-ownership="none">
            <doc xml:space="preserve">value number to collapse on</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="collapse_max" transfer-ownership="none">
            <doc xml:space="preserve">Max number of items with the same key to leave after collapsing</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cutoff"
              c:identifier="xapian_enquire_set_cutoff"
              version="1.2">
        <doc xml:space="preserve">Set the percentage cutoffs with no weight cutoff.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="percent_cutoff" transfer-ownership="none">
            <doc xml:space="preserve">Minimum percentage score for returned documents. If a
                 document has a lower percentage score than this, it will
                 not appear in the MSet.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cutoff_full"
              c:identifier="xapian_enquire_set_cutoff_full"
              version="1.2">
        <doc xml:space="preserve">Set the percentage and weight cutoffs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="percent_cutoff" transfer-ownership="none">
            <doc xml:space="preserve">Minimum percentage score for returned documents. If a
                 document has a lower percentage score than this, it will
                 not appear in the MSet.</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="weight_cutoff" transfer-ownership="none">
            <doc xml:space="preserve">Minimum weight for a document to be returned. If a document
                has a lower score that this, it will not appear in the MSet</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query" c:identifier="xapian_enquire_set_query">
        <doc xml:space="preserve">Sets the #XapianQuery for the #XapianEnquire instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </parameter>
          <parameter name="qlen" transfer-ownership="none">
            <doc xml:space="preserve">the length of the @query</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_by_value"
              c:identifier="xapian_enquire_set_sort_by_value"
              version="1.2">
        <doc xml:space="preserve">Set the sorting to be by value only.
Note that sorting by values uses a string comparison; to use this function to sort by a numeric
value you will have to store the values in a way that sorts appropriately, for instance by padding
the numbers using leading zeros — e.g. `001, 002, 003, ...`.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enquire" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianEnquire</doc>
            <type name="Enquire" c:type="XapianEnquire*"/>
          </instance-parameter>
          <parameter name="sort_key" transfer-ownership="none">
            <doc xml:space="preserve">value number to sort on.</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve">If true, reverses the sort order.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #XapianDatabase to query.</doc>
        <type name="Database"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="EnquireClass"
            c:type="XapianEnquireClass"
            glib:is-gtype-struct-for="Enquire">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="Error"
                 glib:type-name="XapianError"
                 glib:get-type="xapian_error_get_type"
                 c:type="XapianError"
                 glib:error-domain="xapian-error-quark">
      <doc xml:space="preserve">Error codes for the %XAPIAN_ERROR error domain.</doc>
      <member name="assertion"
              value="0"
              c:identifier="XAPIAN_ERROR_ASSERTION"
              glib:nick="assertion">
        <doc xml:space="preserve">Assertion failure</doc>
      </member>
      <member name="invalid_argument"
              value="1"
              c:identifier="XAPIAN_ERROR_INVALID_ARGUMENT"
              glib:nick="invalid-argument">
        <doc xml:space="preserve">Invalid argument</doc>
      </member>
      <member name="invalid_operation"
              value="2"
              c:identifier="XAPIAN_ERROR_INVALID_OPERATION"
              glib:nick="invalid-operation">
        <doc xml:space="preserve">Invalid operation</doc>
      </member>
      <member name="unimplemented"
              value="3"
              c:identifier="XAPIAN_ERROR_UNIMPLEMENTED"
              glib:nick="unimplemented">
        <doc xml:space="preserve">Operation not implemented</doc>
      </member>
      <member name="database"
              value="4"
              c:identifier="XAPIAN_ERROR_DATABASE"
              glib:nick="database">
        <doc xml:space="preserve">Database error</doc>
      </member>
      <member name="database_corrupt"
              value="5"
              c:identifier="XAPIAN_ERROR_DATABASE_CORRUPT"
              glib:nick="database-corrupt">
        <doc xml:space="preserve">Database is corrupt</doc>
      </member>
      <member name="database_create"
              value="6"
              c:identifier="XAPIAN_ERROR_DATABASE_CREATE"
              glib:nick="database-create">
        <doc xml:space="preserve">Failed to create a database</doc>
      </member>
      <member name="database_lock"
              value="7"
              c:identifier="XAPIAN_ERROR_DATABASE_LOCK"
              glib:nick="database-lock">
        <doc xml:space="preserve">Failed to acquire the lock on a database</doc>
      </member>
      <member name="database_modified"
              value="8"
              c:identifier="XAPIAN_ERROR_DATABASE_MODIFIED"
              glib:nick="database-modified">
        <doc xml:space="preserve">Database modified after opening</doc>
      </member>
      <member name="database_opening"
              value="9"
              c:identifier="XAPIAN_ERROR_DATABASE_OPENING"
              glib:nick="database-opening">
        <doc xml:space="preserve">Unable to open the database</doc>
      </member>
      <member name="database_version"
              value="10"
              c:identifier="XAPIAN_ERROR_DATABASE_VERSION"
              glib:nick="database-version">
        <doc xml:space="preserve">Version mismatch when opening the database</doc>
      </member>
      <member name="doc_not_found"
              value="11"
              c:identifier="XAPIAN_ERROR_DOC_NOT_FOUND"
              glib:nick="doc-not-found">
        <doc xml:space="preserve">Document not found</doc>
      </member>
      <member name="feature_unavailable"
              value="12"
              c:identifier="XAPIAN_ERROR_FEATURE_UNAVAILABLE"
              glib:nick="feature-unavailable">
        <doc xml:space="preserve">Feature not available with the current backend</doc>
      </member>
      <member name="internal"
              value="13"
              c:identifier="XAPIAN_ERROR_INTERNAL"
              glib:nick="internal">
        <doc xml:space="preserve">Internal state error</doc>
      </member>
      <member name="network"
              value="14"
              c:identifier="XAPIAN_ERROR_NETWORK"
              glib:nick="network">
        <doc xml:space="preserve">Network error</doc>
      </member>
      <member name="network_timeout"
              value="15"
              c:identifier="XAPIAN_ERROR_NETWORK_TIMEOUT"
              glib:nick="network-timeout">
        <doc xml:space="preserve">Network timeout error</doc>
      </member>
      <member name="query_parser"
              value="16"
              c:identifier="XAPIAN_ERROR_QUERY_PARSER"
              glib:nick="query-parser">
        <doc xml:space="preserve">Error when parsing a query string</doc>
      </member>
      <member name="serialisation"
              value="17"
              c:identifier="XAPIAN_ERROR_SERIALISATION"
              glib:nick="serialisation">
        <doc xml:space="preserve">Error when serialising or deserialising data</doc>
      </member>
      <member name="range"
              value="18"
              c:identifier="XAPIAN_ERROR_RANGE"
              glib:nick="range">
        <doc xml:space="preserve">Out of bounds access</doc>
      </member>
      <member name="type_last"
              value="19"
              c:identifier="XAPIAN_ERROR_LAST"
              glib:nick="type-last">
      </member>
      <function name="quark" c:identifier="xapian_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <constant name="GLIB_MAJOR_VERSION"
              value="1"
              c:type="XAPIAN_GLIB_MAJOR_VERSION">
      <doc xml:space="preserve">Evaluates to the major version of the Xapian-GLib version,
e.g. 1 if the version is 1.2.3.

Use this macro for compile-time checks.

For run-time checks, use xapian_glib_major_version() instead.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GLIB_MICRO_VERSION"
              value="1"
              c:type="XAPIAN_GLIB_MICRO_VERSION">
      <doc xml:space="preserve">Evaluates to the micro version of the Xapian-GLib version,
e.g. 3 if the version is 1.2.3.

Use this macro for compile-time checks.

For run-time checks, use xapian_glib_micro_version() instead.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GLIB_MINOR_VERSION"
              value="2"
              c:type="XAPIAN_GLIB_MINOR_VERSION">
      <doc xml:space="preserve">Evaluates to the minor version of the Xapian-GLib version,
e.g. 2 if the version is 1.2.3.

Use this macro for compile-time checks.

For run-time checks, use xapian_glib_minor_version() instead.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GLIB_VERSION_S"
              value="1.2.1"
              c:type="XAPIAN_GLIB_VERSION_S">
      <doc xml:space="preserve">Evaluates to a string with the version of Xapian-GLib, useful
for concatenating or for printing.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="MSet"
           c:symbol-prefix="mset"
           c:type="XapianMSet"
           parent="GObject.Object"
           glib:type-name="XapianMSet"
           glib:get-type="xapian_mset_get_type"
           glib:type-struct="MSetClass">
      <method name="convert_to_percent"
              c:identifier="xapian_mset_convert_to_percent">
        <doc xml:space="preserve">Converts a weight, typically returned by
xapian_mset_iterator_get_weight(), into a percentage.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the weight of an item expressed as a percentage</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
          <parameter name="weight" transfer-ownership="none">
            <doc xml:space="preserve">the weight of an item</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_begin" c:identifier="xapian_mset_get_begin">
        <doc xml:space="preserve">Creates an iterator placed before the beginning of the @mset.

In order to access the contents of the @mset through the
#XapianMSetIterator API you will have to advance the iterator
first, e.g.:

|[&lt;!-- language=C --&gt;
  XapianMSetIter *iter = xapian_mset_get_begin (mset);

  while (xapian_mset_iterator_next (iter))
    {
      // ...
    }

  g_object_unref (iter);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianMSetIterator instance</doc>
          <type name="MSetIterator" c:type="XapianMSetIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end" c:identifier="xapian_mset_get_end">
        <doc xml:space="preserve">Creates a new #XapianMSetIterator placed after the end of the @mset.

In order to access the contents of the @mset through the
#XapianMSetIterator API you will have to advance the iterator
first, e.g.:

|[&lt;!-- language=C --&gt;
  XapianMSetIter *iter = xapian_mset_get_end (mset);

  while (xapian_mset_iterator_prev (iter))
    {
      // ...
    }

  g_object_unref (iter);
]|</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianMSetIterator instance</doc>
          <type name="MSetIterator" c:type="XapianMSetIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_firstitem" c:identifier="xapian_mset_get_firstitem">
        <doc xml:space="preserve">Retrieves the index of the first item in the @mset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index of the first item</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matches_estimated"
              c:identifier="xapian_mset_get_matches_estimated">
        <doc xml:space="preserve">Retrieves an estimation of the matching documents in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an estimated number of documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matches_lower_bound"
              c:identifier="xapian_mset_get_matches_lower_bound">
        <doc xml:space="preserve">Retrieves the lower bound of the matching documents in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a lower bound of documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matches_upper_bound"
              c:identifier="xapian_mset_get_matches_upper_bound">
        <doc xml:space="preserve">Retrieves the upper bound of the matching documents in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an upper bound of documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_attained"
              c:identifier="xapian_mset_get_max_attained">
        <doc xml:space="preserve">The greatest weight which is attained by any document in the
database.

If @mset was the result of xapian_enquire_get_mset() with a
first item set to 0, the returned value is the weight of the
first item in the @mset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum weight in the database</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_possible"
              c:identifier="xapian_mset_get_max_possible">
        <doc xml:space="preserve">The maximum possible weight in the @mset.

See also: xapian_mset_get_max_attained()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum weight in the set</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="xapian_mset_get_size">
        <doc xml:space="preserve">Retrieves the number of items in the @mset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of items</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_termfreq" c:identifier="xapian_mset_get_termfreq">
        <doc xml:space="preserve">Retrieves the frequency of the given @term.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frequency of the term</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve">a term</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_termweight" c:identifier="xapian_mset_get_termweight">
        <doc xml:space="preserve">Retrieves the weight of the given @term.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the weight of the term</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve">the term to use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uncollapsed_matches_estimated"
              c:identifier="xapian_mset_get_uncollapsed_matches_estimated">
        <doc xml:space="preserve">Retrieves an estimated number of matching documents in the database if
collapsing was not used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an estimate of matching documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uncollapsed_matches_lower_bound"
              c:identifier="xapian_mset_get_uncollapsed_matches_lower_bound">
        <doc xml:space="preserve">Retrieves the lower bound of the matching documents in the database if
collapsing was not used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a lower bound of documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uncollapsed_matches_upper_bound"
              c:identifier="xapian_mset_get_uncollapsed_matches_upper_bound">
        <doc xml:space="preserve">Retrieves the upper bound of the matching documents in the database if
collapsing was not used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an upper bound of matching documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="xapian_mset_is_empty">
        <doc xml:space="preserve">Checks whether the @mset is empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the set is empty, and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSet</doc>
            <type name="MSet" c:type="XapianMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MSetClass"
            c:type="XapianMSetClass"
            glib:is-gtype-struct-for="MSet">
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="MSetIterator"
           c:symbol-prefix="mset_iterator"
           c:type="XapianMSetIterator"
           parent="GObject.Object"
           glib:type-name="XapianMSetIterator"
           glib:get-type="xapian_mset_iterator_get_type"
           glib:type-struct="MSetIteratorClass">
      <method name="get_collapse_count"
              c:identifier="xapian_mset_iterator_get_collapse_count">
        <doc xml:space="preserve">Retrieves the estimated number of documents that have been
collapsed into the current item pointed by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of collapsed documents</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="xapian_mset_iterator_get_description">
        <doc xml:space="preserve">Retrieves a description of @iter, typically used for debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description of the iterator</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_doc_id"
              c:identifier="xapian_mset_iterator_get_doc_id"
              throws="1">
        <doc xml:space="preserve">Retrieves the id of the document currently pointed by the
iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a document id</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document"
              c:identifier="xapian_mset_iterator_get_document"
              throws="1">
        <doc xml:space="preserve">Retrieves the #XapianDocument currently pointed by the
iterator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #XapianDocument</doc>
          <type name="Document" c:type="XapianDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mset" c:identifier="xapian_mset_iterator_get_mset">
        <doc xml:space="preserve">Retrieves the #XapianMSet that created the @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #XapianMSetIterator</doc>
          <type name="MSet" c:type="XapianMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_percent"
              c:identifier="xapian_mset_iterator_get_percent">
        <doc xml:space="preserve">Retrieves the weight of the current item pointed by @iter
as a percentage between 0 and 100.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the weight of the item as a percentage</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rank" c:identifier="xapian_mset_iterator_get_rank">
        <doc xml:space="preserve">Retrieves the rank of the current item pointed by @iter.

The rank is the position of the item in the ordered list
of results. The rank starts from zero.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the rank of the item</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weight" c:identifier="xapian_mset_iterator_get_weight">
        <doc xml:space="preserve">Retrieves the weight of the current item pointed by @iter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the weight of the item</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_begin" c:identifier="xapian_mset_iterator_is_begin">
        <doc xml:space="preserve">Checks if @iter is at the start of the set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator is at the start</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_end" c:identifier="xapian_mset_iterator_is_end">
        <doc xml:space="preserve">Checks if @iter is at the end of the set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator is at the end</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="xapian_mset_iterator_is_valid">
        <doc xml:space="preserve">Checks whether @iter is valid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="xapian_mset_iterator_next">
        <doc xml:space="preserve">Advances the @iter forward.

You should use the return value to check if @iter is still
valid after being advanced, before using the #XapianMSetIterator
API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator was advanced, and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prev" c:identifier="xapian_mset_iterator_prev">
        <doc xml:space="preserve">Advances the @iter backward.

You should use the return value to check if @iter is still
valid after being advanced, before using the #XapianMSetIterator
API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator was advanced, and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianMSetIterator</doc>
            <type name="MSetIterator" c:type="XapianMSetIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MSetIteratorClass"
            c:type="XapianMSetIteratorClass"
            glib:is-gtype-struct-for="MSetIterator">
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PostingSource"
           c:symbol-prefix="posting_source"
           c:type="XapianPostingSource"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="XapianPostingSource"
           glib:get-type="xapian_posting_source_get_type"
           glib:type-struct="PostingSourceClass">
      <method name="get_description"
              c:identifier="xapian_posting_source_get_description"
              version="1.2">
        <doc xml:space="preserve">Retrieves a string describing the #XapianPostingSource.

Typically, this function is used when debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description of the posting source</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianPostingSource</doc>
            <type name="PostingSource" c:type="XapianPostingSource"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PostingSourceClass"
            c:type="XapianPostingSourceClass"
            glib:is-gtype-struct-for="PostingSource">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Query"
           c:symbol-prefix="query"
           c:type="XapianQuery"
           parent="GObject.Object"
           glib:type-name="XapianQuery"
           glib:get-type="xapian_query_get_type"
           glib:type-struct="QueryClass">
      <constructor name="new" c:identifier="xapian_query_new">
        <doc xml:space="preserve">Creates a new, empty #XapianQuery instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_pair"
                   c:identifier="xapian_query_new_for_pair">
        <doc xml:space="preserve">Creates a new #XapianQuery using two #XapianQuery instances
and an @op between the two.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryOp</doc>
            <type name="QueryOp" c:type="XapianQueryOp"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_term"
                   c:identifier="xapian_query_new_for_term">
        <doc xml:space="preserve">Creates a new #XapianQuery for the given @term.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve">the term to query</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_terms_pair"
                   c:identifier="xapian_query_new_for_terms_pair">
        <doc xml:space="preserve">Creates a new #XapianQuery for the two given terms, using the
given operator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryOp value</doc>
            <type name="QueryOp" c:type="XapianQueryOp"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">the left hand side term</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">the right hand side term</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_value"
                   c:identifier="xapian_query_new_for_value">
        <doc xml:space="preserve">Creates a new #XapianQuery that matches values from a document
value slot.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly creates #XapianQuery</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryOp value, currently either %XAPIAN_QUERY_OP_VALUE_GE
  or %XAPIAN_QUERY_OP_VALUE_LE</doc>
            <type name="QueryOp" c:type="XapianQueryOp"/>
          </parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">the slot number to get the value from</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value to compare</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_posting_source"
                   c:identifier="xapian_query_new_from_posting_source"
                   version="1.2">
        <doc xml:space="preserve">Creates a new #XapianQuery from a posting source.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="posting_source" transfer-ownership="none">
            <doc xml:space="preserve">a posting source</doc>
            <type name="PostingSource" c:type="XapianPostingSource*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="xapian_query_new_from_string">
        <doc xml:space="preserve">Creates a new #XapianQuery from its normal form.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a string containing a query in normal form, as
  returned by xapian_query_serialise()</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_match_all"
                   c:identifier="xapian_query_new_match_all"
                   version="1.2">
        <doc xml:space="preserve">Creates a new #XapianQuery that will match all documents
in the database.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="xapian_query_get_description">
        <doc xml:space="preserve">Retrieves a description of @query, typically used for debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string with a description of the query</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="xapian_query_get_length">
        <doc xml:space="preserve">Retrieves the length of the query.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the length of the query</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="xapian_query_is_empty">
        <doc xml:space="preserve">Checks whether @query is empty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #XapianQuery is empty</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="serialise" c:identifier="xapian_query_serialise">
        <doc xml:space="preserve">Serialises @query into a normal form that can be used
with xapian_query_new_from_string().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the query in normal form</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="Query" c:type="XapianQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueryClass"
            c:type="XapianQueryClass"
            glib:is-gtype-struct-for="Query">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="QueryOp"
                 glib:type-name="XapianQueryOp"
                 glib:get-type="xapian_query_op_get_type"
                 c:type="XapianQueryOp">
      <doc xml:space="preserve">Operators for #XapianQuery.</doc>
      <member name="and"
              value="0"
              c:identifier="XAPIAN_QUERY_OP_AND"
              glib:nick="and">
        <doc xml:space="preserve">filters if both sub-queries are satisfied</doc>
      </member>
      <member name="or"
              value="1"
              c:identifier="XAPIAN_QUERY_OP_OR"
              glib:nick="or">
        <doc xml:space="preserve">filters if either sub-queries are satisfied</doc>
      </member>
      <member name="and_not"
              value="2"
              c:identifier="XAPIAN_QUERY_OP_AND_NOT"
              glib:nick="and-not">
        <doc xml:space="preserve">filters if only the left sub-query is
  satisfied but not the right</doc>
      </member>
      <member name="xor"
              value="3"
              c:identifier="XAPIAN_QUERY_OP_XOR"
              glib:nick="xor">
        <doc xml:space="preserve">filters if either sub-query is satisfied
  but not both</doc>
      </member>
      <member name="and_maybe"
              value="4"
              c:identifier="XAPIAN_QUERY_OP_AND_MAYBE"
              glib:nick="and-maybe">
        <doc xml:space="preserve">filters if left sub-query is satisfied
  but uses the weights for both</doc>
      </member>
      <member name="filter"
              value="5"
              c:identifier="XAPIAN_QUERY_OP_FILTER"
              glib:nick="filter">
        <doc xml:space="preserve">filters as %XAPIAN_QUERY_OP_AND, but
  uses only weights from the left sub-query</doc>
      </member>
      <member name="near"
              value="6"
              c:identifier="XAPIAN_QUERY_OP_NEAR"
              glib:nick="near">
        <doc xml:space="preserve">filters if occurrances of a list of terms
  appear within a specified window of positions</doc>
      </member>
      <member name="phrase"
              value="7"
              c:identifier="XAPIAN_QUERY_OP_PHRASE"
              glib:nick="phrase">
        <doc xml:space="preserve">filters if occurrances of a list of terms
  appear both within a specified window of positions and als in
  the specified order</doc>
      </member>
      <member name="value_range"
              value="8"
              c:identifier="XAPIAN_QUERY_OP_VALUE_RANGE"
              glib:nick="value-range">
        <doc xml:space="preserve">filters by a range of values</doc>
      </member>
      <member name="scale_weight"
              value="9"
              c:identifier="XAPIAN_QUERY_OP_SCALE_WEIGHT"
              glib:nick="scale-weight">
        <doc xml:space="preserve">scales the weight of a sub-query by
  the specified factor</doc>
      </member>
      <member name="elite_set"
              value="10"
              c:identifier="XAPIAN_QUERY_OP_ELITE_SET"
              glib:nick="elite-set">
        <doc xml:space="preserve">picks the best N sub-queries and
  combines them with %XAPIAN_QUERY_OP_OR</doc>
      </member>
      <member name="value_ge"
              value="11"
              c:identifier="XAPIAN_QUERY_OP_VALUE_GE"
              glib:nick="value-ge">
        <doc xml:space="preserve">filters a document value using a
  greater than or equal test</doc>
      </member>
      <member name="value_le"
              value="12"
              c:identifier="XAPIAN_QUERY_OP_VALUE_LE"
              glib:nick="value-le">
        <doc xml:space="preserve">filters a document value using a
  less than or equal test</doc>
      </member>
      <member name="synonym"
              value="13"
              c:identifier="XAPIAN_QUERY_OP_SYNONYM"
              glib:nick="synonym">
        <doc xml:space="preserve">treats a set of sub-queries as synonyms</doc>
      </member>
      <member name="op_last"
              value="14"
              c:identifier="XAPIAN_QUERY_OP_LAST"
              glib:nick="op-last">
      </member>
    </enumeration>
    <class name="QueryParser"
           c:symbol-prefix="query_parser"
           c:type="XapianQueryParser"
           parent="GObject.Object"
           glib:type-name="XapianQueryParser"
           glib:get-type="xapian_query_parser_get_type"
           glib:type-struct="QueryParserClass">
      <constructor name="new" c:identifier="xapian_query_parser_new">
        <doc xml:space="preserve">Creates a new #XapianQueryParser.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQueryParser instance</doc>
          <type name="QueryParser" c:type="XapianQueryParser*"/>
        </return-value>
      </constructor>
      <method name="add_boolean_prefix"
              c:identifier="xapian_query_parser_add_boolean_prefix">
        <doc xml:space="preserve">Adds a boolean term prefix to the query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">the user visible field name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the term prefix to map the @field to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <doc xml:space="preserve">if %TRUE each document can have at most one term
  with the given @prefix</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prefix" c:identifier="xapian_query_parser_add_prefix">
        <doc xml:space="preserve">Adds a probabilistic term prefix.

For instance, calling:

|[&lt;!-- language="C" --&gt;
  xapian_query_parser_add_prefix (parser, "author", "A");
]|

allows the user to search for `author:Orwell`, which will be
converted to a search for `Aorwell`.

It is possible to map multiple fields to the same prefix, for
instance `title` and `subject`.

It is possible to map the same field to multiple prefixes; the
generated query will perform an OR operation on each term.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">the user visible field name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the term prefix to map the @field to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_corrected_query_string"
              c:identifier="xapian_query_parser_get_corrected_query_string"
              version="1.2">
        <doc xml:space="preserve">Get the spelling-corrected query string.

This will only be set if %XAPIAN_QUERY_PARSER_FEATURE_SPELLING_CORRECTION
is specified when xapian_query_parser_parse_query_full() was last called.

If there were no corrections, an empty string is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the corrected query string</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse_query"
              c:identifier="xapian_query_parser_parse_query"
              throws="1">
        <doc xml:space="preserve">Parses a query string and generates a #XapianQuery instance for it.

See also: xapian_query_parser_parse_query_full()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="query_string" transfer-ownership="none">
            <doc xml:space="preserve">the query string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_query_full"
              c:identifier="xapian_query_parser_parse_query_full"
              throws="1">
        <doc xml:space="preserve">Parses @query_string and creates a #XapianQuery instance for it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianQuery instance</doc>
          <type name="Query" c:type="XapianQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQuery</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="query_string" transfer-ownership="none">
            <doc xml:space="preserve">the query string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a bitwise OR of #XapianQueryParserFeature values</doc>
            <type name="QueryParserFeature" c:type="XapianQueryParserFeature"/>
          </parameter>
          <parameter name="default_prefix" transfer-ownership="none">
            <doc xml:space="preserve">the default prefix for terms</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database"
              c:identifier="xapian_query_parser_set_database">
        <doc xml:space="preserve">Sets the @database used by @parser for wildcard expansion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDatabase</doc>
            <type name="Database" c:type="XapianDatabase*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stemmer"
              c:identifier="xapian_query_parser_set_stemmer">
        <doc xml:space="preserve">Sets the stemmer for @parser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="stemmer" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStem</doc>
            <type name="Stem" c:type="XapianStem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stemming_strategy"
              c:identifier="xapian_query_parser_set_stemming_strategy">
        <doc xml:space="preserve">Sets the stemming @strategy for @parser.

The stemming strategy is only used if @parser uses a stemmer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="strategy" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStemStrategy value</doc>
            <type name="StemStrategy" c:type="XapianStemStrategy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stopper"
              c:identifier="xapian_query_parser_set_stopper">
        <doc xml:space="preserve">Sets the @stopper used by @parser stop word elimination.
Since 1.2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianQueryParser</doc>
            <type name="QueryParser" c:type="XapianQueryParser*"/>
          </instance-parameter>
          <parameter name="stopper" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStopper</doc>
            <type name="Stopper" c:type="XapianStopper*"/>
          </parameter>
        </parameters>
      </method>
      <property name="database" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #XapianDatabase to be used for wildcard expansion.</doc>
        <type name="Database"/>
      </property>
      <property name="stemmer" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #XapianStem instance to be used for stemming the query string.</doc>
        <type name="Stem"/>
      </property>
      <property name="stemming-strategy"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The stemming strategy to use with the #XapianStem set with the
#XapianQueryParser:stemmer property.</doc>
        <type name="StemStrategy"/>
      </property>
      <property name="stopper" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #XapianStopper to be used for dropping stop words
Since 1.2</doc>
        <type name="Stopper"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueryParserClass"
            c:type="XapianQueryParserClass"
            glib:is-gtype-struct-for="QueryParser">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="QueryParserFeature"
              glib:type-name="XapianQueryParserFeature"
              glib:get-type="xapian_query_parser_feature_get_type"
              c:type="XapianQueryParserFeature">
      <doc xml:space="preserve">Flags for xapian_query_parser_parse_query_full().</doc>
      <member name="boolean"
              value="1"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_BOOLEAN"
              glib:nick="boolean">
        <doc xml:space="preserve">support AND, OR, etc as well as
  bracketed subexpressions</doc>
      </member>
      <member name="phrase"
              value="2"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_PHRASE"
              glib:nick="phrase">
        <doc xml:space="preserve">support quoted phrases</doc>
      </member>
      <member name="lovehate"
              value="4"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_LOVEHATE"
              glib:nick="lovehate">
        <doc xml:space="preserve">support `+` and `-`</doc>
      </member>
      <member name="boolean_any_case"
              value="8"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_BOOLEAN_ANY_CASE"
              glib:nick="boolean-any-case">
        <doc xml:space="preserve">support AND, OR, etc.
  even if not in upper case</doc>
      </member>
      <member name="wildcard"
              value="16"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_WILDCARD"
              glib:nick="wildcard">
        <doc xml:space="preserve">support right truncation,
  e.g. `Xap*`</doc>
      </member>
      <member name="pure_not"
              value="32"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_PURE_NOT"
              glib:nick="pure-not">
        <doc xml:space="preserve">allow queries such as `NOT apples`</doc>
      </member>
      <member name="partial"
              value="64"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve">enable partial matching</doc>
      </member>
      <member name="spelling_correction"
              value="128"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_SPELLING_CORRECTION"
              glib:nick="spelling-correction">
        <doc xml:space="preserve">enable spelling
  correction</doc>
      </member>
      <member name="synonym"
              value="256"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_SYNONYM"
              glib:nick="synonym">
        <doc xml:space="preserve">enable synonym operator `~`</doc>
      </member>
      <member name="auto_synonyms"
              value="512"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_AUTO_SYNONYMS"
              glib:nick="auto-synonyms">
        <doc xml:space="preserve">enable automatic use of
  synonyms for single terms</doc>
      </member>
      <member name="auto_multiword_synonyms"
              value="1536"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_AUTO_MULTIWORD_SYNONYMS"
              glib:nick="auto-multiword-synonyms">
        <doc xml:space="preserve">enable automatic
  use of synonyms for single terms and groups of terms</doc>
      </member>
      <member name="default"
              value="7"
              c:identifier="XAPIAN_QUERY_PARSER_FEATURE_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve">default flags</doc>
      </member>
    </bitfield>
    <constant name="STEM_LANGUAGE_NONE"
              value="none"
              c:type="XAPIAN_STEM_LANGUAGE_NONE">
      <doc xml:space="preserve">Predefined language for no stemming.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="SimpleStopper"
           c:symbol-prefix="simple_stopper"
           c:type="XapianSimpleStopper"
           parent="Stopper"
           glib:type-name="XapianSimpleStopper"
           glib:get-type="xapian_simple_stopper_get_type"
           glib:type-struct="SimpleStopperClass">
      <constructor name="new" c:identifier="xapian_simple_stopper_new">
        <doc xml:space="preserve">Creates a new #XapianSimpleStopper</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianSimpleStopper instance

Since 1.2</doc>
          <type name="SimpleStopper" c:type="XapianSimpleStopper*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="xapian_simple_stopper_add">
        <doc xml:space="preserve">Adds a single stop word.

Since 1.2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stopper" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianSimpleStopper</doc>
            <type name="SimpleStopper" c:type="XapianSimpleStopper*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">stop word to be added</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Stopper" c:type="XapianStopper"/>
      </field>
    </class>
    <record name="SimpleStopperClass"
            c:type="XapianSimpleStopperClass"
            glib:is-gtype-struct-for="SimpleStopper">
      <field name="parent_instance">
        <type name="StopperClass" c:type="XapianStopperClass"/>
      </field>
    </record>
    <class name="Stem"
           c:symbol-prefix="stem"
           c:type="XapianStem"
           parent="GObject.Object"
           glib:type-name="XapianStem"
           glib:get-type="xapian_stem_get_type"
           glib:type-struct="StemClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="xapian_stem_new">
        <doc xml:space="preserve">Creates a new #XapianStem for the `none` language.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianStem instance</doc>
          <type name="Stem" c:type="XapianStem*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_language"
                   c:identifier="xapian_stem_new_for_language"
                   throws="1">
        <doc xml:space="preserve">Creates and initializes a new #XapianStem for the given @language.

Valid values are the ones returned by xapian_stem_get_available_languages().

If the initialization of the #XapianStem instance failed, this
function returns %NULL and sets @error.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianStem instance</doc>
          <type name="Stem" c:type="XapianStem*"/>
        </return-value>
        <parameters>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve">the language for the stemmer</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_available_languages"
                c:identifier="xapian_stem_get_available_languages">
        <doc xml:space="preserve">Retrieves an array of available languages for #XapianStem.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array
  of available language strings.</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
      </function>
      <method name="get_description"
              c:identifier="xapian_stem_get_description">
        <doc xml:space="preserve">Retrieves a description for @stem, typically used for debugging.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description for the @stem</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stem" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStem</doc>
            <type name="Stem" c:type="XapianStem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="language"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The language used by the stemmer; valid values are the
ones returned by xapian_stem_get_available_languages().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="StemClass"
            c:type="XapianStemClass"
            glib:is-gtype-struct-for="Stem">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="StemStrategy"
                 glib:type-name="XapianStemStrategy"
                 glib:get-type="xapian_stem_strategy_get_type"
                 c:type="XapianStemStrategy">
      <doc xml:space="preserve">Stemming strategies.</doc>
      <member name="stem_none"
              value="0"
              c:identifier="XAPIAN_STEM_STRATEGY_STEM_NONE"
              glib:nick="stem-none">
        <doc xml:space="preserve">do not perform any stemming</doc>
      </member>
      <member name="stem_some"
              value="1"
              c:identifier="XAPIAN_STEM_STRATEGY_STEM_SOME"
              glib:nick="stem-some">
        <doc xml:space="preserve">generate both stemmed and unstemmed terms</doc>
      </member>
      <member name="stem_all"
              value="2"
              c:identifier="XAPIAN_STEM_STRATEGY_STEM_ALL"
              glib:nick="stem-all">
        <doc xml:space="preserve">generate only stemmed terms, without the Z prefix</doc>
      </member>
      <member name="stem_all_z"
              value="3"
              c:identifier="XAPIAN_STEM_STRATEGY_STEM_ALL_Z"
              glib:nick="stem-all-z">
        <doc xml:space="preserve">generate only stemmed terms, with the Z prefix</doc>
      </member>
    </enumeration>
    <class name="Stopper"
           c:symbol-prefix="stopper"
           c:type="XapianStopper"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="XapianStopper"
           glib:get-type="xapian_stopper_get_type"
           glib:type-struct="StopperClass">
      <virtual-method name="get_description" invoker="get_description">
        <doc xml:space="preserve">Returns a string describing this object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">description of the stopper
Since 1.2</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStopper</doc>
            <type name="Stopper" c:type="XapianStopper*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_stop_term" invoker="is_stop_term" version="1.2">
        <doc xml:space="preserve">Checks whether @term is a stopper term.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @term is a stopper term</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStopper</doc>
            <type name="Stopper" c:type="XapianStopper*"/>
          </instance-parameter>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve">a term</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_description"
              c:identifier="xapian_stopper_get_description">
        <doc xml:space="preserve">Returns a string describing this object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">description of the stopper
Since 1.2</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStopper</doc>
            <type name="Stopper" c:type="XapianStopper*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_stop_term"
              c:identifier="xapian_stopper_is_stop_term"
              version="1.2">
        <doc xml:space="preserve">Checks whether @term is a stopper term.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @term is a stopper term</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStopper</doc>
            <type name="Stopper" c:type="XapianStopper*"/>
          </instance-parameter>
          <parameter name="term" transfer-ownership="none">
            <doc xml:space="preserve">a term</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="StopperClass"
            c:type="XapianStopperClass"
            glib:is-gtype-struct-for="Stopper"
            version="1.2">
      <doc xml:space="preserve">The `XapianStopperClass` structure contains only private data.</doc>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="is_stop_term">
        <callback name="is_stop_term">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @term is a stopper term</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #XapianStopper</doc>
              <type name="Stopper" c:type="XapianStopper*"/>
            </parameter>
            <parameter name="term" transfer-ownership="none">
              <doc xml:space="preserve">a term</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_description">
        <callback name="get_description">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">description of the stopper
Since 1.2</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">a #XapianStopper</doc>
              <type name="Stopper" c:type="XapianStopper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TermGenerator"
           c:symbol-prefix="term_generator"
           c:type="XapianTermGenerator"
           parent="GObject.Object"
           glib:type-name="XapianTermGenerator"
           glib:get-type="xapian_term_generator_get_type"
           glib:type-struct="TermGeneratorClass">
      <constructor name="new" c:identifier="xapian_term_generator_new">
        <doc xml:space="preserve">Creates a new #XapianTermGenerator instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianTermGenerator.</doc>
          <type name="TermGenerator" c:type="XapianTermGenerator*"/>
        </return-value>
      </constructor>
      <method name="index_text"
              c:identifier="xapian_term_generator_index_text">
        <doc xml:space="preserve">Indexes @data into the current document.

See also: xapian_term_generator_index_text_full()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the data to be indexed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_text_full"
              c:identifier="xapian_term_generator_index_text_full">
        <doc xml:space="preserve">Indexes @data into the current document.

Unlike xapian_term_generator_index_text(), this function also
allows setting the WDF increment and the default prefix for
the indexed data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the data to be indexed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="wdf_inc" transfer-ownership="none">
            <doc xml:space="preserve">the increment of the WDF</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the default prefix for the indexed data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database"
              c:identifier="xapian_term_generator_set_database">
        <doc xml:space="preserve">Sets the database used to store the indexed data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_document"
              c:identifier="xapian_term_generator_set_document">
        <doc xml:space="preserve">Sets the current document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="xapian_term_generator_set_flags"
              version="1.2">
        <doc xml:space="preserve">Sets the generator's flags</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGeneratorFeature</doc>
            <type name="TermGeneratorFeature"
                  c:type="XapianTermGeneratorFeature"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stemmer"
              c:identifier="xapian_term_generator_set_stemmer">
        <doc xml:space="preserve">Sets the stemmer for @generator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="stemmer" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStem</doc>
            <type name="Stem" c:type="XapianStem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stemming_strategy"
              c:identifier="xapian_term_generator_set_stemming_strategy">
        <doc xml:space="preserve">Sets the stemming strategy for @generator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="generator" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianTermGenerator</doc>
            <type name="TermGenerator" c:type="XapianTermGenerator*"/>
          </instance-parameter>
          <parameter name="strategy" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianStemStrategy value</doc>
            <type name="StemStrategy" c:type="XapianStemStrategy"/>
          </parameter>
        </parameters>
      </method>
      <property name="database" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #XapianWritableDatabase instance used to store the indexed
data.</doc>
        <type name="WritableDatabase"/>
      </property>
      <property name="document" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The currently indexed document.</doc>
        <type name="Document"/>
      </property>
      <property name="flags"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Flags affecting this object's behaviour; see #XapianTermGeneratorFeature.</doc>
        <type name="TermGeneratorFeature"/>
      </property>
      <property name="stemmer" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #XapianStem instance used for stemming the indexed data.

The value of this property is only used when the
#XapianTermGenerator:stemming-strategy property is set
to a value different than %XAPIAN_STEM_STRATEGY_STEM_NONE.</doc>
        <type name="Stem"/>
      </property>
      <property name="stemming-strategy"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The stemming strategy to use when the #XapianTermGenerator:stemmer
property is set.</doc>
        <type name="StemStrategy"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TermGeneratorClass"
            c:type="XapianTermGeneratorClass"
            glib:is-gtype-struct-for="TermGenerator">
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="TermGeneratorFeature"
              version="1.2"
              glib:type-name="XapianTermGeneratorFeature"
              glib:get-type="xapian_term_generator_feature_get_type"
              c:type="XapianTermGeneratorFeature">
      <doc xml:space="preserve">TermGenerator flags</doc>
      <member name="none"
              value="0"
              c:identifier="XAPIAN_TERM_GENERATOR_FEATURE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No features</doc>
      </member>
      <member name="spelling"
              value="1"
              c:identifier="XAPIAN_TERM_GENERATOR_FEATURE_SPELLING"
              glib:nick="spelling">
        <doc xml:space="preserve">Index data required for spelling correction</doc>
      </member>
    </bitfield>
    <class name="ValuePostingSource"
           c:symbol-prefix="value_posting_source"
           c:type="XapianValuePostingSource"
           parent="PostingSource"
           glib:type-name="XapianValuePostingSource"
           glib:get-type="xapian_value_posting_source_get_type"
           glib:type-struct="ValuePostingSourceClass">
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="xapian_value_posting_source_new"
                   version="1.2"
                   throws="1">
        <doc xml:space="preserve">If the initializion failed, @error is set, and this function
will return %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianValuePostingSource instance</doc>
          <type name="ValuePostingSource" c:type="XapianValuePostingSource*"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">slot in the database entries to use for source</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_slot"
              c:identifier="xapian_value_posting_source_get_slot"
              version="1.2">
        <doc xml:space="preserve">Accessor for the value of the #XapianValuePostingSource:slot property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the #XapianValuePostingSource:slot property</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianValuePostingSource</doc>
            <type name="ValuePostingSource"
                  c:type="XapianValuePostingSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="slot"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="PostingSource" c:type="XapianPostingSource"/>
      </field>
    </class>
    <record name="ValuePostingSourceClass"
            c:type="XapianValuePostingSourceClass"
            glib:is-gtype-struct-for="ValuePostingSource">
      <field name="parent_instance">
        <type name="PostingSourceClass" c:type="XapianPostingSourceClass"/>
      </field>
    </record>
    <class name="ValueWeightPostingSource"
           c:symbol-prefix="value_weight_posting_source"
           c:type="XapianValueWeightPostingSource"
           parent="ValuePostingSource"
           glib:type-name="XapianValueWeightPostingSource"
           glib:get-type="xapian_value_weight_posting_source_get_type"
           glib:type-struct="ValueWeightPostingSourceClass">
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="xapian_value_weight_posting_source_new"
                   version="1.2"
                   throws="1">
        <doc xml:space="preserve">If the initializion failed, @error is set, and this function
will return %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianValueWeightPostingSource instance</doc>
          <type name="ValueWeightPostingSource"
                c:type="XapianValueWeightPostingSource*"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">slot in the database entries to use for source</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="ValuePostingSource" c:type="XapianValuePostingSource"/>
      </field>
    </class>
    <record name="ValueWeightPostingSourceClass"
            c:type="XapianValueWeightPostingSourceClass"
            glib:is-gtype-struct-for="ValueWeightPostingSource">
      <field name="parent_instance">
        <type name="ValuePostingSourceClass"
              c:type="XapianValuePostingSourceClass"/>
      </field>
    </record>
    <class name="WritableDatabase"
           c:symbol-prefix="writable_database"
           c:type="XapianWritableDatabase"
           parent="Database"
           glib:type-name="XapianWritableDatabase"
           glib:get-type="xapian_writable_database_get_type"
           glib:type-struct="WritableDatabaseClass">
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="xapian_writable_database_new"
                   throws="1">
        <doc xml:space="preserve">Creates and initialises a #XapianWritableDatabase for the
given @path.

If the initialization was not successful, this function
returns %NULL and sets @error.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #XapianWritableDatabase
  instance</doc>
          <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">the path of the database</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">the action to perform</doc>
            <type name="DatabaseAction" c:type="XapianDatabaseAction"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_document"
              c:identifier="xapian_writable_database_add_document"
              throws="1">
        <doc xml:space="preserve">Adds @document to a database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the document was added, and %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument to add</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </parameter>
          <parameter name="docid_out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for the id of the newly
  added document</doc>
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_spelling"
              c:identifier="xapian_writable_database_add_spelling"
              version="1.2">
        <doc xml:space="preserve">Add a word to the spelling dictionary with a default frequency increase of 1.

If the word is already present, its frequency is increased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">The word to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_spelling_full"
              c:identifier="xapian_writable_database_add_spelling_full"
              version="1.2">
        <doc xml:space="preserve">Add a word to the spelling dictionary.

If the word is already present, its frequency is increased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">The word to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="freqinc" transfer-ownership="none">
            <doc xml:space="preserve">How much to increase its frequency by</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_transaction"
              c:identifier="xapian_writable_database_begin_transaction"
              throws="1">
        <doc xml:space="preserve">Begins a transaction in the database.

See also: xapian_writable_database_commit_transaction(),
  xapian_writable_database_cancel_transaction()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the transaction can be started, and
  %FALSE if the backend does not support transactions or
  if a transaction is already in progress</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="flushed" transfer-ownership="none">
            <doc xml:space="preserve">whether the transaction should be permanently stored
  in the database when committed, or if the transaction should
  only be applied to the database</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_transaction"
              c:identifier="xapian_writable_database_cancel_transaction"
              throws="1">
        <doc xml:space="preserve">Cancels the currently pending transaction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the transaction was successfully cancelled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="commit"
              c:identifier="xapian_writable_database_commit"
              throws="1">
        <doc xml:space="preserve">Commits the pending changes of the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the commit was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="commit_transaction"
              c:identifier="xapian_writable_database_commit_transaction"
              throws="1">
        <doc xml:space="preserve">Commits the currently pending transaction.

If the transaction was started by passing %TRUE to the `flushed`
argument of xapian_writable_database_begin_transaction() then all
the changes caused by the transaction will be permanently stored
inside the database.

In case of error, this function will return %FALSE and set @error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the transaction was successfully committed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_document"
              c:identifier="xapian_writable_database_delete_document"
              throws="1">
        <doc xml:space="preserve">Deletes the document with the given @docid from a database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the document was successfully deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">the document to delete</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_spelling"
              c:identifier="xapian_writable_database_remove_spelling"
              version="1.2">
        <doc xml:space="preserve">Remove a word from the spelling dictionary.

The word's frequency is decreased by 1, and if would become zero or less then
the word is removed completely.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">The word to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_spelling_full"
              c:identifier="xapian_writable_database_remove_spelling_full"
              version="1.2">
        <doc xml:space="preserve">Remove a word from the spelling dictionary.

The word's frequency is decreased, and if would become zero or less then the
word is removed completely.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve">The word to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="freqdec" transfer-ownership="none">
            <doc xml:space="preserve">How much to decrease its frequency by</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_document"
              c:identifier="xapian_writable_database_replace_document"
              throws="1">
        <doc xml:space="preserve">Replaces the #XapianDocument with @docid inside a
#XapianWritableDatabase with the given @document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the document was replaced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianWritableDatabase</doc>
            <type name="WritableDatabase" c:type="XapianWritableDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">the id of the document to replace</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">a #XapianDocument</doc>
            <type name="Document" c:type="XapianDocument*"/>
          </parameter>
        </parameters>
      </method>
      <property name="action"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The action to be performed when creating a database.</doc>
        <type name="DatabaseAction"/>
      </property>
      <field name="parent_instance">
        <type name="Database" c:type="XapianDatabase"/>
      </field>
    </class>
    <record name="WritableDatabaseClass"
            c:type="XapianWritableDatabaseClass"
            glib:is-gtype-struct-for="WritableDatabase">
      <field name="parent_instance">
        <type name="DatabaseClass" c:type="XapianDatabaseClass"/>
      </field>
    </record>
    <function name="error_quark"
              c:identifier="xapian_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="glib_major_version"
              c:identifier="xapian_glib_major_version">
      <doc xml:space="preserve">The major version of the Xapian GLib bindings,
e.g. 1 in 1.2.3</doc>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="glib_micro_version"
              c:identifier="xapian_glib_micro_version">
      <doc xml:space="preserve">The micro version of the Xapian GLib bindings,
e.g. 3 in 1.2.3</doc>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="glib_minor_version"
              c:identifier="xapian_glib_minor_version">
      <doc xml:space="preserve">The minor version of the Xapian GLib bindings,
e.g. 2 in 1.2.3</doc>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="glib_version_string"
              c:identifier="xapian_glib_version_string">
      <doc xml:space="preserve">The version string of the Xapian GLib bindings,
e.g. "1.2.3"</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the version string</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="major_version" c:identifier="xapian_major_version">
      <doc xml:space="preserve">The major version of the underlying Xapian library,
e.g 1 in 1.2.17.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the major version</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="minor_version" c:identifier="xapian_minor_version">
      <doc xml:space="preserve">The minor version of the underlying Xapian library,
e.g. 2 in 1.2.17.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the minor version</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="revision" c:identifier="xapian_revision">
      <doc xml:space="preserve">The revision number of the underlying Xapian library,
e.g. 17 in 1.2.17</doc>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="version_string" c:identifier="xapian_version_string">
      <doc xml:space="preserve">The version string of the underlying Xapian library,
e.g. "1.2.17".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the version string</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
  </namespace>
</repository>
