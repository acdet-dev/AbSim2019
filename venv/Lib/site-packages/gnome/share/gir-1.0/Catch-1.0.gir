<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gom" version="1.0"/>
  <include name="Json" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <namespace name="Catch"
             version="1.0"
             shared-library="libcatch-glib-1.0-0.dll"
             c:identifier-prefixes="Catch"
             c:symbol-prefixes="catch">
    <class name="Activity"
           c:symbol-prefix="activity"
           c:type="CatchActivity"
           parent="Resource"
           glib:type-name="CatchActivity"
           glib:get-type="catch_activity_get_type"
           glib:type-struct="ActivityClass">
      <property name="action" transfer-ownership="none">
        <type name="ActivityAction"/>
      </property>
      <property name="action-type" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object-id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stream-id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="CatchResource"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ActivityPrivate" c:type="CatchActivityPrivate*"/>
      </field>
    </class>
    <enumeration name="ActivityAction"
                 glib:type-name="CatchActivityAction"
                 glib:get-type="catch_activity_action_get_type"
                 c:type="CatchActivityAction">
      <member name="ADDED"
              value="1"
              c:identifier="CATCH_ACTIVITY_ADDED"
              glib:nick="ADDED">
      </member>
      <member name="EDITED"
              value="2"
              c:identifier="CATCH_ACTIVITY_EDITED"
              glib:nick="EDITED">
      </member>
      <member name="REMOVED"
              value="3"
              c:identifier="CATCH_ACTIVITY_REMOVED"
              glib:nick="REMOVED">
      </member>
      <member name="CLAIMED"
              value="4"
              c:identifier="CATCH_ACTIVITY_CLAIMED"
              glib:nick="CLAIMED">
      </member>
    </enumeration>
    <record name="ActivityClass"
            c:type="CatchActivityClass"
            glib:is-gtype-struct-for="Activity">
      <field name="parent_class">
        <type name="ResourceClass" c:type="CatchResourceClass"/>
      </field>
    </record>
    <record name="ActivityPrivate" c:type="CatchActivityPrivate" disguised="1">
    </record>
    <class name="Annotations"
           c:symbol-prefix="annotations"
           c:type="CatchAnnotations"
           parent="GObject.Object"
           glib:type-name="CatchAnnotations"
           glib:get-type="catch_annotations_get_type"
           glib:type-struct="AnnotationsClass">
      <method name="contains" c:identifier="catch_annotations_contains">
        <doc xml:space="preserve">Checks to see if the annotation named @key exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @key was found; otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="annotations" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAnnotations.</doc>
            <type name="Annotations" c:type="CatchAnnotations*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The annotation key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="catch_annotations_get_value">
        <doc xml:space="preserve">Gets the annotation value for a given key such as "location:speed".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @value is set, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="annotations" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAnnotations.</doc>
            <type name="Annotations" c:type="CatchAnnotations*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The annotation key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A location for the value.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="catch_annotations_set_value">
        <doc xml:space="preserve">Sets an annotation for @key. If @value is %NULL, then the annotation
is removed. An annotation should be in a format similar to
"location:speed" or "catch:starred".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="annotations" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAnnotations.</doc>
            <type name="Annotations" c:type="CatchAnnotations*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The annotation key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GValue.</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AnnotationsPrivate" c:type="CatchAnnotationsPrivate*"/>
      </field>
    </class>
    <record name="AnnotationsClass"
            c:type="CatchAnnotationsClass"
            glib:is-gtype-struct-for="Annotations">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AnnotationsPrivate"
            c:type="CatchAnnotationsPrivate"
            disguised="1">
    </record>
    <class name="Attachment"
           c:symbol-prefix="attachment"
           c:type="CatchAttachment"
           parent="Object"
           glib:type-name="CatchAttachment"
           glib:get-type="catch_attachment_get_type"
           glib:type-struct="AttachmentClass">
      <method name="get_content_type"
              c:identifier="catch_attachment_get_content_type">
        <doc xml:space="preserve">Fetches the "content-type" property for @attachment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The "content-type" of the attachment.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAttachment.</doc>
            <type name="Attachment" c:type="CatchAttachment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_uri"
              c:identifier="catch_attachment_get_local_uri">
        <doc xml:space="preserve">Gets the URI to the file represented by @attachment. If the file has not
yet been downloaded, then this will be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A URI to the file or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAttachment.</doc>
            <type name="Attachment" c:type="CatchAttachment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="catch_attachment_get_size">
        <doc xml:space="preserve">Fetches the size of the attachment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint64 representing the file size.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAttachment.</doc>
            <type name="Attachment" c:type="CatchAttachment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_local_uri"
              c:identifier="catch_attachment_set_local_uri">
        <doc xml:space="preserve">Sets the URI to the file as found on the local system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAttachment.</doc>
            <type name="Attachment" c:type="CatchAttachment*"/>
          </instance-parameter>
          <parameter name="local_uri" transfer-ownership="none">
            <doc xml:space="preserve">The path to the attachment as a URI.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "content-type" of the attachment.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local-uri" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The URI of where the attachment can be found on the local system.
If the file has not yet been downloaded, this may be a remote
URI or %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The size of the attachment in bytes. If this is not yet known,
this may be zero.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="CatchObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AttachmentPrivate" c:type="CatchAttachmentPrivate*"/>
      </field>
    </class>
    <record name="AttachmentClass"
            c:type="CatchAttachmentClass"
            glib:is-gtype-struct-for="Attachment">
      <field name="parent_class">
        <type name="ObjectClass" c:type="CatchObjectClass"/>
      </field>
    </record>
    <record name="AttachmentPrivate"
            c:type="CatchAttachmentPrivate"
            disguised="1">
    </record>
    <class name="Audio"
           c:symbol-prefix="audio"
           c:type="CatchAudio"
           parent="Attachment"
           glib:type-name="CatchAudio"
           glib:get-type="catch_audio_get_type"
           glib:type-struct="AudioClass">
      <method name="get_duration" c:identifier="catch_audio_get_duration">
        <doc xml:space="preserve">Fetches the duration of the #CatchAudio if it is known. If the duration
is not known, then zero is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The duration in seconds.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="audio" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAudio.</doc>
            <type name="Audio" c:type="CatchAudio*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_duration" c:identifier="catch_audio_set_duration">
        <doc xml:space="preserve">Sets the duration of @audio in seconds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="audio" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchAudio.</doc>
            <type name="Audio" c:type="CatchAudio*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve">The duration of the audio in seconds.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="duration" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "duration" of the #CatchAudio. This may be zero if the duration
is not yet known.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="Attachment" c:type="CatchAttachment"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AudioPrivate" c:type="CatchAudioPrivate*"/>
      </field>
    </class>
    <record name="AudioClass"
            c:type="CatchAudioClass"
            glib:is-gtype-struct-for="Audio">
      <field name="parent_class">
        <type name="AttachmentClass" c:type="CatchAttachmentClass"/>
      </field>
    </record>
    <record name="AudioPrivate" c:type="CatchAudioPrivate" disguised="1">
    </record>
    <class name="CheckItem"
           c:symbol-prefix="check_item"
           c:type="CatchCheckItem"
           parent="Object"
           glib:type-name="CatchCheckItem"
           glib:get-type="catch_check_item_get_type"
           glib:type-struct="CheckItemClass">
      <field name="parent">
        <type name="Object" c:type="CatchObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CheckItemPrivate" c:type="CatchCheckItemPrivate*"/>
      </field>
    </class>
    <record name="CheckItemClass"
            c:type="CatchCheckItemClass"
            glib:is-gtype-struct-for="CheckItem">
      <field name="parent_class">
        <type name="ObjectClass" c:type="CatchObjectClass"/>
      </field>
    </record>
    <record name="CheckItemPrivate"
            c:type="CatchCheckItemPrivate"
            disguised="1">
    </record>
    <class name="Comment"
           c:symbol-prefix="comment"
           c:type="CatchComment"
           parent="Object"
           glib:type-name="CatchComment"
           glib:get-type="catch_comment_get_type"
           glib:type-struct="CommentClass">
      <field name="parent">
        <type name="Object" c:type="CatchObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CommentPrivate" c:type="CatchCommentPrivate*"/>
      </field>
    </class>
    <record name="CommentClass"
            c:type="CatchCommentClass"
            glib:is-gtype-struct-for="Comment">
      <field name="parent_class">
        <type name="ObjectClass" c:type="CatchObjectClass"/>
      </field>
    </record>
    <record name="CommentPrivate" c:type="CatchCommentPrivate" disguised="1">
    </record>
    <class name="Image"
           c:symbol-prefix="image"
           c:type="CatchImage"
           parent="Attachment"
           glib:type-name="CatchImage"
           glib:get-type="catch_image_get_type"
           glib:type-struct="ImageClass">
      <method name="get_height" c:identifier="catch_image_get_height">
        <doc xml:space="preserve">Fetches the height of the image if it is known. If not, zero
is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The height of the image or zero.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchImage.</doc>
            <type name="Image" c:type="CatchImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="catch_image_get_width">
        <doc xml:space="preserve">Fetches the width of the image. If the width has not yet been
calculated, then zero is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The width, or zero.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchImage.</doc>
            <type name="Image" c:type="CatchImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The height of the image in pixels. If the height is unknown,
this property is zero.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The width of the image in pixels. If the width is unknown,
this property is zero.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Attachment" c:type="CatchAttachment"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ImagePrivate" c:type="CatchImagePrivate*"/>
      </field>
    </class>
    <record name="ImageClass"
            c:type="CatchImageClass"
            glib:is-gtype-struct-for="Image">
      <field name="parent_class">
        <type name="AttachmentClass" c:type="CatchAttachmentClass"/>
      </field>
    </record>
    <record name="ImagePrivate" c:type="CatchImagePrivate" disguised="1">
    </record>
    <class name="Note"
           c:symbol-prefix="note"
           c:type="CatchNote"
           parent="Object"
           glib:type-name="CatchNote"
           glib:get-type="catch_note_get_type"
           glib:type-struct="NoteClass">
      <field name="parent">
        <type name="Object" c:type="CatchObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotePrivate" c:type="CatchNotePrivate*"/>
      </field>
    </class>
    <record name="NoteClass"
            c:type="CatchNoteClass"
            glib:is-gtype-struct-for="Note">
      <field name="parent_class">
        <type name="ObjectClass" c:type="CatchObjectClass"/>
      </field>
    </record>
    <record name="NotePrivate" c:type="CatchNotePrivate" disguised="1">
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="CatchObject"
           parent="Resource"
           glib:type-name="CatchObject"
           glib:get-type="catch_object_get_type"
           glib:type-struct="ObjectClass">
      <method name="get_text" c:identifier="catch_object_get_text">
        <doc xml:space="preserve">Fetches the text associated with the object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The text as a UTF-8 string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchObject.</doc>
            <type name="Object" c:type="CatchObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="catch_object_set_text">
        <doc xml:space="preserve">Sets the text associated with the object. This is limited to 100,000
UTF-8 characters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchObject.</doc>
            <type name="Object" c:type="CatchObject*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The new text for @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="text" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "text" property is the text associated with the object. It
is limited to 100,000 characters.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="unknown-spaces" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "unknown-spaces" property is a list of spaces that
the object exists within, but the client does not know about.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent">
        <type name="Resource" c:type="CatchResource"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectPrivate" c:type="CatchObjectPrivate*"/>
      </field>
    </class>
    <record name="ObjectClass"
            c:type="CatchObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent_class">
        <type name="ResourceClass" c:type="CatchResourceClass"/>
      </field>
    </record>
    <record name="ObjectPrivate" c:type="CatchObjectPrivate" disguised="1">
    </record>
    <bitfield name="Pending"
              glib:type-name="CatchPending"
              glib:get-type="catch_pending_get_type"
              c:type="CatchPending">
      <member name="NONE"
              value="0"
              c:identifier="CATCH_PENDING_NONE"
              glib:nick="NONE">
      </member>
      <member name="CREATE"
              value="1"
              c:identifier="CATCH_PENDING_CREATE"
              glib:nick="CREATE">
      </member>
      <member name="DELETE"
              value="2"
              c:identifier="CATCH_PENDING_DELETE"
              glib:nick="DELETE">
      </member>
      <member name="UPDATE"
              value="3"
              c:identifier="CATCH_PENDING_UPDATE"
              glib:nick="UPDATE">
      </member>
      <member name="IN_SYNC"
              value="4"
              c:identifier="CATCH_PENDING_IN_SYNC"
              glib:nick="IN_SYNC">
      </member>
    </bitfield>
    <class name="Resource"
           c:symbol-prefix="resource"
           c:type="CatchResource"
           parent="Gom.Resource"
           glib:type-name="CatchResource"
           glib:get-type="catch_resource_get_type"
           glib:type-struct="ResourceClass">
      <function name="error_quark" c:identifier="catch_resource_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="load_from_json"
                      invoker="load_from_json"
                      throws="1">
        <doc xml:space="preserve">Loads @resource using the resource described in @node. The properties
of the resource are parsed from fields in @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #JsonNode.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_to_json" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_created_at"
              c:identifier="catch_resource_get_created_at">
        <doc xml:space="preserve">Fetches the time that @resource was created by the client.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created_by"
              c:identifier="catch_resource_get_created_by">
        <doc xml:space="preserve">Fetches the "created-by" property of @resource, the id of the user
who created the resource.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created_by_name"
              c:identifier="catch_resource_get_created_by_name">
        <doc xml:space="preserve">Fetches the "created-by-name" property. This is the human readable name
of resources creator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deleted" c:identifier="catch_resource_get_deleted">
        <doc xml:space="preserve">Fetches the "deleted" property. This will be %TRUE if the resource has been
marked for deletion or has been deleted by the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @resource has been deleted; otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_id" c:identifier="catch_resource_get_local_id">
        <doc xml:space="preserve">Sets the "local-id" property. This is the identifier to locate @resource
in the local database. If @resource has not been stored to the local
database, this will be -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">None.
Side effects: None.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified_at"
              c:identifier="catch_resource_get_modified_at">
        <doc xml:space="preserve">Fetches the "modified-at" property of @resource. This is the time the
resource was last modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_id" c:identifier="catch_resource_get_remote_id">
        <doc xml:space="preserve">Fetches the "remote-id" property. This is the id used to locate the
resource on the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the remote id, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server_modified_at"
              c:identifier="catch_resource_get_server_modified_at">
        <doc xml:space="preserve">Fetches the "server-modified-at" property. This is an opaque token used
to track the version of the resource. It is used to prevent collisions
when synchronizing the local database with the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the "server-modified-at".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_json"
              c:identifier="catch_resource_load_from_json"
              throws="1">
        <doc xml:space="preserve">Loads @resource using the resource described in @node. The properties
of the resource are parsed from fields in @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #JsonNode.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_created_at"
              c:identifier="catch_resource_set_created_at">
        <doc xml:space="preserve">Sets the "created-at" property for @resource.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="created_at" transfer-ownership="none">
            <doc xml:space="preserve">A #GDateTime.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_created_by"
              c:identifier="catch_resource_set_created_by">
        <doc xml:space="preserve">Sets the "created-by" property of @resource. This is the id of the
user who created @resource.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="created_by" transfer-ownership="none">
            <doc xml:space="preserve">The owner of the resource.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_created_by_name"
              c:identifier="catch_resource_set_created_by_name">
        <doc xml:space="preserve">Sets the name of the user who created @resource.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="created_by_name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the creator.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_deleted" c:identifier="catch_resource_set_deleted">
        <doc xml:space="preserve">Sets the "deleted" property of @resource. See catch_resource_get_deleted()
for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="deleted" transfer-ownership="none">
            <doc xml:space="preserve">If the resource has been deleted.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_id" c:identifier="catch_resource_set_local_id">
        <doc xml:space="preserve">Sets the local identifier for the resource. This should be the id of
the row in the database that can be used to load the resource.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="local_id" transfer-ownership="none">
            <doc xml:space="preserve">The local identifier for the resource.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modified_at"
              c:identifier="catch_resource_set_modified_at">
        <doc xml:space="preserve">Sets the "modified-at" property for @resource.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="modified_at" transfer-ownership="none">
            <doc xml:space="preserve">A #GDateTime.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_id" c:identifier="catch_resource_set_remote_id">
        <doc xml:space="preserve">Sets the "remote-id" property. The "remote-id" is used to locate the
resource on the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="remote_id" transfer-ownership="none">
            <doc xml:space="preserve">A string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_server_modified_at"
              c:identifier="catch_resource_set_server_modified_at">
        <doc xml:space="preserve">Sets the "server-modified-at" property. See
catch_resource_get_server_modified_at() for more information on this
property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResource.</doc>
            <type name="Resource" c:type="CatchResource*"/>
          </instance-parameter>
          <parameter name="server_modified_at" transfer-ownership="none">
            <doc xml:space="preserve">The "server-modified-at" string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="created-at" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "created-at" property.</doc>
        <type name="GLib.DateTime"/>
      </property>
      <property name="created-by" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "created-by" property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="created-by-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "created-by-name" property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="deleted" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "deleted" property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="local-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "local-id" property.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="modified-at" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "modified-at" property.</doc>
        <type name="GLib.DateTime"/>
      </property>
      <property name="pending" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "pending" property.</doc>
        <type name="Pending"/>
      </property>
      <property name="remote-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "remote-id" property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="server-deleted-at"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The "server-deleted-at" property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="server-modified-at"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The "server-modified-at" property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Gom.Resource" c:type="GomResource"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ResourcePrivate" c:type="CatchResourcePrivate*"/>
      </field>
    </class>
    <record name="ResourceClass"
            c:type="CatchResourceClass"
            glib:is-gtype-struct-for="Resource">
      <field name="parent_class">
        <type name="Gom.ResourceClass" c:type="GomResourceClass"/>
      </field>
      <field name="load_from_json">
        <callback name="load_from_json" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="resource" transfer-ownership="none">
              <doc xml:space="preserve">A #CatchResource.</doc>
              <type name="Resource" c:type="CatchResource*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <doc xml:space="preserve">A #JsonNode.</doc>
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_to_json">
        <callback name="save_to_json" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="resource" transfer-ownership="none">
              <type name="Resource" c:type="CatchResource*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ResourceError" c:type="CatchResourceError">
    </enumeration>
    <class name="ResourceGroup"
           c:symbol-prefix="resource_group"
           c:type="CatchResourceGroup"
           parent="GObject.Object"
           glib:type-name="CatchResourceGroup"
           glib:get-type="catch_resource_group_get_type"
           glib:type-struct="ResourceGroupClass">
      <method name="fetch_async"
              c:identifier="catch_resource_group_fetch_async">
        <doc xml:space="preserve">Asynchronously requests that @count resources starting from @index_ be
loaded from either the remote API or the local SQLite database. @callback
is responsible for calling catch_resource_group_fetch_finish().

Once this operation has completed, you may access the loaded resource
using catch_resource_group_get_resource().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResourceGroup.</doc>
            <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">The start index to fetch.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve">The number of resources to fetch starting from @index_.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_finish"
              c:identifier="catch_resource_group_fetch_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to catch_resource_group_fetch_async().
%TRUE is returned if the resources were loaded, otherwise %FALSE and
@error is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResourceGroup.</doc>
            <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="catch_resource_group_get_count">
        <doc xml:space="preserve">Fetches the number of #CatchResource instances that are in @group. Make
sure the instances are loaded into memory using
catch_resource_group_fetch_async() before accessing them with
catch_resource_group_get_resource().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of resources in @group.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResourceGroup.</doc>
            <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource"
              c:identifier="catch_resource_group_get_resource">
        <doc xml:space="preserve">Fetches the resource found at @index_. catch_resource_group_fetch_async()
must have been called to load a range including this resource.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GomResource.</doc>
          <type name="Resource" c:type="CatchResource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchResourceGroup.</doc>
            <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">The index of the resource to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="count" transfer-ownership="none">
        <doc xml:space="preserve">The number of resources in the #CatchResourceGroup.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="filter"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A filter used to search for resources.</doc>
        <type name="Gom.Filter"/>
      </property>
      <property name="group"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The handle to the GomResourceGroup used for accessing items
from the SQLite database.</doc>
        <type name="Gom.ResourceGroup"/>
      </property>
      <property name="resource-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GType of #CatchResource instances to fetch.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="session"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #CatchSession to use for querying and credentials.</doc>
        <type name="Session"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ResourceGroupPrivate" c:type="CatchResourceGroupPrivate*"/>
      </field>
    </class>
    <record name="ResourceGroupClass"
            c:type="CatchResourceGroupClass"
            glib:is-gtype-struct-for="ResourceGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ResourceGroupPrivate"
            c:type="CatchResourceGroupPrivate"
            disguised="1">
    </record>
    <record name="ResourcePrivate" c:type="CatchResourcePrivate" disguised="1">
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="CatchSession"
           parent="Soup.SessionAsync"
           glib:type-name="CatchSession"
           glib:get-type="catch_session_get_type"
           glib:type-struct="SessionClass">
      <constructor name="new" c:identifier="catch_session_new">
        <doc xml:space="preserve">Creates a new #CatchSession.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CatchSession which should be freed with g_object_unref().</doc>
          <type name="Session" c:type="CatchSession*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="catch_session_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_activities_async"
              c:identifier="catch_session_get_activities_async">
        <doc xml:space="preserve">Asynchronously requests the available activities for the session. If the
session is using SQLite for storage, the query will be executed there.
If no local storage is being used, an HTTP request will be made to the
Catch API server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional #GomFilter.</doc>
            <type name="Gom.Filter" c:type="GomFilter*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activities_finish"
              c:identifier="catch_session_get_activities_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to fetch a list of activities.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CatchResourceGroup.</doc>
          <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bearer_token"
              c:identifier="catch_session_get_bearer_token">
        <doc xml:space="preserve">Retrieves the OAuth2 bearer_token used for the Catch.com API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the bearer_token, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects_async"
              c:identifier="catch_session_get_objects_async">
        <doc xml:space="preserve">Asynchronously requests the available objects for the session. If the
session is using SQLite for storage, the query will be executed there.
If no local storage is being used, an HTTP request will be made to the
Catch API server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional #GomFilter.</doc>
            <type name="Gom.Filter" c:type="GomFilter*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A callback to be executed upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_objects_finish"
              c:identifier="catch_session_get_objects_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to fetch a list of objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CatchResourceGroup.</doc>
          <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="catch_session_get_port">
        <doc xml:space="preserve">Fetches the port to use when connecting to the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the port.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secure" c:identifier="catch_session_get_secure">
        <doc xml:space="preserve">Fetches the "secure" property, indiciating if SSL should be used. SSL
must always be used with the Catch hosted service. So only set this to
%FALSE if you are reverse engineering the hosted service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if SSL is to be used.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server" c:identifier="catch_session_get_server">
        <doc xml:space="preserve">Fetches the name of the server in which to connect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the server.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spaces_async"
              c:identifier="catch_session_get_spaces_async">
        <doc xml:space="preserve">Asynchronously requests the available spaces for the session. If the
session is using SQLite for storage, the query will be executed there.
If no local storage is being used, an HTTP request will be made to the
Catch API server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional #GomFilter.</doc>
            <type name="Gom.Filter" c:type="GomFilter*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spaces_finish"
              c:identifier="catch_session_get_spaces_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to fetch a list of spaces.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CatchResourceGroup.</doc>
          <type name="ResourceGroup" c:type="CatchResourceGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bearer_token"
              c:identifier="catch_session_set_bearer_token">
        <doc xml:space="preserve">Set the OAuth2 bearer_token to use in the Catch.com API.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="bearer_token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The OAuth2 bearer_token, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_dir_async"
              c:identifier="catch_session_set_data_dir_async">
        <doc xml:space="preserve">Sets the directory to use for user storage by @session. This will be
loaded asynchronously and the database opened. Upon completion, @callback
will be executed and it MUST call catch_session_set_data_dir_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="data_dir" transfer-ownership="none">
            <doc xml:space="preserve">The path to the data directory.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_dir_finish"
              c:identifier="catch_session_set_data_dir_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to set the data directory with
catch_session_set_data_dir_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="catch_session_set_port">
        <doc xml:space="preserve">Sets the port to use when connecting to the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">The port number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secure" c:identifier="catch_session_set_secure">
        <doc xml:space="preserve">Sets if SSL should be used when connecting to the Catch hosted service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="secure" transfer-ownership="none">
            <doc xml:space="preserve">If SSL should be used.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_server" c:identifier="catch_session_set_server">
        <doc xml:space="preserve">Sets the server which should be connected to. This is typically
"catch.com". However, if you have reverse engineered the API you would
set this to hostname of your server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the server.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync_async" c:identifier="catch_session_sync_async">
        <doc xml:space="preserve">This function will asynchronously synchronize the local database with
the catch.com services. @callback must call catch_session_sync_finish()
to complete the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve">A callback to be executed upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync_finish"
              c:identifier="catch_session_sync_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to catch_session_sync_async().
This must be called from the callback provided to
catch_session_sync_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSession.</doc>
            <type name="Session" c:type="CatchSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bearer-token" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "bearer-token" property containing the OAuth2 token.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "port" property containing the port to connect to.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="secure" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">If SSL should be used. This is always required with the Catch hosted
service.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="server" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "server" property. This is the server that should be connected
to. This is always "catch.com" for the Catch hosted service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Soup.SessionAsync" c:type="SoupSessionAsync"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionPrivate" c:type="CatchSessionPrivate*"/>
      </field>
    </class>
    <record name="SessionClass"
            c:type="CatchSessionClass"
            glib:is-gtype-struct-for="Session">
      <field name="parent_class">
        <type name="Soup.SessionAsyncClass" c:type="SoupSessionAsyncClass"/>
      </field>
    </record>
    <enumeration name="SessionEnum" c:type="CatchSessionEnum">
    </enumeration>
    <record name="SessionPrivate" c:type="CatchSessionPrivate" disguised="1">
    </record>
    <class name="Space"
           c:symbol-prefix="space"
           c:type="CatchSpace"
           parent="Resource"
           glib:type-name="CatchSpace"
           glib:get-type="catch_space_get_type"
           glib:type-struct="SpaceClass">
      <method name="get_name" c:identifier="catch_space_get_name">
        <doc xml:space="preserve">Fetches the name of the space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="space" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSpace.</doc>
            <type name="Space" c:type="CatchSpace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects_async"
              c:identifier="catch_space_get_objects_async">
        <doc xml:space="preserve">Fetches the objects found in a space using the filter provided.
@callback is responsible for calling catch_space_get_objects_finish()
to complete the request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="space" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSpace.</doc>
            <type name="Space" c:type="CatchSpace*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">A #GomFilter.</doc>
            <type name="Gom.Filter" c:type="GomFilter*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_objects_finish"
              c:identifier="catch_space_get_objects_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to fetch a group of objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GomResourceGroup.</doc>
          <type name="Gom.ResourceGroup" c:type="GomResourceGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="space" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSpace.</doc>
            <type name="Space" c:type="CatchSpace*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="catch_space_set_name">
        <doc xml:space="preserve">Sets the name of the space. This is limited to 64 characters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="space" transfer-ownership="none">
            <doc xml:space="preserve">A #CatchSpace.</doc>
            <type name="Space" c:type="CatchSpace*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "name" property. This is limited to 64 UTF-8 characters.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Resource" c:type="CatchResource"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SpacePrivate" c:type="CatchSpacePrivate*"/>
      </field>
    </class>
    <record name="SpaceClass"
            c:type="CatchSpaceClass"
            glib:is-gtype-struct-for="Space">
      <field name="parent_class">
        <type name="ResourceClass" c:type="CatchResourceClass"/>
      </field>
    </record>
    <record name="SpacePrivate" c:type="CatchSpacePrivate" disguised="1">
    </record>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="CatchTask"
           parent="GObject.InitiallyUnowned"
           glib:type-name="CatchTask"
           glib:get-type="catch_task_get_type"
           glib:type-struct="TaskClass">
      <implements name="Gio.AsyncResult"/>
      <constructor name="new" c:identifier="catch_task_new">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_all_of"
                   c:identifier="catch_task_new_all_of"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_all_of_valist"
                   c:identifier="catch_task_new_all_of_valist"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_any_of"
                   c:identifier="catch_task_new_any_of"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_any_of_valist"
                   c:identifier="catch_task_new_any_of_valist"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_n_of"
                   c:identifier="catch_task_new_n_of"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_required" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_n_of_valist"
                   c:identifier="catch_task_new_n_of_valist"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_required" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_func"
                   c:identifier="catch_task_new_with_func">
        <return-value transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="task_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <type name="TaskFunc" c:type="CatchTaskFunc"/>
          </parameter>
          <parameter name="task_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="task_notify"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="completed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_dependency" c:identifier="catch_task_add_dependency">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="dependency" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete" c:identifier="catch_task_complete">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="complete_in_idle"
              c:identifier="catch_task_complete_in_idle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error" c:identifier="catch_task_get_error">
        <return-value transfer-ownership="none">
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_error" c:identifier="catch_task_get_is_error">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_thread" c:identifier="catch_task_get_use_thread">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print_tree" c:identifier="catch_task_print_tree">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="propagate_error"
              c:identifier="catch_task_propagate_error"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_dependency"
              c:identifier="catch_task_remove_dependency">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="dependency" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="catch_task_run">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_all"
              c:identifier="catch_task_run_all"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="run_all_valist"
              c:identifier="catch_task_run_all_valist"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="first_task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="tasks" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error" c:identifier="catch_task_set_error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_thread" c:identifier="catch_task_set_use_thread">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="use_thread" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="catch_task_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_boolean"
              c:identifier="catch_task_set_value_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="v_boolean" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_int" c:identifier="catch_task_set_value_int">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="v_int" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_string"
              c:identifier="catch_task_set_value_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="v_str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_error" c:identifier="catch_task_take_error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="CatchTask*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <property name="callback"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="callback-data"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="is-error" transfer-ownership="none">
        <doc xml:space="preserve">The "is-error" property denotes if the task finished unsuccessfuly.
If this is %TRUE, then you may fetch the error using
catch_task_get_error().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="source-object"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <property name="use-thread" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "use-thread" property denotes that the task should be executed
within a thread rather than on the main loop. This might be ideal if
your task needs to run a long blocking call and you do not want to
manage using a thread pool directly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TaskPrivate" c:type="CatchTaskPrivate*"/>
      </field>
      <glib:signal name="completed" when="first">
        <doc xml:space="preserve">The "completed" signal is emitted when the task has finished its
execution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TaskClass"
            c:type="CatchTaskClass"
            glib:is-gtype-struct-for="Task">
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="completed">
        <callback name="completed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="CatchTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute">
        <callback name="execute">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="CatchTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="TaskFunc" c:type="CatchTaskFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Task" c:type="CatchTask*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TaskPrivate" c:type="CatchTaskPrivate" disguised="1">
    </record>
    <class name="TaskSync"
           c:symbol-prefix="task_sync"
           c:type="CatchTaskSync"
           parent="Task"
           glib:type-name="CatchTaskSync"
           glib:get-type="catch_task_sync_get_type"
           glib:type-struct="TaskSyncClass">
      <implements name="Gio.AsyncResult"/>
      <property name="api"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="repository"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <field name="parent">
        <type name="Task" c:type="CatchTask"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TaskSyncPrivate" c:type="CatchTaskSyncPrivate*"/>
      </field>
    </class>
    <record name="TaskSyncClass"
            c:type="CatchTaskSyncClass"
            glib:is-gtype-struct-for="TaskSync">
      <field name="parent_class">
        <type name="TaskClass" c:type="CatchTaskClass"/>
      </field>
    </record>
    <record name="TaskSyncPrivate" c:type="CatchTaskSyncPrivate" disguised="1">
    </record>
  </namespace>
</repository>
