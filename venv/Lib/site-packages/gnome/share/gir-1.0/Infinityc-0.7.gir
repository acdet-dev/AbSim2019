<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Infinity" version="0.7"/>
  <package name="libinfinity-0.7"/>
  <namespace name="Infinityc"
             version="0.7"
             shared-library="libinfinity-0.7-0.dll"
             c:identifier-prefixes="Infc"
             c:symbol-prefixes="infc">
    <class name="Browser"
           c:symbol-prefix="browser"
           c:type="InfcBrowser"
           parent="GObject.Object"
           glib:type-name="InfcBrowser"
           glib:get-type="infc_browser_get_type"
           glib:type-struct="BrowserClass">
      <doc xml:space="preserve">#InfcBrowser is an opaque data type. You should only access it via the
public API functions.</doc>
      <implements name="Infinity.Browser"/>
      <implements name="Infinity.CommunicationObject"/>
      <constructor name="new" c:identifier="infc_browser_new">
        <doc xml:space="preserve">Creates a new #InfcBrowser.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #InfcBrowser.</doc>
          <type name="Browser" c:type="InfcBrowser*"/>
        </return-value>
        <parameters>
          <parameter name="io" transfer-ownership="none">
            <doc xml:space="preserve">A #InfIo object used to schedule timeouts.</doc>
            <type name="Infinity.Io" c:type="InfIo*"/>
          </parameter>
          <parameter name="comm_manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfCommunicationManager to register the server connection
and which forwards incoming data to the browser or running sessions.</doc>
            <type name="Infinity.CommunicationManager"
                  c:type="InfCommunicationManager*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">Connection to the server.</doc>
            <type name="Infinity.XmlConnection" c:type="InfXmlConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_plugin" c:identifier="infc_browser_add_plugin">
        <doc xml:space="preserve">Adds @plugin to @browser. This allows the browser to create sessions of
the plugin's type. Only one plugin of each type can be added to the
directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether the plugin was added successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcNotePlugin.</doc>
            <type name="NotePlugin" c:type="const InfcNotePlugin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chat_session"
              c:identifier="infc_browser_get_chat_session">
        <doc xml:space="preserve">Returns the #InfcSessionProxy representing the running chat session if the
local client is subscribed to it, or %NULL otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfcSessionProxy for the chat,
or %NULL.</doc>
          <type name="SessionProxy" c:type="InfcSessionProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_communication_manager"
              c:identifier="infc_browser_get_communication_manager">
        <doc xml:space="preserve">Returns the communication manager of this browser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfCommunicationManager.</doc>
          <type name="Infinity.CommunicationManager"
                c:type="InfCommunicationManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection" c:identifier="infc_browser_get_connection">
        <doc xml:space="preserve">Returns the connection to the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfXmlConnection.</doc>
          <type name="Infinity.XmlConnection" c:type="InfXmlConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscribe_chat_request"
              c:identifier="infc_browser_get_subscribe_chat_request">
        <doc xml:space="preserve">Returns the #InfRequest that represests the request sent to the server
which attempts to subscribe to its chat. If there is no such request
running, then the function returns %NULL. After such a request finishes,
call infc_browser_get_chat_session() to get the #InfcSessionProxy for the
chat session. To initiate the request, call infc_browser_subscribe_chat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfRequest, or %NULL.</doc>
          <type name="Infinity.Request" c:type="InfRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="iter_get_sync_in"
              c:identifier="infc_browser_iter_get_sync_in">
        <doc xml:space="preserve">Returns the #InfcSessionProxy that is used to synchronize the note @iter
points to to the server. Such a node is created by
inf_browser_add_note() with non-%NULL @session parameter. If the client is
subscribed to this note, then this returns the same session as
inf_browser_get_session(). However, it is possible that we
synchronize this node to the server without being subscribed to it. In
this case, this function returns the session that does the synchronization,
while inf_browser_get_session() would return %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfcSessionProxy, or %NULL if we
are currently not synchronizing this node to the server.</doc>
          <type name="SessionProxy" c:type="InfcSessionProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #InfBrowserIter pointing to a note in @browser.</doc>
            <type name="Infinity.BrowserIter" c:type="const InfBrowserIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_get_sync_in_requests"
              c:identifier="infc_browser_iter_get_sync_in_requests">
        <doc xml:space="preserve">Returns a list of all #InfRequest&lt;!-- --&gt;s created with
inf_browser_add_note() with the node @iter points to as
parent. Such requests begin a synchronization to the server when they
have finished.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of
#InfRequest&lt;!-- --&gt;s. Free with g_slist_free() when done.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Infinity.Request"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #InfBrowserIter pointing to a subdirectory node in @browser.</doc>
            <type name="Infinity.BrowserIter" c:type="const InfBrowserIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_is_valid" c:identifier="infc_browser_iter_is_valid">
        <doc xml:space="preserve">Returns whether @iter points to a valid node in @browser. This is
generally the case for any #InfBrowserIter returned by one of the
InfcBrowser functions, it gets invalid however as soon as the node it
points to is removed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether @iter points to a node in @browser.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #InfBrowserIter.</doc>
            <type name="Infinity.BrowserIter" c:type="const InfBrowserIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="iter_save_session"
              c:identifier="infc_browser_iter_save_session">
        <doc xml:space="preserve">Requests that the server saves the note pointed to by @iter into its
background storage. Normally, the server only does this when it is either
shut down or when the there are no more subscriptions to the note. Note that
this is merely a request and the server might decide not to save the
session for whatever reason.

The request might either finish during the call to this function, in which
case @func will be called and %NULL being returned. If the request does not
finish within the function call, a #InfRequest object is returned,
where @func has been installed for the #InfRequest::finished signal,
so that it is called as soon as the request finishes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfRequest that may be used to
get notified when the request finishes or fails.</doc>
          <type name="Infinity.Request" c:type="InfRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #InfBrowserIter pointing to a note in @browser.</doc>
            <type name="Infinity.BrowserIter" c:type="const InfBrowserIter*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">The function to be called when the request finishes,
or %NULL.</doc>
            <type name="Infinity.RequestFunc" c:type="InfRequestFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Additional data to pass to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_plugin" c:identifier="infc_browser_lookup_plugin">
        <doc xml:space="preserve">Returns a previously registered plugin (see infc_browser_add_plugin()) for
the given note type, or %NULL if there is no such plugin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfcNotePlugin, or %NULL.</doc>
          <type name="NotePlugin" c:type="const InfcNotePlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="note_type" transfer-ownership="none">
            <doc xml:space="preserve">A note type, such as "InfText".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="subscribe_chat" c:identifier="infc_browser_subscribe_chat">
        <doc xml:space="preserve">Attempts to subscribe to the server's chat. When the operation finishes
infc_browser_get_chat_session() will return a #InfcSessionProxy
representing the chat session. It can be used to read the chat's content.
The request can fail in case the server chat is disabled.

The request might either finish during the call to this function, in which
case @func will be called and %NULL being returned. If the request does not
finish within the function call, a #InfRequest object is returned,
where @func has been installed for the #InfRequest::finished signal,
so that it is called as soon as the request finishes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfRequest that may be used to
get notified when the request finishes or fails.</doc>
          <type name="Infinity.Request" c:type="InfRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="browser" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcBrowser.</doc>
            <type name="Browser" c:type="InfcBrowser*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve">The function to be called when the request
finishes, or %NULL.</doc>
            <type name="Infinity.RequestFunc" c:type="InfRequestFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Additional data to pass to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="chat-session" transfer-ownership="none">
        <type name="SessionProxy"/>
      </property>
      <property name="communication-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Infinity.CommunicationManager"/>
      </property>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Infinity.XmlConnection"/>
      </property>
      <property name="io"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Infinity.Io"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="BrowserClass"
            c:type="InfcBrowserClass"
            glib:is-gtype-struct-for="Browser">
      <doc xml:space="preserve">This structure does not contain any public fields.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NotePlugin" c:type="InfcNotePlugin">
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="note_type" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="session_new" introspectable="0" writable="1">
        <type name="NotePluginSessionNew" c:type="InfcNotePluginSessionNew"/>
      </field>
    </record>
    <callback name="NotePluginSessionNew"
              c:type="InfcNotePluginSessionNew"
              introspectable="0">
      <return-value>
        <type name="Infinity.Session" c:type="InfSession*"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Infinity.Io" c:type="InfIo*"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="Infinity.CommunicationManager"
                c:type="InfCommunicationManager*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="Infinity.SessionStatus" c:type="InfSessionStatus"/>
        </parameter>
        <parameter name="arg3" transfer-ownership="none">
          <type name="Infinity.CommunicationGroup"
                c:type="InfCommunicationGroup*"/>
        </parameter>
        <parameter name="arg4" transfer-ownership="none">
          <type name="Infinity.XmlConnection" c:type="InfXmlConnection*"/>
        </parameter>
        <parameter name="arg5" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="arg6" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ProgressRequest"
           c:symbol-prefix="progress_request"
           c:type="InfcProgressRequest"
           parent="Request"
           glib:type-name="InfcProgressRequest"
           glib:get-type="infc_progress_request_get_type"
           glib:type-struct="ProgressRequestClass">
      <doc xml:space="preserve">#InfcProgressRequest is an opaque data type. You should only access it via
the public API functions.</doc>
      <implements name="Infinity.Request"/>
      <method name="get_initiated"
              c:identifier="infc_progress_request_get_initiated">
        <doc xml:space="preserve">Returns whether the request was initiated, i.e. the total number of items
is known.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether the request was initiated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcProgressRequest.</doc>
            <type name="ProgressRequest" c:type="InfcProgressRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="initiated" c:identifier="infc_progress_request_initiated">
        <doc xml:space="preserve">Initiates the request. A progress request is considered initiated as soon
as the total number of items is known.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">An #InfcProgressRequest.</doc>
            <type name="ProgressRequest" c:type="InfcProgressRequest*"/>
          </instance-parameter>
          <parameter name="total" transfer-ownership="none">
            <doc xml:space="preserve">The total number of items.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="progress" c:identifier="infc_progress_request_progress">
        <doc xml:space="preserve">Indicates that one more operation has been performed and changes the
#InfcProgressRequest:current property accordingly. The request must be
initiated before this function can be called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcProgressRequest.</doc>
            <type name="ProgressRequest" c:type="InfcProgressRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="current" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="total" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Request" c:type="InfcRequest"/>
      </field>
    </class>
    <record name="ProgressRequestClass"
            c:type="InfcProgressRequestClass"
            glib:is-gtype-struct-for="ProgressRequest">
      <doc xml:space="preserve">This structure does not contain any public fields.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="RequestClass" c:type="InfcRequestClass"/>
      </field>
    </record>
    <class name="Request"
           c:symbol-prefix="request"
           c:type="InfcRequest"
           parent="GObject.Object"
           glib:type-name="InfcRequest"
           glib:get-type="infc_request_get_type"
           glib:type-struct="RequestClass">
      <doc xml:space="preserve">#InfcRequest is an opaque data type. You should only access it
via the public API functions.</doc>
      <implements name="Infinity.Request"/>
      <property name="node-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="seq"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="RequestClass"
            c:type="InfcRequestClass"
            glib:is-gtype-struct-for="Request">
      <doc xml:space="preserve">This structure does not contain any public fields.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="RequestManager"
           c:symbol-prefix="request_manager"
           c:type="InfcRequestManager"
           parent="GObject.Object"
           glib:type-name="InfcRequestManager"
           glib:get-type="infc_request_manager_get_type"
           glib:type-struct="RequestManagerClass">
      <doc xml:space="preserve">#InfcRequestManager is an opaque data type. You should only access it via
the public API functions.</doc>
      <constructor name="new" c:identifier="infc_request_manager_new">
        <doc xml:space="preserve">Creates a new #InfcRequestManager.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #InfcRequestManager.</doc>
          <type name="RequestManager" c:type="InfcRequestManager*"/>
        </return-value>
        <parameters>
          <parameter name="seq_id" transfer-ownership="none">
            <doc xml:space="preserve">The local sequence ID.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="request_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="Request" c:type="InfcRequest*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="Request" c:type="InfcRequest*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_request"
              c:identifier="infc_request_manager_add_request"
              introspectable="0">
        <doc xml:space="preserve">Adds a request to the request manager. A new signal handler for the
request's "finished" signal will be installed and made to invoke the given
callback.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The generated #InfcRequest (actually of type
@request_type).</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request_type" transfer-ownership="none">
            <doc xml:space="preserve">The type of request to add, such as #InfcProgressRequest.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="request_name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the request, such as "explore-node" or
"subscribe-session".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GCallback that will be called when the request
has completed, or %NULL.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Additional data passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve">The first property name apart from name and seq to
set for the new request.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">The value of the first property, followed optionally by more
name/value pairs, followed by %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_request_valist"
              c:identifier="infc_request_manager_add_request_valist"
              introspectable="0">
        <doc xml:space="preserve">Adds a request to the request manager. A new signal handler for the
request's "finished" signal will be installed and made to invoke the given
callback.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The generated #InfcRequest (actually of type
@request_type).</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request_type" transfer-ownership="none">
            <doc xml:space="preserve">The type of request to add, such as #InfcProgressRequest.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="request_name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the request, such as &amp;quot;explore-node&amp;quot; or
&amp;quot;subscribe-session&amp;quot;</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GCallback that will be called when the request
has completed, or %NULL.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Additional data passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve">The first property name apart from name and seq to
set for the new request.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arglist" transfer-ownership="none">
            <doc xml:space="preserve">The value of the first property, followed optionally by more
name/value pairs, followed by %NULL.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="infc_request_manager_clear">
        <doc xml:space="preserve">Removes all the requests in @manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fail_request"
              c:identifier="infc_request_manager_fail_request">
        <doc xml:space="preserve">Marks @request as failed using inf_request_fail() and then removes the
request from the manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequest that has previously been added to @manager.</doc>
            <type name="Request" c:type="InfcRequest*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">Error information why the request failed.</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="finish_request"
              c:identifier="infc_request_manager_finish_request">
        <doc xml:space="preserve">Marks @request as finished using inf_request_finish() and then removes the
request from the manager. The function takes ownership of @result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequest that has previously been added to @manager.</doc>
            <type name="Request" c:type="InfcRequest*"/>
          </parameter>
          <parameter name="result" transfer-ownership="full">
            <doc xml:space="preserve">The request result.</doc>
            <type name="Infinity.RequestResult" c:type="InfRequestResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_named_request"
              c:identifier="infc_request_manager_foreach_named_request">
        <doc xml:space="preserve">Calls the given function for each request that has been added to the
request manager that has the name @name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the request to look for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">The function to be called.</doc>
            <type name="RequestManagerForeachFunc"
                  c:type="InfcRequestManagerForeachFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Arbitrary data to be passed to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_request"
              c:identifier="infc_request_manager_foreach_request">
        <doc xml:space="preserve">Calls the given function for each request that has been added to the
request manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The function to be called.</doc>
            <type name="RequestManagerForeachFunc"
                  c:type="InfcRequestManagerForeachFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Arbitrary data to be passed to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_by_seq"
              c:identifier="infc_request_manager_get_request_by_seq">
        <doc xml:space="preserve">Returns a previously-added request that has the given seq.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The request with the given seq,
or %NULL if there is no such request.</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="seq" transfer-ownership="none">
            <doc xml:space="preserve">The sequence number to which the request should be retrieved.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_by_xml"
              c:identifier="infc_request_manager_get_request_by_xml"
              throws="1">
        <doc xml:space="preserve">Looks whether there is a "seq" attribute in @xml. If not, the function
returns %NULL (without setting @error). Otherwise, it returns the request
with the given seq and name, if the sequence ID matches. If the "seq"
attribute is set but the actual request is not present (or has another
name), the function returns %NULL and @error is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The resulting request, or %NULL
if the "seq" attribute was not present or an error occured.</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the expected request. May be %NULL to allow all requests.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve">XML node that is supposed to contain a "seq" attribute.</doc>
            <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_by_xml_required"
              c:identifier="infc_request_manager_get_request_by_xml_required"
              throws="1">
        <doc xml:space="preserve">Looks whether there is a "seq" attribute in @xml. If so, it returns the
request with the given seq and name, if the sequence ID matches. If the
"seq" attribute is not set or the actual request is not present (or has
another name), the function returns %NULL and @error is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The resulting request, or %NULL if an error
occured.</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the expected request. May be %NULL to allow all requests.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve">XML node that is supposed to contain a "seq" attribute.</doc>
            <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_request"
              c:identifier="infc_request_manager_remove_request">
        <doc xml:space="preserve">Removes a request from the request manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequestManager.</doc>
            <type name="RequestManager" c:type="InfcRequestManager*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcRequest that has previously been added to @manager.</doc>
            <type name="Request" c:type="InfcRequest*"/>
          </parameter>
        </parameters>
      </method>
      <property name="sequence-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="request-add" when="last">
        <doc xml:space="preserve">This signal is emitted whenever a request was added to the request
manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The #InfcRequest that was added.</doc>
            <type name="Request"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-remove" when="last">
        <doc xml:space="preserve">This signal is emitted whenever a request was removed from the request
manager. Typically this happens when the request has finished (either
successfully or unsuccessfully). It can also happen when the client is
disconnected from the server while a request was still pending.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The #InfcRequest that was removed.</doc>
            <type name="Request"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RequestManagerClass"
            c:type="InfcRequestManagerClass"
            glib:is-gtype-struct-for="RequestManager">
      <doc xml:space="preserve">This structure contains the default signal handlers of the
#InfcRequestManager class.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="request_add">
        <callback name="request_add">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="RequestManager" c:type="InfcRequestManager*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="Request" c:type="InfcRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_remove">
        <callback name="request_remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="RequestManager" c:type="InfcRequestManager*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="Request" c:type="InfcRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="RequestManagerForeachFunc"
              c:type="InfcRequestManagerForeachFunc">
      <doc xml:space="preserve">This signature specifies the callback type when iterating over all
requests of the request manager.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="request" transfer-ownership="none">
          <doc xml:space="preserve">The current request.</doc>
          <type name="Request" c:type="InfcRequest*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:space="preserve">Additional data passed to
infc_request_manager_foreach_request() or
infc_request_manager_foreach_named_request().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="SessionProxy"
           c:symbol-prefix="session_proxy"
           c:type="InfcSessionProxy"
           parent="GObject.Object"
           glib:type-name="InfcSessionProxy"
           glib:get-type="infc_session_proxy_get_type"
           glib:type-struct="SessionProxyClass">
      <doc xml:space="preserve">#InfcSessionProxy is an opaque data type. You should only access it via the
public API functions.</doc>
      <implements name="Infinity.CommunicationObject"/>
      <implements name="Infinity.SessionProxy"/>
      <virtual-method name="translate_error">
        <return-value transfer-ownership="full">
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="SessionProxy" c:type="InfcSessionProxy*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_connection"
              c:identifier="infc_session_proxy_get_connection">
        <doc xml:space="preserve">Returns the connection that is used to transmit requests to the publisher
of the session, or %NULL if the session is not subscribed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfXmlConnection, or %NULL.</doc>
          <type name="Infinity.XmlConnection" c:type="InfXmlConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcSessionProxy.</doc>
            <type name="SessionProxy" c:type="InfcSessionProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscription_group"
              c:identifier="infc_session_proxy_get_subscription_group">
        <doc xml:space="preserve">Returns the group with all subscribed connections to the session, or %NULL
if the session is not subscribed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #InfCommunicationJoinedGroup, or %NULL.</doc>
          <type name="Infinity.CommunicationJoinedGroup"
                c:type="InfCommunicationJoinedGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcSessionProxy.</doc>
            <type name="SessionProxy" c:type="InfcSessionProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_connection"
              c:identifier="infc_session_proxy_set_connection">
        <doc xml:space="preserve">Sets the subscription connection for the given session. The subscription
connection is the connection through which session requests are transmitted
during subscription.

The subscription connection might be set even if the session is in
SYNCHRONIZING state in which case the session is immediately subscribed
after synchronization. Note that no attempt is made to tell the other end
about the subscription.

@seq_id should be a sequence identifier obtained from the server side. It
must be the same number that is used on the corresponding #InfdSessionProxy
on the remote side, see infd_session_proxy_subscribe_to(). Normally
#InfdDirectory or #InfcBrowser, respectively, take care of passing the
correct sequence identifier.

When the subscription connection is being closed or replaced (by a
subsequent call to this function), all pending requests are dropped and
all users are set to be unavailable, but the session will not be closed,
so it may be reused by setting another subscription connection. However,
the session might not be synchronized again, but it is fully okay to close
the session by hand (using inf_session_close) and create a new session
that is synchronized.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #InfcSessionProxy.</doc>
            <type name="SessionProxy" c:type="InfcSessionProxy*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #InfCommunicationJoinedGroup of subscribed connections. Ignored
if @connection is %NULL.</doc>
            <type name="Infinity.CommunicationJoinedGroup"
                  c:type="InfCommunicationJoinedGroup*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #InfXmlConnection.</doc>
            <type name="Infinity.XmlConnection" c:type="InfXmlConnection*"/>
          </parameter>
          <parameter name="seq_id" transfer-ownership="none">
            <doc xml:space="preserve">A sequence identifier for @connection. Ignored if @connection
is %NULL.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection" transfer-ownership="none">
        <type name="Infinity.XmlConnection"/>
      </property>
      <property name="subscription-group" transfer-ownership="none">
        <type name="Infinity.CommunicationJoinedGroup"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SessionProxyClass"
            c:type="InfcSessionProxyClass"
            glib:is-gtype-struct-for="SessionProxy">
      <doc xml:space="preserve">This structure contains virtual functions of the #InfcSessionProxy class.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="translate_error">
        <callback name="translate_error">
          <return-value transfer-ownership="full">
            <type name="GLib.Error" c:type="GError*"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="SessionProxy" c:type="InfcSessionProxy*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="GLib.Quark" c:type="GQuark"/>
            </parameter>
            <parameter name="code" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
  </namespace>
</repository>
