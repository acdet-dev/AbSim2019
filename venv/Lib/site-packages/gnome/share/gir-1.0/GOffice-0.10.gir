<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gsf" version="1"/>
  <include name="Gtk" version="3.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="libxml2" version="2.0"/>
  <namespace name="GOffice"
             version="0.10"
             shared-library="libgoffice-0.10-10.dll"
             c:identifier-prefixes="GO,Go"
             c:symbol-prefixes="go,libgoffice">
    <alias name="Color" c:type="GOColor">
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="Distance" c:type="GODistance">
      <type name="gint64" c:type="gint64"/>
    </alias>
    <alias name="PluginLoaderModuleClass" c:type="GOPluginLoaderModuleClass">
      <type name="GObject.ObjectClass" c:type="GObjectClass"/>
    </alias>
    <alias name="Regoff" c:type="GORegoff">
      <type name="gint" c:type="int"/>
    </alias>
    <alias name="cArcClass" c:type="GocArcClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cCanvasClass" c:type="GocCanvasClass">
      <type name="Gtk.LayoutClass" c:type="GtkLayoutClass"/>
    </alias>
    <alias name="cCircleClass" c:type="GocCircleClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cEllipseClass" c:type="GocEllipseClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cGraphClass" c:type="GocGraphClass">
      <type name="cItemClass" c:type="GocItemClass"/>
    </alias>
    <alias name="cImageClass" c:type="GocImageClass">
      <type name="cItemClass" c:type="GocItemClass"/>
    </alias>
    <alias name="cLineClass" c:type="GocLineClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cPathClass" c:type="GocPathClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cPixbufClass" c:type="GocPixbufClass">
      <type name="cItemClass" c:type="GocItemClass"/>
    </alias>
    <alias name="cPolygonClass" c:type="GocPolygonClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cPolylineClass" c:type="GocPolylineClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cRectangleClass" c:type="GocRectangleClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cTextClass" c:type="GocTextClass">
      <type name="cStyledItemClass" c:type="GocStyledItemClass"/>
    </alias>
    <alias name="cWidgetClass" c:type="GocWidgetClass">
      <type name="cItemClass" c:type="GocItemClass"/>
    </alias>
    <alias name="gChartClass" c:type="GogChartClass">
      <type name="gOutlinedObjectClass" c:type="GogOutlinedObjectClass"/>
    </alias>
    <alias name="gOutlinedObjectClass" c:type="GogOutlinedObjectClass">
      <type name="gStyledObjectClass" c:type="GogStyledObjectClass"/>
    </alias>
    <alias name="gSeriesElementStyleList" c:type="GogSeriesElementStyleList">
      <type name="GLib.SList" c:type="GSList"/>
    </alias>
    <alias name="gTrendLineClass" c:type="GogTrendLineClass">
      <type name="gStyledObjectClass" c:type="GogStyledObjectClass"/>
    </alias>
    <class name="3DRotationSel"
           c:symbol-prefix="3d_rotation_sel"
           c:type="GO3DRotationSel"
           parent="Gtk.Box"
           glib:type-name="GO3DRotationSel"
           glib:get-type="go_3d_rotation_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_3d_rotation_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_fov" c:identifier="go_3d_rotation_sel_get_fov">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix" c:identifier="go_3d_rotation_sel_get_matrix">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_phi" c:identifier="go_3d_rotation_sel_get_phi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_psi" c:identifier="go_3d_rotation_sel_get_psi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_theta" c:identifier="go_3d_rotation_sel_get_theta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fov" c:identifier="go_3d_rotation_sel_set_fov">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
          <parameter name="fov" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix" c:identifier="go_3d_rotation_sel_set_matrix">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="3DRotationSel" c:type="GO3DRotationSel*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="fov-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="matrix-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="phi-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="psi-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="theta-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="Accumulator" c:type="GOAccumulator" disguised="1">
      <method name="add" c:identifier="go_accumulator_add" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="acc" transfer-ownership="none">
            <type name="Accumulator" c:type="GOAccumulator*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_quad"
              c:identifier="go_accumulator_add_quad"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="acc" transfer-ownership="none">
            <type name="Accumulator" c:type="GOAccumulator*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="go_accumulator_clear"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="acc" transfer-ownership="none">
            <type name="Accumulator" c:type="GOAccumulator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="go_accumulator_free"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="acc" transfer-ownership="none">
            <type name="Accumulator" c:type="GOAccumulator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="value"
              c:identifier="go_accumulator_value"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="acc" transfer-ownership="none">
            <type name="Accumulator" c:type="GOAccumulator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="add_quadl"
                c:identifier="go_accumulator_add_quadl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="acc" transfer-ownership="none">
            <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="addl"
                c:identifier="go_accumulator_addl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="acc" transfer-ownership="none">
            <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="clearl"
                c:identifier="go_accumulator_clearl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="acc" transfer-ownership="none">
            <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="end" c:identifier="go_accumulator_end">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </function>
      <function name="endl" c:identifier="go_accumulator_endl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </function>
      <function name="freel"
                c:identifier="go_accumulator_freel"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="acc" transfer-ownership="none">
            <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="functional" c:identifier="go_accumulator_functional">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="functionall" c:identifier="go_accumulator_functionall">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="new"
                c:identifier="go_accumulator_new"
                introspectable="0">
        <return-value>
          <type name="Accumulator" c:type="GOAccumulator*"/>
        </return-value>
      </function>
      <function name="newl"
                c:identifier="go_accumulator_newl"
                introspectable="0">
        <return-value>
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </return-value>
      </function>
      <function name="start"
                c:identifier="go_accumulator_start"
                introspectable="0">
        <return-value>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="startl"
                c:identifier="go_accumulator_startl"
                introspectable="0">
        <return-value>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="valuel"
                c:identifier="go_accumulator_valuel"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="acc" transfer-ownership="none">
            <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Accumulatorl" c:type="GOAccumulatorl" disguised="1">
    </record>
    <class name="ActionComboColor"
           c:symbol-prefix="action_combo_color"
           c:type="GOActionComboColor"
           parent="Gtk.Action"
           glib:type-name="GOActionComboColor"
           glib:get-type="go_action_combo_color_get_type">
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_action_combo_color_new">
        <return-value transfer-ownership="full">
          <type name="ActionComboColor" c:type="GOActionComboColor*"/>
        </return-value>
        <parameters>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="default_color_label" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="default_color" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="group_key" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_color" c:identifier="go_action_combo_color_get_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboColor" c:type="GOActionComboColor*"/>
          </instance-parameter>
          <parameter name="is_default" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_alpha"
              c:identifier="go_action_combo_color_set_allow_alpha">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboColor" c:type="GOActionComboColor*"/>
          </instance-parameter>
          <parameter name="allow_alpha" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="go_action_combo_color_set_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboColor" c:type="GOActionComboColor*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="go_action_combo_color_set_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboColor" c:type="GOActionComboColor*"/>
          </instance-parameter>
          <parameter name="group_key" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="combo-activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="display-custom-dialog" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="ActionComboPixmaps"
           c:symbol-prefix="action_combo_pixmaps"
           c:type="GOActionComboPixmaps"
           parent="Gtk.Action"
           glib:type-name="GOActionComboPixmaps"
           glib:get-type="go_action_combo_pixmaps_get_type">
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_action_combo_pixmaps_new">
        <return-value transfer-ownership="full">
          <type name="ActionComboPixmaps" c:type="GOActionComboPixmaps*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="elements" transfer-ownership="none">
            <type name="ActionComboPixmapsElement"
                  c:type="GOActionComboPixmapsElement*"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_selected"
              c:identifier="go_action_combo_pixmaps_get_selected">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="ActionComboPixmaps" c:type="GOActionComboPixmaps*"/>
          </instance-parameter>
          <parameter name="indx" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_id"
              c:identifier="go_action_combo_pixmaps_select_id">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="ActionComboPixmaps" c:type="GOActionComboPixmaps*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="combo-activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ActionComboPixmapsElement"
            c:type="GOActionComboPixmapsElement">
      <field name="untranslated_tooltip" writable="1">
        <doc xml:space="preserve">the element tooltip.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="stock_id" writable="1">
        <doc xml:space="preserve">icon identifier.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="id" writable="1">
        <doc xml:space="preserve">pixmap identifier.</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <class name="ActionComboStack"
           c:symbol-prefix="action_combo_stack"
           c:type="GOActionComboStack"
           parent="Gtk.Action"
           glib:type-name="GOActionComboStack"
           glib:get-type="go_action_combo_stack_get_type">
      <implements name="Gtk.Buildable"/>
      <method name="pop" c:identifier="go_action_combo_stack_pop">
        <doc xml:space="preserve">Shorten list @act by removing @n off the top (or fewer if the list is
shorter)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="act" transfer-ownership="none">
            <doc xml:space="preserve">#GOActionComboStack</doc>
            <type name="ActionComboStack" c:type="GOActionComboStack*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">count</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="go_action_combo_stack_push">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="act" transfer-ownership="none">
            <doc xml:space="preserve">#GOActionComboStack</doc>
            <type name="ActionComboStack" c:type="GOActionComboStack*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">The label to push</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">a key value to id the pushe item</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection" c:identifier="go_action_combo_stack_selection">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the key of the item last selected in one of the proxies.
	Yes this interface is terrible, but we can't return the key in the
	activate signal.

NOTE : see writeup in cb_tool_popped.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">#GOActionComboStack</doc>
            <type name="ActionComboStack" c:type="GOActionComboStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="truncate" c:identifier="go_action_combo_stack_truncate">
        <doc xml:space="preserve">Ensure that list @act is no longer than @n, dropping any extra off the
bottom.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="act" transfer-ownership="none">
            <doc xml:space="preserve">#GOActionComboStack</doc>
            <type name="ActionComboStack" c:type="GOActionComboStack*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">maximum length</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="ActionComboText"
           c:symbol-prefix="action_combo_text"
           c:type="GOActionComboText"
           parent="Gtk.Action"
           glib:type-name="GOActionComboText"
           glib:get-type="go_action_combo_text_get_type">
      <implements name="Gtk.Buildable"/>
      <method name="add_item" c:identifier="go_action_combo_text_add_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboText" c:type="GOActionComboText*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entry" c:identifier="go_action_combo_text_get_entry">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboText" c:type="GOActionComboText*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_entry" c:identifier="go_action_combo_text_set_entry">
        <doc xml:space="preserve">Set the entry of any toolbar proxies of @taction to @text.  Does not
generate an 'activate' signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="taction" transfer-ownership="none">
            <doc xml:space="preserve">@GOActionComboText</doc>
            <type name="ActionComboText" c:type="GOActionComboText*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the new text</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">#GOActionComboTextSearchDir</doc>
            <type name="ActionComboTextSearchDir"
                  c:type="GOActionComboTextSearchDir"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width" c:identifier="go_action_combo_text_set_width">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ActionComboText" c:type="GOActionComboText*"/>
          </instance-parameter>
          <parameter name="largest_elem" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <enumeration name="ActionComboTextSearchDir"
                 c:type="GOActionComboTextSearchDir">
      <member name="from_top"
              value="0"
              c:identifier="GO_ACTION_COMBO_SEARCH_FROM_TOP">
        <doc xml:space="preserve">search from the top of the list.</doc>
      </member>
      <member name="current"
              value="1"
              c:identifier="GO_ACTION_COMBO_SEARCH_CURRENT">
        <doc xml:space="preserve">search from the current selection.</doc>
      </member>
      <member name="next" value="2" c:identifier="GO_ACTION_COMBO_SEARCH_NEXT">
        <doc xml:space="preserve">search from the next element after current.</doc>
      </member>
    </enumeration>
    <enumeration name="AnchorType" c:type="GOAnchorType">
      <member name="center" value="0" c:identifier="GO_ANCHOR_CENTER">
        <doc xml:space="preserve">anchor center.</doc>
      </member>
      <member name="north" value="1" c:identifier="GO_ANCHOR_NORTH">
        <doc xml:space="preserve">anchor top.</doc>
      </member>
      <member name="north_west" value="2" c:identifier="GO_ANCHOR_NORTH_WEST">
        <doc xml:space="preserve">anchor top left.</doc>
      </member>
      <member name="north_east" value="3" c:identifier="GO_ANCHOR_NORTH_EAST">
        <doc xml:space="preserve">anchor top left.</doc>
      </member>
      <member name="south" value="4" c:identifier="GO_ANCHOR_SOUTH">
        <doc xml:space="preserve">anchor bottom.</doc>
      </member>
      <member name="south_west" value="5" c:identifier="GO_ANCHOR_SOUTH_WEST">
        <doc xml:space="preserve">anchor bottom left.</doc>
      </member>
      <member name="south_east" value="6" c:identifier="GO_ANCHOR_SOUTH_EAST">
        <doc xml:space="preserve">anchor bottom left.</doc>
      </member>
      <member name="west" value="7" c:identifier="GO_ANCHOR_WEST">
        <doc xml:space="preserve">anchor left.</doc>
      </member>
      <member name="east" value="8" c:identifier="GO_ANCHOR_EAST">
        <doc xml:space="preserve">anchor right.</doc>
      </member>
      <member name="baseline_center"
              value="9"
              c:identifier="GO_ANCHOR_BASELINE_CENTER">
      </member>
      <member name="baseline_west"
              value="10"
              c:identifier="GO_ANCHOR_BASELINE_WEST">
      </member>
      <member name="baseline_east"
              value="11"
              c:identifier="GO_ANCHOR_BASELINE_EAST">
      </member>
      <member name="n" value="1" c:identifier="GO_ANCHOR_N">
        <doc xml:space="preserve">anchor top.</doc>
      </member>
      <member name="nw" value="2" c:identifier="GO_ANCHOR_NW">
        <doc xml:space="preserve">anchor top left.</doc>
      </member>
      <member name="ne" value="3" c:identifier="GO_ANCHOR_NE">
        <doc xml:space="preserve">anchor top left.</doc>
      </member>
      <member name="s" value="4" c:identifier="GO_ANCHOR_S">
        <doc xml:space="preserve">anchor bottom.</doc>
      </member>
      <member name="sw" value="5" c:identifier="GO_ANCHOR_SW">
        <doc xml:space="preserve">anchor bottom left.</doc>
      </member>
      <member name="se" value="6" c:identifier="GO_ANCHOR_SE">
        <doc xml:space="preserve">anchor bottom left.</doc>
      </member>
      <member name="w" value="7" c:identifier="GO_ANCHOR_W">
        <doc xml:space="preserve">anchor left.</doc>
      </member>
      <member name="e" value="8" c:identifier="GO_ANCHOR_E">
        <doc xml:space="preserve">anchor right.</doc>
      </member>
      <member name="b" value="9" c:identifier="GO_ANCHOR_B">
      </member>
      <member name="bw" value="10" c:identifier="GO_ANCHOR_BW">
      </member>
      <member name="be" value="11" c:identifier="GO_ANCHOR_BE">
      </member>
    </enumeration>
    <record name="Arrow"
            c:type="GOArrow"
            glib:type-name="GOArrow"
            glib:get-type="go_arrow_get_type"
            c:symbol-prefix="arrow">
      <field name="typ" writable="1">
        <doc xml:space="preserve">#GOArrowType.</doc>
        <type name="ArrowType" c:type="GOArrowType"/>
      </field>
      <field name="a" writable="1">
        <doc xml:space="preserve">first arrow head size parameter.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="b" writable="1">
        <doc xml:space="preserve">second arrow head size parameter.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="c" writable="1">
        <doc xml:space="preserve">third arrow head size parameter.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="clear" c:identifier="go_arrow_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="draw" c:identifier="go_arrow_draw">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arrow" transfer-ownership="none">
            <doc xml:space="preserve">arrow to draw</doc>
            <type name="Arrow" c:type="const GOArrow*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">cairo surface to draw on</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="dx"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">suggested change of line end-point</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="dy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">suggested change of line end-point</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="phi" transfer-ownership="none">
            <doc xml:space="preserve">angle to draw at</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="go_arrow_dup">
        <return-value transfer-ownership="full">
          <type name="Arrow" c:type="GOArrow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="go_arrow_equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Arrow" c:type="const GOArrow*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Arrow" c:type="const GOArrow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="go_arrow_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="res" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </instance-parameter>
          <parameter name="typ" transfer-ownership="none">
            <type name="ArrowType" c:type="GOArrowType"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_kite" c:identifier="go_arrow_init_kite">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_oval" c:identifier="go_arrow_init_oval">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </instance-parameter>
          <parameter name="ra" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rb" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <function name="type_as_str" c:identifier="go_arrow_type_as_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="typ" transfer-ownership="none">
            <type name="ArrowType" c:type="GOArrowType"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_from_str" c:identifier="go_arrow_type_from_str">
        <return-value transfer-ownership="none">
          <type name="ArrowType" c:type="GOArrowType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="ArrowSel"
           c:symbol-prefix="arrow_sel"
           c:type="GOArrowSel"
           parent="Gtk.Bin"
           glib:type-name="GOArrowSel"
           glib:get-type="go_arrow_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_arrow_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_arrow" c:identifier="go_arrow_sel_get_arrow">
        <return-value transfer-ownership="full">
          <type name="Arrow" c:type="GOArrow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="as" transfer-ownership="none">
            <type name="ArrowSel" c:type="GOArrowSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_arrow" c:identifier="go_arrow_sel_set_arrow">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="as" transfer-ownership="none">
            <type name="ArrowSel" c:type="GOArrowSel*"/>
          </instance-parameter>
          <parameter name="arrow" transfer-ownership="none">
            <type name="Arrow" c:type="GOArrow*"/>
          </parameter>
        </parameters>
      </method>
      <property name="arrow" writable="1" transfer-ownership="none">
        <type name="Arrow"/>
      </property>
    </class>
    <enumeration name="ArrowType" c:type="GOArrowType">
      <member name="none" value="0" c:identifier="GO_ARROW_NONE">
        <doc xml:space="preserve">no arrow head.</doc>
      </member>
      <member name="kite" value="1" c:identifier="GO_ARROW_KITE">
        <doc xml:space="preserve">kite head.</doc>
      </member>
      <member name="oval" value="2" c:identifier="GO_ARROW_OVAL">
        <doc xml:space="preserve">oval head.</doc>
      </member>
    </enumeration>
    <enumeration name="BasisType" c:type="GOBasisType">
      <member name="msrb_30_360" value="0" c:identifier="GO_BASIS_MSRB_30_360">
        <doc xml:space="preserve">US 30/360 (days in a month/days in a year)</doc>
      </member>
      <member name="act_act" value="1" c:identifier="GO_BASIS_ACT_ACT">
        <doc xml:space="preserve">actual days/actual days</doc>
      </member>
      <member name="act_360" value="2" c:identifier="GO_BASIS_ACT_360">
        <doc xml:space="preserve">actual days/360</doc>
      </member>
      <member name="act_365" value="3" c:identifier="GO_BASIS_ACT_365">
        <doc xml:space="preserve">actual days/365</doc>
      </member>
      <member name="30e_360" value="4" c:identifier="GO_BASIS_30E_360">
        <doc xml:space="preserve">European 30/360</doc>
      </member>
      <member name="30ep_360" value="5" c:identifier="GO_BASIS_30Ep_360">
        <doc xml:space="preserve">?</doc>
      </member>
      <member name="msrb_30_360_sym"
              value="6"
              c:identifier="GO_BASIS_MSRB_30_360_SYM">
        <doc xml:space="preserve">?</doc>
      </member>
    </enumeration>
    <record name="BezierSpline"
            c:type="GOBezierSpline"
            glib:type-name="GOBezierSpline"
            glib:get-type="go_bezier_spline_get_type"
            c:symbol-prefix="bezier_spline">
      <field name="x" writable="1">
        <doc xml:space="preserve">control points abscissa.</doc>
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">control points ordinates.</doc>
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="n" writable="1">
        <doc xml:space="preserve">spline segments number.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="closed" writable="1">
        <doc xml:space="preserve">whether the curve is closed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <method name="destroy" c:identifier="go_bezier_spline_destroy">
        <doc xml:space="preserve">Destroys the given structures after cleaning all allocated fields.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a struct GOBezierSpline instance</doc>
            <type name="BezierSpline" c:type="GOBezierSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_cairo" c:identifier="go_bezier_spline_to_cairo">
        <doc xml:space="preserve">Renders the spline in \a cr</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a struct GOBezierSpline instance returned by go_bezier_spline_init</doc>
            <type name="BezierSpline" c:type="GOBezierSpline*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="horiz_flip" transfer-ownership="none">
            <doc xml:space="preserve">whether to flip horizontally (for a RTL canvas).</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_path" c:identifier="go_bezier_spline_to_path">
        <doc xml:space="preserve">Builds a GOPath using the control points evaluated in go_bezier_spline_init.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created GOPath which should be destroyed by a call to
go_path_free.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a struct GOBezierSpline instance returned by go_bezier_spline_init</doc>
            <type name="BezierSpline" c:type="GOBezierSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="init" c:identifier="go_bezier_spline_init">
        <doc xml:space="preserve">@x and @y values must be valid and finite. The returned structure
contains the x and y coordinates of all control points, including the
incoming data. the n and closed fields are just copies of the corresponding
arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created struct GOBezierSpline instance which should be
destroyed by a call to go_bezier_spline_destroy.</doc>
          <type name="BezierSpline" c:type="GOBezierSpline*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the x values</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the y values</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of x and y values</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="closed" transfer-ownership="none">
            <doc xml:space="preserve">whether to return a closed curve or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="CM_PER_IN" value="254" c:type="GO_CM_PER_IN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="COLOR_GROUP_HISTORY_SIZE"
              value="8"
              c:type="GO_COLOR_GROUP_HISTORY_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="CSpline"
            c:type="GOCSpline"
            glib:type-name="GOCSpline"
            glib:get-type="go_cspline_get_type"
            c:symbol-prefix="cspline">
      <field name="x" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="y" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="a" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="b" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="c" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="n" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <method name="destroy" c:identifier="go_cspline_destroy">
        <doc xml:space="preserve">Frees the spline structure when done.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deriv" c:identifier="go_cspline_get_deriv">
        <doc xml:space="preserve">sp must be a valid spline structure as returned by go_cspline_init.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the interpolated derivative at x, or 0 if an error occurred.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_derivs" c:identifier="go_cspline_get_derivs">
        <doc xml:space="preserve">sp must be a valid spline structure as returned by go_cspline_init.
The x values must be sorted in increasing order.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a newly allocated array of the n interpolated derivatives which
should be destroyed by a call to g_free when not anymore needed, or NULL if
an error occurred.</doc>
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a vector a values at which interpolation is requested.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of interpolation requested.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_integrals" c:identifier="go_cspline_get_integrals">
        <doc xml:space="preserve">sp must be a valid spline structure as returned by go_cspline_init.
The x values must be sorted in increasing order.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a newly allocated array of the n-1 integrals on the intervals
between two consecutive values stored in x. which should be destroyed by
a call to g_free when not anymore needed, or NULL if  an error occurred.</doc>
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a vector a values at which interpolation is requested.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of interpolation requested.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="go_cspline_get_value">
        <doc xml:space="preserve">sp must be a valid spline structure as returned by go_cspline_init.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the interpolated value for x, or 0 if an error occurred.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">The value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="go_cspline_get_values">
        <doc xml:space="preserve">sp must be a valid spline structure as returned by go_cspline_init.
The x values must be sorted in increasing order.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a newly allocated array of interpolated values which should
be destroyed by a call to g_free when not anymore needed, or NULL if
an error occurred.</doc>
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">a spline structure returned by go_cspline_init.</doc>
            <type name="CSpline" c:type="GOCSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a vector a values at which interpolation is requested.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of interpolation requested.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <function name="destroyl" c:identifier="go_cspline_destroyl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_derivl"
                c:identifier="go_cspline_get_derivl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_derivsl"
                c:identifier="go_cspline_get_derivsl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_integralsl"
                c:identifier="go_cspline_get_integralsl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_valuel"
                c:identifier="go_cspline_get_valuel"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_valuesl"
                c:identifier="go_cspline_get_valuesl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </return-value>
        <parameters>
          <parameter name="sp" transfer-ownership="none">
            <type name="CSplinel" c:type="GOCSplinel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="init" c:identifier="go_cspline_init">
        <doc xml:space="preserve">Creates a spline structure, and computes the coefficients associated with the
polynoms. The ith polynome (between x[i-1] and x[i] is:
y(x) = y[i-1] + (c[i-1] + (b[i-1] + a[i] * (x - x[i-1])) * (x - x[i-1])) * (x - x[i-1])
where a[i-1], b[i-1], c[i-1], x[i-1] and y[i-1] are the corresponding
members of the new structure.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created GOCSpline instance which should be
destroyed by a call to go_cspline_destroy.</doc>
          <type name="CSpline" c:type="GOCSpline*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the x values</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the y values</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of x and y values</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="limits" transfer-ownership="none">
            <doc xml:space="preserve">how the limits must be treated, four values are allowed:
GO_CSPLINE_NATURAL: first and least second derivatives are 0.
GO_CSPLINE_PARABOLIC: the curve will be a parabole arc outside of the limits.
GO_CSPLINE_CUBIC: the curve will be cubic outside of the limits.
GO_CSPLINE_CLAMPED: the first and last derivatives are imposed.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="c0" transfer-ownership="none">
            <doc xml:space="preserve">the first derivative when using clamped splines, not used in the
     other limit types.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cn" transfer-ownership="none">
            <doc xml:space="preserve">the first derivative when using clamped splines, not used in the
     other limit types.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <function name="initl"
                c:identifier="go_cspline_initl"
                introspectable="0">
        <return-value transfer-ownership="full">
          <type name="CSplinel" c:type="GOCSplinel*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="limits" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="a0" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="a1" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="CSplineType" c:type="GOCSplineType">
      <member name="natural" value="0" c:identifier="GO_CSPLINE_NATURAL">
        <doc xml:space="preserve">natural.</doc>
      </member>
      <member name="parabolic" value="1" c:identifier="GO_CSPLINE_PARABOLIC">
        <doc xml:space="preserve">parabolic.</doc>
      </member>
      <member name="cubic" value="2" c:identifier="GO_CSPLINE_CUBIC">
        <doc xml:space="preserve">cubic.</doc>
      </member>
      <member name="clamped" value="3" c:identifier="GO_CSPLINE_CLAMPED">
        <doc xml:space="preserve">clamped.</doc>
      </member>
    </enumeration>
    <record name="CSplinel"
            c:type="GOCSplinel"
            glib:type-name="GOCSplinel"
            glib:get-type="go_csplinel_get_type"
            c:symbol-prefix="csplinel">
      <field name="x" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="y" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="a" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="b" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="c" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="n" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
    </record>
    <class name="CalendarButton"
           c:symbol-prefix="calendar_button"
           c:type="GOCalendarButton"
           parent="ComboBox"
           glib:type-name="GOCalendarButton"
           glib:get-type="go_calendar_button_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_calendar_button_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_calendar"
              c:identifier="go_calendar_button_get_calendar">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the embedded calendar.</doc>
          <type name="Gtk.Calendar" c:type="GtkCalendar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="calb" transfer-ownership="none">
            <doc xml:space="preserve">#GOCalendarButton</doc>
            <type name="CalendarButton" c:type="GOCalendarButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_date" c:identifier="go_calendar_button_get_date">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="calb" transfer-ownership="none">
            <type name="CalendarButton" c:type="GOCalendarButton*"/>
          </instance-parameter>
          <parameter name="date" transfer-ownership="none">
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date" c:identifier="go_calendar_button_set_date">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calb" transfer-ownership="none">
            <type name="CalendarButton" c:type="GOCalendarButton*"/>
          </instance-parameter>
          <parameter name="date" transfer-ownership="none">
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="CharmapSel"
           c:symbol-prefix="charmap_sel"
           c:type="GOCharmapSel"
           parent="Gtk.Box"
           glib:type-name="GOCharmapSel"
           glib:get-type="go_charmap_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_charmap_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="test" transfer-ownership="none">
            <type name="CharmapSelTestDirection"
                  c:type="GOCharmapSelTestDirection"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_encoding" c:identifier="go_charmap_sel_get_encoding">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="CharmapSel" c:type="GOCharmapSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding_name"
              c:identifier="go_charmap_sel_get_encoding_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="CharmapSel" c:type="GOCharmapSel*"/>
          </instance-parameter>
          <parameter name="enc" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encoding" c:identifier="go_charmap_sel_set_encoding">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="CharmapSel" c:type="GOCharmapSel*"/>
          </instance-parameter>
          <parameter name="enc" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="TestDirection" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="charmap-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="CharmapSelTestDirection"
                 c:type="GOCharmapSelTestDirection">
      <member name="to_utf8" value="0" c:identifier="GO_CHARMAP_SEL_TO_UTF8">
        <doc xml:space="preserve">to UTF-8.</doc>
      </member>
      <member name="from_utf8"
              value="1"
              c:identifier="GO_CHARMAP_SEL_FROM_UTF8">
        <doc xml:space="preserve">from UTF-8.</doc>
      </member>
    </enumeration>
    <interface name="CmdContext"
               c:symbol-prefix="cmd_context"
               c:type="GOCmdContext"
               glib:type-name="GOCmdContext"
               glib:get-type="go_cmd_context_get_type">
      <method name="error" c:identifier="go_cmd_context_error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error_export" c:identifier="go_cmd_context_error_export">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error_import" c:identifier="go_cmd_context_error_import">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error_info" c:identifier="go_cmd_context_error_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error_info_list"
              c:identifier="go_cmd_context_error_info_list">
        <doc xml:space="preserve">Sends a list of errors to the command context.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOCmdContext</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">a list of errors</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="ErrorInfo"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="error_invalid" c:identifier="go_cmd_context_error_invalid">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error_system" c:identifier="go_cmd_context_error_system">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="go_cmd_context_get_password">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="fname" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="progress_message_set"
              c:identifier="go_cmd_context_progress_message_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gcc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="progress_set" c:identifier="go_cmd_context_progress_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gcc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive" c:identifier="go_cmd_context_set_sensitive">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="CmdContextClass" c:type="GOCmdContextClass">
      <field name="base" writable="1">
        <doc xml:space="preserve">base interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_password">
        <callback name="get_password">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="filename" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_sensitive">
        <callback name="set_sensitive">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="sensitive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error" writable="1">
        <type name="gpointer" c:type="_GOCmdContextIface"/>
      </field>
      <field name="progress_set">
        <callback name="progress_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="val" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="progress_message_set">
        <callback name="progress_message_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ColorGroup"
           c:symbol-prefix="color_group"
           c:type="GOColorGroup"
           parent="GObject.Object"
           glib:type-name="GOColorGroup"
           glib:get-type="go_color_group_get_type">
      <function name="fetch" c:identifier="go_color_group_fetch">
        <doc xml:space="preserve">if name is NULL or a name not currently in use by another group
then a new group is created and returned. If name was NULL
then the new group is given a unique name prefixed by "__cg_autogen_name__"
(thereby insuring namespace separation).
If name was already used by a group then the reference count is
incremented and a pointer to the group is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GOColorGroup</doc>
          <type name="ColorGroup" c:type="GOColorGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">target name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">identifying context</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="find" c:identifier="go_color_group_find">
        <doc xml:space="preserve">No reference is added if it is found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Look up the name/context specific color-group.
		%NULL if it is not found.</doc>
          <type name="ColorGroup" c:type="GOColorGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">target name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">an arbitrary id to identify what context to search in</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_color" c:identifier="go_color_group_add_color">
        <doc xml:space="preserve">Potentially slide the history to add the new colour.  If it was already in
the history reorder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cg" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorGroup</doc>
            <type name="ColorGroup" c:type="GOColorGroup*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">the color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="context">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="history">
        <array zero-terminated="0" c:type="GOColor" fixed-size="8">
          <type name="Color" c:type="GOColor"/>
        </array>
      </field>
      <glib:signal name="history-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="ColorPalette"
           c:symbol-prefix="color_palette"
           c:type="GOColorPalette"
           parent="Gtk.Box"
           glib:type-name="GOColorPalette"
           glib:get-type="go_color_palette_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_color_palette_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new palette</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="no_color_label" transfer-ownership="none">
            <doc xml:space="preserve">color label</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="default_color" transfer-ownership="none">
            <doc xml:space="preserve">#GOColor</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="cg" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorGroup</doc>
            <type name="ColorGroup" c:type="GOColorGroup*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="make_menu" c:identifier="go_color_palette_make_menu">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a submenu with a palette of colours.  Caller is responsible for
	creating an item to point to the submenu.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="no_color_label" transfer-ownership="none">
            <doc xml:space="preserve">color label</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="default_color" transfer-ownership="none">
            <doc xml:space="preserve">#GOColor</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="cg" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorGroup</doc>
            <type name="ColorGroup" c:type="GOColorGroup*"/>
          </parameter>
          <parameter name="custom_dialog_title" transfer-ownership="none">
            <doc xml:space="preserve">optional string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="current_color" transfer-ownership="none">
            <doc xml:space="preserve">#GOColor</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_current_color"
              c:identifier="go_color_palette_get_current_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
          <parameter name="is_default" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="is_custom" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_alpha"
              c:identifier="go_color_palette_set_allow_alpha">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
          <parameter name="allow_alpha" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_to_default"
              c:identifier="go_color_palette_set_color_to_default">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_current_color"
              c:identifier="go_color_palette_set_current_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="go_color_palette_set_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorPalette</doc>
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
          <parameter name="cg" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorGroup</doc>
            <type name="ColorGroup" c:type="GOColorGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="go_color_palette_set_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none">
            <type name="ColorPalette" c:type="GOColorPalette*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="color-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="display-custom-dialog" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="ComboBox"
           c:symbol-prefix="combo_box"
           c:type="GOComboBox"
           parent="Gtk.Box"
           glib:type-name="GOComboBox"
           glib:get-type="go_combo_box_get_type"
           glib:type-struct="ComboBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <virtual-method name="pop_down_done">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="w" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_title" invoker="set_title">
        <doc xml:space="preserve">Set a title to display over the tearoff window.

FIXME:

This should really change the title even when the popup is already torn off.
I guess the tearoff window could attach a listener to title change or
something.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">Combo box</doc>
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">Title</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="construct" c:identifier="go_combo_box_construct">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="display_widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="popdown_container" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="popdown_focus" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pos" c:identifier="go_combo_box_get_pos">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="go_combo_box_get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popup_display" c:identifier="go_combo_box_popup_display">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popup_hide" c:identifier="go_combo_box_popup_hide">
        <doc xml:space="preserve">Hides popup, but not when it is torn off.
This is the external interface - for subclasses and apps which expect a
regular combo which doesn't do tearoffs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComboBox</doc>
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_display" c:identifier="go_combo_box_set_display">
        <doc xml:space="preserve">Sets the displayed widget for the @combo_box to be @display_widget</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">the #GOComboBox to modify</doc>
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="display_widget" transfer-ownership="none">
            <doc xml:space="preserve">The widget to be displayed</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_relief" c:identifier="go_combo_box_set_relief">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="relief" transfer-ownership="none">
            <type name="Gtk.ReliefStyle" c:type="GtkReliefStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tearable" c:identifier="go_combo_box_set_tearable">
        <doc xml:space="preserve">controls whether the combo box's pop up widget can be torn off.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">Combo box</doc>
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="tearable" transfer-ownership="none">
            <doc xml:space="preserve">whether to allow the @combo to be tearable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="go_combo_box_set_title">
        <doc xml:space="preserve">Set a title to display over the tearoff window.

FIXME:

This should really change the title even when the popup is already torn off.
I guess the tearoff window could attach a listener to title change or
something.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">Combo box</doc>
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">Title</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip" c:identifier="go_combo_box_set_tooltip">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboBox" c:type="GOComboBox*"/>
          </instance-parameter>
          <parameter name="tips" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="priv_text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-arrow" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="hbox">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="priv">
        <type name="ComboBoxPrivate" c:type="GOComboBoxPrivate*"/>
      </field>
      <glib:signal name="pop-down-done" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ComboBoxClass"
            c:type="GOComboBoxClass"
            glib:is-gtype-struct-for="ComboBox">
      <field name="base" readable="0" private="1">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="set_title">
        <callback name="set_title">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="combo" transfer-ownership="none">
              <doc xml:space="preserve">Combo box</doc>
              <type name="ComboBox" c:type="GOComboBox*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <doc xml:space="preserve">Title</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pop_down_done">
        <callback name="pop_down_done">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="combo" transfer-ownership="none">
              <type name="ComboBox" c:type="GOComboBox*"/>
            </parameter>
            <parameter name="w" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ComboBoxPrivate" c:type="GOComboBoxPrivate" disguised="1">
    </record>
    <class name="ComboColor"
           c:symbol-prefix="combo_color"
           c:type="GOComboColor"
           parent="ComboBox"
           glib:type-name="GOComboColor"
           glib:get-type="go_combo_color_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_combo_color_new">
        <doc xml:space="preserve">Default constructor. Pass an optional icon and an optional label for the
no/auto color button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The newly constructed combo.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">optionally NULL.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="no_color_label" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="default_color" transfer-ownership="none">
            <doc xml:space="preserve">The colour to use as the default</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="color_group" transfer-ownership="none">
            <doc xml:space="preserve">#GOColorGroup</doc>
            <type name="ColorGroup" c:type="GOColorGroup*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_color" c:identifier="go_combo_color_get_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="is_default" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_alpha"
              c:identifier="go_combo_color_set_allow_alpha">
        <doc xml:space="preserve">Should the custom colour selector allow the use of opacity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboColor</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="allow_alpha" transfer-ownership="none">
            <doc xml:space="preserve">Support alpha layer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="go_combo_color_set_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboColor</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GOColor</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_gdk" c:identifier="go_combo_color_set_color_gdk">
        <doc xml:space="preserve">Set the color of the combo to the given color. Causes the color_changed
signal to be emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">The combo</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color</doc>
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_to_default"
              c:identifier="go_combo_color_set_color_to_default">
        <doc xml:space="preserve">Set the color of the combo to the default color. Causes the color_changed
signal to be emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboColor</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="go_combo_color_set_icon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComboColor</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">new icon for the combo</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_instant_apply"
              c:identifier="go_combo_color_set_instant_apply">
        <doc xml:space="preserve">Turn instant apply behaviour on or off. Instant apply means that pressing
the button applies the current color. When off, pressing the button opens
the combo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboColor</doc>
            <type name="ComboColor" c:type="GOComboColor*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve">Whether instant apply should be active or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="color-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="display-custom-dialog" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="ComboPixmaps"
           c:symbol-prefix="combo_pixmaps"
           c:type="GOComboPixmaps"
           parent="ComboBox"
           glib:type-name="GOComboPixmaps"
           glib:get-type="go_combo_pixmaps_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_combo_pixmaps_new">
        <return-value transfer-ownership="none">
          <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
        </return-value>
        <parameters>
          <parameter name="ncols" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_element" c:identifier="go_combo_pixmaps_add_element">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboPixmaps</doc>
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="full">
            <doc xml:space="preserve">#GdkPixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">an identifier for the callbacks</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <doc xml:space="preserve">optional</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_elements"
              c:identifier="go_combo_pixmaps_clear_elements">
        <doc xml:space="preserve">Remove all elements.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboPixmaps</doc>
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preview" c:identifier="go_combo_pixmaps_get_preview">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the preview button.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve">#GOComboPixmaps</doc>
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected" c:identifier="go_combo_pixmaps_get_selected">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_id" c:identifier="go_combo_pixmaps_select_id">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_index" c:identifier="go_combo_pixmaps_select_index">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="combo" transfer-ownership="none">
            <type name="ComboPixmaps" c:type="GOComboPixmaps*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="Complex"
            c:type="GOComplex"
            glib:type-name="GOComplex"
            glib:get-type="go_complex_get_type"
            c:symbol-prefix="complex">
      <field name="re" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="im" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="add" c:identifier="go_complex_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="angle" c:identifier="go_complex_angle">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="angle_pi" c:identifier="go_complex_angle_pi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="conj" c:identifier="go_complex_conj">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cos" c:identifier="go_complex_cos">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="div" c:identifier="go_complex_div">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exp" c:identifier="go_complex_exp">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_polar" c:identifier="go_complex_from_polar">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="mod" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_polar_pi" c:identifier="go_complex_from_polar_pi">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="mod" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_string" c:identifier="go_complex_from_string">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imunit" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="go_complex_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="re" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="im" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalid" c:identifier="go_complex_invalid">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalid_p" c:identifier="go_complex_invalid_p">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ln" c:identifier="go_complex_ln">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mod" c:identifier="go_complex_mod">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mul" c:identifier="go_complex_mul">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pow" c:identifier="go_complex_pow">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="powx" c:identifier="go_complex_powx">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="e" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="real" c:identifier="go_complex_real">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="re" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="real_p" c:identifier="go_complex_real_p">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scale_real" c:identifier="go_complex_scale_real">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="sin" c:identifier="go_complex_sin">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sqrt" c:identifier="go_complex_sqrt">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sub" c:identifier="go_complex_sub">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tan" c:identifier="go_complex_tan">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="go_complex_to_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
          <parameter name="reformat" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imformat" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imunit" transfer-ownership="none">
            <type name="gchar" c:type="char"/>
          </parameter>
        </parameters>
      </method>
      <method name="zero_p" c:identifier="go_complex_zero_p">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="addl" c:identifier="go_complex_addl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="angle_pil"
                c:identifier="go_complex_angle_pil"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="anglel"
                c:identifier="go_complex_anglel"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="conjl" c:identifier="go_complex_conjl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cosl" c:identifier="go_complex_cosl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="divl" c:identifier="go_complex_divl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="expl" c:identifier="go_complex_expl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_polar_pil"
                c:identifier="go_complex_from_polar_pil"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="mod" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_polarl"
                c:identifier="go_complex_from_polarl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="mod" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_stringl" c:identifier="go_complex_from_stringl">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imunit" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="initl"
                c:identifier="go_complex_initl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="re" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="im" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="invalid_pl" c:identifier="go_complex_invalid_pl">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="invalidl" c:identifier="go_complex_invalidl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="lnl" c:identifier="go_complex_lnl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="modl" c:identifier="go_complex_modl" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="mull" c:identifier="go_complex_mull">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="powl" c:identifier="go_complex_powl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="powxl"
                c:identifier="go_complex_powxl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="e" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="real_pl" c:identifier="go_complex_real_pl">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="reall"
                c:identifier="go_complex_reall"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="re" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="scale_reall"
                c:identifier="go_complex_scale_reall"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="sinl" c:identifier="go_complex_sinl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sqrtl" c:identifier="go_complex_sqrtl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="subl" c:identifier="go_complex_subl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="tanl" c:identifier="go_complex_tanl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_polar" c:identifier="go_complex_to_polar">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mod" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complex" c:type="GOComplex*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_polarl"
                c:identifier="go_complex_to_polarl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mod" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="angle" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_stringl" c:identifier="go_complex_to_stringl">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
          <parameter name="reformat" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imformat" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="imunit" transfer-ownership="none">
            <type name="gchar" c:type="char"/>
          </parameter>
        </parameters>
      </function>
      <function name="zero_pl" c:identifier="go_complex_zero_pl">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="Complexl" c:type="GOComplexl*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Complexl"
            c:type="GOComplexl"
            glib:type-name="GOComplexl"
            glib:get-type="go_complexl_get_type"
            c:symbol-prefix="complexl">
      <field name="re" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="im" writable="1">
        <type name="glong" c:type="long"/>
      </field>
    </record>
    <class name="Component"
           c:symbol-prefix="component"
           c:type="GOComponent"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GOComponent"
           glib:get-type="go_component_get_type"
           glib:type-struct="ComponentClass">
      <constructor name="new_by_mime_type"
                   c:identifier="go_component_new_by_mime_type">
        <return-value transfer-ownership="full">
          <type name="Component" c:type="GOComponent*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_uri"
                   c:identifier="go_component_new_from_uri">
        <return-value transfer-ownership="full">
          <type name="Component" c:type="GOComponent*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="sax_push_parser"
                c:identifier="go_component_sax_push_parser">
        <doc xml:space="preserve">Loads the component from the xml stream. @handler will be called when done.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xin" transfer-ownership="none">
            <doc xml:space="preserve">#GsfInput</doc>
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve">the current node attributes.</doc>
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">#GOComponentSaxHandler</doc>
            <type name="ComponentSaxHandler" c:type="GOComponentSaxHandler"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">data to pass to @handler</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_default_command_context"
                c:identifier="go_component_set_default_command_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="edit" invoker="edit">
        <doc xml:space="preserve">Opens a top level window editor for the component if it can be edited.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the editor window or NULL</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data" invoker="get_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="clearfunc" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none" closure="3">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mime_type_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="render" invoker="render">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_default_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_font" invoker="set_font">
        <doc xml:space="preserve">Sets the font the component should use. Not all components will actually
changed the font they use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if size changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">#PangoFontDescription</doc>
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="build_snapshot" c:identifier="go_component_build_snapshot">
        <return-value transfer-ownership="none">
          <type name="SnapshotType" c:type="GOSnapshotType"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="duplicate" c:identifier="go_component_duplicate">
        <doc xml:space="preserve">Duplicates the component.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicated component.</doc>
          <type name="Component" c:type="GOComponent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="edit" c:identifier="go_component_edit">
        <doc xml:space="preserve">Opens a top level window editor for the component if it can be edited.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the editor window or NULL</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_changed" c:identifier="go_component_emit_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="export_image" c:identifier="go_component_export_image">
        <doc xml:space="preserve">Exports an image of @graph in given @format, writing results in a #GsfOutput stream.
If export format type is a bitmap one, it computes image size with x_dpi, y_dpi and
@graph size (see @gog_graph_get_size()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if export succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">image format for export</doc>
            <type name="ImageFormat" c:type="GOImageFormat"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #GsfOutput stream</doc>
            <type name="Gsf.Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="x_dpi" transfer-ownership="none">
            <doc xml:space="preserve">x resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y_dpi" transfer-ownership="none">
            <doc xml:space="preserve">y resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_command_context"
              c:identifier="go_component_get_command_context">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the command context used by the component or the
default command context if the argument is NULL.</doc>
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="go_component_get_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="clearfunc" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inline" c:identifier="go_component_get_inline">
        <doc xml:space="preserve">Returns the in-line or not nature of the component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the component is displayed in-line</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type" c:identifier="go_component_get_mime_type">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="go_component_get_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snapshot" c:identifier="go_component_get_snapshot">
        <doc xml:space="preserve">Returns a snapshot is either svg or png format for the component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the snapshot as an arry of bytes.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">#GOSnapshotType</doc>
            <type name="SnapshotType" c:type="GOSnapshotType*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">where to store the data length</doc>
            <type name="gulong" c:type="size_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_use_font_from_app"
              c:identifier="go_component_get_use_font_from_app">
        <doc xml:space="preserve">Returns whether the component should use the font from the calling
application or use its own font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the component should use the font from the calling
application</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_editable" c:identifier="go_component_is_editable">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_resizable" c:identifier="go_component_is_resizable">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="go_component_render">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_command_context"
              c:identifier="go_component_set_command_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="go_component_set_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_size"
              c:identifier="go_component_set_default_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ascent" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="descent" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font" c:identifier="go_component_set_font">
        <doc xml:space="preserve">Sets the font the component should use. Not all components will actually
changed the font they use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if size changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">#PangoFontDescription</doc>
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inline" c:identifier="go_component_set_inline">
        <doc xml:space="preserve">Sets the in-line or not nature of the component. Default is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="is_inline" transfer-ownership="none">
            <doc xml:space="preserve">whether the component should be displayed in-line</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="go_component_set_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_font_from_app"
              c:identifier="go_component_set_use_font_from_app">
        <doc xml:space="preserve">Sets the source of the font that the component should use. Default is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">a #GOComponent</doc>
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="use_font_from_app" transfer-ownership="none">
            <doc xml:space="preserve">whether the component should use the font from the
calling application or use its own font.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_editing" c:identifier="go_component_stop_editing">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write_xml_sax" c:identifier="go_component_write_xml_sax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <type name="Component" c:type="GOComponent*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </method>
      <property name="ascent" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="descent" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="height" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="inline" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mime-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mime_type">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ascent">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="descent">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="default_width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="default_ascent">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="default_descent">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="resizable">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="editable">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="data">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="destroy_notify">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="destroy_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="length">
        <type name="gint" c:type="int"/>
      </field>
      <field name="snapshot_type">
        <type name="SnapshotType" c:type="GOSnapshotType"/>
      </field>
      <field name="snapshot_data">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="snapshot_length">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="editor">
        <type name="Gtk.Window" c:type="GtkWindow*"/>
      </field>
      <field name="cc">
        <type name="CmdContext" c:type="GOCmdContext*"/>
      </field>
      <field name="priv">
        <type name="ComponentPrivate" c:type="GOComponentPrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ComponentClass"
            c:type="GOComponentClass"
            glib:is-gtype-struct-for="Component">
      <doc xml:space="preserve">The component base object class.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">the parent object class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="edit">
        <callback name="edit">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the editor window or NULL</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <doc xml:space="preserve">#GOComponent</doc>
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data">
        <callback name="get_data">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="clearfunc"
                       transfer-ownership="none"
                       scope="async">
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="4">
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mime_type_set">
        <callback name="mime_type_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_data">
        <callback name="set_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_default_size">
        <callback name="set_default_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render">
        <callback name="render">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_font">
        <callback name="set_font">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if size changed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <doc xml:space="preserve">#GOComponent</doc>
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
            <parameter name="desc" transfer-ownership="none">
              <doc xml:space="preserve">#PangoFontDescription</doc>
              <type name="Pango.FontDescription"
                    c:type="PangoFontDescription*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved3">
        <callback name="reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved4">
        <callback name="reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="component" transfer-ownership="none">
              <type name="Component" c:type="GOComponent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signal1">
        <callback name="reserved_signal1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved_signal2">
        <callback name="reserved_signal2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved_signal3">
        <callback name="reserved_signal3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved_signal4">
        <callback name="reserved_signal4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ComponentMimeDialog"
           c:symbol-prefix="component_mime_dialog"
           c:type="GOComponentMimeDialog"
           parent="Gtk.Dialog"
           glib:type-name="GOComponentMimeDialog"
           glib:get-type="go_component_mime_dialog_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_component_mime_dialog_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_mime_type"
              c:identifier="go_component_mime_dialog_get_mime_type">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dlg" transfer-ownership="none">
            <type name="ComponentMimeDialog" c:type="GOComponentMimeDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="ComponentPrivate" c:type="GOComponentPrivate" disguised="1">
    </record>
    <callback name="ComponentSaxHandler" c:type="GOComponentSaxHandler">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="component" transfer-ownership="none">
          <type name="Component" c:type="GOComponent*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ComponentType" c:type="GOComponentType" disguised="1">
    </record>
    <callback name="ConfMonitorFunc" c:type="GOConfMonitorFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ConfNode"
            c:type="GOConfNode"
            glib:type-name="GOConfNode"
            glib:get-type="go_conf_node_get_type"
            c:symbol-prefix="conf_node">
    </record>
    <record name="CouponConvention" c:type="GoCouponConvention">
      <field name="freq" writable="1">
        <doc xml:space="preserve">frequency.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="basis" writable="1">
        <doc xml:space="preserve">#GOBasisType</doc>
        <type name="BasisType" c:type="GOBasisType"/>
      </field>
      <field name="eom" writable="1">
        <doc xml:space="preserve">end of month.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="date_conv" writable="1">
        <doc xml:space="preserve">#GODateConventions</doc>
        <type name="DateConventions" c:type="GODateConventions*"/>
      </field>
    </record>
    <class name="Data"
           c:symbol-prefix="data"
           c:type="GOData"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GOData"
           glib:get-type="go_data_get_type"
           glib:type-struct="DataClass">
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="date_conv" invoker="date_conv">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the date conventions used by the data, or NULL if not determined.</doc>
          <type name="DateConventions" c:type="GODateConventions*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup" invoker="dup">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A deep copy of @src.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_changed" invoker="emit_changed">
        <doc xml:space="preserve">protected utility to emit a 'changed' signal</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eq" invoker="eq">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @a and @b are the same</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bounds" invoker="get_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="minimum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="coordinates" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_n_dimensions" invoker="get_n_dimensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sizes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="sizes" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="coordinates" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="coordinates" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_values" invoker="get_values">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_valid" invoker="is_valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="preferred_fmt" invoker="preferred_fmt">
        <doc xml:space="preserve">Caller is responsible for unrefing the result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the fmt preferred by the data</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="serialize" invoker="serialize">
        <doc xml:space="preserve">NOTE : This is the _source_ not the content.  (I.e., this refers to the
expression, not its current value.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string representation of the data source that the caller is
	responsible for freeing</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a gpointer describing the context.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unserialize" invoker="unserialize">
        <doc xml:space="preserve">De-serializes the source information returned from go_data_serialize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string to parse</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a gpointer describing the context.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="date_conv" c:identifier="go_data_date_conv">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the date conventions used by the data, or NULL if not determined.</doc>
          <type name="DateConventions" c:type="GODateConventions*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="go_data_dup">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A deep copy of @src.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_changed" c:identifier="go_data_emit_changed">
        <doc xml:space="preserve">protected utility to emit a 'changed' signal</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eq" c:identifier="go_data_eq">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @a and @b are the same</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="go_data_get_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="minimum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_matrix_markup"
              c:identifier="go_data_get_matrix_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_matrix_size" c:identifier="go_data_get_matrix_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="n_rows" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
          <parameter name="n_columns" transfer-ownership="none">
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_matrix_string"
              c:identifier="go_data_get_matrix_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_matrix_value" c:identifier="go_data_get_matrix_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_dimensions" c:identifier="go_data_get_n_dimensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_values" c:identifier="go_data_get_n_values">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scalar_markup"
              c:identifier="go_data_get_scalar_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scalar_string"
              c:identifier="go_data_get_scalar_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scalar_value" c:identifier="go_data_get_scalar_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="go_data_get_values">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vector_markup"
              c:identifier="go_data_get_vector_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vector_size" c:identifier="go_data_get_vector_size">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vector_string"
              c:identifier="go_data_get_vector_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vector_value" c:identifier="go_data_get_vector_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_value" c:identifier="go_data_has_value">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_decreasing" c:identifier="go_data_is_decreasing">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_increasing" c:identifier="go_data_is_increasing">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="go_data_is_valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_varying_uniformly"
              c:identifier="go_data_is_varying_uniformly">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="preferred_fmt" c:identifier="go_data_preferred_fmt">
        <doc xml:space="preserve">Caller is responsible for unrefing the result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the fmt preferred by the data</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="serialize" c:identifier="go_data_serialize">
        <doc xml:space="preserve">NOTE : This is the _source_ not the content.  (I.e., this refers to the
expression, not its current value.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string representation of the data source that the caller is
	responsible for freeing</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a gpointer describing the context.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unserialize" c:identifier="go_data_unserialize">
        <doc xml:space="preserve">De-serializes the source information returned from go_data_serialize.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string to parse</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a gpointer describing the context.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="flags">
        <type name="gint32" c:type="gint32"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DataClass"
            c:type="GODataClass"
            glib:is-gtype-struct-for="Data">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="dup">
        <callback name="dup">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A deep copy of @src.</doc>
            <type name="Data" c:type="GOData*"/>
          </return-value>
          <parameters>
            <parameter name="src" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eq">
        <callback name="eq">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">TRUE if @a and @b are the same</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="a" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="b" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="preferred_fmt">
        <callback name="preferred_fmt">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the fmt preferred by the data</doc>
            <type name="Format" c:type="GOFormat*"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="date_conv">
        <callback name="date_conv">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the date conventions used by the data, or NULL if not determined.</doc>
            <type name="DateConventions" c:type="GODateConventions*"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="serialize">
        <callback name="serialize">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">a string representation of the data source that the caller is
	responsible for freeing</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="user" transfer-ownership="none">
              <doc xml:space="preserve">a gpointer describing the context.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unserialize">
        <callback name="unserialize">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%FALSE on error.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <doc xml:space="preserve">string to parse</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="user" transfer-ownership="none">
              <doc xml:space="preserve">a gpointer describing the context.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_changed">
        <callback name="emit_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <doc xml:space="preserve">#GOData</doc>
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_n_dimensions">
        <callback name="get_n_dimensions">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sizes">
        <callback name="get_sizes">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="sizes" transfer-ownership="none">
              <type name="guint" c:type="unsigned int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_values">
        <callback name="get_values">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bounds">
        <callback name="get_bounds">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="minimum" transfer-ownership="none">
              <type name="gdouble" c:type="double*"/>
            </parameter>
            <parameter name="maximum" transfer-ownership="none">
              <type name="gdouble" c:type="double*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="coordinates" transfer-ownership="none">
              <type name="guint" c:type="unsigned int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_string">
        <callback name="get_string">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="coordinates" transfer-ownership="none">
              <type name="guint" c:type="unsigned int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_markup">
        <callback name="get_markup">
          <return-value transfer-ownership="full">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
            <parameter name="coordinates" transfer-ownership="none">
              <type name="guint" c:type="unsigned int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_valid">
        <callback name="is_valid">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dat" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="DataFlags" c:type="GODataFlags">
      <member name="cache_is_valid"
              value="1"
              c:identifier="GO_DATA_CACHE_IS_VALID">
        <doc xml:space="preserve">data in cache are valid.</doc>
      </member>
      <member name="is_editable" value="2" c:identifier="GO_DATA_IS_EDITABLE">
        <doc xml:space="preserve">data can be edited.</doc>
      </member>
      <member name="size_cached" value="4" c:identifier="GO_DATA_SIZE_CACHED">
        <doc xml:space="preserve">cached size is valid.</doc>
      </member>
      <member name="has_value" value="8" c:identifier="GO_DATA_HAS_VALUE">
        <doc xml:space="preserve">object is not empty.</doc>
      </member>
    </bitfield>
    <class name="DataMatrix"
           c:symbol-prefix="data_matrix"
           c:type="GODataMatrix"
           parent="Data"
           abstract="1"
           glib:type-name="GODataMatrix"
           glib:get-type="go_data_matrix_get_type"
           glib:type-struct="DataMatrixClass">
      <virtual-method name="get_markup" invoker="get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_str" invoker="get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_values">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_columns" c:identifier="go_data_matrix_get_columns">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_markup" c:identifier="go_data_matrix_get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_minmax" c:identifier="go_data_matrix_get_minmax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rows" c:identifier="go_data_matrix_get_rows">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="go_data_matrix_get_size"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">the matrix size</doc>
          <type name="DataMatrixSize" c:type="GODataMatrixSize"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <doc xml:space="preserve">#GODataMatrix</doc>
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_str" c:identifier="go_data_matrix_get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="go_data_matrix_get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="go_data_matrix_get_values">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="DataMatrix" c:type="GODataMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="Data" c:type="GOData"/>
      </field>
      <field name="size">
        <type name="DataMatrixSize" c:type="GODataMatrixSize"/>
      </field>
      <field name="values">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="minimum">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="maximum">
        <type name="gdouble" c:type="double"/>
      </field>
    </class>
    <record name="DataMatrixClass"
            c:type="GODataMatrixClass"
            glib:is-gtype-struct-for="DataMatrix">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="DataClass" c:type="GODataClass"/>
      </field>
      <field name="load_size">
        <callback name="load_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataMatrix" c:type="GODataMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_values">
        <callback name="load_values">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataMatrix" c:type="GODataMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="mat" transfer-ownership="none">
              <type name="DataMatrix" c:type="GODataMatrix*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
            <parameter name="j" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_str">
        <callback name="get_str">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="mat" transfer-ownership="none">
              <type name="DataMatrix" c:type="GODataMatrix*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
            <parameter name="j" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_markup">
        <callback name="get_markup">
          <return-value transfer-ownership="full">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </return-value>
          <parameters>
            <parameter name="mat" transfer-ownership="none">
              <type name="DataMatrix" c:type="GODataMatrix*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
            <parameter name="j" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DataMatrixSize" c:type="GODataMatrixSize">
      <field name="rows" writable="1">
        <doc xml:space="preserve">rows number, negative if dirty, includes missing values.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="columns" writable="1">
        <doc xml:space="preserve">columns number, negative if dirty, includes missing values.</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <class name="DataMatrixVal"
           c:symbol-prefix="data_matrix_val"
           c:type="GODataMatrixVal"
           parent="DataMatrix"
           glib:type-name="GODataMatrixVal"
           glib:get-type="go_data_matrix_val_get_type">
      <constructor name="new" c:identifier="go_data_matrix_val_new">
        <return-value transfer-ownership="full">
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="DataScalar"
           c:symbol-prefix="data_scalar"
           c:type="GODataScalar"
           parent="Data"
           abstract="1"
           glib:type-name="GODataScalar"
           glib:get-type="go_data_scalar_get_type"
           glib:type-struct="DataScalarClass">
      <virtual-method name="get_markup" invoker="get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_str" invoker="get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="scalar" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="scalar" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_markup" c:identifier="go_data_scalar_get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="val" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_str" c:identifier="go_data_scalar_get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="val" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="go_data_scalar_get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="val" transfer-ownership="none">
            <type name="DataScalar" c:type="GODataScalar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="Data" c:type="GOData"/>
      </field>
      <field name="value">
        <type name="gdouble" c:type="double"/>
      </field>
    </class>
    <record name="DataScalarClass"
            c:type="GODataScalarClass"
            glib:is-gtype-struct-for="DataScalar">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="DataClass" c:type="GODataClass"/>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="scalar" transfer-ownership="none">
              <type name="DataScalar" c:type="GODataScalar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_str">
        <callback name="get_str">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="scalar" transfer-ownership="none">
              <type name="DataScalar" c:type="GODataScalar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_markup">
        <callback name="get_markup">
          <return-value transfer-ownership="full">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="DataScalar" c:type="GODataScalar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataScalarStr"
           c:symbol-prefix="data_scalar_str"
           c:type="GODataScalarStr"
           parent="DataScalar"
           glib:type-name="GODataScalarStr"
           glib:get-type="go_data_scalar_str_get_type">
      <constructor name="new"
                   c:identifier="go_data_scalar_str_new"
                   shadowed-by="new_copy"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="needs_free" transfer-ownership="none">
            <doc xml:space="preserve">whether to free the string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_copy"
                   c:identifier="go_data_scalar_str_new_copy"
                   shadows="new">
        <doc xml:space="preserve">Makes a copy of the string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_str" c:identifier="go_data_scalar_str_set_str">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none">
            <type name="DataScalarStr" c:type="GODataScalarStr*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="needs_free" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="DataScalarVal"
           c:symbol-prefix="data_scalar_val"
           c:type="GODataScalarVal"
           parent="DataScalar"
           glib:type-name="GODataScalarVal"
           glib:get-type="go_data_scalar_val_get_type">
      <constructor name="new" c:identifier="go_data_scalar_val_new">
        <return-value transfer-ownership="full">
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="DataVector"
           c:symbol-prefix="data_vector"
           c:type="GODataVector"
           parent="Data"
           abstract="1"
           glib:type-name="GODataVector"
           glib:get-type="go_data_vector_get_type"
           glib:type-struct="DataVectorClass">
      <virtual-method name="get_markup" invoker="get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_str" invoker="get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_len">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_values">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="decreasing" c:identifier="go_data_vector_decreasing">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_len" c:identifier="go_data_vector_get_len">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_markup" c:identifier="go_data_vector_get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_minmax" c:identifier="go_data_vector_get_minmax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_str" c:identifier="go_data_vector_get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="go_data_vector_get_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="go_data_vector_get_values">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="increasing" c:identifier="go_data_vector_increasing">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vary_uniformly"
              c:identifier="go_data_vector_vary_uniformly">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vec" transfer-ownership="none">
            <type name="DataVector" c:type="GODataVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="Data" c:type="GOData"/>
      </field>
      <field name="len">
        <type name="gint" c:type="int"/>
      </field>
      <field name="values">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="minimum">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="maximum">
        <type name="gdouble" c:type="double"/>
      </field>
    </class>
    <record name="DataVectorClass"
            c:type="GODataVectorClass"
            glib:is-gtype-struct-for="DataVector">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="DataClass" c:type="GODataClass"/>
      </field>
      <field name="load_len">
        <callback name="load_len">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataVector" c:type="GODataVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_values">
        <callback name="load_values">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataVector" c:type="GODataVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataVector" c:type="GODataVector*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_str">
        <callback name="get_str">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="vec" transfer-ownership="none">
              <type name="DataVector" c:type="GODataVector*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_markup">
        <callback name="get_markup">
          <return-value transfer-ownership="full">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="DataVector" c:type="GODataVector*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataVectorStr"
           c:symbol-prefix="data_vector_str"
           c:type="GODataVectorStr"
           parent="DataVector"
           glib:type-name="GODataVectorStr"
           glib:get-type="go_data_vector_str_get_type">
      <constructor name="new"
                   c:identifier="go_data_vector_str_new"
                   shadowed-by="new_copy"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="container">
            <doc xml:space="preserve">the values.</doc>
            <array length="1" zero-terminated="0" c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the values number.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">callback to destroy the values if needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_copy"
                   c:identifier="go_data_vector_str_new_copy"
                   shadows="new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the values.</doc>
            <array length="1" zero-terminated="0" c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the values number.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_translate_func"
              c:identifier="go_data_vector_str_set_translate_func">
        <doc xml:space="preserve">Sets a function to be used for translating elements of @vec</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve">a #GODataVectorStr</doc>
            <type name="DataVectorStr" c:type="GODataVectorStr*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve">a #GOTranslateFunc</doc>
            <type name="TranslateFunc" c:type="GOTranslateFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">data to be passed to @func and @notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">a #GDestroyNotify function to be called when @vec is
  destroyed or when the translation function is changed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translation_domain"
              c:identifier="go_data_vector_str_set_translation_domain">
        <doc xml:space="preserve">Sets the translation domain and uses dgettext() for translating the
elements of @vec.
Note that libgoffice expects all strings to be encoded in UTF-8, therefore
the translation domain must have its codeset set to UTF-8, see
bind_textdomain_codeset() in the gettext() documentation.

If you're not using gettext() for localization, see
go_data_vector_str_set_translate_func().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vector" transfer-ownership="none">
            <doc xml:space="preserve">a #GODataVectorStr</doc>
            <type name="DataVectorStr" c:type="GODataVectorStr*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">the translation domain to use for dgettext() calls</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="DataVectorVal"
           c:symbol-prefix="data_vector_val"
           c:type="GODataVectorVal"
           parent="DataVector"
           glib:type-name="GODataVectorVal"
           glib:get-type="go_data_vector_val_get_type">
      <constructor name="new"
                   c:identifier="go_data_vector_val_new"
                   shadowed-by="new_copy"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">the values.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the values number.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">callback to destroy the values if needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_copy"
                   c:identifier="go_data_vector_val_new_copy"
                   shadows="new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOData.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">the values.</doc>
            <array length="1" zero-terminated="0" c:type="double*">
              <type name="gdouble" c:type="double"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the values number.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="DateConventions"
            c:type="GODateConventions"
            glib:type-name="GODateConventions"
            glib:get-type="go_date_conventions_get_type"
            c:symbol-prefix="date_conventions">
      <field name="use_1904" writable="1">
        <doc xml:space="preserve">Base on 1904 as opposed to 1900.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <enumeration name="Direction"
                 glib:type-name="GODirection"
                 glib:get-type="go_direction_get_type"
                 c:type="GODirection">
      <member name="none"
              value="4"
              c:identifier="GO_DIRECTION_NONE"
              glib:nick="none">
        <doc xml:space="preserve">no direction.</doc>
      </member>
      <member name="down"
              value="1"
              c:identifier="GO_DIRECTION_DOWN"
              glib:nick="down">
        <doc xml:space="preserve">down.</doc>
      </member>
      <member name="up"
              value="0"
              c:identifier="GO_DIRECTION_UP"
              glib:nick="up">
        <doc xml:space="preserve">up.</doc>
      </member>
      <member name="right"
              value="3"
              c:identifier="GO_DIRECTION_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve">right.</doc>
      </member>
      <member name="left"
              value="2"
              c:identifier="GO_DIRECTION_LEFT"
              glib:nick="left">
        <doc xml:space="preserve">left.</doc>
      </member>
      <function name="get_name" c:identifier="go_direction_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <type name="Direction" c:type="GODirection"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_forward" c:identifier="go_direction_is_forward">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE for GO_DIRECTION_DOWN or GO_DIRECTION_RIGHT.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">#GODirection</doc>
            <type name="Direction" c:type="GODirection"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_horizontal" c:identifier="go_direction_is_horizontal">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE for GO_DIRECTION_LEFT and GO_DIRECTION_RIGHT.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">#GODirection</doc>
            <type name="Direction" c:type="GODirection"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Distribution"
           c:symbol-prefix="distribution"
           c:type="GODistribution"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GODistribution"
           glib:get-type="go_distribution_get_type">
      <implements name="Persist"/>
      <constructor name="new" c:identifier="go_distribution_new">
        <return-value transfer-ownership="full">
          <type name="Distribution" c:type="GODistribution*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="DistributionType" c:type="GODistributionType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="type_from_string"
                c:identifier="go_distribution_type_from_string">
        <return-value transfer-ownership="none">
          <type name="DistributionType" c:type="GODistributionType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_to_string"
                c:identifier="go_distribution_type_to_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="DistributionType" c:type="GODistributionType"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_cumulative"
              c:identifier="go_distribution_get_cumulative">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cumulative_hazard"
              c:identifier="go_distribution_get_cumulative_hazard">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cumulative_hazardl"
              c:identifier="go_distribution_get_cumulative_hazardl"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cumulativel"
              c:identifier="go_distribution_get_cumulativel"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_density" c:identifier="go_distribution_get_density">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_densityl"
              c:identifier="go_distribution_get_densityl"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distribution_name"
              c:identifier="go_distribution_get_distribution_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distribution_type"
              c:identifier="go_distribution_get_distribution_type">
        <return-value transfer-ownership="none">
          <type name="DistributionType" c:type="GODistributionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hazard" c:identifier="go_distribution_get_hazard">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hazardl"
              c:identifier="go_distribution_get_hazardl"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inverse_survival"
              c:identifier="go_distribution_get_inverse_survival">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_inverse_survivall"
              c:identifier="go_distribution_get_inverse_survivall"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ppf" c:identifier="go_distribution_get_ppf">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ppfl"
              c:identifier="go_distribution_get_ppfl"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_survival" c:identifier="go_distribution_get_survival">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_survivall"
              c:identifier="go_distribution_get_survivall"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="go_distribution_scale">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distribution" c:type="GODistribution*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="location" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="scale" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <enumeration name="DistributionType" c:type="GODistributionType">
      <member name="invalid" value="-1" c:identifier="GO_DISTRIBUTION_INVALID">
      </member>
      <member name="normal" value="0" c:identifier="GO_DISTRIBUTION_NORMAL">
        <doc xml:space="preserve">Normal.</doc>
      </member>
      <member name="uniform" value="1" c:identifier="GO_DISTRIBUTION_UNIFORM">
        <doc xml:space="preserve">Uniform.</doc>
      </member>
      <member name="cauchy" value="2" c:identifier="GO_DISTRIBUTION_CAUCHY">
        <doc xml:space="preserve">Cauchy.,</doc>
      </member>
      <member name="weibull" value="3" c:identifier="GO_DISTRIBUTION_WEIBULL">
        <doc xml:space="preserve">Weibull.</doc>
      </member>
      <member name="lognormal"
              value="4"
              c:identifier="GO_DISTRIBUTION_LOGNORMAL">
        <doc xml:space="preserve">Lognormal.</doc>
      </member>
      <member name="max" value="5" c:identifier="GO_DISTRIBUTION_MAX">
      </member>
    </enumeration>
    <class name="Doc"
           c:symbol-prefix="doc"
           c:type="GODoc"
           parent="GObject.Object"
           glib:type-name="GODoc"
           glib:get-type="go_doc_get_type"
           glib:type-struct="DocClass">
      <method name="add_image" c:identifier="go_doc_add_image">
        <doc xml:space="preserve">Adds @image to the document if no such image already exists. The name of
the returned image might be different from @id, even if given.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">either @image, in which case the document adds a reference on it, or
an identical image for which the owner does not own a reference.</doc>
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the image name or NULL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">a #GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_read" c:identifier="go_doc_end_read">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dirty_time" c:identifier="go_doc_get_dirty_time">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the time (as in g_get_real_time()) the document was first marked
dirty.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image" c:identifier="go_doc_get_image">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GOImage is one exist with name @id. The caller does not own a
reference.</doc>
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the image name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_images" c:identifier="go_doc_get_images">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the images registered inside the document</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_meta_data" c:identifier="go_doc_get_meta_data">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@doc's metadata</doc>
          <type name="Gsf.DocMetaData" c:type="GsfDocMetaData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="go_doc_get_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="image_fetch" c:identifier="go_doc_image_fetch">
        <doc xml:space="preserve">Searches for a #GOImage with name @id in the document image buffer and
creates one if needed. The caller does not own a reference on the returned
#GOImage.
This function must be called after a call to go_doc_init_read(), otherwise
it will emit a critical and return NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the found or created #GOImage.</doc>
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the name for the new image.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the type of the #GOImage to create if needed.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_read" c:identifier="go_doc_init_read">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Gsf.Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_write" c:identifier="go_doc_init_write">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_dirty" c:identifier="go_doc_is_dirty">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @doc has been modified.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_pristine" c:identifier="go_doc_is_pristine">
        <doc xml:space="preserve">This checks to see if the doc has ever been
used ( approximately )</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if we can discard this doc.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="go_doc_read">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="xin" transfer-ownership="none">
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_image" c:identifier="go_doc_save_image">
        <doc xml:space="preserve">Saves the image with the document. Each image will be saved only
once.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the Id of the #GOImage to save</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_resource" c:identifier="go_doc_save_resource">
        <doc xml:space="preserve">Saves the resource with the document. Each resource will be saved only
once.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="gp" transfer-ownership="none">
            <doc xml:space="preserve">the #GOPersist to save</doc>
            <type name="Persist" c:type="GOPersist*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty" c:identifier="go_doc_set_dirty">
        <doc xml:space="preserve">Changes the dirty state of @doc to @is_dirty and clears the pristine state
no matter what.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="is_dirty" transfer-ownership="none">
            <doc xml:space="preserve">bool</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty_time" c:identifier="go_doc_set_dirty_time">
        <doc xml:space="preserve">Changes the dirty time, i.e., the time the document was first marked
dirty.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">a timestamp from g_get_real_time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_meta_data" c:identifier="go_doc_set_meta_data">
        <doc xml:space="preserve">Adds a ref to @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">#GsfDocMetaData</doc>
            <type name="Gsf.DocMetaData" c:type="GsfDocMetaData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pristine" c:identifier="go_doc_set_pristine">
        <doc xml:space="preserve">Sets the indication of whether this document is unchanged since it was
created.  Note: if both "dirty" and "pristine" are being set, set
"pristine" last.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="pristine" transfer-ownership="none">
            <doc xml:space="preserve">a gboolean.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri" c:identifier="go_doc_set_uri">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the name was set succesfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">the document to modify</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri for this worksheet.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_meta_data" c:identifier="go_doc_update_meta_data">
        <doc xml:space="preserve">Signal that @doc's metadata should be updated
	- statistics (sheet count, word count)
	- content (sheet names, bookmarks)
	- reloading linked items</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="go_doc_write">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dirty" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dirty-time" writable="1" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="pristine" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="uri" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="uri">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="meta_data">
        <type name="Gsf.DocMetaData" c:type="GsfDocMetaData*"/>
      </field>
      <field name="modified">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="first_modification_time">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pristine">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="images">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="_GODocPrivate*"/>
      </field>
      <glib:signal name="metadata-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="metadata-update" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DocClass" c:type="GODocClass" glib:is-gtype-struct-for="Doc">
      <field name="base">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="meta_data">
        <type name="gpointer" c:type="_GOMetaDataIFace"/>
      </field>
    </record>
    <class name="DocControl"
           c:symbol-prefix="doc_control"
           c:type="GODocControl"
           parent="GObject.Object"
           glib:type-name="GODocControl"
           glib:get-type="go_doc_control_get_type"
           glib:type-struct="DocControlClass">
      <method name="get_doc" c:identifier="go_doc_control_get_doc">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GODoc associated to @dc</doc>
          <type name="Doc" c:type="GODoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dc" transfer-ownership="none">
            <doc xml:space="preserve">#GODocControl</doc>
            <type name="DocControl" c:type="GODocControl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_doc" c:identifier="go_doc_control_set_doc">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dc" transfer-ownership="none">
            <type name="DocControl" c:type="GODocControl*"/>
          </instance-parameter>
          <parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="doc">
        <type name="Doc" c:type="GODoc*"/>
      </field>
    </class>
    <record name="DocControlClass"
            c:type="GODocControlClass"
            glib:is-gtype-struct-for="DocControl">
      <field name="base">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DocControlState" c:type="GODocControlState">
      <member name="normal"
              value="0"
              c:identifier="GO_DOC_CONTROL_STATE_NORMAL">
        <doc xml:space="preserve">normal.</doc>
      </member>
      <member name="fullscreen"
              value="1"
              c:identifier="GO_DOC_CONTROL_STATE_FULLSCREEN">
        <doc xml:space="preserve">full screen.</doc>
      </member>
      <member name="max" value="2" c:identifier="GO_DOC_CONTROL_STATE_MAX">
        <doc xml:space="preserve">maximum value, shoulkd not happen.</doc>
      </member>
    </enumeration>
    <enumeration name="DotDot" c:type="GODotDot">
      <member name="syntactic" value="0" c:identifier="GO_DOTDOT_SYNTACTIC">
        <doc xml:space="preserve">assume no symlinks.</doc>
      </member>
      <member name="test" value="1" c:identifier="GO_DOTDOT_TEST">
        <doc xml:space="preserve">check.</doc>
      </member>
      <member name="leave" value="2" c:identifier="GO_DOTDOT_LEAVE">
        <doc xml:space="preserve">leave alone.</doc>
      </member>
    </enumeration>
    <record name="DrawingAnchor" c:type="GODrawingAnchor">
      <field name="pos_pts" writable="1">
        <doc xml:space="preserve">position in points.</doc>
        <array zero-terminated="0" c:type="int" fixed-size="4">
          <type name="gint" c:type="int"/>
        </array>
      </field>
      <field name="direction" writable="1">
        <doc xml:space="preserve">#GODrawingAnchorDir</doc>
        <type name="DrawingAnchorDir" c:type="GODrawingAnchorDir"/>
      </field>
    </record>
    <enumeration name="DrawingAnchorDir" c:type="GODrawingAnchorDir">
      <member name="unknown" value="255" c:identifier="GOD_ANCHOR_DIR_UNKNOWN">
        <doc xml:space="preserve">unknown.</doc>
      </member>
      <member name="up_left" value="0" c:identifier="GOD_ANCHOR_DIR_UP_LEFT">
        <doc xml:space="preserve">up left.</doc>
      </member>
      <member name="up_right" value="1" c:identifier="GOD_ANCHOR_DIR_UP_RIGHT">
        <doc xml:space="preserve">up right.</doc>
      </member>
      <member name="down_left"
              value="16"
              c:identifier="GOD_ANCHOR_DIR_DOWN_LEFT">
        <doc xml:space="preserve">down left.</doc>
      </member>
      <member name="down_right"
              value="17"
              c:identifier="GOD_ANCHOR_DIR_DOWN_RIGHT">
        <doc xml:space="preserve">down right.</doc>
      </member>
      <member name="none_mask"
              value="0"
              c:identifier="GOD_ANCHOR_DIR_NONE_MASK">
        <doc xml:space="preserve">mask for none.</doc>
      </member>
      <member name="h_mask" value="1" c:identifier="GOD_ANCHOR_DIR_H_MASK">
        <doc xml:space="preserve">horizontal mask.</doc>
      </member>
      <member name="right" value="1" c:identifier="GOD_ANCHOR_DIR_RIGHT">
        <doc xml:space="preserve">right</doc>
      </member>
      <member name="v_mask" value="16" c:identifier="GOD_ANCHOR_DIR_V_MASK">
        <doc xml:space="preserve">vertical mask.</doc>
      </member>
      <member name="down" value="16" c:identifier="GOD_ANCHOR_DIR_DOWN">
        <doc xml:space="preserve">down</doc>
      </member>
    </enumeration>
    <constant name="EMU_PER_IN" value="914400" c:type="GO_EMU_PER_IN">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Editor"
            c:type="GOEditor"
            glib:type-name="GOEditor"
            glib:get-type="go_editor_get_type"
            c:symbol-prefix="editor">
      <doc xml:space="preserve">Embeds a notebook containing all the pages added to the editor.</doc>
      <constructor name="new" c:identifier="go_editor_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GOEditor object, which is used to store a collection of
	property edition widgets (pages). The returned object must be freed
	using @go_editor_free.</doc>
          <type name="Editor" c:type="GOEditor*"/>
        </return-value>
      </constructor>
      <method name="add_page" c:identifier="go_editor_add_page">
        <doc xml:space="preserve">Adds a page to @editor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">property edition widget</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">a label identifying the widget</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_editor_free">
        <doc xml:space="preserve">Frees a GOEditor object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notebook" c:identifier="go_editor_get_notebook">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GtkNotebook from the widget collection stored in @editor.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="go_editor_get_page">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the page with @name as name if any</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">#GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">page name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_registered_widget"
              c:identifier="go_editor_get_registered_widget">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a widget previously registered using @go_editor_register_widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the registered widget</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_widget" c:identifier="go_editor_register_widget">
        <doc xml:space="preserve">Registers a widget that then can be retrieved later using
@go_editor_get_registered_widget. The main use of this function is to
provide the ability to extend a page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_store_page" c:identifier="go_editor_set_store_page">
        <doc xml:space="preserve">Sets a placeholder for storing the last active editor page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="store_page" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for the last selected page</doc>
            <type name="guint" c:type="unsigned*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_scrolled_window"
              c:identifier="go_editor_set_use_scrolled_window">
        <doc xml:space="preserve">Sets whether each page of the editor should be displayed inside a scrolled
window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve">a #GOEditor</doc>
            <type name="Editor" c:type="GOEditor*"/>
          </instance-parameter>
          <parameter name="use_scrolled" transfer-ownership="none">
            <doc xml:space="preserve">boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="Emf"
           c:symbol-prefix="emf"
           c:type="GOEmf"
           parent="Image"
           glib:type-name="GOEmf"
           glib:get-type="go_emf_get_type">
      <constructor name="new_from_data"
                   c:identifier="go_emf_new_from_data"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="go_emf_new_from_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_canvas" c:identifier="go_emf_get_canvas">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the canvas displaying the EMF image, adding a
reference to it.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="emf" transfer-ownership="none">
            <doc xml:space="preserve">#GOEmf</doc>
            <type name="Emf" c:type="GOEmf*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="ErrorInfo"
            c:type="GOErrorInfo"
            glib:type-name="GOErrorInfo"
            glib:get-type="go_error_info_get_type"
            c:symbol-prefix="error_info">
      <constructor name="new_from_errno"
                   c:identifier="go_error_info_new_from_errno">
        <return-value transfer-ownership="full">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_error_list"
                   c:identifier="go_error_info_new_from_error_list">
        <doc xml:space="preserve">Creates a new #GOErrorInfo from a list of existing #GOErrorInfo
instances to add to the message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOErrorInfo</doc>
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="errors" transfer-ownership="none">
            <doc xml:space="preserve">a list of #GOErrorInfo to add</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="ErrorInfo"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_printf"
                   c:identifier="go_error_info_new_printf"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="msg_format" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_str" c:identifier="go_error_info_new_str">
        <return-value transfer-ownership="full">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_str_with_details"
                   c:identifier="go_error_info_new_str_with_details">
        <doc xml:space="preserve">Creates a new #GOErrorInfo from @message and an existing #GOErrorInfo
instance to add to the message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOErrorInfo</doc>
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve">error message</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve">#GOErrorInfo to add</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_str_with_details_list"
                   c:identifier="go_error_info_new_str_with_details_list">
        <doc xml:space="preserve">Creates a new #GOErrorInfo from @message and a list of existing #GOErrorInfo
instances to add to the message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GOErrorInfo</doc>
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve">error message</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve">a list of #GOErrorInfo to add</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="ErrorInfo"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_vprintf"
                   c:identifier="go_error_info_new_vprintf"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <type name="Severity" c:type="GOSeverity"/>
          </parameter>
          <parameter name="msg_format" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_details" c:identifier="go_error_info_add_details">
        <doc xml:space="preserve">Adds an existing #GOErrorInfo instance to @error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">#GOErrorInfo</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve">#GOErrorInfo to add</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_details_list"
              c:identifier="go_error_info_add_details_list">
        <doc xml:space="preserve">Adds a list of existing #GOErrorInfo instances to @error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">#GOErrorInfo</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve">a list of #GOErrorInfo to add</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="ErrorInfo"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_error_info_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_details" c:identifier="go_error_info_peek_details">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly details
in @error</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="ErrorInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">error message</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_message" c:identifier="go_error_info_peek_message">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_severity" c:identifier="go_error_info_peek_severity">
        <return-value transfer-ownership="none">
          <type name="Severity" c:type="GOSeverity"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="go_error_info_print">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="F_OK" value="0" c:type="GO_F_OK">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="FileFormatLevel"
                 glib:type-name="GOFileFormatLevel"
                 glib:get-type="go_file_format_level_get_type"
                 c:type="GOFileFormatLevel">
      <doc xml:space="preserve">File format levels. They are ordered. When we save a file, we
remember the name, but not if we already have a name at a higher level.
When created, workbooks are assigned a name at level GO_FILE_FL_NEW.</doc>
      <member name="none"
              value="0"
              c:identifier="GO_FILE_FL_NONE"
              glib:nick="none">
        <doc xml:space="preserve">no name assigned, won't happen.</doc>
      </member>
      <member name="write_only"
              value="1"
              c:identifier="GO_FILE_FL_WRITE_ONLY"
              glib:nick="write_only">
        <doc xml:space="preserve">PostScript etc, won't be remembered.</doc>
      </member>
      <member name="new"
              value="2"
              c:identifier="GO_FILE_FL_NEW"
              glib:nick="new">
        <doc xml:space="preserve">Wb just created.</doc>
      </member>
      <member name="manual"
              value="3"
              c:identifier="GO_FILE_FL_MANUAL"
              glib:nick="manual">
        <doc xml:space="preserve">Save gets punted to save as.</doc>
      </member>
      <member name="manual_remember"
              value="4"
              c:identifier="GO_FL_MANUAL_REMEMBER"
              glib:nick="manual_remember">
      </member>
      <member name="auto"
              value="5"
              c:identifier="GO_FILE_FL_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve">Save will save to this filename.</doc>
      </member>
    </enumeration>
    <class name="FileOpener"
           c:symbol-prefix="file_opener"
           c:type="GOFileOpener"
           parent="GObject.Object"
           glib:type-name="GOFileOpener"
           glib:get-type="go_file_opener_get_type"
           glib:type-struct="FileOpenerClass">
      <constructor name="new" c:identifier="go_file_opener_new">
        <doc xml:space="preserve">Creates new GOFileOpener object. Optional @id will be used
after registering it with go_file_opener_register function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created GOFileOpener object.</doc>
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">Optional ID of the opener (or NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">Description of supported file format</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="suffixes" transfer-ownership="none">
            <doc xml:space="preserve">List of suffixes to associate with the opener</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gchar"/>
            </type>
          </parameter>
          <parameter name="mimes" transfer-ownership="none">
            <doc xml:space="preserve">List of mime types to associate with the opener</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gchar"/>
            </type>
          </parameter>
          <parameter name="probe_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Optional pointer to "probe" function (or NULL)</doc>
            <type name="FileOpenerProbeFunc" c:type="GOFileOpenerProbeFunc"/>
          </parameter>
          <parameter name="open_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Pointer to "open" function</doc>
            <type name="FileOpenerOpenFunc" c:type="GOFileOpenerOpenFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_enc"
                   c:identifier="go_file_opener_new_with_enc">
        <doc xml:space="preserve">Creates new GOFileOpener object. Optional @id will be used
after registering it with go_file_opener_register function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created #GOFileOpener object.</doc>
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">Optional ID of the opener (or NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">Description of supported file format</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="suffixes" transfer-ownership="none">
            <doc xml:space="preserve">List of suffixes to associate with the opener</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gchar"/>
            </type>
          </parameter>
          <parameter name="mimes" transfer-ownership="none">
            <doc xml:space="preserve">List of mime types to associate with the opener</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gchar"/>
            </type>
          </parameter>
          <parameter name="probe_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Optional pointer to "probe" function (or NULL)</doc>
            <type name="FileOpenerProbeFunc" c:type="GOFileOpenerProbeFunc"/>
          </parameter>
          <parameter name="open_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Pointer to "open" function</doc>
            <type name="FileOpenerOpenFuncWithEnc"
                  c:type="GOFileOpenerOpenFuncWithEnc"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="for_id" c:identifier="go_file_opener_for_id">
        <doc xml:space="preserve">Searches for file opener with given @id, registered using
go_file_opener_register</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#GOFileOpener object or %NULL if opener cannot be found.</doc>
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">File opener's ID</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="can_probe" c:identifier="go_file_opener_can_probe">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
          <parameter name="pl" transfer-ownership="none">
            <type name="FileProbeLevel" c:type="GOFileProbeLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="go_file_opener_get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="go_file_opener_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mimes" c:identifier="go_file_opener_get_mimes">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the supported mime types.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">#GOFileOpener</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suffixes" c:identifier="go_file_opener_get_suffixes">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the suffixes for the supporte file types.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">#GOFileOpener</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_encoding_dependent"
              c:identifier="go_file_opener_is_encoding_dependent">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="go_file_opener_open">
        <doc xml:space="preserve">Reads content of @file_name file into workbook @wbv is attached to.
Results are reported using @io_context object, use
go_io_error_occurred to find out if operation was successful.
The state of @wbv and its workbook is undefined if operation fails, you
should destroy them in that case.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">GOFileOpener object</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
          <parameter name="opt_enc" transfer-ownership="none">
            <doc xml:space="preserve">Optional encoding</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="io_context" transfer-ownership="none">
            <doc xml:space="preserve">Context for i/o operation</doc>
            <type name="IOContext" c:type="GOIOContext*"/>
          </parameter>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GoView</doc>
            <type name="View" c:type="GoView*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">Gsf input stream</doc>
            <type name="Gsf.Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="probe" c:identifier="go_file_opener_probe">
        <doc xml:space="preserve">Checks if a given file is supported by the opener.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if the opener can read given file and %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">#GOFileOpener</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">#GsfInput</doc>
            <type name="Gsf.Input" c:type="GsfInput*"/>
          </parameter>
          <parameter name="pl" transfer-ownership="none">
            <doc xml:space="preserve">#GOFileProbeLevel</doc>
            <type name="FileProbeLevel" c:type="GOFileProbeLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="go_file_opener_register">
        <doc xml:space="preserve">Adds @fo opener to the list of available file openers, making it
available for Gnumeric i/o routines. The opener is registered with given
@priority. The priority is used to determine the order in which openers
will be tried when reading a file. The higher the priority, the sooner it
will be tried. Default XML-based Gnumeric file opener is registered at
priority 50. Recommended range for @priority is [0, 100].
Reference count for the opener is incremented inside the function, but
you don't have to (and shouldn't) call g_object_unref on it if it's
floating object (for example, when you pass object newly created with
go_file_opener_new and not referenced anywhere).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">GOFileOpener object</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve">Opener's priority</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="go_file_opener_unregister">
        <doc xml:space="preserve">Removes @fo opener from list of available file openers. Reference count
for the opener is decremented inside the function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fo" transfer-ownership="none">
            <doc xml:space="preserve">GOFileOpener object previously registered using
               go_file_opener_register</doc>
            <type name="FileOpener" c:type="GOFileOpener*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interactive-only" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="FileOpenerClass"
            c:type="GOFileOpenerClass"
            disguised="1"
            glib:is-gtype-struct-for="FileOpener">
    </record>
    <callback name="FileOpenerOpenFunc" c:type="GOFileOpenerOpenFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fo" transfer-ownership="none">
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </parameter>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="view" transfer-ownership="none">
          <type name="View" c:type="GoView*"/>
        </parameter>
        <parameter name="input" transfer-ownership="none">
          <type name="Gsf.Input" c:type="GsfInput*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FileOpenerOpenFuncWithEnc"
              c:type="GOFileOpenerOpenFuncWithEnc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fo" transfer-ownership="none">
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </parameter>
        <parameter name="enc" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="view" transfer-ownership="none">
          <type name="View" c:type="GoView*"/>
        </parameter>
        <parameter name="input" transfer-ownership="none">
          <type name="Gsf.Input" c:type="GsfInput*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="FileOpenerProbeFunc" c:type="GOFileOpenerProbeFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="fo" transfer-ownership="none">
          <type name="FileOpener" c:type="GOFileOpener*"/>
        </parameter>
        <parameter name="input" transfer-ownership="none">
          <type name="Gsf.Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="pl" transfer-ownership="none">
          <type name="FileProbeLevel" c:type="GOFileProbeLevel"/>
        </parameter>
      </parameters>
    </callback>
    <record name="FilePermissions"
            c:type="GOFilePermissions"
            glib:type-name="GOFilePermissions"
            glib:get-type="go_file_permissions_get_type"
            c:symbol-prefix="file_permissions">
      <field name="owner_read" writable="1">
        <doc xml:space="preserve">owner can read.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="owner_write" writable="1">
        <doc xml:space="preserve">owner can write.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="owner_execute" writable="1">
        <doc xml:space="preserve">owner can execute.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="group_read" writable="1">
        <doc xml:space="preserve">group can read.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="group_write" writable="1">
        <doc xml:space="preserve">group can write.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="group_execute" writable="1">
        <doc xml:space="preserve">group can execute.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="others_read" writable="1">
        <doc xml:space="preserve">everybody can read.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="others_write" writable="1">
        <doc xml:space="preserve">everybody can write.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="others_execute" writable="1">
        <doc xml:space="preserve">everybody can execute.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <enumeration name="FileProbeLevel" c:type="GOFileProbeLevel">
      <doc xml:space="preserve">File probe level tells file opener (its probe method to be exact), how
hard it should try to recognize the type of the file. File openers may
ignore this or support only some probe levels, but if specifies
"reccomened" behaviour.
Before opening any file we detect its type by calling probe for
every registered file opener (in order of priority) and passing
GO_FILE_PROBE_FILE_NAME as probe level. If none of them recogizes the file,
we increase probe level and try again...</doc>
      <member name="file_name"
              value="0"
              c:identifier="GO_FILE_PROBE_FILE_NAME">
        <doc xml:space="preserve">Test only file name, don't read file contents</doc>
      </member>
      <member name="content" value="1" c:identifier="GO_FILE_PROBE_CONTENT">
        <doc xml:space="preserve">Read the whole file if it's necessary</doc>
      </member>
      <member name="last" value="2" c:identifier="GO_FILE_PROBE_LAST">
        <doc xml:space="preserve">Invalid</doc>
      </member>
    </enumeration>
    <enumeration name="FileSaveScope"
                 glib:type-name="GOFileSaveScope"
                 glib:get-type="go_file_save_scope_get_type"
                 c:type="GOFileSaveScope">
      <doc xml:space="preserve">GOFileSaveScope specifies what information file saver can save in a file.
Many savers can save the whole workbook (with all sheets), but others
save only current sheet, usually because of file format limitations.</doc>
      <member name="workbook"
              value="0"
              c:identifier="GO_FILE_SAVE_WORKBOOK"
              glib:nick="workbook">
        <doc xml:space="preserve">save the whole file.</doc>
      </member>
      <member name="sheet"
              value="1"
              c:identifier="GO_FILE_SAVE_SHEET"
              glib:nick="sheet">
        <doc xml:space="preserve">save only current page.</doc>
      </member>
      <member name="range"
              value="2"
              c:identifier="GO_FILE_SAVE_RANGE"
              glib:nick="range">
        <doc xml:space="preserve">save only a selected range.</doc>
      </member>
    </enumeration>
    <class name="FileSaver"
           c:symbol-prefix="file_saver"
           c:type="GOFileSaver"
           parent="GObject.Object"
           glib:type-name="GOFileSaver"
           glib:get-type="go_file_saver_get_type"
           glib:type-struct="FileSaverClass">
      <constructor name="new" c:identifier="go_file_saver_new">
        <doc xml:space="preserve">Creates new GOFileSaver object. Optional @id will be used
after registering it with go_file_saver_register or
go_file_saver_register_as_default function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created GOFileSaver object.</doc>
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">Optional ID of the saver (or NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">Optional default extension of saved files (or NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">Description of supported file format</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">File format level</doc>
            <type name="FileFormatLevel" c:type="GOFileFormatLevel"/>
          </parameter>
          <parameter name="save_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Pointer to "save" function</doc>
            <type name="FileSaverSaveFunc" c:type="GOFileSaverSaveFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="for_file_name"
                c:identifier="go_file_saver_for_file_name">
        <doc xml:space="preserve">Searches for file saver with given @filename, registered using
go_file_opener_register</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GOFileSaver object or NULL if opener cannot be found.</doc>
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="file_name" transfer-ownership="none">
            <doc xml:space="preserve">name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_id" c:identifier="go_file_saver_for_id">
        <doc xml:space="preserve">Searches for file saver with given @id, registered using
go_file_saver_register or register_file_opener_as_default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GOFileSaver object or NULL if saver cannot be found.</doc>
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">File saver's ID</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_mime_type"
                c:identifier="go_file_saver_for_mime_type">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GOFileSaver object associated with @mime_type, or %NULL</doc>
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve">A mime type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default" c:identifier="go_file_saver_get_default">
        <doc xml:space="preserve">Finds file saver registered as default saver with the highest priority.
Reference count for the saver is NOT incremented.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GOFileSaver object or NULL if default saver is not
              available.</doc>
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </return-value>
      </function>
      <method name="get_description"
              c:identifier="go_file_saver_get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension" c:identifier="go_file_saver_get_extension">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format_level"
              c:identifier="go_file_saver_get_format_level">
        <return-value transfer-ownership="none">
          <type name="FileFormatLevel" c:type="GOFileFormatLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="go_file_saver_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type" c:identifier="go_file_saver_get_mime_type">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_save_scope"
              c:identifier="go_file_saver_get_save_scope">
        <return-value transfer-ownership="none">
          <type name="FileSaveScope" c:type="GOFileSaveScope"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="go_file_saver_register">
        <doc xml:space="preserve">Adds @fs saver to the list of available file savers, making it
available for the user when selecting file format for save.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">GOFileSaver object</doc>
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_as_default"
              c:identifier="go_file_saver_register_as_default">
        <doc xml:space="preserve">Adds @fs saver to the list of available file savers, making it
available for the user when selecting file format for save.
The saver is also marked as default saver with given priority.
When Gnumeric needs default file saver, it chooses the one with the
highest priority. Recommended range for @priority is [0, 100].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">GOFileSaver object</doc>
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve">Saver's priority</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="go_file_saver_save">
        <doc xml:space="preserve">Saves @wbv and the workbook it is attached to into @output stream.
Results are reported using @io_context object, use
go_io_error_occurred to find out if operation was successful.
It's possible that @file_name is created and contain some data if
operation fails, you should remove the file in that case.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">GOFileSaver object</doc>
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
          <parameter name="io_context" transfer-ownership="none">
            <doc xml:space="preserve">Context for i/o operation</doc>
            <type name="IOContext" c:type="GOIOContext*"/>
          </parameter>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GoView</doc>
            <type name="View" c:type="GoView*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">Output stream</doc>
            <type name="Gsf.Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_export_options"
              c:identifier="go_file_saver_set_export_options"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
          <parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite_files"
              c:identifier="go_file_saver_set_overwrite_files">
        <doc xml:space="preserve">Changes behaviour of the saver when saving a file. If @overwrite is set
to TRUE, existing file will be overwritten. Otherwise, the saver will
report an error without saving anything.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">GOFileSaver object</doc>
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">A boolean value saying whether the saver should overwrite
               existing files.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_save_scope"
              c:identifier="go_file_saver_set_save_scope">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="FileSaveScope" c:type="GOFileSaveScope"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="go_file_saver_unregister">
        <doc xml:space="preserve">Removes @fs saver from list of available file savers. Reference count
for the saver is decremented inside the function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">GOFileSaver object previously registered using
               go_file_saver_register or go_file_saver_register_as_default</doc>
            <type name="FileSaver" c:type="GOFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="extension" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="format-level" writable="1" transfer-ownership="none">
        <type name="FileFormatLevel"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interactive-only" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mime-type" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="overwrite" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scope" writable="1" transfer-ownership="none">
        <type name="FileSaveScope"/>
      </property>
      <glib:signal name="set-export-options" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Doc"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FileSaverClass"
            c:type="GOFileSaverClass"
            disguised="1"
            glib:is-gtype-struct-for="FileSaver">
      <doc xml:space="preserve">File saver base class.</doc>
    </record>
    <callback name="FileSaverSaveFunc" c:type="GOFileSaverSaveFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fs" transfer-ownership="none">
          <type name="FileSaver" c:type="GOFileSaver*"/>
        </parameter>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="view" transfer-ownership="none">
          <type name="View" c:type="GoView*"/>
        </parameter>
        <parameter name="output" transfer-ownership="none">
          <type name="Gsf.Output" c:type="GsfOutput*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Font"
            c:type="GOFont"
            glib:type-name="GOFont"
            glib:get-type="go_font_get_type"
            c:symbol-prefix="font">
      <field name="ref_count" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="font_index" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="desc" writable="1">
        <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <field name="underline" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="strikethrough" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="color" writable="1">
        <type name="Color" c:type="GOColor"/>
      </field>
      <constructor name="new_by_desc" c:identifier="go_font_new_by_desc">
        <doc xml:space="preserve">NOTE : Absorbs @desc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a ref to a font that matches @desc.</doc>
          <type name="Font" c:type="GOFont*"/>
        </return-value>
        <parameters>
          <parameter name="desc" transfer-ownership="full">
            <doc xml:space="preserve">#PangoFontDescription</doc>
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_index" c:identifier="go_font_new_by_index">
        <return-value transfer-ownership="full">
          <type name="Font" c:type="GOFont*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_name" c:identifier="go_font_new_by_name">
        <return-value transfer-ownership="full">
          <type name="Font" c:type="GOFont*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="as_str" c:identifier="go_font_as_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eq" c:identifier="go_font_eq">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="go_font_ref">
        <return-value transfer-ownership="full">
          <type name="Font" c:type="GOFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="go_font_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="cache_register" c:identifier="go_font_cache_register">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback" transfer-ownership="none">
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cache_unregister"
                c:identifier="go_font_cache_unregister">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback" transfer-ownership="none">
            <type name="GObject.Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="FontMetrics"
            c:type="GOFontMetrics"
            glib:type-name="GOFontMetrics"
            glib:get-type="go_font_metrics_get_type"
            c:symbol-prefix="font_metrics">
      <field name="digit_widths" writable="1">
        <array zero-terminated="0" c:type="int" fixed-size="10">
          <type name="gint" c:type="int"/>
        </array>
      </field>
      <field name="min_digit_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="max_digit_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="avg_digit_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="hyphen_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="minus_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="plus_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="E_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="hash_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="space_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="thin_space" writable="1">
        <type name="gunichar" c:type="gunichar"/>
      </field>
      <field name="thin_space_width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <constructor name="new" c:identifier="go_font_metrics_new">
        <return-value transfer-ownership="full">
          <type name="FontMetrics" c:type="GOFontMetrics*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Pango.Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="go_font_metrics_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <type name="FontMetrics" c:type="GOFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="FontScript" c:type="GOFontScript">
      <member name="sub" value="-1" c:identifier="GO_FONT_SCRIPT_SUB">
        <doc xml:space="preserve">subscript.</doc>
      </member>
      <member name="standard" value="0" c:identifier="GO_FONT_SCRIPT_STANDARD">
        <doc xml:space="preserve">normal.</doc>
      </member>
      <member name="super" value="1" c:identifier="GO_FONT_SCRIPT_SUPER">
        <doc xml:space="preserve">superscript.</doc>
      </member>
    </enumeration>
    <class name="FontSel"
           c:symbol-prefix="font_sel"
           c:type="GOFontSel"
           parent="Gtk.Box"
           glib:type-name="GOFontSel"
           glib:get-type="go_font_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.FontChooser"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_font_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="editable_enters"
              c:identifier="go_font_sel_editable_enters">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="dialog" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color" c:identifier="go_font_sel_get_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="go_font_sel_get_font">
        <return-value transfer-ownership="full">
          <type name="Font" c:type="GOFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_desc" c:identifier="go_font_sel_get_font_desc">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a description of the font set.</doc>
          <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve">the font selector</doc>
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sample_attributes"
              c:identifier="go_font_sel_get_sample_attributes">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="go_font_sel_set_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="is_default" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family" c:identifier="go_font_sel_set_family">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font" c:identifier="go_font_sel_set_font">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="GOFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_desc" c:identifier="go_font_sel_set_font_desc">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sample_attributes"
              c:identifier="go_font_sel_set_sample_attributes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sample_text"
              c:identifier="go_font_sel_set_sample_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_script" c:identifier="go_font_sel_set_script">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <type name="FontScript" c:type="GOFontScript"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="go_font_sel_set_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_strikethrough"
              c:identifier="go_font_sel_set_strikethrough">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="strikethrough" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="go_font_sel_set_style">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="FontSel" c:type="GOFontSel*"/>
          </instance-parameter>
          <parameter name="weight" transfer-ownership="none">
            <type name="Pango.Weight" c:type="PangoWeight"/>
          </parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="Pango.Style" c:type="PangoStyle"/>
          </parameter>
        </parameters>
      </method>
      <property name="color-default"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="color-group"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ColorGroup"/>
      </property>
      <property name="color-unset-text"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-color"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-script"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-strikethrough"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-style"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-underline"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="underline-picker"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <glib:signal name="font-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="FontSelDialog"
           c:symbol-prefix="font_sel_dialog"
           c:type="GOFontSelDialog"
           parent="Gtk.Dialog"
           glib:type-name="GOFontSelDialog"
           glib:get-type="go_font_sel_dialog_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.FontChooser"/>
      <constructor name="new" c:identifier="go_font_sel_dialog_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="Format"
            c:type="GOFormat"
            glib:type-name="GOFormat"
            glib:get-type="go_format_get_type"
            c:symbol-prefix="format">
      <constructor name="new_from_XL" c:identifier="go_format_new_from_XL">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Looks up and potentially creates a GOFormat from the supplied
	string in XL format.</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">XL descriptor in UTF-8 encoding.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_magic" c:identifier="go_format_new_magic">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <parameter name="m" transfer-ownership="none">
            <type name="FormatMagic" c:type="GOFormatMagic"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_markup" c:identifier="go_format_new_markup">
        <doc xml:space="preserve">If @add_ref is FALSE absorb the reference to @markup, otherwise add a
reference.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new format.</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve">#PangoAttrList</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
          <parameter name="add_ref" transfer-ownership="none">
            <doc xml:space="preserve">boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="as_XL" c:identifier="go_format_as_XL">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the XL style format strint.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">a #GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dec_precision" c:identifier="go_format_dec_precision">
        <doc xml:space="preserve">Decreases the displayed precision for @fmt by one digit.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">NULL if the new format would not change things</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eq" c:identifier="go_format_eq">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details" c:identifier="go_format_get_details">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <type name="FormatDetails" c:type="GOFormatDetails*"/>
          </parameter>
          <parameter name="exact" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_family" c:identifier="go_format_get_family">
        <return-value transfer-ownership="none">
          <type name="FormatFamily" c:type="GOFormatFamily"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_magic" c:identifier="go_format_get_magic">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a non-zero magic code for certain formats, such as system date.</doc>
          <type name="FormatMagic" c:type="GOFormatMagic"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_markup" c:identifier="go_format_get_markup">
        <return-value transfer-ownership="none">
          <type name="Pango.AttrList" c:type="const PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_hour" c:identifier="go_format_has_hour">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if format is a number format with an hour specifier
	    FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_minute" c:identifier="go_format_has_minute">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if format is a number format with a minute specifier
	    FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inc_precision" c:identifier="go_format_inc_precision">
        <doc xml:space="preserve">Increases the displayed precision for @fmt by one digit.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">NULL if the new format would not change things</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_date" c:identifier="go_format_is_date">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">+2 if the format is a date format with time
     +1 if the format is any other date format.
	 0 if the format is not a date format.
	-1 if the format is inconsistent.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_general" c:identifier="go_format_is_general">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the format is "General", possibly with condition,
	color, and/or locale.  ("xGeneral" is thus not considered to be General
	for the purpose of this function.)
Returns FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_invalid" c:identifier="go_format_is_invalid">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if, and if only, the format is invalid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_markup" c:identifier="go_format_is_markup">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the format is a markup format
	Returns FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_simple" c:identifier="go_format_is_simple">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_text" c:identifier="go_format_is_text">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the format is a text format
	Returns FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_time" c:identifier="go_format_is_time">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">+2 if the format is a time format with elapsed hour/minute/second
  +1 if the format is any other time format
   0 if the format is not a time format
  -1	if the format is inconsistent.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_var_width" c:identifier="go_format_is_var_width">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the format is variable width, i.e., can stretch.
	Returns FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="month_before_day"
              c:identifier="go_format_month_before_day">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">0, if format is a date format with day and month in that order
 1, if format is a date format with month and day in that order, unless
 2, if format is a date with year before month before day
-1, otherwise.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">Format to query</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="odf_style_map" c:identifier="go_format_odf_style_map">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="cond_part" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="go_format_ref">
        <doc xml:space="preserve">Adds a reference to a GOFormat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@gf</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">a #GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sel_format_classification"
              c:identifier="go_format_sel_format_classification">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_format" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="specialize" c:identifier="go_format_specialize">
        <return-value transfer-ownership="none">
          <type name="Format" c:type="const GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gchar" c:type="char"/>
          </parameter>
          <parameter name="inhibit_minus" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="specializel"
              c:identifier="go_format_specializel"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="Format" c:type="const GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gchar" c:type="char"/>
          </parameter>
          <parameter name="inhibit_minus" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle_1000sep" c:identifier="go_format_toggle_1000sep">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="go_format_unref">
        <doc xml:space="preserve">Removes a reference to @fmt, freeing when it goes to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">a #GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="value" c:identifier="go_format_value">
        <doc xml:space="preserve">Converts @val into a string using format specified by @fmt.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated string containing formated value.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">a #GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">value to format</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="valuel" c:identifier="go_format_valuel" introspectable="0">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </method>
      <function name="allow_ee_markup"
                c:identifier="go_format_allow_ee_markup">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="allow_pi_slash" c:identifier="go_format_allow_pi_slash">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="allow_si" c:identifier="go_format_allow_si">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="default_accounting"
                c:identifier="go_format_default_accounting">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="default_date" c:identifier="go_format_default_date">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="default_date_time"
                c:identifier="go_format_default_date_time">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="default_money" c:identifier="go_format_default_money">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="default_percentage"
                c:identifier="go_format_default_percentage">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="default_time" c:identifier="go_format_default_time">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="empty" c:identifier="go_format_empty">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="foreach" c:identifier="go_format_foreach">
        <doc xml:space="preserve">Executes @func for each registered #GOFormat</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">function to execute for each known format</doc>
            <type name="GLib.HFunc" c:type="GHFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="general" c:identifier="go_format_general">
        <return-value transfer-ownership="full">
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
      </function>
      <function name="generate_number_str"
                c:identifier="go_format_generate_number_str">
        <doc xml:space="preserve">Generates a format string for a number format with the given
parameters and appends it to @dst.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve">GString to append format string to.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="min_digits" transfer-ownership="none">
            <doc xml:space="preserve">minimum number of digits before decimal separator.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="num_decimals" transfer-ownership="none">
            <doc xml:space="preserve">number of decimals</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="thousands_sep" transfer-ownership="none">
            <doc xml:space="preserve">if true, use a thousands separator.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="negative_red" transfer-ownership="none">
            <doc xml:space="preserve">if true, make negative values red.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="negative_paren" transfer-ownership="none">
            <doc xml:space="preserve">if true, enclose negative values in parentheses.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">optional string to place before number part of the format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="postfix" transfer-ownership="none">
            <doc xml:space="preserve">optional string to place after number part of the format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="generate_str" c:identifier="go_format_generate_str">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dst" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <type name="FormatDetails" c:type="GOFormatDetails*"/>
          </parameter>
        </parameters>
      </function>
      <function name="locale_currency"
                c:identifier="go_format_locale_currency">
        <return-value transfer-ownership="full">
          <type name="FormatCurrency" c:type="GOFormatCurrency*"/>
        </return-value>
      </function>
      <function name="measure_pango" c:identifier="go_format_measure_pango">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="GLib.String" c:type="const GString*"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
        </parameters>
      </function>
      <function name="measure_strlen" c:identifier="go_format_measure_strlen">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="GLib.String" c:type="const GString*"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
        </parameters>
      </function>
      <function name="measure_zero" c:identifier="go_format_measure_zero">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="GLib.String" c:type="const GString*"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
        </parameters>
      </function>
      <function name="output_to_odf" c:identifier="go_format_output_to_odf">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xout" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
          <parameter name="cond_part" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="with_extension" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="palette_color_of_index"
                c:identifier="go_format_palette_color_of_index">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="palette_index_from_color"
                c:identifier="go_format_palette_index_from_color">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index of the color closest to the argument color in some
sense.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </function>
      <function name="palette_name_of_index"
                c:identifier="go_format_palette_name_of_index">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="str_delocalize" c:identifier="go_format_str_delocalize">
        <doc xml:space="preserve">De-localizes the given format string, i.e., changes locale's decimal
separators to dots and performs other such transformations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a non-local format string, or NULL if the format was not valid.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">A *valid* localized format string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="str_localize" c:identifier="go_format_str_localize">
        <doc xml:space="preserve">Localizes the given format string, i.e., changes decimal dots to the
locale's notion of that and performs other such transformations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a localized format string, or NULL if the format was not valid.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">A *valid* format string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="value_gstring" c:identifier="go_format_value_gstring">
        <doc xml:space="preserve">Render a floating-point value into @layout in such a way that the
layouting width does not needlessly exceed @col_width.  Optionally
use unicode minus instead of hyphen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GOFormatNumberError</doc>
          <type name="FormatNumberError" c:type="GOFormatNumberError"/>
        </return-value>
        <parameters>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">Optional PangoLayout, probably preseeded with font attribute.</doc>
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a GString to store (not append!) the resulting string in.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="measure" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">Function to measure width of string/layout.</doc>
            <type name="FormatMeasure" c:type="const GOFormatMeasure"/>
          </parameter>
          <parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve">Font metrics corresponding to @mesaure.</doc>
            <type name="FontMetrics" c:type="const GOFontMetrics*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">floating-point value.  Must be finite.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a format character</doc>
            <type name="gchar" c:type="char"/>
          </parameter>
          <parameter name="sval" transfer-ownership="none">
            <doc xml:space="preserve">a string to append to @str after @val</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="go_color" transfer-ownership="none">
            <doc xml:space="preserve">a color to rende</doc>
            <type name="Color" c:type="GOColor*"/>
          </parameter>
          <parameter name="col_width" transfer-ownership="none">
            <doc xml:space="preserve">intended max width of layout in pango units.  -1 means
            no restriction.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="date_conv" transfer-ownership="none">
            <doc xml:space="preserve">#GODateConventions</doc>
            <type name="DateConventions" c:type="GODateConventions*"/>
          </parameter>
          <parameter name="unicode_minus" transfer-ownership="none">
            <doc xml:space="preserve">Use unicode minuses, not hyphens.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="value_gstringl"
                c:identifier="go_format_value_gstringl"
                introspectable="0">
        <doc xml:space="preserve">Render a floating-point value into @layout in such a way that the
layouting width does not needlessly exceed @col_width.  Optionally
use unicode minus instead of hyphen.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GOFormatNumberError</doc>
          <type name="FormatNumberError" c:type="GOFormatNumberError"/>
        </return-value>
        <parameters>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve">Optional PangoLayout, probably preseeded with font attribute.</doc>
            <type name="Pango.Layout" c:type="PangoLayout*"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a GString to store (not append!) the resulting string in.</doc>
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="measure" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">Function to measure width of string/layout.</doc>
            <type name="FormatMeasure" c:type="const GOFormatMeasure"/>
          </parameter>
          <parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve">Font metrics corresponding to @mesaure.</doc>
            <type name="FontMetrics" c:type="const GOFontMetrics*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">floating-point value.  Must be finite.</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a format character</doc>
            <type name="gchar" c:type="char"/>
          </parameter>
          <parameter name="sval" transfer-ownership="none">
            <doc xml:space="preserve">a string to append to @str after @val</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="go_color" transfer-ownership="none">
            <doc xml:space="preserve">a color to rende</doc>
            <type name="Color" c:type="GOColor*"/>
          </parameter>
          <parameter name="col_width" transfer-ownership="none">
            <doc xml:space="preserve">intended max width of layout in pango units.  -1 means
            no restriction.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="date_conv" transfer-ownership="none">
            <doc xml:space="preserve">#GODateConventions</doc>
            <type name="DateConventions" c:type="GODateConventions*"/>
          </parameter>
          <parameter name="unicode_minus" transfer-ownership="none">
            <doc xml:space="preserve">Use unicode minuses, not hyphens.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="FormatCurrency"
            c:type="GOFormatCurrency"
            glib:type-name="GOFormatCurrency"
            glib:get-type="go_format_currency_get_type"
            c:symbol-prefix="format_currency">
      <field name="symbol" writable="1">
        <doc xml:space="preserve">currency symbol.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <doc xml:space="preserve">description.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="precedes" writable="1">
        <doc xml:space="preserve">whether the symbol precedes the amount.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="has_space" writable="1">
        <doc xml:space="preserve">whether to add a space between amount and symbol.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="FormatDetails"
            c:type="GOFormatDetails"
            glib:type-name="GOFormatDetails"
            glib:get-type="go_format_details_get_type"
            c:symbol-prefix="format_details">
      <field name="family" writable="1">
        <doc xml:space="preserve">#GOFormatFamily.</doc>
        <type name="FormatFamily" c:type="GOFormatFamily"/>
      </field>
      <field name="magic" writable="1">
        <doc xml:space="preserve">#GOFormatMagic.</doc>
        <type name="FormatMagic" c:type="GOFormatMagic"/>
      </field>
      <field name="min_digits" writable="1">
        <doc xml:space="preserve">minimum digits number.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="num_decimals" writable="1">
        <doc xml:space="preserve">decimals number.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="thousands_sep" writable="1">
        <doc xml:space="preserve">thousands separator.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="negative_red" writable="1">
        <doc xml:space="preserve">display negative number using red ink.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="negative_paren" writable="1">
        <doc xml:space="preserve">uses parenthersis around negative numbers.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="currency" writable="1">
        <doc xml:space="preserve">#GOFormatCurrency.</doc>
        <type name="FormatCurrency" c:type="GOFormatCurrency*"/>
      </field>
      <field name="force_quoted" writable="1">
        <doc xml:space="preserve">force quotes use.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="exponent_step" writable="1">
        <doc xml:space="preserve">steps between allowed exponents in scientific notation.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="exponent_digits" writable="1">
        <doc xml:space="preserve">digits number in exponent.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="exponent_sign_forced" writable="1">
        <doc xml:space="preserve">whether the sign in the exponent is always shown.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_markup" writable="1">
        <doc xml:space="preserve">whether to use a markup.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="simplify_mantissa" writable="1">
        <doc xml:space="preserve">simplify the mantissa.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="append_SI" writable="1">
        <doc xml:space="preserve">append an SI unit.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="appended_SI_unit" writable="1">
        <doc xml:space="preserve">the SI unit to append.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="scale" writable="1">
        <doc xml:space="preserve">scale.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="automatic_denominator" writable="1">
        <doc xml:space="preserve">use an automatic denominator for fractions.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="split_fraction" writable="1">
        <doc xml:space="preserve">split the fraction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="pi_scale" writable="1">
        <doc xml:space="preserve">use multiples of pi for fractions, e.g. 1/2*pi.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="numerator_min_digits" writable="1">
        <doc xml:space="preserve">minimum digits number for the numerator.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="denominator_min_digits" writable="1">
        <doc xml:space="preserve">minimum digits number for the denominator.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="denominator_max_digits" writable="1">
        <doc xml:space="preserve">minimum digits number for the denominator.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="denominator" writable="1">
        <doc xml:space="preserve">fixed denominator.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="expansion" readable="0" private="1">
        <array zero-terminated="0" c:type="int" fixed-size="30">
          <type name="gint" c:type="int"/>
        </array>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <constructor name="new" c:identifier="go_format_details_new">
        <return-value transfer-ownership="full">
          <type name="FormatDetails" c:type="GOFormatDetails*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <type name="FormatFamily" c:type="GOFormatFamily"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="finalize" c:identifier="go_format_details_finalize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <type name="FormatDetails" c:type="GOFormatDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_format_details_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <type name="FormatDetails" c:type="GOFormatDetails*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="go_format_details_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="details" transfer-ownership="none">
            <type name="FormatDetails" c:type="GOFormatDetails*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <type name="FormatFamily" c:type="GOFormatFamily"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="FormatFamily" c:type="GOFormatFamily">
      <member name="unknown" value="-1" c:identifier="GO_FORMAT_UNKNOWN">
        <doc xml:space="preserve">unknown ,should not occur.</doc>
      </member>
      <member name="general" value="0" c:identifier="GO_FORMAT_GENERAL">
        <doc xml:space="preserve">general.</doc>
      </member>
      <member name="number" value="1" c:identifier="GO_FORMAT_NUMBER">
        <doc xml:space="preserve">number.</doc>
      </member>
      <member name="currency" value="2" c:identifier="GO_FORMAT_CURRENCY">
        <doc xml:space="preserve">currency.</doc>
      </member>
      <member name="accounting" value="3" c:identifier="GO_FORMAT_ACCOUNTING">
        <doc xml:space="preserve">accounting.</doc>
      </member>
      <member name="date" value="4" c:identifier="GO_FORMAT_DATE">
        <doc xml:space="preserve">date.</doc>
      </member>
      <member name="time" value="5" c:identifier="GO_FORMAT_TIME">
        <doc xml:space="preserve">tipe.</doc>
      </member>
      <member name="percentage" value="6" c:identifier="GO_FORMAT_PERCENTAGE">
        <doc xml:space="preserve">percentage.</doc>
      </member>
      <member name="fraction" value="7" c:identifier="GO_FORMAT_FRACTION">
        <doc xml:space="preserve">fraction.</doc>
      </member>
      <member name="scientific" value="8" c:identifier="GO_FORMAT_SCIENTIFIC">
        <doc xml:space="preserve">scientific.</doc>
      </member>
      <member name="text" value="9" c:identifier="GO_FORMAT_TEXT">
        <doc xml:space="preserve">text.</doc>
      </member>
      <member name="special" value="10" c:identifier="GO_FORMAT_SPECIAL">
        <doc xml:space="preserve">custom.</doc>
      </member>
    </enumeration>
    <enumeration name="FormatMagic" c:type="GOFormatMagic">
      <member name="none" value="0" c:identifier="GO_FORMAT_MAGIC_NONE">
        <doc xml:space="preserve">none.</doc>
      </member>
      <member name="long_date"
              value="63488"
              c:identifier="GO_FORMAT_MAGIC_LONG_DATE">
        <doc xml:space="preserve">long date (Official).</doc>
      </member>
      <member name="medium_date"
              value="63729"
              c:identifier="GO_FORMAT_MAGIC_MEDIUM_DATE">
        <doc xml:space="preserve">medium date.</doc>
      </member>
      <member name="short_date"
              value="63730"
              c:identifier="GO_FORMAT_MAGIC_SHORT_DATE">
        <doc xml:space="preserve">short date.</doc>
      </member>
      <member name="short_datetime"
              value="63738"
              c:identifier="GO_FORMAT_MAGIC_SHORT_DATETIME">
        <doc xml:space="preserve">short date with time.</doc>
      </member>
      <member name="long_time"
              value="62464"
              c:identifier="GO_FORMAT_MAGIC_LONG_TIME">
        <doc xml:space="preserve">long time (Official).</doc>
      </member>
      <member name="medium_time"
              value="62705"
              c:identifier="GO_FORMAT_MAGIC_MEDIUM_TIME">
        <doc xml:space="preserve">medium time.</doc>
      </member>
      <member name="short_time"
              value="62706"
              c:identifier="GO_FORMAT_MAGIC_SHORT_TIME">
        <doc xml:space="preserve">short time.</doc>
      </member>
    </enumeration>
    <callback name="FormatMeasure" c:type="GOFormatMeasure">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FormatNumberError" c:type="GOFormatNumberError">
      <member name="ok" value="0" c:identifier="GO_FORMAT_NUMBER_OK">
        <doc xml:space="preserve">no error.</doc>
      </member>
      <member name="invalid_format"
              value="1"
              c:identifier="GO_FORMAT_NUMBER_INVALID_FORMAT">
        <doc xml:space="preserve">invalid format.</doc>
      </member>
      <member name="date_error"
              value="2"
              c:identifier="GO_FORMAT_NUMBER_DATE_ERROR">
        <doc xml:space="preserve">date error.</doc>
      </member>
    </enumeration>
    <class name="FormatSel"
           c:symbol-prefix="format_sel"
           c:type="GOFormatSel"
           parent="Gtk.Box"
           glib:type-name="GOFormatSel"
           glib:get-type="go_format_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_format_sel_new">
        <doc xml:space="preserve">Creates a format selector widget, with general format selected
by default, and formats using pango markup disabled. See
@go_format_sel_new_full.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a format selector widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_full" c:identifier="go_format_sel_new_full">
        <doc xml:space="preserve">Creates a format selector widget, with general format selected
by default. When @use_markup is set to %TRUE, it shows additional
widgets for editing properties of formats using pango markup
(e.g. scientific format with superscripted exponent).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a format selector widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve">enable formats using pango markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="editable_enters"
              c:identifier="go_format_sel_editable_enters">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dateconv" c:identifier="go_format_sel_get_dateconv">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GODateConventions.</doc>
          <type name="DateConventions" c:type="GODateConventions*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormatSel</doc>
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fmt" c:identifier="go_format_sel_get_fmt">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GOFormat.</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <doc xml:space="preserve">#GOFormatSel</doc>
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_preview" c:identifier="go_format_sel_hide_preview">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dateconv" c:identifier="go_format_sel_set_dateconv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
          <parameter name="date_conv" transfer-ownership="none">
            <type name="DateConventions" c:type="GODateConventions*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus" c:identifier="go_format_sel_set_focus">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_locale" c:identifier="go_format_sel_set_locale">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
          <parameter name="locale" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style_format"
              c:identifier="go_format_sel_set_style_format">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
          <parameter name="style_format" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_preview" c:identifier="go_format_sel_show_preview">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gfs" transfer-ownership="none">
            <type name="FormatSel" c:type="GOFormatSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="format-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="generate-preview" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <constant name="GEOMETRY_ANGLE_TOLERANCE"
              value="0.001000"
              c:type="GO_GEOMETRY_ANGLE_TOLERANCE">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="GOFFICE_API_VERSION"
              value="0.0"
              c:type="GOFFICE_API_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="GOFFICE_MODULE_PLUGIN_MAGIC_NUMBER"
              value="1198421357"
              c:type="GOFFICE_MODULE_PLUGIN_MAGIC_NUMBER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GOG_PARAM_FORCE_SAVE"
              value="2"
              c:type="GOG_PARAM_FORCE_SAVE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GOG_PARAM_POSITION" value="4" c:type="GOG_PARAM_POSITION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GOG_RENDERER_GRIP_SIZE"
              value="4"
              c:type="GOG_RENDERER_GRIP_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GOG_RENDERER_HAIRLINE_WIDTH_PTS"
              value="0.500000"
              c:type="GOG_RENDERER_HAIRLINE_WIDTH_PTS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="GOG_SERIES_ACCEPT_TREND_LINE"
              value="1"
              c:type="GOG_SERIES_ACCEPT_TREND_LINE">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="GeometryAABR" c:type="GOGeometryAABR">
      <field name="w" writable="1">
        <doc xml:space="preserve">width.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h" writable="1">
        <doc xml:space="preserve">height.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="GeometryOBR" c:type="GOGeometryOBR">
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position of the center.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical position of the center.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="w" writable="1">
        <doc xml:space="preserve">width of edge.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h" writable="1">
        <doc xml:space="preserve">height of edge.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="alpha" writable="1">
        <doc xml:space="preserve">Aangle from x axis to w edge, in radians.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <enumeration name="GeometryRotationType" c:type="GOGeometryRotationType">
      <member name="none" value="0" c:identifier="GO_ROTATE_NONE">
        <doc xml:space="preserve">no rotation.</doc>
      </member>
      <member name="counterclockwise"
              value="1"
              c:identifier="GO_ROTATE_COUNTERCLOCKWISE">
        <doc xml:space="preserve">counter clockwise.</doc>
      </member>
      <member name="upsidedown" value="2" c:identifier="GO_ROTATE_UPSIDEDOWN">
        <doc xml:space="preserve">upside down.</doc>
      </member>
      <member name="clockwise" value="3" c:identifier="GO_ROTATE_CLOCKWISE">
        <doc xml:space="preserve">clockwise.</doc>
      </member>
      <member name="free" value="4" c:identifier="GO_ROTATE_FREE">
        <doc xml:space="preserve">free rotation.</doc>
      </member>
    </enumeration>
    <bitfield name="GeometrySide" c:type="GOGeometrySide">
      <member name="left" value="1" c:identifier="GO_SIDE_LEFT">
        <doc xml:space="preserve">left.</doc>
      </member>
      <member name="right" value="2" c:identifier="GO_SIDE_RIGHT">
        <doc xml:space="preserve">right.</doc>
      </member>
      <member name="left_right" value="3" c:identifier="GO_SIDE_LEFT_RIGHT">
        <doc xml:space="preserve">left or right.</doc>
      </member>
      <member name="top" value="4" c:identifier="GO_SIDE_TOP">
        <doc xml:space="preserve">top.</doc>
      </member>
      <member name="bottom" value="8" c:identifier="GO_SIDE_BOTTOM">
        <doc xml:space="preserve">bottom.</doc>
      </member>
      <member name="top_bottom" value="12" c:identifier="GO_SIDE_TOP_BOTTOM">
        <doc xml:space="preserve">top or bottom.</doc>
      </member>
      <member name="auto" value="15" c:identifier="GO_SIDE_AUTO">
        <doc xml:space="preserve">auto.</doc>
      </member>
    </bitfield>
    <enumeration name="GradientDirection" c:type="GOGradientDirection">
      <member name="n_to_s" value="0" c:identifier="GO_GRADIENT_N_TO_S">
        <doc xml:space="preserve">top to bottom.</doc>
      </member>
      <member name="s_to_n" value="1" c:identifier="GO_GRADIENT_S_TO_N">
        <doc xml:space="preserve">bottom to top.</doc>
      </member>
      <member name="n_to_s_mirrored"
              value="2"
              c:identifier="GO_GRADIENT_N_TO_S_MIRRORED">
        <doc xml:space="preserve">top to bottom, mirrored.</doc>
      </member>
      <member name="s_to_n_mirrored"
              value="3"
              c:identifier="GO_GRADIENT_S_TO_N_MIRRORED">
        <doc xml:space="preserve">bottom to top, mirrored.</doc>
      </member>
      <member name="w_to_e" value="4" c:identifier="GO_GRADIENT_W_TO_E">
        <doc xml:space="preserve">left to right.</doc>
      </member>
      <member name="e_to_w" value="5" c:identifier="GO_GRADIENT_E_TO_W">
        <doc xml:space="preserve">right to left.</doc>
      </member>
      <member name="w_to_e_mirrored"
              value="6"
              c:identifier="GO_GRADIENT_W_TO_E_MIRRORED">
        <doc xml:space="preserve">left to right, mirrored.</doc>
      </member>
      <member name="e_to_w_mirrored"
              value="7"
              c:identifier="GO_GRADIENT_E_TO_W_MIRRORED">
        <doc xml:space="preserve">right to left, mirrored.</doc>
      </member>
      <member name="nw_to_se" value="8" c:identifier="GO_GRADIENT_NW_TO_SE">
        <doc xml:space="preserve">top left to bottom right.</doc>
      </member>
      <member name="se_to_nw" value="9" c:identifier="GO_GRADIENT_SE_TO_NW">
        <doc xml:space="preserve">bottom right to top left.</doc>
      </member>
      <member name="nw_to_se_mirrored"
              value="10"
              c:identifier="GO_GRADIENT_NW_TO_SE_MIRRORED">
        <doc xml:space="preserve">top left to bottom right, mirrored.</doc>
      </member>
      <member name="se_to_nw_mirrored"
              value="11"
              c:identifier="GO_GRADIENT_SE_TO_NW_MIRRORED">
        <doc xml:space="preserve">bottom right to top left, mirrored.</doc>
      </member>
      <member name="ne_to_sw" value="12" c:identifier="GO_GRADIENT_NE_TO_SW">
        <doc xml:space="preserve">top right to bottom left.</doc>
      </member>
      <member name="sw_to_ne" value="13" c:identifier="GO_GRADIENT_SW_TO_NE">
        <doc xml:space="preserve">bottom left to top right.</doc>
      </member>
      <member name="sw_to_ne_mirrored"
              value="14"
              c:identifier="GO_GRADIENT_SW_TO_NE_MIRRORED">
        <doc xml:space="preserve">top right to bottom left, mirrored.</doc>
      </member>
      <member name="ne_to_sw_mirrored"
              value="15"
              c:identifier="GO_GRADIENT_NE_TO_SW_MIRRORED">
        <doc xml:space="preserve">bottom left to top right, mirrored.</doc>
      </member>
      <member name="max" value="16" c:identifier="GO_GRADIENT_MAX">
        <doc xml:space="preserve">maximum value, should not occur.
} ;</doc>
      </member>
    </enumeration>
    <class name="GraphWidget"
           c:symbol-prefix="graph_widget"
           c:type="GOGraphWidget"
           parent="Gtk.Layout"
           glib:type-name="GOGraphWidget"
           glib:get-type="go_graph_widget_get_type"
           glib:type-struct="GraphWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="go_graph_widget_new">
        <doc xml:space="preserve">Creates a new #GOGraphWidget with an embedded #GogGraph.
If graph is NULL, the graph will be auto-created, and a
#GogChart will be added graph.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the newly created #GOGraphWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_chart" c:identifier="go_graph_widget_get_chart">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogChart created by go_graph_widget_new().</doc>
          <type name="gChart" c:type="GogChart*"/>
        </return-value>
        <parameters>
          <instance-parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">#GOGraphWidget</doc>
            <type name="GraphWidget" c:type="GOGraphWidget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_graph" c:identifier="go_graph_widget_get_graph">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogGraph embedded in the widget.</doc>
          <type name="gGraph" c:type="GogGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">#GOGraphWidget</doc>
            <type name="GraphWidget" c:type="GOGraphWidget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_renderer" c:identifier="go_graph_widget_get_renderer">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogRenderer used by the widget.</doc>
          <type name="gRenderer" c:type="GogRenderer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">#GOGraphWidget</doc>
            <type name="GraphWidget" c:type="GOGraphWidget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size_mode"
              c:identifier="go_graph_widget_set_size_mode">
        <doc xml:space="preserve">Sets the size mode of the #GOGraphWidget.
It is used to determine the size and position of the drawn
chart. The following sizing modes are supported:

GO_GRAPH_WIDGET_SIZE_MODE_FIT, aspect ratio set.
The aspect ratio is guaranteed to be maintained,
i.e. the graph is never squeezed, and will
always fit into the visible area.

GO_GRAPH_WIDGET_SIZE_MODE_FIT, no aspect ratio set.
The aspect ratio is adapted to make the graph
exactly fit into the visible area.

GO_GRAPH_WIDGET_SIZE_MODE_FIT_WIDTH, aspect ratio set.
The aspect ratio is guaranteed to be maintained,
i.e. the graph is never squezzed, and will
always occupy the whole width of the visible area.

GO_GRAPH_WIDGET_SIZE_MODE_FIT_HEIGHT, aspect ratio set.
The aspect ratio is guaranteed to be maintained,
i.e. the graph is never squezzed, and will
always occupy the whole height of the visible area.

GO_GRAPH_WIDGET_SIZE_MODE_FIT_FIXED_SIZE, no aspect ratio set.
The graph will occupy the area specified by width/height,
its aspect ratio will be determined by height/width.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">#GOGraphWidget</doc>
            <type name="GraphWidget" c:type="GOGraphWidget*"/>
          </instance-parameter>
          <parameter name="size_mode" transfer-ownership="none">
            <doc xml:space="preserve">#GOGraphWidgetSizeMode</doc>
            <type name="GraphWidgetSizeMode" c:type="GOGraphWidgetSizeMode"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="aspect-ratio"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="graph"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gGraph"/>
      </property>
      <property name="hres"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="vres"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="GraphWidgetClass"
            c:type="GOGraphWidgetClass"
            disguised="1"
            glib:is-gtype-struct-for="GraphWidget">
    </record>
    <enumeration name="GraphWidgetSizeMode" c:type="GOGraphWidgetSizeMode">
      <member name="fit"
              value="0"
              c:identifier="GO_GRAPH_WIDGET_SIZE_MODE_FIT">
        <doc xml:space="preserve">fits the allocated size, conserving the aspect
ratio.</doc>
      </member>
      <member name="fit_width"
              value="1"
              c:identifier="GO_GRAPH_WIDGET_SIZE_MODE_FIT_WIDTH">
        <doc xml:space="preserve">fits the width, conserving the aspect
ratio.</doc>
      </member>
      <member name="fit_height"
              value="2"
              c:identifier="GO_GRAPH_WIDGET_SIZE_MODE_FIT_HEIGHT">
        <doc xml:space="preserve">fits the width, conserving the aspect
ratio.</doc>
      </member>
      <member name="fixed_size"
              value="3"
              c:identifier="GO_GRAPH_WIDGET_SIZE_MODE_FIXED_SIZE">
        <doc xml:space="preserve">use original size.</doc>
      </member>
    </enumeration>
    <class name="IOContext"
           c:symbol-prefix="io_context"
           c:type="GOIOContext"
           parent="GObject.Object"
           glib:type-name="GOIOContext"
           glib:get-type="go_io_context_get_type"
           glib:type-struct="IOContextClass">
      <implements name="CmdContext"/>
      <constructor name="new" c:identifier="go_io_context_new">
        <return-value transfer-ownership="full">
          <type name="IOContext" c:type="GOIOContext*"/>
        </return-value>
        <parameters>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="processing_file" invoker="processing_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ioc" transfer-ownership="none">
            <doc xml:space="preserve">#GOIOContext</doc>
            <type name="IOContext" c:type="GOIOContext*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An escaped uri (eg "foo\%20bar")</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_num_files" invoker="set_num_files">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ioc" transfer-ownership="none">
            <type name="IOContext" c:type="GOIOContext*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="processing_file"
              c:identifier="go_io_context_processing_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ioc" transfer-ownership="none">
            <doc xml:space="preserve">#GOIOContext</doc>
            <type name="IOContext" c:type="GOIOContext*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An escaped uri (eg "foo\%20bar")</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_files" c:identifier="go_io_context_set_num_files">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ioc" transfer-ownership="none">
            <type name="IOContext" c:type="GOIOContext*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="exec-main-loop" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="impl">
        <type name="CmdContext" c:type="GOCmdContext*"/>
      </field>
      <field name="info">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="error_occurred">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="warning_occurred">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="progress_ranges">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="progress_min">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="progress_max">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="last_progress">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_time">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="helper">
        <type name="ProgressHelper" c:type="GOProgressHelper"/>
      </field>
      <field name="exec_main_loop">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="IOContextClass"
            c:type="GOIOContextClass"
            glib:is-gtype-struct-for="IOContext">
      <field name="base">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_num_files">
        <callback name="set_num_files">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="ioc" transfer-ownership="none">
              <type name="IOContext" c:type="GOIOContext*"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="processing_file">
        <callback name="processing_file">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="ioc" transfer-ownership="none">
              <doc xml:space="preserve">#GOIOContext</doc>
              <type name="IOContext" c:type="GOIOContext*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve">An escaped uri (eg "foo\%20bar")</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Image"
           c:symbol-prefix="image"
           c:type="GOImage"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GOImage"
           glib:get-type="go_image_get_type"
           glib:type-struct="ImageClass">
      <constructor name="new_for_format"
                   c:identifier="go_image_new_for_format">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="go_image_new_from_data"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="go_image_new_from_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="sel_new" c:identifier="go_image_sel_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">and shows new image selector.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The #GODoc owning the image collection</doc>
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">A #GOCmdContext for error reporting</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
          <parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">A #GOImage</doc>
            <type name="Image" c:type="GOImage**"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="format_to_mime" c:identifier="go_image_format_to_mime">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">corresponding mime type.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">a file extension string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default_dpi" c:identifier="go_image_get_default_dpi">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi_x" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="dpi_y" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_format_from_name"
                c:identifier="go_image_get_format_from_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">corresponding #GOImageFormat.</doc>
          <type name="ImageFormat" c:type="GOImageFormat"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_format_info" c:identifier="go_image_get_format_info">
        <doc xml:space="preserve">Retrieves information associated to @format.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GOImageFormatInfo struct.</doc>
          <type name="ImageFormatInfo" c:type="GOImageFormatInfo*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">a #GOImageFormat</doc>
            <type name="ImageFormat" c:type="GOImageFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_formats_with_pixbuf_saver"
                c:identifier="go_image_get_formats_with_pixbuf_saver">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a list of #GOImageFormat that can be created
from a pixbuf.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="ImageFormat"/>
          </type>
        </return-value>
      </function>
      <function name="set_default_dpi" c:identifier="go_image_set_default_dpi">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi_x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dpi_y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_for_format" c:identifier="go_image_type_for_format">
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="differ" invoker="differ">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="first" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="second" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw" invoker="draw">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pixbuf" invoker="get_pixbuf">
        <doc xml:space="preserve">Builds a pixbuf from the image if not already done and returns it, adding
a reference.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the pixbuf for @image</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">#GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_scaled_pixbuf" invoker="get_scaled_pixbuf">
        <doc xml:space="preserve">Builds a scaled pixbuf from the image and returns it. The caller needs to
unref it. The pixbuf is scaled so that its width and height are not larger
than, respectively, @width and @height, and preserving the aspect ratio.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the scaled pixbuf for @image</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">#GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the new pixbuf width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">the new pixbuf height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_attr">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="attr_name" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="attr_value" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_data" invoker="load_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="xin" transfer-ownership="none">
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save" invoker="save">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="differ" c:identifier="go_image_differ">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="first" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="second" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw" c:identifier="go_image_draw">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="go_image_get_data">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="go_image_get_height">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="go_image_get_info">
        <return-value transfer-ownership="full">
          <type name="ImageFormatInfo" c:type="GOImageFormatInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="go_image_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="go_image_get_pixbuf">
        <doc xml:space="preserve">Builds a pixbuf from the image if not already done and returns it, adding
a reference.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the pixbuf for @image</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">#GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scaled_pixbuf"
              c:identifier="go_image_get_scaled_pixbuf">
        <doc xml:space="preserve">Builds a scaled pixbuf from the image and returns it. The caller needs to
unref it. The pixbuf is scaled so that its width and height are not larger
than, respectively, @width and @height, and preserving the aspect ratio.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the scaled pixbuf for @image</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">#GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the new pixbuf width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">the new pixbuf height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail" c:identifier="go_image_get_thumbnail">
        <doc xml:space="preserve">Generates a thumbnail for @image if not already done and returns it, adding
 a reference. The pixbuf is scaled so that its width and height are not larger
than 64 pixels, and preserving the aspect ratio.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the thumbnail for @image</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve">#GOImage</doc>
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="go_image_get_width">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_attrs" c:identifier="go_image_load_attrs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="xin" transfer-ownership="none">
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_data" c:identifier="go_image_load_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="xin" transfer-ownership="none">
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="go_image_save">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="go_image_set_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <type name="Image" c:type="GOImage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="data">
        <type name="guint8" c:type="guint8*"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="thumbnail">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
      <field name="pixbuf">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="data_length">
        <type name="gsize" c:type="gsize"/>
      </field>
    </class>
    <record name="ImageClass"
            c:type="GOImageClass"
            glib:is-gtype-struct-for="Image">
      <field name="parent_klass">
        <doc xml:space="preserve">parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_pixbuf">
        <callback name="get_pixbuf">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the pixbuf for @image</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <doc xml:space="preserve">#GOImage</doc>
              <type name="Image" c:type="GOImage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_scaled_pixbuf">
        <callback name="get_scaled_pixbuf">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the scaled pixbuf for @image</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <doc xml:space="preserve">#GOImage</doc>
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve">the new pixbuf width</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve">the new pixbuf height</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save">
        <callback name="save">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_attr">
        <callback name="load_attr">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="attr_name" transfer-ownership="none">
              <type name="libxml2.Char" c:type="xmlChar*"/>
            </parameter>
            <parameter name="attr_value" transfer-ownership="none">
              <type name="libxml2.Char" c:type="xmlChar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_data">
        <callback name="load_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="xin" transfer-ownership="none">
              <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw">
        <callback name="draw">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="image" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="differ">
        <callback name="differ">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="first" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
            <parameter name="second" transfer-ownership="none">
              <type name="Image" c:type="GOImage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ImageFormat" c:type="GOImageFormat">
      <member name="svg" value="0" c:identifier="GO_IMAGE_FORMAT_SVG">
        <doc xml:space="preserve">SVG.</doc>
      </member>
      <member name="png" value="1" c:identifier="GO_IMAGE_FORMAT_PNG">
        <doc xml:space="preserve">PNG.</doc>
      </member>
      <member name="jpg" value="2" c:identifier="GO_IMAGE_FORMAT_JPG">
        <doc xml:space="preserve">JPEG.</doc>
      </member>
      <member name="pdf" value="3" c:identifier="GO_IMAGE_FORMAT_PDF">
        <doc xml:space="preserve">PDF.</doc>
      </member>
      <member name="ps" value="4" c:identifier="GO_IMAGE_FORMAT_PS">
        <doc xml:space="preserve">PostScript.</doc>
      </member>
      <member name="emf" value="5" c:identifier="GO_IMAGE_FORMAT_EMF">
        <doc xml:space="preserve">Enhanced Metafile.</doc>
      </member>
      <member name="wmf" value="6" c:identifier="GO_IMAGE_FORMAT_WMF">
        <doc xml:space="preserve">Windows Metafile.</doc>
      </member>
      <member name="eps" value="7" c:identifier="GO_IMAGE_FORMAT_EPS">
        <doc xml:space="preserve">Encapsulated Postscript.</doc>
      </member>
      <member name="unknown" value="8" c:identifier="GO_IMAGE_FORMAT_UNKNOWN">
        <doc xml:space="preserve">unknown.</doc>
      </member>
    </enumeration>
    <record name="ImageFormatInfo"
            c:type="GOImageFormatInfo"
            glib:type-name="GOImageFormatInfo"
            glib:get-type="go_image_format_info_get_type"
            c:symbol-prefix="image_format_info">
      <field name="format" writable="1">
        <doc xml:space="preserve">#GOImageFormat.</doc>
        <type name="ImageFormat" c:type="GOImageFormat"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">image type name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="desc" writable="1">
        <doc xml:space="preserve">image type description.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="ext" writable="1">
        <doc xml:space="preserve">file extension.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="has_pixbuf_saver" writable="1">
        <doc xml:space="preserve">can be saved as pixbuf.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="is_dpi_useful" writable="1">
        <doc xml:space="preserve">depends upon device resolution.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="alpha_support" writable="1">
        <doc xml:space="preserve">supports transparency.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <enumeration name="ImageType" c:type="GOImageType">
      <member name="stretched" value="0" c:identifier="GO_IMAGE_STRETCHED">
        <doc xml:space="preserve">stretch the image so that it fills the whole area.</doc>
      </member>
      <member name="wallpaper" value="1" c:identifier="GO_IMAGE_WALLPAPER">
        <doc xml:space="preserve">repeat the image starting from top left.</doc>
      </member>
      <member name="centered" value="2" c:identifier="GO_IMAGE_CENTERED">
        <doc xml:space="preserve">use only one image at its natural size, centered in the area.</doc>
      </member>
      <member name="centered_wallpaper"
              value="3"
              c:identifier="GO_IMAGE_CENTERED_WALLPAPER">
        <doc xml:space="preserve">repeat the image starting from one at center.</doc>
      </member>
    </enumeration>
    <enumeration name="Justification" c:type="GoJustification">
      <doc xml:space="preserve">Used for justifying the text inside multiline label.</doc>
      <member name="left" value="0" c:identifier="GO_JUSTIFY_LEFT">
        <doc xml:space="preserve">The text is placed at the left edge of the label.</doc>
      </member>
      <member name="right" value="1" c:identifier="GO_JUSTIFY_RIGHT">
        <doc xml:space="preserve">The text is placed at the right edge of the label.</doc>
      </member>
      <member name="center" value="2" c:identifier="GO_JUSTIFY_CENTER">
        <doc xml:space="preserve">The text is placed in the center of the label.</doc>
      </member>
      <member name="fill" value="3" c:identifier="GO_JUSTIFY_FILL">
        <doc xml:space="preserve">The text is placed is distributed across the label.</doc>
      </member>
    </enumeration>
    <constant name="LOGFIT_C_ACCURACY"
              value="0.000001"
              c:type="GO_LOGFIT_C_ACCURACY">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="LOGFIT_C_RANGE_FACTOR"
              value="100"
              c:type="GO_LOGFIT_C_RANGE_FACTOR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LOGFIT_C_STEP_FACTOR"
              value="0.050000"
              c:type="GO_LOGFIT_C_STEP_FACTOR">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <record name="LineDashSequence"
            c:type="GOLineDashSequence"
            glib:type-name="GOLineDashSequence"
            glib:get-type="go_line_dash_sequence_get_type"
            c:symbol-prefix="line_dash_sequence">
      <field name="offset" writable="1">
        <doc xml:space="preserve">offset from start.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="n_dash" writable="1">
        <doc xml:space="preserve">number of values in dash fields</doc>
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="dash" writable="1">
        <doc xml:space="preserve">lengths of the dashes segments. See cairo_set_dash() for details.</doc>
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <method name="free" c:identifier="go_line_dash_sequence_free">
        <doc xml:space="preserve">Frees the dash sequence struct.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve">a #GOLineDashSequence</doc>
            <type name="LineDashSequence" c:type="GOLineDashSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="LineDashType" c:type="GOLineDashType">
      <member name="none" value="0" c:identifier="GO_LINE_NONE">
        <doc xml:space="preserve">No line displayed.</doc>
      </member>
      <member name="solid" value="1" c:identifier="GO_LINE_SOLID">
        <doc xml:space="preserve">Solid line.</doc>
      </member>
      <member name="s_dot" value="2" c:identifier="GO_LINE_S_DOT">
      </member>
      <member name="s_dash_dot" value="3" c:identifier="GO_LINE_S_DASH_DOT">
      </member>
      <member name="s_dash_dot_dot"
              value="4"
              c:identifier="GO_LINE_S_DASH_DOT_DOT">
      </member>
      <member name="dash_dot_dot_dot"
              value="5"
              c:identifier="GO_LINE_DASH_DOT_DOT_DOT">
      </member>
      <member name="dot" value="6" c:identifier="GO_LINE_DOT">
      </member>
      <member name="s_dash" value="7" c:identifier="GO_LINE_S_DASH">
      </member>
      <member name="dash" value="8" c:identifier="GO_LINE_DASH">
      </member>
      <member name="long_dash" value="9" c:identifier="GO_LINE_LONG_DASH">
      </member>
      <member name="dash_dot" value="10" c:identifier="GO_LINE_DASH_DOT">
      </member>
      <member name="dash_dot_dot"
              value="11"
              c:identifier="GO_LINE_DASH_DOT_DOT">
      </member>
      <member name="max" value="12" c:identifier="GO_LINE_MAX">
      </member>
    </enumeration>
    <enumeration name="LineInterpolation" c:type="GOLineInterpolation">
      <member name="linear"
              value="0"
              c:identifier="GO_LINE_INTERPOLATION_LINEAR">
        <doc xml:space="preserve">Linear interpolation.</doc>
      </member>
      <member name="spline"
              value="1"
              c:identifier="GO_LINE_INTERPOLATION_SPLINE">
        <doc xml:space="preserve">Bezier cubic spline interpolation.</doc>
      </member>
      <member name="closed_spline"
              value="2"
              c:identifier="GO_LINE_INTERPOLATION_CLOSED_SPLINE">
        <doc xml:space="preserve">Closed Bezier cubic spline interpolation.</doc>
      </member>
      <member name="cubic_spline"
              value="3"
              c:identifier="GO_LINE_INTERPOLATION_CUBIC_SPLINE">
        <doc xml:space="preserve">Cubic spline interpolation with natural limits.</doc>
      </member>
      <member name="parabolic_cubic_spline"
              value="4"
              c:identifier="GO_LINE_INTERPOLATION_PARABOLIC_CUBIC_SPLINE">
        <doc xml:space="preserve">Cubic spline interpolation with parabolic limits.</doc>
      </member>
      <member name="cubic_cubic_spline"
              value="5"
              c:identifier="GO_LINE_INTERPOLATION_CUBIC_CUBIC_SPLINE">
        <doc xml:space="preserve">Cubic spline interpolation with cubic limits.</doc>
      </member>
      <member name="clamped_cubic_spline"
              value="6"
              c:identifier="GO_LINE_INTERPOLATION_CLAMPED_CUBIC_SPLINE">
        <doc xml:space="preserve">Cubic spline interpolation with fixed derivatives at both ends.</doc>
      </member>
      <member name="step_start"
              value="7"
              c:identifier="GO_LINE_INTERPOLATION_STEP_START">
        <doc xml:space="preserve">Steps using first y value.</doc>
      </member>
      <member name="step_end"
              value="8"
              c:identifier="GO_LINE_INTERPOLATION_STEP_END">
        <doc xml:space="preserve">Steps using last y value.</doc>
      </member>
      <member name="step_center_x"
              value="9"
              c:identifier="GO_LINE_INTERPOLATION_STEP_CENTER_X">
        <doc xml:space="preserve">Steps centered around each point.</doc>
      </member>
      <member name="step_center_y"
              value="10"
              c:identifier="GO_LINE_INTERPOLATION_STEP_CENTER_Y">
        <doc xml:space="preserve">Steps using mean y value.</doc>
      </member>
      <member name="odf_spline"
              value="11"
              c:identifier="GO_LINE_INTERPOLATION_ODF_SPLINE">
        <doc xml:space="preserve">ODF compatible Bezier cubic spline interpolation, cyclic if first and last points are identical.</doc>
      </member>
      <member name="max" value="12" c:identifier="GO_LINE_INTERPOLATION_MAX">
        <doc xml:space="preserve">First invalid value.</doc>
      </member>
    </enumeration>
    <class name="LocaleSel"
           c:symbol-prefix="locale_sel"
           c:type="GOLocaleSel"
           parent="Gtk.Box"
           glib:type-name="GOLocaleSel"
           glib:get-type="go_locale_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_locale_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_locale" c:identifier="go_locale_sel_get_locale">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="LocaleSel" c:type="GOLocaleSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locale_name"
              c:identifier="go_locale_sel_get_locale_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="LocaleSel" c:type="GOLocaleSel*"/>
          </instance-parameter>
          <parameter name="loc" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locale" c:identifier="go_locale_sel_set_locale">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="LocaleSel" c:type="GOLocaleSel*"/>
          </instance-parameter>
          <parameter name="loc" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensitive" c:identifier="go_locale_sel_set_sensitive">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cs" transfer-ownership="none">
            <type name="LocaleSel" c:type="GOLocaleSel*"/>
          </instance-parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="locale-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <constant name="M_PI" value="3.141593" c:type="M_PI">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <callback name="MapFunc" c:type="GOMapFunc" introspectable="0">
      <return-value>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Marker"
           c:symbol-prefix="marker"
           c:type="GOMarker"
           parent="GObject.Object"
           glib:type-name="GOMarker"
           glib:get-type="go_marker_get_type">
      <constructor name="new" c:identifier="go_marker_new">
        <return-value transfer-ownership="full">
          <type name="Marker" c:type="GOMarker*"/>
        </return-value>
      </constructor>
      <constructor name="selector_new" c:identifier="go_marker_selector_new">
        <doc xml:space="preserve">Creates a new marker selector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="initial_shape" transfer-ownership="none">
            <doc xml:space="preserve">marker shape intially selected</doc>
            <type name="MarkerShape" c:type="GOMarkerShape"/>
          </parameter>
          <parameter name="default_shape" transfer-ownership="none">
            <doc xml:space="preserve">automatic marker shape</doc>
            <type name="MarkerShape" c:type="GOMarkerShape"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="selector_set_auto_fill"
                c:identifier="go_marker_selector_set_auto_fill">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </parameter>
          <parameter name="auto_fill" transfer-ownership="none">
            <doc xml:space="preserve">whether to use a transparent color for opened markers such as
cross, x, or asterisk.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="selector_set_colors"
                c:identifier="go_marker_selector_set_colors">
        <doc xml:space="preserve">Updates swatch colors of @selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </parameter>
          <parameter name="outline" transfer-ownership="none">
            <doc xml:space="preserve">outline color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="fill" transfer-ownership="none">
            <doc xml:space="preserve">fill color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </function>
      <function name="selector_set_shape"
                c:identifier="go_marker_selector_set_shape">
        <doc xml:space="preserve">Updates marker shape of @selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </parameter>
          <parameter name="shape" transfer-ownership="none">
            <doc xml:space="preserve">new marker shape</doc>
            <type name="MarkerShape" c:type="GOMarkerShape"/>
          </parameter>
        </parameters>
      </function>
      <function name="shape_as_str" c:identifier="go_marker_shape_as_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="shape" transfer-ownership="none">
            <type name="MarkerShape" c:type="GOMarkerShape"/>
          </parameter>
        </parameters>
      </function>
      <function name="shape_from_str" c:identifier="go_marker_shape_from_str">
        <return-value transfer-ownership="none">
          <type name="MarkerShape" c:type="GOMarkerShape"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="assign" c:identifier="go_marker_assign">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_cairo_surface"
              c:identifier="go_marker_create_cairo_surface">
        <doc xml:space="preserve">Creates a new cairo surface similar to the current target of @cr, and render
@marker on it. @center will contain the coordinate of the center of the surface.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created #cairo_surface_t. This surface should be destroyed
	using cairo_surface_destroy after use.</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve">a #GOMarker</doc>
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">current context scale</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">a placeholder for the surface width</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">a placeholder for the surface height</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="go_marker_dup">
        <doc xml:space="preserve">Duplicates @src.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicated marker.</doc>
          <type name="Marker" c:type="GOMarker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">the #GOMarker to duplicate</doc>
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fill_color" c:identifier="go_marker_get_fill_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_outline_color"
              c:identifier="go_marker_get_outline_color">
        <return-value transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_outline_width"
              c:identifier="go_marker_get_outline_width">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shape" c:identifier="go_marker_get_shape">
        <return-value transfer-ownership="none">
          <type name="MarkerShape" c:type="GOMarkerShape"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="go_marker_get_size">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_closed_shape" c:identifier="go_marker_is_closed_shape">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="go_marker_render">
        <doc xml:space="preserve">Renders @marker onto the @cairo target, using @x and @y for the position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve">a #GOMarker</doc>
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">current scale</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fill_color" c:identifier="go_marker_set_fill_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_outline_color"
              c:identifier="go_marker_set_outline_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shape" c:identifier="go_marker_set_shape">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="shape" transfer-ownership="none">
            <type name="MarkerShape" c:type="GOMarkerShape"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="go_marker_set_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="m" transfer-ownership="none">
            <type name="Marker" c:type="GOMarker*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="MarkerShape" c:type="GOMarkerShape">
      <member name="none" value="0" c:identifier="GO_MARKER_NONE">
        <doc xml:space="preserve">no mark.</doc>
      </member>
      <member name="square" value="1" c:identifier="GO_MARKER_SQUARE">
        <doc xml:space="preserve">square.</doc>
      </member>
      <member name="diamond" value="2" c:identifier="GO_MARKER_DIAMOND">
        <doc xml:space="preserve">diamond.</doc>
      </member>
      <member name="triangle_down"
              value="3"
              c:identifier="GO_MARKER_TRIANGLE_DOWN">
        <doc xml:space="preserve">triangle down.</doc>
      </member>
      <member name="triangle_up"
              value="4"
              c:identifier="GO_MARKER_TRIANGLE_UP">
        <doc xml:space="preserve">triangle up.</doc>
      </member>
      <member name="triangle_right"
              value="5"
              c:identifier="GO_MARKER_TRIANGLE_RIGHT">
        <doc xml:space="preserve">triangle right.</doc>
      </member>
      <member name="triangle_left"
              value="6"
              c:identifier="GO_MARKER_TRIANGLE_LEFT">
        <doc xml:space="preserve">triangle left.</doc>
      </member>
      <member name="circle" value="7" c:identifier="GO_MARKER_CIRCLE">
        <doc xml:space="preserve">circle.</doc>
      </member>
      <member name="x" value="8" c:identifier="GO_MARKER_X">
        <doc xml:space="preserve">X.</doc>
      </member>
      <member name="cross" value="9" c:identifier="GO_MARKER_CROSS">
        <doc xml:space="preserve">cross.</doc>
      </member>
      <member name="asterisk" value="10" c:identifier="GO_MARKER_ASTERISK">
        <doc xml:space="preserve">asterisk.</doc>
      </member>
      <member name="bar" value="11" c:identifier="GO_MARKER_BAR">
        <doc xml:space="preserve">horizontal bar.</doc>
      </member>
      <member name="half_bar" value="12" c:identifier="GO_MARKER_HALF_BAR">
        <doc xml:space="preserve">right half bar.</doc>
      </member>
      <member name="butterfly" value="13" c:identifier="GO_MARKER_BUTTERFLY">
        <doc xml:space="preserve">butterfly.</doc>
      </member>
      <member name="hourglass" value="14" c:identifier="GO_MARKER_HOURGLASS">
        <doc xml:space="preserve">hourglass.</doc>
      </member>
      <member name="left_half_bar"
              value="15"
              c:identifier="GO_MARKER_LEFT_HALF_BAR">
        <doc xml:space="preserve">left half bar.</doc>
      </member>
      <member name="max" value="16" c:identifier="GO_MARKER_MAX">
        <doc xml:space="preserve">maximum value, should not occur.</doc>
      </member>
    </enumeration>
    <class name="MathEditor"
           c:symbol-prefix="math_editor"
           c:type="GoMathEditor"
           parent="Gtk.Bin"
           glib:type-name="GoMathEditor"
           glib:get-type="go_math_editor_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_math_editor_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_inline" c:identifier="go_math_editor_get_inline">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_itex" c:identifier="go_math_editor_get_itex">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mathml" c:identifier="go_math_editor_get_mathml">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_inline" c:identifier="go_math_editor_set_inline">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_itex" c:identifier="go_math_editor_set_itex">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mathml" c:identifier="go_math_editor_set_mathml">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gme" transfer-ownership="none">
            <type name="MathEditor" c:type="GoMathEditor*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="inline-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="itex-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="Matrix3x3" c:type="GOMatrix3x3">
      <field name="a11" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a12" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a13" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a21" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a22" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a23" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a31" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a32" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a33" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="from_euler" c:identifier="go_matrix3x3_from_euler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </instance-parameter>
          <parameter name="Psi" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="Theta" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="Phi" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_euler_transposed"
              c:identifier="go_matrix3x3_from_euler_transposed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </instance-parameter>
          <parameter name="Psi" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="Theta" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="Phi" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="multiply" c:identifier="go_matrix3x3_multiply">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </instance-parameter>
          <parameter name="src1" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </parameter>
          <parameter name="src2" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_euler" c:identifier="go_matrix3x3_to_euler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </instance-parameter>
          <parameter name="Psi" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="Theta" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="Phi" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform" c:identifier="go_matrix3x3_transform">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mat" transfer-ownership="none">
            <type name="Matrix3x3" c:type="GOMatrix3x3*"/>
          </instance-parameter>
          <parameter name="xo" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="yo" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="zo" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="MemChunk"
            c:type="GOMemChunk"
            glib:type-name="GOMemChunk"
            glib:get-type="go_mem_chunk_get_type"
            c:symbol-prefix="mem_chunk">
      <constructor name="new" c:identifier="go_mem_chunk_new">
        <return-value transfer-ownership="full">
          <type name="MemChunk" c:type="GOMemChunk*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="user_atom_size" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="chunk_size" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="alloc" c:identifier="go_mem_chunk_alloc">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an unused memory block</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve">#GOMemChunk</doc>
            <type name="MemChunk" c:type="GOMemChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="alloc0" c:identifier="go_mem_chunk_alloc0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an unused memory block filled with 0</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve">#GOMemChunk</doc>
            <type name="MemChunk" c:type="GOMemChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="go_mem_chunk_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="MemChunk" c:type="GOMemChunk*"/>
          </instance-parameter>
          <parameter name="expect_leaks" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_leak" c:identifier="go_mem_chunk_foreach_leak">
        <doc xml:space="preserve">Loop over all non-freed memory in the chunk.  It's safe to allocate or free
from the chunk in the callback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve">#GOMemChunk</doc>
            <type name="MemChunk" c:type="GOMemChunk*"/>
          </instance-parameter>
          <parameter name="cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">callback</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">user data for @cb</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_mem_chunk_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="MemChunk" c:type="GOMemChunk*"/>
          </instance-parameter>
          <parameter name="mem" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="MenuPixmaps"
           c:symbol-prefix="menu_pixmaps"
           c:type="GOMenuPixmaps"
           parent="Gtk.Menu"
           glib:type-name="GOMenuPixmaps"
           glib:get-type="go_menu_pixmaps_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_menu_pixmaps_new">
        <return-value transfer-ownership="none">
          <type name="MenuPixmaps" c:type="GOMenuPixmaps*"/>
        </return-value>
        <parameters>
          <parameter name="ncols" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_element" c:identifier="go_menu_pixmaps_add_element">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="menu" transfer-ownership="none">
            <type name="MenuPixmaps" c:type="GOMenuPixmaps*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="MimePriority" c:type="GOMimePriority">
      <member name="invalid"
              value="-1"
              c:identifier="GO_MIME_PRIORITY_INVALID">
        <doc xml:space="preserve">no support.</doc>
      </member>
      <member name="display" value="0" c:identifier="GO_MIME_PRIORITY_DISPLAY">
        <doc xml:space="preserve">can display the component.</doc>
      </member>
      <member name="print" value="1" c:identifier="GO_MIME_PRIORITY_PRINT">
        <doc xml:space="preserve">can print the component.</doc>
      </member>
      <member name="partial" value="2" c:identifier="GO_MIME_PRIORITY_PARTIAL">
        <doc xml:space="preserve">partial support, including edition.</doc>
      </member>
      <member name="full" value="3" c:identifier="GO_MIME_PRIORITY_FULL">
        <doc xml:space="preserve">full support.</doc>
      </member>
      <member name="native" value="4" c:identifier="GO_MIME_PRIORITY_NATIVE">
        <doc xml:space="preserve">use the native code.</doc>
      </member>
    </enumeration>
    <record name="MimeType" c:type="GOMimeType">
      <field name="priority" writable="1">
        <type name="MimePriority" c:type="GOMimePriority"/>
      </field>
      <field name="component_type_name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="support_clipboard" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <function name="get_description"
                c:identifier="go_mime_type_get_description">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the description for the mime type as a newly allocated string.
Needs to be freed with g_free(). If the description is not found, the
mime type itself will be returned.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve">the mime type to describe.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="NamedColor" c:type="GONamedColor">
      <field name="color" writable="1">
        <doc xml:space="preserve">the color.</doc>
        <type name="Color" c:type="GOColor"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">untranslated name - eg. "white".</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <class name="OptionMenu"
           c:symbol-prefix="option_menu"
           c:type="GOOptionMenu"
           parent="Gtk.Button"
           glib:type-name="GOOptionMenu"
           glib:get-type="go_option_menu_get_type"
           glib:type-struct="OptionMenuClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_option_menu_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="build"
                c:identifier="go_option_menu_build"
                introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOOptionMenu with a filled-in menu.

This function takes a %NULL-terminated list of string-integer pairs
and fills in a menu with the given texts.  Each menu entry will
have a data property "value" sets to the given value.  The menu is
then placed inside a new #GOOptionMenu which is then returned.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="first_entry" transfer-ownership="none">
            <doc xml:space="preserve">text for first entry</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">further values and text</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_history" c:identifier="go_option_menu_get_history">
        <doc xml:space="preserve">Retrieves the currently selected menu item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the selected menu_item</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <doc xml:space="preserve">a #GOOptionMenu</doc>
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu" c:identifier="go_option_menu_get_menu">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The currently set menu.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <doc xml:space="preserve">#GOOptionMenu</doc>
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_item" c:identifier="go_option_menu_select_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="Gtk.MenuItem" c:type="GtkMenuItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_history" c:identifier="go_option_menu_set_history">
        <doc xml:space="preserve">Selects an item. The last number in the list is the rank of the item to select
in its menu and the previous ones are the ranks of the submenus containing
the item to select.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <doc xml:space="preserve">#GOOptionMenu</doc>
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
          <parameter name="selection" transfer-ownership="none">
            <doc xml:space="preserve">a list of indices giving the menu to select.</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="Gtk.MenuItem"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu" c:identifier="go_option_menu_set_menu">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option_menu" transfer-ownership="none">
            <type name="OptionMenu" c:type="GOOptionMenu*"/>
          </instance-parameter>
          <parameter name="menu" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="menu" writable="1" transfer-ownership="none">
        <type name="Gtk.Menu"/>
      </property>
      <field name="button">
        <type name="Gtk.Button" c:type="GtkButton"/>
      </field>
      <field name="menu" readable="0" private="1">
        <type name="Gtk.MenuShell" c:type="GtkMenuShell*"/>
      </field>
      <field name="selected" readable="0" private="1">
        <type name="Gtk.MenuItem" c:type="GtkMenuItem*"/>
      </field>
      <field name="button_label" readable="0" private="1">
        <type name="Gtk.Label" c:type="GtkLabel*"/>
      </field>
      <field name="active" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="OptionMenuClass"
            c:type="GOOptionMenuClass"
            glib:is-gtype-struct-for="OptionMenu">
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="option_menu" transfer-ownership="none">
              <type name="OptionMenu" c:type="GOOptionMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="PARAM_PERSISTENT" value="1" c:type="GO_PARAM_PERSISTENT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PT_PER_IN" value="72" c:type="GO_PT_PER_IN">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Palette"
           c:symbol-prefix="palette"
           c:type="GOPalette"
           parent="Gtk.Menu"
           glib:type-name="GOPalette"
           glib:get-type="go_palette_get_type"
           glib:type-struct="PaletteClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="go_palette_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GOPalette object.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="n_swatches" transfer-ownership="none">
            <doc xml:space="preserve">number of palette items</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="swatch_width" transfer-ownership="none">
            <doc xml:space="preserve">swatch width as multiple of swatch height</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="n_columns" transfer-ownership="none">
            <doc xml:space="preserve">number of columns for displaying palette items</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="swatch_render"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve">a user function used for swatch rendering</doc>
            <type name="PaletteSwatchRenderCallback"
                  c:type="GOPaletteSwatchRenderCallback"/>
          </parameter>
          <parameter name="get_tooltip"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve">a user function for tooltips.</doc>
            <type name="PaletteSwatchTooltipCallback"
                  c:type="GOPaletteSwatchTooltipCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data for use by swatch render function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">a function to destroy user data on widget finalization</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_n_swatches" c:identifier="go_palette_get_n_swatches">
        <doc xml:space="preserve">A convenience function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of palette items.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_data" c:identifier="go_palette_get_user_data">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to user data given to go_palette_new function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show_automatic" c:identifier="go_palette_show_automatic">
        <doc xml:space="preserve">Adds an automatic button to @palette.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">index to use on automatic item activation</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">if not NULL, replace automatic button label</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_custom" c:identifier="go_palette_show_custom">
        <doc xml:space="preserve">Adds a custom button to bottom of @palette. An activation
of custom button will cause an emition of "custom_activate" signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">if not NULL, replaces custom button label</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swatch_new" c:identifier="go_palette_swatch_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtkDrawingArea which will be rendered like a @palette
swatch. @index can be changed later by changing swatch "index" data.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">default index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Menu" c:type="GtkMenu"/>
      </field>
      <field name="priv">
        <type name="PalettePrivate" c:type="GOPalettePrivate*"/>
      </field>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="automatic-activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="custom-activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PaletteClass"
            c:type="GOPaletteClass"
            glib:is-gtype-struct-for="Palette">
      <field name="parent_class">
        <type name="Gtk.MenuClass" c:type="GtkMenuClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="palette" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="automatic_activate">
        <callback name="automatic_activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="palette" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="custom_activate">
        <callback name="custom_activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="palette" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PalettePrivate" c:type="GOPalettePrivate" disguised="1">
    </record>
    <callback name="PaletteSwatchRenderCallback"
              c:type="GOPaletteSwatchRenderCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="area" transfer-ownership="none">
          <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
        </parameter>
        <parameter name="index" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PaletteSwatchTooltipCallback"
              c:type="GOPaletteSwatchTooltipCallback">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="index" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PangoAttrSubscript" c:type="GOPangoAttrSubscript">
      <field name="attr" writable="1">
        <type name="Pango.Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="val" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <function name="get_attr_type"
                c:identifier="go_pango_attr_subscript_get_attr_type">
        <return-value transfer-ownership="none">
          <type name="Pango.AttrType" c:type="PangoAttrType"/>
        </return-value>
      </function>
      <function name="new"
                c:identifier="go_pango_attr_subscript_new"
                introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a subscript attribute.</doc>
          <type name="Pango.Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the characters must be lowered.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PangoAttrSuperscript" c:type="GOPangoAttrSuperscript">
      <field name="attr" writable="1">
        <type name="Pango.Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="val" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <function name="get_attr_type"
                c:identifier="go_pango_attr_superscript_get_attr_type">
        <return-value transfer-ownership="none">
          <type name="Pango.AttrType" c:type="PangoAttrType"/>
        </return-value>
      </function>
      <function name="new"
                c:identifier="go_pango_attr_superscript_new"
                introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a superscript attribute.</doc>
          <type name="Pango.Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the characters must be raised.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="ParseKeyValueFunc" c:type="GOParseKeyValueFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="user" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Path"
            c:type="GOPath"
            glib:type-name="GOPath"
            glib:get-type="go_path_get_type"
            c:symbol-prefix="path">
      <constructor name="new" c:identifier="go_path_new">
        <return-value transfer-ownership="full">
          <type name="Path" c:type="GOPath*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_odf_enhanced_path"
                   c:identifier="go_path_new_from_odf_enhanced_path">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly allocated #GOPath or %NULL on error.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">an ODF enhanced path.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="variables" transfer-ownership="none">
            <doc xml:space="preserve">environment</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_svg" c:identifier="go_path_new_from_svg">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly allocated #GOPath.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">an SVG path.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="go_path_append">
        <doc xml:space="preserve">Appends @path2 at the end of @path1.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@path1</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path1" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="path2" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="arc" c:identifier="go_path_arc">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="cx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cy" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ry" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="arc_to" c:identifier="go_path_arc_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="cx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cy" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ry" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="go_path_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="go_path_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="go_path_copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOPath identical to @path.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_restricted"
              c:identifier="go_path_copy_restricted"
              version="0.10.5">
        <doc xml:space="preserve">Copies actions between start and end will be copied inside a new #GOPath.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOPath. If start or end is
negative, it is not taken into account.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">the first action to copy</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">the second action to copy</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="curve_to" c:identifier="go_path_curve_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_path_free">
        <doc xml:space="preserve">Decrements references count and frees all memory allocated for @path if
references count reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="go_path_get_options">
        <return-value transfer-ownership="none">
          <type name="PathOptions" c:type="GOPathOptions"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="interpret" c:identifier="go_path_interpret">
        <doc xml:space="preserve">This function can be used to draw a path or for other purposes.
To draw using cairo, the closure argument should be a valid #cairo_t.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">#GOPathDirection</doc>
            <type name="PathDirection" c:type="GOPathDirection"/>
          </parameter>
          <parameter name="move_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for move to.</doc>
            <type name="PathMoveToFunc" c:type="GOPathMoveToFunc"/>
          </parameter>
          <parameter name="line_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for drawing a line.</doc>
            <type name="PathLineToFunc" c:type="GOPathLineToFunc"/>
          </parameter>
          <parameter name="curve_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for drawing a bezier cubic spline.</doc>
            <type name="PathCurveToFunc" c:type="GOPathCurveToFunc"/>
          </parameter>
          <parameter name="close_path" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for closing the path.</doc>
            <type name="PathClosePathFunc" c:type="GOPathClosePathFunc"/>
          </parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve">data to pass as first argument to the callbacks.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="interpret_full"
              c:identifier="go_path_interpret_full"
              version="0.10.5">
        <doc xml:space="preserve">This function can be used to draw a portion path or for other purposes.
Only actions between start and end will be executed. If start or end is
negative, it is not taken into account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">index of the first action to interpret</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">index of the last action to interpret</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">#GOPathDirection</doc>
            <type name="PathDirection" c:type="GOPathDirection"/>
          </parameter>
          <parameter name="move_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for move to.</doc>
            <type name="PathMoveToFunc" c:type="GOPathMoveToFunc"/>
          </parameter>
          <parameter name="line_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for drawing a line.</doc>
            <type name="PathLineToFunc" c:type="GOPathLineToFunc"/>
          </parameter>
          <parameter name="curve_to" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for drawing a bezier cubic spline.</doc>
            <type name="PathCurveToFunc" c:type="GOPathCurveToFunc"/>
          </parameter>
          <parameter name="close_path" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">the callback for closing the path.</doc>
            <type name="PathClosePathFunc" c:type="GOPathClosePathFunc"/>
          </parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve">data to pass as first argument to the callbacks.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="line_to" c:identifier="go_path_line_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_to" c:identifier="go_path_move_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pie_wedge" c:identifier="go_path_pie_wedge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="cx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cy" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ry" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="rectangle" c:identifier="go_path_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="go_path_ref">
        <doc xml:space="preserve">Increments references count to @path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the path with an incremented references count.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ring_wedge" c:identifier="go_path_ring_wedge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="cx" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cy" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rx_out" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ry_out" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="rx_in" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ry_in" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="th1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="go_path_scale">
        <doc xml:space="preserve">Builds a scaled.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the scaled path.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal scale.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve">vertical scale.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options" c:identifier="go_path_set_options">
        <doc xml:space="preserve">Change the rendering options for @path using
%GO_PATH_OPTIONS_SNAP_COORDINATES
%GO_PATH_OPTIONS_SNAP_WIDTH
%GO_PATH_OPTIONS_SHARP</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve">#GOPathOptions</doc>
            <type name="PathOptions" c:type="GOPathOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_cairo" c:identifier="go_path_to_cairo">
        <doc xml:space="preserve">Renders the path to the cairo context using its current settings.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">#GOPathDirection</doc>
            <type name="PathDirection" c:type="GOPathDirection"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_svg" c:identifier="go_path_to_svg">
        <doc xml:space="preserve">Builds an svg path from @path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the svg:d string.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="PathClosePathFunc" c:type="GOPathClosePathFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PathCurveToFunc" c:type="GOPathCurveToFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="point0" transfer-ownership="none">
          <type name="PathPoint" c:type="GOPathPoint*"/>
        </parameter>
        <parameter name="point1" transfer-ownership="none">
          <type name="PathPoint" c:type="GOPathPoint*"/>
        </parameter>
        <parameter name="point2" transfer-ownership="none">
          <type name="PathPoint" c:type="GOPathPoint*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PathDirection" c:type="GOPathDirection">
      <member name="forward"
              value="0"
              c:identifier="GO_PATH_DIRECTION_FORWARD">
        <doc xml:space="preserve">go through the pass from start to end.</doc>
      </member>
      <member name="backward"
              value="1"
              c:identifier="GO_PATH_DIRECTION_BACKWARD">
        <doc xml:space="preserve">go through the pass from end to start.</doc>
      </member>
    </enumeration>
    <callback name="PathLineToFunc" c:type="GOPathLineToFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="point" transfer-ownership="none">
          <type name="PathPoint" c:type="GOPathPoint*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PathMoveToFunc" c:type="GOPathMoveToFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="point" transfer-ownership="none">
          <type name="PathPoint" c:type="GOPathPoint*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="PathOptions" c:type="GOPathOptions">
      <member name="snap_coordinates"
              value="1"
              c:identifier="GO_PATH_OPTIONS_SNAP_COORDINATES">
        <doc xml:space="preserve">round coordinates to avoid aliasing in pixbufs.</doc>
      </member>
      <member name="snap_width"
              value="2"
              c:identifier="GO_PATH_OPTIONS_SNAP_WIDTH">
        <doc xml:space="preserve">round width so that it correpond to a round pixels number.</doc>
      </member>
      <member name="sharp" value="3" c:identifier="GO_PATH_OPTIONS_SHARP">
        <doc xml:space="preserve">use raw coordinates.</doc>
      </member>
    </bitfield>
    <record name="PathPoint" c:type="GOPathPoint">
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical dimension.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="Pattern" c:type="GOPattern">
      <doc xml:space="preserve">GOPattern::pattern is the used #GOPatternType.</doc>
      <field name="fore" writable="1">
        <doc xml:space="preserve">foreground color.</doc>
        <type name="Color" c:type="GOColor"/>
      </field>
      <field name="back" writable="1">
        <doc xml:space="preserve">background color.</doc>
        <type name="Color" c:type="GOColor"/>
      </field>
      <field name="pattern" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <method name="create_cairo_pattern"
              c:identifier="go_pattern_create_cairo_pattern">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a cairo pattern object corresponding to @pattern
parameters.</doc>
          <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPattern</doc>
            <type name="Pattern" c:type="GOPattern*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_solid" c:identifier="go_pattern_is_solid">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if @pat is solid, and stores the color in @color.
	If @pat is not solid @color is not touched.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pat" transfer-ownership="none">
            <doc xml:space="preserve">#GOPattern</doc>
            <type name="Pattern" c:type="GOPattern*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">#GOColor</doc>
            <type name="Color" c:type="GOColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_solid" c:identifier="go_pattern_set_solid">
        <doc xml:space="preserve">Makes @pat a solid pattern with colour @fore.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pat" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPattern</doc>
            <type name="Pattern" c:type="GOPattern*"/>
          </instance-parameter>
          <parameter name="fore" transfer-ownership="none">
            <doc xml:space="preserve">a #GOColor</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </method>
      <function name="as_str" c:identifier="go_pattern_as_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <type name="PatternType" c:type="GOPatternType"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_str" c:identifier="go_pattern_from_str">
        <return-value transfer-ownership="none">
          <type name="PatternType" c:type="GOPatternType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="selector_new" c:identifier="go_pattern_selector_new">
        <doc xml:space="preserve">Creates a new pattern selector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="initial_type" transfer-ownership="none">
            <doc xml:space="preserve">pattern type initially selected</doc>
            <type name="PatternType" c:type="GOPatternType"/>
          </parameter>
          <parameter name="default_type" transfer-ownership="none">
            <doc xml:space="preserve">automatic pattern type</doc>
            <type name="PatternType" c:type="GOPatternType"/>
          </parameter>
        </parameters>
      </function>
      <function name="selector_set_colors"
                c:identifier="go_pattern_selector_set_colors">
        <doc xml:space="preserve">Updates swatch colors of @selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a pattern #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </parameter>
          <parameter name="foreground" transfer-ownership="none">
            <doc xml:space="preserve">foreground color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="background" transfer-ownership="none">
            <doc xml:space="preserve">background color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="PatternType" c:type="GOPatternType">
      <member name="solid" value="0" c:identifier="GO_PATTERN_SOLID">
        <doc xml:space="preserve">solid using background color.</doc>
      </member>
      <member name="grey75" value="1" c:identifier="GO_PATTERN_GREY75">
        <doc xml:space="preserve">75% background color.</doc>
      </member>
      <member name="grey50" value="2" c:identifier="GO_PATTERN_GREY50">
        <doc xml:space="preserve">50% background color.</doc>
      </member>
      <member name="grey25" value="3" c:identifier="GO_PATTERN_GREY25">
        <doc xml:space="preserve">25% background color.</doc>
      </member>
      <member name="grey125" value="4" c:identifier="GO_PATTERN_GREY125">
        <doc xml:space="preserve">12.5% background color.</doc>
      </member>
      <member name="grey625" value="5" c:identifier="GO_PATTERN_GREY625">
        <doc xml:space="preserve">6.25% background color.</doc>
      </member>
      <member name="horiz" value="6" c:identifier="GO_PATTERN_HORIZ">
        <doc xml:space="preserve">horizontal stripe.</doc>
      </member>
      <member name="vert" value="7" c:identifier="GO_PATTERN_VERT">
        <doc xml:space="preserve">vertical stripe.</doc>
      </member>
      <member name="rev_diag" value="8" c:identifier="GO_PATTERN_REV_DIAG">
        <doc xml:space="preserve">reverse diagonal stripe.</doc>
      </member>
      <member name="diag" value="9" c:identifier="GO_PATTERN_DIAG">
        <doc xml:space="preserve">diagonal stripe.</doc>
      </member>
      <member name="diag_cross"
              value="10"
              c:identifier="GO_PATTERN_DIAG_CROSS">
        <doc xml:space="preserve">diagonal crosshatch.</doc>
      </member>
      <member name="thick_diag_cross"
              value="11"
              c:identifier="GO_PATTERN_THICK_DIAG_CROSS">
        <doc xml:space="preserve">thick diagonal crosshatch.</doc>
      </member>
      <member name="thin_horiz"
              value="12"
              c:identifier="GO_PATTERN_THIN_HORIZ">
        <doc xml:space="preserve">thin horizontal stripe.</doc>
      </member>
      <member name="thin_vert" value="13" c:identifier="GO_PATTERN_THIN_VERT">
        <doc xml:space="preserve">thin vertical stripe.</doc>
      </member>
      <member name="thin_rev_diag"
              value="14"
              c:identifier="GO_PATTERN_THIN_REV_DIAG">
        <doc xml:space="preserve">thin reverse diagonal stripe.</doc>
      </member>
      <member name="thin_diag" value="15" c:identifier="GO_PATTERN_THIN_DIAG">
        <doc xml:space="preserve">thin diagonal stripe.</doc>
      </member>
      <member name="thin_horiz_cross"
              value="16"
              c:identifier="GO_PATTERN_THIN_HORIZ_CROSS">
        <doc xml:space="preserve">thin horizontal crosshatch.</doc>
      </member>
      <member name="thin_diag_cross"
              value="17"
              c:identifier="GO_PATTERN_THIN_DIAG_CROSS">
        <doc xml:space="preserve">thin diagonal crosshatch.</doc>
      </member>
      <member name="foreground_solid"
              value="18"
              c:identifier="GO_PATTERN_FOREGROUND_SOLID">
        <doc xml:space="preserve">solid using foreground color.</doc>
      </member>
      <member name="small_circles"
              value="19"
              c:identifier="GO_PATTERN_SMALL_CIRCLES">
        <doc xml:space="preserve">small circles.</doc>
      </member>
      <member name="semi_circles"
              value="20"
              c:identifier="GO_PATTERN_SEMI_CIRCLES">
        <doc xml:space="preserve">semi circles.</doc>
      </member>
      <member name="thatch" value="21" c:identifier="GO_PATTERN_THATCH">
        <doc xml:space="preserve">thatch.</doc>
      </member>
      <member name="large_circles"
              value="22"
              c:identifier="GO_PATTERN_LARGE_CIRCLES">
        <doc xml:space="preserve">large circles.</doc>
      </member>
      <member name="bricks" value="23" c:identifier="GO_PATTERN_BRICKS">
        <doc xml:space="preserve">bricks.</doc>
      </member>
      <member name="max" value="24" c:identifier="GO_PATTERN_MAX">
        <doc xml:space="preserve">maximum value, should not occur.</doc>
      </member>
    </enumeration>
    <interface name="Persist"
               c:symbol-prefix="persist"
               c:type="GOPersist"
               glib:type-name="GOPersist"
               glib:get-type="go_persist_get_type">
      <method name="prep_sax" c:identifier="go_persist_prep_sax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gp" transfer-ownership="none">
            <type name="Persist" c:type="GOPersist*"/>
          </instance-parameter>
          <parameter name="xin" transfer-ownership="none">
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="sax_save" c:identifier="go_persist_sax_save">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gp" transfer-ownership="none">
            <type name="Persist" c:type="GOPersist*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PersistClass" c:type="GOPersistClass">
      <field name="base" writable="1">
        <doc xml:space="preserve">base interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="prep_sax">
        <callback name="prep_sax">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gp" transfer-ownership="none">
              <type name="Persist" c:type="GOPersist*"/>
            </parameter>
            <parameter name="xin" transfer-ownership="none">
              <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <type name="libxml2.Char" c:type="xmlChar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sax_save">
        <callback name="sax_save">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gp" transfer-ownership="none">
              <type name="Persist" c:type="GOPersist*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Pixbuf"
           c:symbol-prefix="pixbuf"
           c:type="GOPixbuf"
           parent="Image"
           glib:type-name="GOPixbuf"
           glib:get-type="go_pixbuf_get_type">
      <constructor name="new_from_data"
                   c:identifier="go_pixbuf_new_from_data"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_pixbuf"
                   c:identifier="go_pixbuf_new_from_pixbuf">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_rowstride" c:identifier="go_pixbuf_get_rowstride">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <type name="Pixbuf" c:type="GOPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="image-type" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pixbuf" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
    </class>
    <class name="Plugin"
           c:symbol-prefix="plugin"
           c:type="GOPlugin"
           parent="GObject.Object"
           glib:type-name="GOPlugin"
           glib:get-type="go_plugin_get_type">
      <function name="db_activate_plugin_list"
                c:identifier="go_plugin_db_activate_plugin_list">
        <doc xml:space="preserve">Activates all plugins in the list. If some of the plugins cannot be
activated, the function reports this via @ret_error (errors don't
affect plugins activated successfully).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="plugins" transfer-ownership="none">
            <doc xml:space="preserve">The list of plugins</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="Plugin"/>
            </type>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </function>
      <function name="db_deactivate_plugin_list"
                c:identifier="go_plugin_db_deactivate_plugin_list">
        <doc xml:space="preserve">Deactivates all plugins in the list. If some of the plugins cannot be
deactivated, the function reports this via @ret_error (errors don't
affect plugins deactivated successfully).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="plugins" transfer-ownership="none">
            <doc xml:space="preserve">The list of plugins</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="Plugin"/>
            </type>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </function>
      <function name="services_shutdown"
                c:identifier="go_plugin_services_shutdown">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="activate" c:identifier="go_plugin_activate">
        <doc xml:space="preserve">Activates @plugin together with all its dependencies.
In case of error the plugin won't be activated and detailed error
information will be returned using @ret_error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_deactivate" c:identifier="go_plugin_can_deactivate">
        <doc xml:space="preserve">Tells if the plugin can be deactivated using go_plugin_deactivate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @plugin can be deactivated and FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="db_is_plugin_marked_for_deactivation"
              c:identifier="go_plugin_db_is_plugin_marked_for_deactivation">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="db_mark_plugin_for_deactivation"
              c:identifier="go_plugin_db_mark_plugin_for_deactivation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="mark" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate" c:identifier="go_plugin_deactivate">
        <doc xml:space="preserve">Dectivates @plugin. Its dependencies will NOT be automatically
deactivated.
In case of error the plugin won't be deactivated and detailed error
information will be returned using @ret_error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dependencies_ids"
              c:identifier="go_plugin_get_dependencies_ids">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the list of identifiers of
plugins that @plugin depends on.
	All these plugins will be automatically activated before activating the
	@plugin itself.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description" c:identifier="go_plugin_get_description">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">textual description of @plugin or NULL if description is not
	available.  Returned string stays valid during @plugin's lifetime.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dir_name" c:identifier="go_plugin_get_dir_name">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the name of the directory in which @plugin is located.
	Returned string is != NULL and stays valid during @plugin's lifetime.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="go_plugin_get_id">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the ID of @plugin (unique string used for idenfification of
	plugin).  Returned string is != NULL and stays valid during @plugin's
	lifetime.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loader" c:identifier="go_plugin_get_loader">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The loader.</doc>
          <type name="PluginLoader" c:type="GOPluginLoader*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="go_plugin_get_name">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">textual name of @plugin. If the real name is not available
	for some reason, automatically generated string will be returned.
	Returned string is != NULL and stays valid during @plugin's lifetime.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_services" c:identifier="go_plugin_get_services">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of services.
The list must not be freed or changed.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="PluginService"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_textdomain" c:identifier="go_plugin_get_textdomain">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">plugin's textdomain for use with textdomain(3) and d*gettext(3)
	functions.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_module" c:identifier="go_plugin_get_type_module">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the GTypeModule associated with the plugin
creating it if necessary.</doc>
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="go_plugin_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_active" c:identifier="go_plugin_is_active">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @plugin is active and FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_loaded" c:identifier="go_plugin_is_loaded">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @plugin is loaded and FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_service" c:identifier="go_plugin_load_service">
        <doc xml:space="preserve">Loads base part of the plugin if it is not loaded and then loads given
plugin service (prepares necessary part of the plugin for direct use).
This function is intended for use by GOPluginService objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">Plugin service</doc>
            <type name="PluginService" c:type="GOPluginService*"/>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown" c:identifier="go_plugin_shutdown">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_service" c:identifier="go_plugin_unload_service">
        <doc xml:space="preserve">...
This function is intended for use by GOPluginService objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">Plugin service</doc>
            <type name="PluginService" c:type="GOPluginService*"/>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <doc xml:space="preserve">Pointer used to report errors</doc>
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="use_ref" c:identifier="go_plugin_use_ref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_unref" c:identifier="go_plugin_use_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve">#GOPlugin</doc>
            <type name="Plugin" c:type="GOPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="can-deactivate-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="state-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <interface name="PluginLoader"
               c:symbol-prefix="plugin_loader"
               c:type="GOPluginLoader"
               glib:type-name="GOPluginLoader"
               glib:get-type="go_plugin_loader_get_type">
      <method name="get_plugin" c:identifier="go_plugin_loader_get_plugin">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the plugin</doc>
          <type name="Plugin" c:type="GOPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">#GOPluginLoader</doc>
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_base_loaded"
              c:identifier="go_plugin_loader_is_base_loaded">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_base" c:identifier="go_plugin_loader_load_base">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_service" c:identifier="go_plugin_loader_load_service">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="s" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes"
              c:identifier="go_plugin_loader_set_attributes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_plugin" c:identifier="go_plugin_loader_set_plugin">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <type name="Plugin" c:type="GOPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_base" c:identifier="go_plugin_loader_unload_base">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_service"
              c:identifier="go_plugin_loader_unload_service">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="l" transfer-ownership="none">
            <type name="PluginLoader" c:type="GOPluginLoader*"/>
          </instance-parameter>
          <parameter name="s" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PluginLoaderClass" c:type="GOPluginLoaderClass">
      <field name="base" writable="1">
        <doc xml:space="preserve">base interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load_base">
        <callback name="load_base">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_base">
        <callback name="unload_base">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_attributes">
        <callback name="set_attributes">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_load">
        <callback name="service_load">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unload">
        <callback name="service_unload">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_service_file_opener">
        <callback name="load_service_file_opener">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_service_file_opener">
        <callback name="unload_service_file_opener">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_service_file_saver">
        <callback name="load_service_file_saver">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_service_file_saver">
        <callback name="unload_service_file_saver">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_service_plugin_loader">
        <callback name="load_service_plugin_loader">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_service_plugin_loader">
        <callback name="unload_service_plugin_loader">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="l" transfer-ownership="none">
              <type name="PluginLoader" c:type="GOPluginLoader*"/>
            </parameter>
            <parameter name="s" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginLoaderModule"
           c:symbol-prefix="plugin_loader_module"
           c:type="GOPluginLoaderModule"
           parent="GObject.Object"
           glib:type-name="GOPluginLoaderModule"
           glib:get-type="go_plugin_loader_module_get_type">
      <implements name="PluginLoader"/>
      <function name="register_version"
                c:identifier="go_plugin_loader_module_register_version">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="ver" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="module_file_name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="handle">
        <type name="GModule.Module" c:type="GModule*"/>
      </field>
      <field name="plugin_init">
        <type name="PluginMethod" c:type="GOPluginMethod"/>
      </field>
      <field name="plugin_shutdown">
        <type name="PluginMethod" c:type="GOPluginMethod"/>
      </field>
    </class>
    <callback name="PluginMethod" c:type="GOPluginMethod">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <type name="Plugin" c:type="GOPlugin*"/>
        </parameter>
        <parameter name="cc" transfer-ownership="none">
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PluginModuleDepend" c:type="GOPluginModuleDepend">
      <field name="key" writable="1">
        <doc xml:space="preserve">object being versioned.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="version" writable="1">
        <doc xml:space="preserve">version ID (strict equality is required).</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <record name="PluginModuleHeader" c:type="GOPluginModuleHeader">
      <field name="magic_number" writable="1">
        <doc xml:space="preserve">magic GOffice plugins number.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="num_depends" writable="1">
        <doc xml:space="preserve">number of #GOPluginModuleDepend fields.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <class name="PluginService"
           c:symbol-prefix="plugin_service"
           c:type="GOPluginService"
           parent="GObject.Object"
           glib:type-name="GOPluginService"
           glib:get-type="go_plugin_service_get_type"
           glib:type-struct="PluginServiceClass">
      <constructor name="new" c:identifier="go_plugin_service_new">
        <return-value transfer-ownership="full">
          <type name="PluginService" c:type="GOPluginService*"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <type name="Plugin" c:type="GOPlugin*"/>
          </parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="libxml2.Node" c:type="xmlNode*"/>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="define" c:identifier="go_plugin_service_define">
        <doc xml:space="preserve">Allow the definition of new service types</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type_str" transfer-ownership="none">
            <doc xml:space="preserve">char const *</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="ctor" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">#GOPluginServiceCreate</doc>
            <type name="PluginServiceCreate" c:type="GOPluginServiceCreate"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="activate" invoker="activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deactivate" invoker="deactivate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_description" invoker="get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="read_xml">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="libxml2.Node" c:type="xmlNode*"/>
          </parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="go_plugin_service_activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate" c:identifier="go_plugin_service_deactivate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cbs" c:identifier="go_plugin_service_get_cbs">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the callbacks for the service</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">#GOPluginService</doc>
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="go_plugin_service_get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="go_plugin_service_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="const GOPluginService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin" c:identifier="go_plugin_service_get_plugin">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the plugin offering @service</doc>
          <type name="Plugin" c:type="GOPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">#GOPluginService</doc>
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="go_plugin_service_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="plugin_loader_generate_type"
              c:identifier="go_plugin_service_plugin_loader_generate_type">
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="go_plugin_service_unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="PluginService" c:type="GOPluginService*"/>
          </instance-parameter>
          <parameter name="ret_error" transfer-ownership="none">
            <type name="ErrorInfo" c:type="GOErrorInfo**"/>
          </parameter>
        </parameters>
      </method>
      <field name="g_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="id">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="plugin">
        <type name="Plugin" c:type="GOPlugin*"/>
      </field>
      <field name="is_loaded">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cbs_ptr">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="is_active">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="saved_description">
        <type name="utf8" c:type="char*"/>
      </field>
    </class>
    <record name="PluginServiceClass"
            c:type="GOPluginServiceClass"
            glib:is-gtype-struct-for="PluginService">
      <field name="g_object_class">
        <doc xml:space="preserve">base class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="read_xml">
        <callback name="read_xml">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="libxml2.Node" c:type="xmlNode*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deactivate">
        <callback name="deactivate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_description">
        <callback name="get_description">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="PluginServiceCreate" c:type="GOPluginServiceCreate">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </callback>
    <class name="PluginServiceFileOpener"
           c:symbol-prefix="plugin_service_file_opener"
           c:type="GOPluginServiceFileOpener"
           parent="PluginService"
           glib:type-name="GOPluginServiceFileOpener"
           glib:get-type="go_plugin_service_file_opener_get_type">
    </class>
    <record name="PluginServiceFileOpenerCallbacks"
            c:type="GOPluginServiceFileOpenerCallbacks">
      <field name="plugin_func_file_probe">
        <callback name="plugin_func_file_probe">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="fo" transfer-ownership="none">
              <type name="FileOpener" c:type="GOFileOpener*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Gsf.Input" c:type="GsfInput*"/>
            </parameter>
            <parameter name="pl" transfer-ownership="none">
              <type name="FileProbeLevel" c:type="GOFileProbeLevel"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="plugin_func_file_open">
        <callback name="plugin_func_file_open">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fo" transfer-ownership="none">
              <type name="FileOpener" c:type="GOFileOpener*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="io_context" transfer-ownership="none">
              <type name="IOContext" c:type="GOIOContext*"/>
            </parameter>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="GoView*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Gsf.Input" c:type="GsfInput*"/>
            </parameter>
            <parameter name="enc" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginServiceFileSaver"
           c:symbol-prefix="plugin_service_file_saver"
           c:type="GOPluginServiceFileSaver"
           parent="PluginService"
           glib:type-name="GOPluginServiceFileSaver"
           glib:get-type="go_plugin_service_file_saver_get_type">
    </class>
    <record name="PluginServiceFileSaverCallbacks"
            c:type="GOPluginServiceFileSaverCallbacks">
      <field name="plugin_func_file_save">
        <callback name="plugin_func_file_save">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="FileSaver" c:type="GOFileSaver*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="io_context" transfer-ownership="none">
              <type name="IOContext" c:type="GOIOContext*"/>
            </parameter>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="GoView*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Gsf.Output" c:type="GsfOutput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginServiceGObjectLoader"
           c:symbol-prefix="plugin_service_gobject_loader"
           c:type="GOPluginServiceGObjectLoader"
           parent="PluginServiceSimple"
           glib:type-name="GOPluginServiceGObjectLoader"
           glib:get-type="go_plugin_service_gobject_loader_get_type"
           glib:type-struct="PluginServiceGObjectLoaderClass">
      <field name="plugin_service">
        <type name="PluginService" c:type="GOPluginService"/>
      </field>
    </class>
    <record name="PluginServiceGObjectLoaderClass"
            c:type="GOPluginServiceGObjectLoaderClass"
            glib:is-gtype-struct-for="PluginServiceGObjectLoader">
      <field name="plugin_service_class">
        <doc xml:space="preserve">parent class.</doc>
        <type name="PluginServiceClass" c:type="GOPluginServiceClass"/>
      </field>
      <field name="pending">
        <doc xml:space="preserve">has service instances by type names.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <class name="PluginServiceGeneral"
           c:symbol-prefix="plugin_service_general"
           c:type="GOPluginServiceGeneral"
           parent="PluginService"
           glib:type-name="GOPluginServiceGeneral"
           glib:get-type="go_plugin_service_general_get_type">
    </class>
    <record name="PluginServiceGeneralCallbacks"
            c:type="GOPluginServiceGeneralCallbacks">
      <field name="plugin_func_init">
        <callback name="plugin_func_init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="plugin_func_cleanup">
        <callback name="plugin_func_cleanup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginServicePluginLoader"
           c:symbol-prefix="plugin_service_plugin_loader"
           c:type="GOPluginServicePluginLoader"
           parent="PluginService"
           glib:type-name="GOPluginServicePluginLoader"
           glib:get-type="go_plugin_service_plugin_loader_get_type">
    </class>
    <record name="PluginServicePluginLoaderCallbacks"
            c:type="GOPluginServicePluginLoaderCallbacks">
      <field name="plugin_func_get_loader_type">
        <callback name="plugin_func_get_loader_type">
          <return-value transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="PluginService" c:type="GOPluginService*"/>
            </parameter>
            <parameter name="ret_error" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PluginServiceResource"
           c:symbol-prefix="plugin_service_resource"
           c:type="GOPluginServiceResource"
           parent="PluginService"
           glib:type-name="GOPluginServiceResource"
           glib:get-type="go_plugin_service_resource_get_type">
    </class>
    <class name="PluginServiceSimple"
           c:symbol-prefix="plugin_service_simple"
           c:type="GOPluginServiceSimple"
           parent="PluginService"
           glib:type-name="GOPluginServiceSimple"
           glib:get-type="go_plugin_service_simple_get_type"
           glib:type-struct="PluginServiceSimpleClass">
      <field name="plugin_service">
        <type name="PluginService" c:type="GOPluginService"/>
      </field>
    </class>
    <record name="PluginServiceSimpleClass"
            c:type="GOPluginServiceSimpleClass"
            glib:is-gtype-struct-for="PluginServiceSimple">
      <field name="plugin_service_class">
        <type name="PluginServiceClass" c:type="GOPluginServiceClass"/>
      </field>
    </record>
    <record name="Point" c:type="GOPoint">
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical position.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
    </record>
    <record name="ProgressHelper" c:type="GOProgressHelper">
      <field name="helper_type" writable="1">
        <type name="ProgressHelperType" c:type="GOProgressHelperType"/>
      </field>
      <union name="v" c:type="v">
        <record name="mem" c:type="mem">
          <field name="start" writable="1">
            <type name="utf8" c:type="gchar*"/>
          </field>
          <field name="size" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
        </record>
        <record name="count" c:type="count">
          <field name="total" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="last" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="current" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="step" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
        </record>
        <record name="value" c:type="value">
          <field name="total" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="last" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="step" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
        </record>
        <record name="workbook" c:type="workbook">
          <field name="n_elements" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="last" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="current" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
          <field name="step" writable="1">
            <type name="gint" c:type="gint"/>
          </field>
        </record>
      </union>
    </record>
    <enumeration name="ProgressHelperType" c:type="GOProgressHelperType">
      <member name="none" value="0" c:identifier="GO_PROGRESS_HELPER_NONE">
      </member>
      <member name="count" value="1" c:identifier="GO_PROGRESS_HELPER_COUNT">
      </member>
      <member name="value" value="2" c:identifier="GO_PROGRESS_HELPER_VALUE">
      </member>
      <member name="last" value="3" c:identifier="GO_PROGRESS_HELPER_LAST">
      </member>
    </enumeration>
    <record name="ProgressRange" c:type="GOProgressRange">
      <field name="min" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="max" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="Quad" c:type="GOQuad">
      <field name="h" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="l" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="constant8"
              c:identifier="go_quad_constant8"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="res" transfer-ownership="none">
            <type name="Quad" c:type="GOQuad*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="base" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="dot_product"
              c:identifier="go_quad_dot_product"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="res" transfer-ownership="none">
            <type name="Quad" c:type="GOQuad*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="value" c:identifier="go_quad_value">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">closest double precision value to @a.  As an exception,
this may be called outside go_quad_start and go_quad_end sections.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="acos" c:identifier="go_quad_acos">
        <doc xml:space="preserve">This function computes the arc cosine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="acosl" c:identifier="go_quad_acosl">
        <doc xml:space="preserve">This function computes the arc cosine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add" c:identifier="go_quad_add">
        <doc xml:space="preserve">This function adds @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="addl" c:identifier="go_quad_addl">
        <doc xml:space="preserve">This function adds @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="asin" c:identifier="go_quad_asin">
        <doc xml:space="preserve">This function computes the arc sine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="asinl" c:identifier="go_quad_asinl">
        <doc xml:space="preserve">This function computes the arc sine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="atan2" c:identifier="go_quad_atan2">
        <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y), storing
the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="atan2l" c:identifier="go_quad_atan2l">
        <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y), storing
the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="atan2pi" c:identifier="go_quad_atan2pi">
        <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y) divided
by pi, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="atan2pil" c:identifier="go_quad_atan2pil">
        <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y) divided
by pi, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="constant8l"
                c:identifier="go_quad_constant8l"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="base" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="cos" c:identifier="go_quad_cos">
        <doc xml:space="preserve">This function computes the cosine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cosl" c:identifier="go_quad_cosl">
        <doc xml:space="preserve">This function computes the cosine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cospi" c:identifier="go_quad_cospi">
        <doc xml:space="preserve">This function computes the cosine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cospil" c:identifier="go_quad_cospil">
        <doc xml:space="preserve">This function computes the cosine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="div" c:identifier="go_quad_div">
        <doc xml:space="preserve">This function divides @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="divl" c:identifier="go_quad_divl">
        <doc xml:space="preserve">This function divides @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="dot_productl"
                c:identifier="go_quad_dot_productl"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="end" c:identifier="go_quad_end">
        <doc xml:space="preserve">This ends a section of quad precision arithmetic.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">state pointer from go_quad_start.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </function>
      <function name="endl" c:identifier="go_quad_endl">
        <doc xml:space="preserve">This ends a section of quad precision arithmetic.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">state pointer from go_quad_startl.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </function>
      <function name="exp" c:identifier="go_quad_exp">
        <doc xml:space="preserve">This function computes the exponential function at @a, storing the result
in @res.  If the optional @exp2 is supplied, it is used to return a
power of 2 by which the result should be scaled.  This is useful to
represent results much, much bigger than double precision can handle.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="exp2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="expl" c:identifier="go_quad_expl" introspectable="0">
        <doc xml:space="preserve">This function computes the exponential function at @a, storing the result
in @res.  If the optional @exp2 is supplied, it is used to return a
power of 2 by which the result should be scaled.  This is useful to
represent results much, much bigger than double precision can handle.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="exp2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="expm1" c:identifier="go_quad_expm1">
        <doc xml:space="preserve">This function computes the exponential function at @a with 1 subtracted,
storing the difference in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="expm1l" c:identifier="go_quad_expm1l">
        <doc xml:space="preserve">This function computes the exponential function at @a with 1 subtracted,
storing the difference in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="floor" c:identifier="go_quad_floor">
        <doc xml:space="preserve">This function takes the floor of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="floorl" c:identifier="go_quad_floorl">
        <doc xml:space="preserve">This function takes the floor of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="functional" c:identifier="go_quad_functional">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="functionall" c:identifier="go_quad_functionall">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="hypot" c:identifier="go_quad_hypot">
        <doc xml:space="preserve">This function computes the square root of @a^2 plugs @b^2, storing the
result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="hypotl" c:identifier="go_quad_hypotl">
        <doc xml:space="preserve">This function computes the square root of @a^2 plugs @b^2, storing the
result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="init" c:identifier="go_quad_init">
        <doc xml:space="preserve">This stores the value @h in @res.  As an exception, this may be called
outside go_quad_start and go_quad_end sections.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">a double precision value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <function name="initl" c:identifier="go_quad_initl" introspectable="0">
        <doc xml:space="preserve">This stores the value @h in @res.  As an exception, this may be called
outside go_quad_startl and go_quad_endl sections.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">a double precision value</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="log" c:identifier="go_quad_log">
        <doc xml:space="preserve">This function computes the natural logarithm at @a, storing the result
in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="logl" c:identifier="go_quad_logl">
        <doc xml:space="preserve">This function computes the natural logarithm at @a, storing the result
in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="mul" c:identifier="go_quad_mul">
        <doc xml:space="preserve">This function multiplies @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="mul12" c:identifier="go_quad_mul12">
        <doc xml:space="preserve">This function multiplies @x and @y, storing the result in @res with full
quad precision.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">double precision value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">double precision value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <function name="mul12l" c:identifier="go_quad_mul12l" introspectable="0">
        <doc xml:space="preserve">This function multiplies @x and @y, storing the result in @res with full
quad precision.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">double precision value</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">double precision value</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="mull" c:identifier="go_quad_mull">
        <doc xml:space="preserve">This function multiplies @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="pow" c:identifier="go_quad_pow">
        <doc xml:space="preserve">This function computes @x to the power of @y, storing the result in @res.
If the optional @exp2 is supplied, it is used to return a power of 2 by
which the result should be scaled.  This is useful to represent results
much, much bigger than double precision can handle.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="exp2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="powl" c:identifier="go_quad_powl" introspectable="0">
        <doc xml:space="preserve">This function computes @x to the power of @y, storing the result in @res.
If the optional @exp2 is supplied, it is used to return a power of 2 by
which the result should be scaled.  This is useful to represent results
much, much bigger than double precision can handle.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="exp2"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sin" c:identifier="go_quad_sin">
        <doc xml:space="preserve">This function computes the sine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sinl" c:identifier="go_quad_sinl">
        <doc xml:space="preserve">This function computes the sine of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sinpi" c:identifier="go_quad_sinpi">
        <doc xml:space="preserve">This function computes the sine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sinpil" c:identifier="go_quad_sinpil">
        <doc xml:space="preserve">This function computes the sine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sqrt" c:identifier="go_quad_sqrt">
        <doc xml:space="preserve">This function takes the square root of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="sqrtl" c:identifier="go_quad_sqrtl">
        <doc xml:space="preserve">This function takes the square root of @a, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="start" c:identifier="go_quad_start">
        <doc xml:space="preserve">Initializes #GOQuad arithmetic. Any use of #GOQuad must occur between calls
to go_quad_start() and go_quad_end().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a pointer to pass to go_quad_end() when done.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="startl" c:identifier="go_quad_startl">
        <doc xml:space="preserve">Initializes #GOQuadl arithmetic. Any use of #GOQuadl must occur between calls
to go_quad_startl() and go_quad_endl().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a pointer to pass to go_quad_endl() when done.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="sub" c:identifier="go_quad_sub">
        <doc xml:space="preserve">This function subtracts @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
        </parameters>
      </function>
      <function name="subl" c:identifier="go_quad_subl">
        <doc xml:space="preserve">This function subtracts @a and @b, storing the result in @res.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">result location</doc>
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="valuel" c:identifier="go_quad_valuel" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">closest double precision value to @a.  As an exception,
this may be called outside go_quad_startl and go_quad_endl sections.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">quad-precision value</doc>
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="QuadMatrix" c:type="GOQuadMatrix">
      <field name="data" writable="1">
        <type name="Quad" c:type="GOQuad**"/>
      </field>
      <field name="m" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="n" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="back_solve" c:identifier="go_quad_matrix_back_solve">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on error.

This function solves the triangular system R*x=b.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">An upper triangular matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Result vector.</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">Input vector.</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="allow_degenerate" transfer-ownership="none">
            <doc xml:space="preserve">If %TRUE, then degenerate dimensions are ignored other
than being given a zero result.  A degenerate dimension is one whose
diagonal entry is zero.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="go_quad_matrix_copy">
        <doc xml:space="preserve">Copies B to A.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Destination matrix.</doc>
            <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="determinant" c:identifier="go_quad_matrix_determinant">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="go_quad_matrix_dump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="go_quad_matrix_dup" introspectable="0">
        <return-value>
          <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eigen_range" c:identifier="go_quad_matrix_eigen_range">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Triangular matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="emin"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Smallest absolute eigen value.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="emax"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Largest absolute eigen value.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_quad_matrix_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fwd_solve" c:identifier="go_quad_matrix_fwd_solve">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on error.

This function solves the triangular system RT*x=b.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">An upper triangular matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Result vector.</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">Input vector.</doc>
            <type name="Quad" c:type="const GOQuad*"/>
          </parameter>
          <parameter name="allow_degenerate" transfer-ownership="none">
            <doc xml:space="preserve">If %TRUE, then degenerate dimensions are ignored other
than being given a zero result.  A degenerate dimension is one whose
diagonal entry is zero.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="inverse"
              c:identifier="go_quad_matrix_inverse"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">The inverse matrix of A.  If any eigenvalues divided by the largest
eigenvalue is less than or equal to the given threshold, %NULL is returning
indicating a matrix that cannot be inverted.  (Note: this doesn't actually
use the eigenvalues of A, but of A after an orthogonal transformation.)</doc>
          <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="threshold" transfer-ownership="none">
            <doc xml:space="preserve">condition number threshold.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="multiply" c:identifier="go_quad_matrix_multiply">
        <doc xml:space="preserve">Multiplies A*B and stores the result in C.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="C" transfer-ownership="none">
            <doc xml:space="preserve">Destination matrix.</doc>
            <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pseudo_inverse"
              c:identifier="go_quad_matrix_pseudo_inverse"
              introspectable="0">
        <return-value>
          <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">An arbitrary matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="threshold" transfer-ownership="none">
            <doc xml:space="preserve">condition number threshold.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="transpose" c:identifier="go_quad_matrix_transpose">
        <doc xml:space="preserve">Transposes B into A.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Destination matrix.</doc>
            <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
          </instance-parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <function name="back_solvel" c:identifier="go_quad_matrix_back_solvel">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="R" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="allow_degenerate" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="copyl" c:identifier="go_quad_matrix_copyl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="determinantl" c:identifier="go_quad_matrix_determinantl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="dumpl" c:identifier="go_quad_matrix_dumpl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="dupl"
                c:identifier="go_quad_matrix_dupl"
                introspectable="0">
        <return-value>
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="eigen_rangel"
                c:identifier="go_quad_matrix_eigen_rangel"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="emin" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="emax" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
        </parameters>
      </function>
      <function name="freel" c:identifier="go_quad_matrix_freel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="fwd_solvel" c:identifier="go_quad_matrix_fwd_solvel">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="R" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Quadl" c:type="const GOQuadl*"/>
          </parameter>
          <parameter name="allow_degenerate" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="inversel"
                c:identifier="go_quad_matrix_inversel"
                introspectable="0">
        <return-value>
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="threshold" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="multiplyl" c:identifier="go_quad_matrix_multiplyl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="C" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
          </parameter>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="go_quad_matrix_new"
                introspectable="0">
        <return-value>
          <doc xml:space="preserve">a new zero matrix.</doc>
          <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="newl"
                c:identifier="go_quad_matrix_newl"
                introspectable="0">
        <return-value>
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </return-value>
        <parameters>
          <parameter name="m" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="pseudo_inversel"
                c:identifier="go_quad_matrix_pseudo_inversel"
                introspectable="0">
        <return-value>
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
          <parameter name="threshold" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="transposel" c:identifier="go_quad_matrix_transposel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="QuadMatrixl" c:type="GOQuadMatrixl">
      <field name="data" writable="1">
        <type name="Quadl" c:type="GOQuadl**"/>
      </field>
      <field name="m" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="n" writable="1">
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="QuadQR" c:type="GOQuadQR" disguised="1">
      <method name="determinant" c:identifier="go_quad_qr_determinant">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qr" transfer-ownership="none">
            <type name="QuadQR" c:type="const GOQuadQR*"/>
          </instance-parameter>
          <parameter name="det" transfer-ownership="none">
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="go_quad_qr_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qr" transfer-ownership="none">
            <type name="QuadQR" c:type="GOQuadQR*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_degenerate"
              c:identifier="go_quad_qr_mark_degenerate"
              introspectable="0">
        <doc xml:space="preserve">Marks dimension i of the qr decomposition as degenerate.  In practice
this means setting the i-th eigenvalue of R to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qr" transfer-ownership="none">
            <doc xml:space="preserve">A QR decomposition.</doc>
            <type name="QuadQR" c:type="GOQuadQR*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a dimension</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="multiply_qt" c:identifier="go_quad_qr_multiply_qt">
        <doc xml:space="preserve">Replaces @x by Q^t * x</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qr" transfer-ownership="none">
            <doc xml:space="preserve">A QR decomposition.</doc>
            <type name="QuadQR" c:type="const GOQuadQR*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a vector.</doc>
            <type name="Quad" c:type="GOQuad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="r" c:identifier="go_quad_qr_r">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the small R from the decomposition, i.e., a square matrix
of size n.  To get the large R, if needed, add m-n zero rows.</doc>
          <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="qr" transfer-ownership="none">
            <doc xml:space="preserve">A QR decomposition.</doc>
            <type name="QuadQR" c:type="const GOQuadQR*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="determinantl" c:identifier="go_quad_qr_determinantl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qr" transfer-ownership="none">
            <type name="QuadQRl" c:type="const GOQuadQRl*"/>
          </parameter>
          <parameter name="det" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="freel" c:identifier="go_quad_qr_freel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qr" transfer-ownership="none">
            <type name="QuadQRl" c:type="GOQuadQRl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="mark_degeneratel"
                c:identifier="go_quad_qr_mark_degeneratel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qr" transfer-ownership="none">
            <type name="QuadQRl" c:type="GOQuadQRl*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="multiply_qtl" c:identifier="go_quad_qr_multiply_qtl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qr" transfer-ownership="none">
            <type name="QuadQRl" c:type="const GOQuadQRl*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="Quadl" c:type="GOQuadl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="go_quad_qr_new" introspectable="0">
        <doc xml:space="preserve">QR decomposition of a matrix using Householder matrices.

A (input) is an m-times-n matrix.  A[0...m-1][0..n-1]
If qAT is TRUE, this parameter is transposed.

V is a pre-allocated output m-times-n matrix.  V will contrain
n vectors of different lengths: n, n-1, ..., 1.  These are the
Householder vectors (or null for the degenerate case).  The
matrix Q of size m-times-m is implied from V.

R is a matrix of size n-times-n.  (To get the m-times-n version
of R, simply add m-n null rows.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOQuadQR.</doc>
          <type name="QuadQR" c:type="GOQuadQR*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">Source matrix.</doc>
            <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="newl" c:identifier="go_quad_qr_newl" introspectable="0">
        <return-value>
          <type name="QuadQRl" c:type="GOQuadQRl*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="rl" c:identifier="go_quad_qr_rl">
        <return-value transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </return-value>
        <parameters>
          <parameter name="qr" transfer-ownership="none">
            <type name="QuadQRl" c:type="const GOQuadQRl*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="QuadQRl" c:type="GOQuadQRl" disguised="1">
    </record>
    <record name="Quadl" c:type="GOQuadl">
      <field name="h" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="l" writable="1">
        <type name="glong" c:type="long"/>
      </field>
    </record>
    <constant name="R_OK" value="4" c:type="GO_R_OK">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Rect" c:type="GORect">
      <field name="top" writable="1">
        <doc xml:space="preserve">top.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
      <field name="left" writable="1">
        <doc xml:space="preserve">left.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
      <field name="bottom" writable="1">
        <doc xml:space="preserve">bottom.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
      <field name="right" writable="1">
        <doc xml:space="preserve">right.</doc>
        <type name="Distance" c:type="GODistance"/>
      </field>
    </record>
    <record name="Regexp" c:type="GORegexp">
      <field name="re_nsub" writable="1">
        <doc xml:space="preserve">number of capturing subpatterns.</doc>
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="nosub" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ppcre" readable="0" private="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <function name="quote" c:identifier="go_regexp_quote">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="quote1" c:identifier="go_regexp_quote1">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Regmatch" c:type="GORegmatch">
      <field name="rm_so" writable="1">
        <doc xml:space="preserve">start offset.</doc>
        <type name="Regoff" c:type="GORegoff"/>
      </field>
      <field name="rm_eo" writable="1">
        <doc xml:space="preserve">end offset.</doc>
        <type name="Regoff" c:type="GORegoff"/>
      </field>
    </record>
    <callback name="RegressionFunction" c:type="GORegressionFunction">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RegressionFunctionl"
              c:type="GORegressionFunctionl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="RegressionResult" c:type="GORegressionResult">
      <member name="ok" value="0" c:identifier="GO_REG_ok">
        <doc xml:space="preserve">success.</doc>
      </member>
      <member name="invalid_dimensions"
              value="1"
              c:identifier="GO_REG_invalid_dimensions">
        <doc xml:space="preserve">invalid dimensions.</doc>
      </member>
      <member name="invalid_data" value="2" c:identifier="GO_REG_invalid_data">
        <doc xml:space="preserve">invalid data:</doc>
      </member>
      <member name="not_enough_data"
              value="3"
              c:identifier="GO_REG_not_enough_data">
        <doc xml:space="preserve">not enough data.</doc>
      </member>
      <member name="near_singular_good"
              value="4"
              c:identifier="GO_REG_near_singular_good">
        <doc xml:space="preserve">probably good result.</doc>
      </member>
      <member name="near_singular_bad"
              value="5"
              c:identifier="GO_REG_near_singular_bad">
        <doc xml:space="preserve">probably bad result.</doc>
      </member>
      <member name="singular" value="6" c:identifier="GO_REG_singular">
        <doc xml:space="preserve">singularity found.</doc>
      </member>
    </enumeration>
    <enumeration name="ResourceType"
                 glib:type-name="GoResourceType"
                 glib:get-type="go_resource_type_get_type"
                 c:type="GoResourceType">
      <member name="native"
              value="0"
              c:identifier="GO_RESOURCE_NATIVE"
              glib:nick="native">
        <doc xml:space="preserve">in goffice code resource.</doc>
      </member>
      <member name="rw" value="2" c:identifier="GO_RESOURCE_RW" glib:nick="rw">
        <doc xml:space="preserve">on disk resource which can be overwritten.</doc>
      </member>
      <member name="ro" value="1" c:identifier="GO_RESOURCE_RO" glib:nick="ro">
        <doc xml:space="preserve">read only on disk resource.</doc>
      </member>
      <member name="child"
              value="3"
              c:identifier="GO_RESOURCE_CHILD"
              glib:nick="child">
        <doc xml:space="preserve">child of another resource.</doc>
      </member>
      <member name="external"
              value="4"
              c:identifier="GO_RESOURCE_EXTERNAL"
              glib:nick="external">
        <doc xml:space="preserve">resource from a data file.</doc>
      </member>
      <member name="invalid"
              value="6"
              c:identifier="GO_RESOURCE_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve">invalid resource.</doc>
      </member>
    </enumeration>
    <class name="RotationSel"
           c:symbol-prefix="rotation_sel"
           c:type="GORotationSel"
           parent="Gtk.Grid"
           glib:type-name="GORotationSel"
           glib:get-type="go_rotation_sel_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_rotation_sel_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_full" c:identifier="go_rotation_sel_new_full">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_rotation" c:identifier="go_rotation_sel_get_rotation">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="RotationSel" c:type="GORotationSel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_rotation" c:identifier="go_rotation_sel_set_rotation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rs" transfer-ownership="none">
            <type name="RotationSel" c:type="GORotationSel*"/>
          </instance-parameter>
          <parameter name="degrees" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="rotation-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <constant name="SUBSCRIPT_RISE" value="-5000" c:type="GO_SUBSCRIPT_RISE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SUPERSCRIPT_RISE"
              value="5000"
              c:type="GO_SUPERSCRIPT_RISE">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="SearchReplace"
           c:symbol-prefix="search_replace"
           c:type="GOSearchReplace"
           parent="GObject.Object"
           glib:type-name="GOSearchReplace"
           glib:get-type="go_search_replace_get_type"
           glib:type-struct="SearchReplaceClass">
      <function name="error_quark"
                c:identifier="go_search_replace_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="string" c:identifier="go_search_replace_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sr" transfer-ownership="none">
            <type name="SearchReplace" c:type="GOSearchReplace*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify" c:identifier="go_search_replace_verify" throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if  search-and-replace data is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sr" transfer-ownership="none">
            <doc xml:space="preserve">Search-and-Replace info to be checked</doc>
            <type name="SearchReplace" c:type="GOSearchReplace*"/>
          </instance-parameter>
          <parameter name="repl" transfer-ownership="none">
            <doc xml:space="preserve">Check replacement part too.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="ignore-case" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-regexp" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="match-words" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="preserve-case" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="replace-text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="search-text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="search_text">
        <doc xml:space="preserve">string to replace.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="replace_text">
        <doc xml:space="preserve">string to use as replacement/</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="comp_search">
        <doc xml:space="preserve">#GORegexp</doc>
        <type name="Regexp" c:type="GORegexp*"/>
      </field>
      <field name="is_regexp">
        <doc xml:space="preserve">search text is a regular expression.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ignore_case">
        <doc xml:space="preserve">consider "a" and "A" the same.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="preserve_case">
        <doc xml:space="preserve">like Emacs' case-replace.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="match_words">
        <doc xml:space="preserve">like grep -w.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="plain_replace" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="SearchReplaceClass"
            c:type="GOSearchReplaceClass"
            glib:is-gtype-struct-for="SearchReplace">
      <field name="g_object_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Selector"
           c:symbol-prefix="selector"
           c:type="GOSelector"
           parent="Gtk.Box"
           glib:type-name="GOSelector"
           glib:get-type="go_selector_get_type"
           glib:type-struct="SelectorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="go_selector_new">
        <doc xml:space="preserve">Creates a new selector, using @palette. Selector button swatch will use
swatch render function of @palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="palette" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPalette</doc>
            <type name="Palette" c:type="GOPalette*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_color"
                   c:identifier="go_selector_new_color"
                   version="0.9.6">
        <doc xml:space="preserve">Creates a new color selector, with @initial_color selected.
Palette will contain an automatic button, which can be used to
select @default_color. This widget supports color drag and drop.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="initial_color" transfer-ownership="none">
            <doc xml:space="preserve">initially selected color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="default_color" transfer-ownership="none">
            <doc xml:space="preserve">automatic color</doc>
            <type name="Color" c:type="GOColor"/>
          </parameter>
          <parameter name="color_group" transfer-ownership="none">
            <doc xml:space="preserve">a #GOColorGroup name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gradient"
                   c:identifier="go_selector_new_gradient"
                   version="0.9.6">
        <doc xml:space="preserve">Creates a new gradient selector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="initial_direction" transfer-ownership="none">
            <doc xml:space="preserve">initially selected direction</doc>
            <type name="GradientDirection" c:type="GOGradientDirection"/>
          </parameter>
          <parameter name="default_direction" transfer-ownership="none">
            <doc xml:space="preserve">automatic gradient direction</doc>
            <type name="GradientDirection" c:type="GOGradientDirection"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_line_dash"
                   c:identifier="go_selector_new_line_dash"
                   version="0.9.6">
        <doc xml:space="preserve">Creates a new line type selector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="initial_type" transfer-ownership="none">
            <doc xml:space="preserve">line type initially selected</doc>
            <type name="LineDashType" c:type="GOLineDashType"/>
          </parameter>
          <parameter name="default_type" transfer-ownership="none">
            <doc xml:space="preserve">automatic line type</doc>
            <type name="LineDashType" c:type="GOLineDashType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="activate" c:identifier="go_selector_activate">
        <doc xml:space="preserve">Updates slector swatch and emits an "activate" signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active" c:identifier="go_selector_get_active">
        <doc xml:space="preserve">Retrieves current selection index, and set @is_auto to TRUE if
current selection was set by clicking on automatic palette item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current index.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
          <parameter name="is_auto" transfer-ownership="none">
            <doc xml:space="preserve">boolean</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_data" c:identifier="go_selector_get_user_data">
        <doc xml:space="preserve">A convenience function to access user_data of selector palette.
(See @go_palette_get_user_data).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to palette user_data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active" c:identifier="go_selector_set_active">
        <doc xml:space="preserve">Sets current selection index, and emits "activate" signal if
selection is actually changed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if selection is actually changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">new index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_dnd"
              c:identifier="go_selector_setup_dnd"
              introspectable="0">
        <doc xml:space="preserve">Setups drag and drop for @selector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
          <parameter name="dnd_target" transfer-ownership="none">
            <doc xml:space="preserve">drag and drop target type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="dnd_length" transfer-ownership="none">
            <doc xml:space="preserve">length of data transfered on drop</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="data_get"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve">a user provided data_get method</doc>
            <type name="SelectorDndDataGet" c:type="GOSelectorDndDataGet"/>
          </parameter>
          <parameter name="data_received"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve">a user provided data_received method</doc>
            <type name="SelectorDndDataReceived"
                  c:type="GOSelectorDndDataReceived"/>
          </parameter>
          <parameter name="fill_icon"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve">a user function for dnd icon creation</doc>
            <type name="SelectorDndFillIcon" c:type="GOSelectorDndFillIcon"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_swatch" c:identifier="go_selector_update_swatch">
        <doc xml:space="preserve">Requests a swatch update.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">a #GOSelector</doc>
            <type name="Selector" c:type="GOSelector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="priv">
        <type name="SelectorPrivate" c:type="GOSelectorPrivate*"/>
      </field>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SelectorClass"
            c:type="GOSelectorClass"
            glib:is-gtype-struct-for="Selector">
      <field name="parent_class">
        <doc xml:space="preserve">parent class.</doc>
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="selector" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="SelectorDndDataGet"
              c:type="GOSelectorDndDataGet"
              introspectable="0">
      <return-value>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SelectorDndDataReceived"
              c:type="GOSelectorDndDataReceived">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="guchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SelectorDndFillIcon" c:type="GOSelectorDndFillIcon">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SelectorPrivate" c:type="GOSelectorPrivate" disguised="1">
    </record>
    <enumeration name="Severity" c:type="GOSeverity">
      <member name="warning" value="1" c:identifier="GO_WARNING">
        <doc xml:space="preserve">warning.</doc>
      </member>
      <member name="error" value="2" c:identifier="GO_ERROR">
        <doc xml:space="preserve">error.</doc>
      </member>
    </enumeration>
    <enumeration name="SnapshotType" c:type="GOSnapshotType">
      <member name="none" value="0" c:identifier="GO_SNAPSHOT_NONE">
        <doc xml:space="preserve">no snapshot.</doc>
      </member>
      <member name="svg" value="1" c:identifier="GO_SNAPSHOT_SVG">
        <doc xml:space="preserve">svg snapshot.</doc>
      </member>
      <member name="png" value="2" c:identifier="GO_SNAPSHOT_PNG">
        <doc xml:space="preserve">png snapshot.</doc>
      </member>
    </enumeration>
    <class name="Spectre"
           c:symbol-prefix="spectre"
           c:type="GOSpectre"
           parent="Image"
           glib:type-name="GOSpectre"
           glib:get-type="go_spectre_get_type">
      <constructor name="new_from_data"
                   c:identifier="go_spectre_new_from_data"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="go_spectre_new_from_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="String"
            c:type="GOString"
            glib:type-name="GOString"
            glib:get-type="go_string_get_type"
            c:symbol-prefix="string">
      <doc xml:space="preserve">GOString is a structure containing a string.</doc>
      <field name="str" writable="1">
        <doc xml:space="preserve">the embeded UTF-8 string</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <constructor name="new" c:identifier="go_string_new">
        <doc xml:space="preserve">GOString duplicates @str if no string already exists.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a reference to a #GOString containing @str, or %NULL if @str is NULL</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string (optionally %NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_len" c:identifier="go_string_new_len">
        <doc xml:space="preserve">GOString duplicates @str if no string already exists.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a reference to a #GOString containing @str, or %NULL if @str is NULL</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string (optionally %NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">guint32</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_nocopy" c:identifier="go_string_new_nocopy">
        <doc xml:space="preserve">GOString takes ownership of @str</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a reference to a #GOString containing @str</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_nocopy_len"
                   c:identifier="go_string_new_nocopy_len">
        <doc xml:space="preserve">GOString takes ownership of @str</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a reference to a #GOString containing @str</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string (optionally %NULL)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">guint32</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_rich" c:identifier="go_string_new_rich">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string.</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="byte_len" transfer-ownership="none">
            <doc xml:space="preserve">&lt; 0 will call strlen.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL list, GOString steals the ref.</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
          <parameter name="phonetic" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL list of phonetic extensions, GOString steals the ref.</doc>
            <type name="StringPhonetic" c:type="GOStringPhonetic*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_rich_nocopy"
                   c:identifier="go_string_new_rich_nocopy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string.</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">string; GOString takes ownership</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="byte_len" transfer-ownership="none">
            <doc xml:space="preserve">&lt; 0 will call strlen.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL list, GOString steals the ref.</doc>
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </parameter>
          <parameter name="phonetic" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL list of phonetic extensions, GOString steals the ref.</doc>
            <type name="StringPhonetic" c:type="GOStringPhonetic*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_casefold" c:identifier="go_string_get_casefold">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_casefolded_collate"
              c:identifier="go_string_get_casefolded_collate">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_collation" c:identifier="go_string_get_collation">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_len" c:identifier="go_string_get_len">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_markup" c:identifier="go_string_get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phonetic"
              c:identifier="go_string_get_phonetic"
              introspectable="0">
        <doc xml:space="preserve">Warning: Not implemented, always returns NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the phonetic data.</doc>
          <type name="StringPhonetic" c:type="GOStringPhonetic*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <doc xml:space="preserve">#GOString.</doc>
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ref_count" c:identifier="go_string_get_ref_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="go_string_ref">
        <return-value transfer-ownership="full">
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="trim" c:identifier="go_string_trim">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@gstr</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
          <parameter name="internal" transfer-ownership="none">
            <doc xml:space="preserve">Trim multiple consequtive internal spaces.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="go_string_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gstr" transfer-ownership="none">
            <type name="String" c:type="GOString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="ERROR" c:identifier="go_string_ERROR">
        <doc xml:space="preserve">A convenience for g_return_val to share one error string without adding a
reference to functions that do not add references to the result</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string saying 'ERROR' but does not add a ref to it.</doc>
          <type name="String" c:type="GOString*"/>
        </return-value>
      </function>
      <function name="append_c_n" c:identifier="go_string_append_c_n">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <type name="gchar" c:type="char"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="append_gstring" c:identifier="go_string_append_gstring">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="GLib.String" c:type="const GString*"/>
          </parameter>
        </parameters>
      </function>
      <function name="cmp" c:identifier="go_string_cmp">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="gstr_a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="gstr_b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="cmp_ignorecase" c:identifier="go_string_cmp_ignorecase">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="gstr_a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="gstr_b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="equal" c:identifier="go_string_equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="gstr_a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="gstr_b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="equal_ignorecase"
                c:identifier="go_string_equal_ignorecase">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the two strings are equal when ignoring letter case.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="gstr_a" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="gstr_b" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="equal_rich" c:identifier="go_string_equal_rich">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="gstr_a" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="gstr_b" transfer-ownership="none">
            <doc xml:space="preserve">string.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="foreach_base" c:identifier="go_string_foreach_base">
        <doc xml:space="preserve">Iterates through the strings data base and apply @callback to each.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">callback</doc>
            <type name="GLib.HFunc" c:type="GHFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="hash" c:identifier="go_string_hash">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="gstr" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="replace" c:identifier="go_string_replace">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="oldlen" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="txt" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="newlen" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="StringPhonetic" c:type="GOStringPhonetic" disguised="1">
    </record>
    <class name="Style"
           c:symbol-prefix="style"
           c:type="GOStyle"
           parent="GObject.Object"
           glib:type-name="GOStyle"
           glib:get-type="go_style_get_type">
      <implements name="Persist"/>
      <constructor name="new" c:identifier="go_style_new">
        <return-value transfer-ownership="full">
          <type name="Style" c:type="GOStyle*"/>
        </return-value>
      </constructor>
      <method name="apply_theme" c:identifier="go_style_apply_theme">
        <doc xml:space="preserve">Merge the attributes from @src onto the elements of @dst that were not user
assigned (is_auto)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
          <parameter name="fields" transfer-ownership="none">
            <doc xml:space="preserve">the fields to which the copy should be limited</doc>
            <type name="StyleFlag" c:type="GOStyleFlag"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign" c:identifier="go_style_assign">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dst" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_auto" c:identifier="go_style_clear_auto">
        <doc xml:space="preserve">Sets all auto fields in @style to %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="go_style_dup">
        <doc xml:space="preserve">Duplicates @style.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOStyle</doc>
          <type name="Style" c:type="GOStyle*"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">a source #GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="go_style_fill">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="preserve" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_auto" c:identifier="go_style_force_auto">
        <doc xml:space="preserve">Sets all auto fields in @style to %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_editor" c:identifier="go_style_get_editor">
        <doc xml:space="preserve">Builds the widget used to edit the style.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the style editor</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="default_style" transfer-ownership="none">
            <doc xml:space="preserve">the style used as default</doc>
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOCmdContext</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
          <parameter name="object_with_style" transfer-ownership="none">
            <doc xml:space="preserve">the object owning the style</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_marker" c:identifier="go_style_get_marker">
        <doc xml:space="preserve">Accessor for @style::marker, without referencing it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the style #GOMarker.</doc>
          <type name="Marker" c:type="GOMarker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_auto" c:identifier="go_style_is_auto">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_different_size"
              c:identifier="go_style_is_different_size">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_fill_visible" c:identifier="go_style_is_fill_visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_line_visible" c:identifier="go_style_is_line_visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_marker_visible"
              c:identifier="go_style_is_marker_visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_outline_visible"
              c:identifier="go_style_is_outline_visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="populate_editor" c:identifier="go_style_populate_editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="editor" transfer-ownership="none">
            <type name="Editor" c:type="GOEditor*"/>
          </parameter>
          <parameter name="default_style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
          <parameter name="object_with_style" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="watch_for_external_change"
                     transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cairo_line" c:identifier="go_style_set_cairo_line">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fill_brightness"
              c:identifier="go_style_set_fill_brightness">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="brightness" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font" c:identifier="go_style_set_font">
        <doc xml:space="preserve">Set text font used by the style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="full">
            <doc xml:space="preserve">new font</doc>
            <type name="Font" c:type="GOFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_desc" c:identifier="go_style_set_font_desc">
        <doc xml:space="preserve">Set text font used by the style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="full">
            <doc xml:space="preserve">new font description to use</doc>
            <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_marker" c:identifier="go_style_set_marker">
        <doc xml:space="preserve">Absorb a reference to @marker and assign it to @style.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="marker" transfer-ownership="full">
            <doc xml:space="preserve">#GOMarker</doc>
            <type name="Marker" c:type="GOMarker*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text_angle" c:identifier="go_style_set_text_angle">
        <doc xml:space="preserve">Set text rotation angle in degrees. Valid values are in the range
[-180.0° , 180.0°].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </instance-parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve">text rotation in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="interesting_fields">
        <type name="StyleFlag" c:type="GOStyleFlag"/>
      </field>
      <field name="disable_theming">
        <type name="StyleFlag" c:type="GOStyleFlag"/>
      </field>
      <field name="line">
        <type name="StyleLine" c:type="GOStyleLine"/>
      </field>
      <record name="fill" c:type="fill">
        <field name="type" writable="1">
          <type name="StyleFill" c:type="GOStyleFill"/>
        </field>
        <field name="auto_type" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="auto_fore" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="auto_back" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="auto_pattern" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="invert_if_negative" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="pattern" writable="1">
          <type name="Pattern" c:type="GOPattern"/>
        </field>
        <field name="gradient" writable="1">
          <type name="gpointer" c:type="_GOStyleGradient"/>
        </field>
        <field name="image" writable="1">
          <type name="gpointer" c:type="_GOStyleImage"/>
        </field>
      </record>
      <field name="marker">
        <type name="StyleMark" c:type="GOStyleMark"/>
      </field>
      <record name="font" c:type="font">
        <field name="color" writable="1">
          <type name="Color" c:type="GOColor"/>
        </field>
        <field name="font" writable="1">
          <type name="Font" c:type="GOFont*"/>
        </field>
        <field name="auto_scale" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="auto_color" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="auto_font" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
      </record>
      <record name="text_layout" c:type="text_layout">
        <field name="angle" writable="1">
          <type name="gdouble" c:type="double"/>
        </field>
        <field name="auto_angle" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
      </record>
    </class>
    <enumeration name="StyleFill" c:type="GOStyleFill">
      <member name="none" value="0" c:identifier="GO_STYLE_FILL_NONE">
        <doc xml:space="preserve">no filling.</doc>
      </member>
      <member name="pattern" value="1" c:identifier="GO_STYLE_FILL_PATTERN">
        <doc xml:space="preserve">fill with pattern.</doc>
      </member>
      <member name="gradient" value="2" c:identifier="GO_STYLE_FILL_GRADIENT">
        <doc xml:space="preserve">fill with a gradient.</doc>
      </member>
      <member name="image" value="3" c:identifier="GO_STYLE_FILL_IMAGE">
        <doc xml:space="preserve">fill with an image.</doc>
      </member>
    </enumeration>
    <bitfield name="StyleFlag" c:type="GOStyleFlag">
      <doc xml:space="preserve">Gives the meaningful fields in @GOStyle. Anyw combination can be used, except
that @GO_STYLE_OUTLINE and @GO_STYLE_OUTLINE should never coexist.</doc>
      <member name="outline" value="1" c:identifier="GO_STYLE_OUTLINE">
        <doc xml:space="preserve">outline.</doc>
      </member>
      <member name="fill" value="2" c:identifier="GO_STYLE_FILL">
        <doc xml:space="preserve">fill.</doc>
      </member>
      <member name="line" value="4" c:identifier="GO_STYLE_LINE">
        <doc xml:space="preserve">line.</doc>
      </member>
      <member name="marker" value="8" c:identifier="GO_STYLE_MARKER">
        <doc xml:space="preserve">marker.</doc>
      </member>
      <member name="font" value="16" c:identifier="GO_STYLE_FONT">
        <doc xml:space="preserve">font.</doc>
      </member>
      <member name="text_layout"
              value="32"
              c:identifier="GO_STYLE_TEXT_LAYOUT">
        <doc xml:space="preserve">text orientaiton.</doc>
      </member>
      <member name="interpolation"
              value="64"
              c:identifier="GO_STYLE_INTERPOLATION">
        <doc xml:space="preserve">curve interpolation.</doc>
      </member>
      <member name="marker_no_color"
              value="128"
              c:identifier="GO_STYLE_MARKER_NO_COLOR">
        <doc xml:space="preserve">marker with no color.</doc>
      </member>
      <member name="all" value="31" c:identifier="GO_STYLE_ALL">
        <doc xml:space="preserve">all elements</doc>
      </member>
    </bitfield>
    <record name="StyleLine" c:type="GOStyleLine">
      <field name="width" writable="1">
        <doc xml:space="preserve">line width:
&lt;0 == no line,
=0 == hairline : unscaled, minimum useful (can be bigger than visible) size.
&gt;0 in pts.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="dash_type" writable="1">
        <doc xml:space="preserve">#GOLineDashType.</doc>
        <type name="LineDashType" c:type="GOLineDashType"/>
      </field>
      <field name="auto_dash" writable="1">
        <doc xml:space="preserve">automatic dash type.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="color" writable="1">
        <doc xml:space="preserve">color is used as background for compatibility
(pattern == 0 means filled with background color).</doc>
        <type name="Color" c:type="GOColor"/>
      </field>
      <field name="fore" writable="1">
        <doc xml:space="preserve">second color used for patterned lines.</doc>
        <type name="Color" c:type="GOColor"/>
      </field>
      <field name="auto_color" writable="1">
        <doc xml:space="preserve">color is automatic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_fore" writable="1">
        <doc xml:space="preserve">fore is automatic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_width" writable="1">
        <doc xml:space="preserve">automatic width</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="pattern" writable="1">
        <doc xml:space="preserve">pattern.</doc>
        <type name="PatternType" c:type="GOPatternType"/>
      </field>
      <field name="cap" introspectable="0" writable="1">
        <doc xml:space="preserve">cap style.</doc>
        <type c:type="cairo_line_cap_t"/>
      </field>
      <field name="join" introspectable="0" writable="1">
        <doc xml:space="preserve">join style.</doc>
        <type c:type="cairo_line_join_t"/>
      </field>
      <field name="miter_limit" writable="1">
        <doc xml:space="preserve">mitter limit.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="StyleMark" c:type="GOStyleMark">
      <field name="mark" writable="1">
        <doc xml:space="preserve">the used #GOMarker.</doc>
        <type name="Marker" c:type="GOMarker*"/>
      </field>
      <field name="auto_shape" writable="1">
        <doc xml:space="preserve">automatic @marc.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_outline_color" writable="1">
        <doc xml:space="preserve">automatic outline color.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_fill_color" writable="1">
        <doc xml:space="preserve">automatic fill color.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <interface name="StyledObject"
               c:symbol-prefix="styled_object"
               c:type="GOStyledObject"
               glib:type-name="GOStyledObject"
               glib:get-type="go_styled_object_get_type">
      <method name="apply_theme" c:identifier="go_styled_object_apply_theme">
        <doc xml:space="preserve">Apply appropriate theme @style if meaningful, i.e. properties with
auto flag set to %TRUE should be changed to default theme value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyle that will be themed</doc>
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="go_styled_object_fill">
        <doc xml:space="preserve">fills the current path according to the
item style and canvas scale.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="so" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="preserve" transfer-ownership="none">
            <doc xml:space="preserve">whether the current path should be preserved</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auto_style"
              c:identifier="go_styled_object_get_auto_style">
        <doc xml:space="preserve">This function returns a new style that is initialized with the auto values for @gso.
Caller is responsible for the result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GOStyle</doc>
          <type name="Style" c:type="GOStyle*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document" c:identifier="go_styled_object_get_document">
        <doc xml:space="preserve">A #GODoc is necessary to store images. If no GODoc is associated with the
object, image filling will not be supported.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">he #GODoc associated with the object if any.</doc>
          <type name="Doc" c:type="GODoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="go_styled_object_get_style">
        <doc xml:space="preserve">Simply an accessor function that returns @gso-&gt;style, without referencing it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the styled object's #GOStyle</doc>
          <type name="Style" c:type="GOStyle*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cairo_line"
              c:identifier="go_styled_object_set_cairo_line">
        <doc xml:space="preserve">Prepares the cairo context @cr to draw a line according to the
item style and canvas scale.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the line is not invisible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="so" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="go_styled_object_set_style">
        <doc xml:space="preserve">Sets a new style for @gso, and emits "style-changed" signal. This function
does not take ownership of @style.

The best way to change the style is to set the "style" property.

This function will fail if the new style and the previous style are the same.
In that case, the function will always return false:
&lt;informalexample&gt;
 &lt;programlisting&gt;
     style = go_styled_object_get_style (gso);
     style-&gt;line.width = 2;
     size_changed = go_styled_object_set_style (gso, style);
 &lt;/programlisting&gt;
&lt;/informalexample&gt;
In this sample, the call to go_styled_object_set_style() is just useless. You
need to check yourself if you really change the size, call
go_styled_object_style_changed() to trigger the "style-changed" event.
So the following code is much better:
&lt;informalexample&gt;
 &lt;programlisting&gt;
     style = go_styled_object_get_style (gso);
     if (style-&gt;line.width != 2.) {
      style-&gt;line.width = 2;
      go_styled_object_style_changed (gso);
      size_changed = true;
     } else
      size_changed = FALSE;
 &lt;/programlisting&gt;
&lt;/informalexample&gt;
or even better:
&lt;informalexample&gt;
 &lt;programlisting&gt;
     style = go_style_dup (go_styled_object_get_style (gso));
     style-&gt;line.width = 2;
     size_changed = go_styled_object_set_style (gso, style);
     g_object_unref (style);
 &lt;/programlisting&gt;
&lt;/informalexample&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if new style may lead to change of object size, which
happens when changing font size for example.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyle</doc>
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="style_changed"
              c:identifier="go_styled_object_style_changed">
        <doc xml:space="preserve">Called when the style changed. Might emit a signal if meaningful.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gso" transfer-ownership="none">
            <doc xml:space="preserve">a #GOStyledObject</doc>
            <type name="StyledObject" c:type="GOStyledObject*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="StyledObjectClass" c:type="GOStyledObjectClass">
      <field name="base" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_style">
        <callback name="set_style">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_style" introspectable="0">
        <callback name="get_style" introspectable="0">
          <return-value>
            <type name="Style" c:type="GOStyle*"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_auto_style" introspectable="0">
        <callback name="get_auto_style" introspectable="0">
          <return-value>
            <type name="Style" c:type="GOStyle*"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="style_changed">
        <callback name="style_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="apply_theme">
        <callback name="apply_theme">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_document" introspectable="0">
        <callback name="get_document" introspectable="0">
          <return-value>
            <type name="Doc" c:type="GODoc*"/>
          </return-value>
          <parameters>
            <parameter name="gso" transfer-ownership="none">
              <type name="StyledObject" c:type="GOStyledObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Svg"
           c:symbol-prefix="svg"
           c:type="GOSvg"
           parent="Image"
           glib:type-name="GOSvg"
           glib:get-type="go_svg_get_type">
      <constructor name="new_from_data"
                   c:identifier="go_svg_new_from_data"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="go_svg_new_from_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Image" c:type="GOImage*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <callback name="TranslateFunc" c:type="GOTranslateFunc">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="func_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="UN_PER_CM" value="0" c:type="GO_UN_PER_CM">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UN_PER_EMU" value="0" c:type="GO_UN_PER_EMU">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UN_PER_IN" value="228600000" c:type="GO_UN_PER_IN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UN_PER_PT" value="0" c:type="GO_UN_PER_PT">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Undo"
           c:symbol-prefix="undo"
           c:type="GOUndo"
           parent="GObject.Object"
           glib:type-name="GOUndo"
           glib:get-type="go_undo_get_type"
           glib:type-struct="UndoClass">
      <virtual-method name="undo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="u" transfer-ownership="none">
            <type name="Undo" c:type="GOUndo*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="combine" c:identifier="go_undo_combine">
        <doc xml:space="preserve">This function takes ownership of the argument references and gives ownership
of the result to the caller.  Either argument may be NULL in which case the
other is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the combination of two undo operations.</doc>
          <type name="Undo" c:type="GOUndo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="full">
            <doc xml:space="preserve">optional first undo operation</doc>
            <type name="Undo" c:type="GOUndo*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="full">
            <doc xml:space="preserve">optional last undo operation</doc>
            <type name="Undo" c:type="GOUndo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="undo" c:identifier="go_undo_undo">
        <doc xml:space="preserve">Execute the stored undo operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">undo object</doc>
            <type name="Undo" c:type="GOUndo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undo_with_data" c:identifier="go_undo_undo_with_data">
        <doc xml:space="preserve">Execute the stored undo operation.  @data is supplied to the undo
operation as an extra argument.  It is meant not to affect the undo
operation in any way, but rather supply a context through which
progress and errors can be reported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">undo object</doc>
            <type name="Undo" c:type="GOUndo*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <class name="UndoBinary"
           c:symbol-prefix="undo_binary"
           c:type="GOUndoBinary"
           parent="Undo"
           glib:type-name="GOUndoBinary"
           glib:get-type="go_undo_binary_get_type"
           glib:type-struct="UndoBinaryClass">
      <constructor name="new" c:identifier="go_undo_binary_new">
        <doc xml:space="preserve">This function creates a new undo object for undo operations of two
arguments.  (In addition, an undo-time argument is added for context.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new undo object.</doc>
          <type name="Undo" c:type="GOUndo*"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">first argument for undo operation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">second argument for undo operation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="undo" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">function to call with arguments @a and @b for undo.</doc>
            <type name="UndoBinaryFunc" c:type="GOUndoBinaryFunc"/>
          </parameter>
          <parameter name="fa" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">optional function to free @a.</doc>
            <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
          </parameter>
          <parameter name="fb" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">optional function to free @b.</doc>
            <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="base">
        <type name="Undo" c:type="GOUndo"/>
      </field>
      <field name="a">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="b">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="undo">
        <type name="UndoBinaryFunc" c:type="GOUndoBinaryFunc"/>
      </field>
      <field name="disposea">
        <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
      </field>
      <field name="disposeb">
        <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
      </field>
    </class>
    <record name="UndoBinaryClass"
            c:type="GOUndoBinaryClass"
            glib:is-gtype-struct-for="UndoBinary">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="UndoClass" c:type="GOUndoClass"/>
      </field>
    </record>
    <callback name="UndoBinaryFunc" c:type="GOUndoBinaryFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="UndoClass"
            c:type="GOUndoClass"
            glib:is-gtype-struct-for="Undo">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="undo">
        <callback name="undo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="u" transfer-ownership="none">
              <type name="Undo" c:type="GOUndo*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UndoGroup"
           c:symbol-prefix="undo_group"
           c:type="GOUndoGroup"
           parent="Undo"
           glib:type-name="GOUndoGroup"
           glib:get-type="go_undo_group_get_type"
           glib:type-struct="UndoGroupClass">
      <constructor name="new" c:identifier="go_undo_group_new">
        <doc xml:space="preserve">This function creates a new undo group for compounding undo objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new, empty undo group.</doc>
          <type name="UndoGroup" c:type="GOUndoGroup*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="go_undo_group_add">
        <doc xml:space="preserve">This function adds @u to @g.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="g" transfer-ownership="none">
            <doc xml:space="preserve">undo group</doc>
            <type name="UndoGroup" c:type="GOUndoGroup*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">undo object</doc>
            <type name="Undo" c:type="GOUndo*"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="Undo" c:type="GOUndo"/>
      </field>
      <field name="undos">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="UndoGroupClass"
            c:type="GOUndoGroupClass"
            glib:is-gtype-struct-for="UndoGroup">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="UndoClass" c:type="GOUndoClass"/>
      </field>
    </record>
    <class name="UndoUnary"
           c:symbol-prefix="undo_unary"
           c:type="GOUndoUnary"
           parent="Undo"
           glib:type-name="GOUndoUnary"
           glib:get-type="go_undo_unary_get_type"
           glib:type-struct="UndoUnaryClass">
      <constructor name="new" c:identifier="go_undo_unary_new">
        <doc xml:space="preserve">This function creates a new undo object for undo operations of one
argument.  (In addition, an undo-time argument is added for context.)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new undo object.</doc>
          <type name="Undo" c:type="GOUndo*"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">argument for undo operation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="undo" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">function to call with argument @a for undo.</doc>
            <type name="UndoUnaryFunc" c:type="GOUndoUnaryFunc"/>
          </parameter>
          <parameter name="fa" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">optional function to free @a.</doc>
            <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="base">
        <type name="Undo" c:type="GOUndo"/>
      </field>
      <field name="a">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="undo">
        <type name="UndoUnaryFunc" c:type="GOUndoUnaryFunc"/>
      </field>
      <field name="disposea">
        <type name="GLib.FreeFunc" c:type="GFreeFunc"/>
      </field>
    </class>
    <record name="UndoUnaryClass"
            c:type="GOUndoUnaryClass"
            glib:is-gtype-struct-for="UndoUnary">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="UndoClass" c:type="GOUndoClass"/>
      </field>
    </record>
    <callback name="UndoUnaryFunc" c:type="GOUndoUnaryFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Unit"
            c:type="GoUnit"
            glib:type-name="GoUnit"
            glib:get-type="go_unit_get_type"
            c:symbol-prefix="unit">
      <method name="convert" c:identifier="go_unit_convert">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="from" transfer-ownership="none">
            <type name="Unit" c:type="GoUnit*"/>
          </instance-parameter>
          <parameter name="to" transfer-ownership="none">
            <type name="Unit" c:type="GoUnit*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="go_unit_get_id">
        <return-value transfer-ownership="none">
          <type name="UnitId" c:type="GoUnitId"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <type name="Unit" c:type="GoUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbol" c:identifier="go_unit_get_symbol">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="unit" transfer-ownership="none">
            <type name="Unit" c:type="GoUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="define" c:identifier="go_unit_define">
        <return-value transfer-ownership="full">
          <type name="Unit" c:type="GoUnit*"/>
        </return-value>
        <parameters>
          <parameter name="symbol" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="dim" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="factor_to_SI" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <function name="get" c:identifier="go_unit_get">
        <return-value transfer-ownership="full">
          <type name="Unit" c:type="GoUnit*"/>
        </return-value>
        <parameters>
          <parameter name="Id" transfer-ownership="none">
            <type name="UnitId" c:type="GoUnitId"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_from_symbol" c:identifier="go_unit_get_from_symbol">
        <return-value transfer-ownership="full">
          <type name="Unit" c:type="GoUnit*"/>
        </return-value>
        <parameters>
          <parameter name="symbol" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="UnitId" c:type="GoUnitId">
      <member name="unknown" value="-1" c:identifier="GO_UNIT_UNKNOWN">
        <doc xml:space="preserve">unknown unit.</doc>
      </member>
      <member name="meter" value="0" c:identifier="GO_UNIT_METER">
        <doc xml:space="preserve">meter.</doc>
      </member>
      <member name="centimeter" value="1" c:identifier="GO_UNIT_CENTIMETER">
        <doc xml:space="preserve">centimeter.</doc>
      </member>
      <member name="inch" value="2" c:identifier="GO_UNIT_INCH">
        <doc xml:space="preserve">inch.</doc>
      </member>
      <member name="point" value="3" c:identifier="GO_UNIT_POINT">
        <doc xml:space="preserve">point.</doc>
      </member>
      <member name="max" value="4" c:identifier="GO_UNIT_MAX">
        <doc xml:space="preserve">first unregistered unit.</doc>
      </member>
    </enumeration>
    <class name="View"
           c:symbol-prefix="view"
           c:type="GoView"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GoView"
           glib:get-type="go_view_get_type">
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <constant name="W_OK" value="2" c:type="GO_W_OK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="X_OK" value="1" c:type="GO_X_OK">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="_CmdContextIface" c:type="_GOCmdContextIface">
      <field name="error">
        <callback name="error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error_info">
        <callback name="error_info">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="ErrorInfo" c:type="GOErrorInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error_info_list" introspectable="0">
        <callback name="error_info_list" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gcc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
            <parameter name="errs" transfer-ownership="none">
              <type name="GLib.SList" c:type="GSList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="_MetaDataIFace" c:type="_GOMetaDataIFace">
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="doc" transfer-ownership="none">
              <type name="Doc" c:type="GODoc*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="doc" transfer-ownership="none">
              <type name="Doc" c:type="GODoc*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="_StyleGradient" c:type="_GOStyleGradient">
      <field name="dir" writable="1">
        <type name="GradientDirection" c:type="GOGradientDirection"/>
      </field>
      <field name="brightness" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="auto_dir" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_brightness" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="_StyleImage" c:type="_GOStyleImage">
      <field name="type" writable="1">
        <type name="ImageType" c:type="GOImageType"/>
      </field>
      <field name="image" writable="1">
        <type name="Image" c:type="GOImage*"/>
      </field>
    </record>
    <record name="_gPlotBound" c:type="_GogPlotBound">
      <field name="minima" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="maxima" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <function name="accumulator_add_quadl"
              c:identifier="go_accumulator_add_quadl"
              moved-to="Accumulator.add_quadl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="acc" transfer-ownership="none">
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_addl"
              c:identifier="go_accumulator_addl"
              moved-to="Accumulator.addl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="acc" transfer-ownership="none">
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_clearl"
              c:identifier="go_accumulator_clearl"
              moved-to="Accumulator.clearl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="acc" transfer-ownership="none">
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_end"
              c:identifier="go_accumulator_end"
              moved-to="Accumulator.end">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_endl"
              c:identifier="go_accumulator_endl"
              moved-to="Accumulator.endl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_freel"
              c:identifier="go_accumulator_freel"
              moved-to="Accumulator.freel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="acc" transfer-ownership="none">
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="accumulator_functional"
              c:identifier="go_accumulator_functional"
              moved-to="Accumulator.functional">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="accumulator_functionall"
              c:identifier="go_accumulator_functionall"
              moved-to="Accumulator.functionall">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="accumulator_new"
              c:identifier="go_accumulator_new"
              moved-to="Accumulator.new"
              introspectable="0">
      <return-value>
        <type name="Accumulator" c:type="GOAccumulator*"/>
      </return-value>
    </function>
    <function name="accumulator_newl"
              c:identifier="go_accumulator_newl"
              moved-to="Accumulator.newl"
              introspectable="0">
      <return-value>
        <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
      </return-value>
    </function>
    <function name="accumulator_start"
              c:identifier="go_accumulator_start"
              moved-to="Accumulator.start"
              introspectable="0">
      <return-value>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="accumulator_startl"
              c:identifier="go_accumulator_startl"
              moved-to="Accumulator.startl"
              introspectable="0">
      <return-value>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="accumulator_valuel"
              c:identifier="go_accumulator_valuel"
              moved-to="Accumulator.valuel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="acc" transfer-ownership="none">
          <type name="Accumulatorl" c:type="GOAccumulatorl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_epsilon" c:identifier="go_add_epsilon">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_epsilonl"
              c:identifier="go_add_epsilonl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="arrow_type_as_str"
              c:identifier="go_arrow_type_as_str"
              moved-to="Arrow.type_as_str">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="typ" transfer-ownership="none">
          <type name="ArrowType" c:type="GOArrowType"/>
        </parameter>
      </parameters>
    </function>
    <function name="arrow_type_from_str"
              c:identifier="go_arrow_type_from_str"
              moved-to="Arrow.type_from_str">
      <return-value transfer-ownership="none">
        <type name="ArrowType" c:type="GOArrowType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ascii_strcase_equal" c:identifier="go_ascii_strcase_equal">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="v" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="v2" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="ascii_strcase_hash" c:identifier="go_ascii_strcase_hash">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="v" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="ascii_strtod" c:identifier="go_ascii_strtod">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="ascii_strtold"
              c:identifier="go_ascii_strtold"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="atan2pi" c:identifier="go_atan2pi">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="atan2pil" c:identifier="go_atan2pil" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="y" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="atanpi" c:identifier="go_atanpi">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="atanpil" c:identifier="go_atanpil" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="atk_setup_label" c:identifier="go_atk_setup_label">
      <doc xml:space="preserve">A convenience routine to setup label-for/labeled-by relationship between a
pair of widgets</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="basename_from_uri" c:identifier="go_basename_from_uri">
      <doc xml:space="preserve">Decode the final path component.  Returns as UTF-8 encoded suitable
for display.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a string that the caller is responsible for freeing.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">The uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="bezier_spline_init"
              c:identifier="go_bezier_spline_init"
              moved-to="BezierSpline.init">
      <doc xml:space="preserve">@x and @y values must be valid and finite. The returned structure
contains the x and y coordinates of all control points, including the
incoming data. the n and closed fields are just copies of the corresponding
arguments.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly created struct GOBezierSpline instance which should be
destroyed by a call to go_bezier_spline_destroy.</doc>
        <type name="BezierSpline" c:type="GOBezierSpline*"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">the x values</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">the y values</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">the number of x and y values</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="closed" transfer-ownership="none">
          <doc xml:space="preserve">whether to return a closed curve or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <class name="cArc"
           c:symbol-prefix="goc_arc"
           c:type="GocArc"
           parent="cStyledItem"
           glib:type-name="GocArc"
           glib:get-type="goc_arc_get_type">
      <implements name="StyledObject"/>
      <property name="ang1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ang2" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="end-arrow" writable="1" transfer-ownership="none">
        <type name="Arrow"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="start-arrow" writable="1" transfer-ownership="none">
        <type name="Arrow"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="xc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xr" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="yc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="yr" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="xc">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yc">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="xr">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yr">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ang1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ang2">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="type">
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_arrow">
        <type name="Arrow" c:type="GOArrow"/>
      </field>
      <field name="end_arrow">
        <type name="Arrow" c:type="GOArrow"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cCanvas"
           c:symbol-prefix="goc_canvas"
           c:type="GocCanvas"
           parent="Gtk.Layout"
           glib:type-name="GocCanvas"
           glib:get-type="goc_canvas_get_type">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <method name="c2w" c:identifier="goc_canvas_c2w">
        <doc xml:space="preserve">Retrieves the position in the widget given the canvas coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the horizontal position as a canvas coordinate.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the vertical position as a canvas coordinate.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x_" transfer-ownership="none">
            <doc xml:space="preserve">where to store the horizontal position as a widget coordinate.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y_" transfer-ownership="none">
            <doc xml:space="preserve">where to store the vertical position as a widget coordinate.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="goc_canvas_get_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cur_event" c:identifier="goc_canvas_get_cur_event">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkEvent being processed.</doc>
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction" c:identifier="goc_canvas_get_direction">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current canvas direction.</doc>
          <type name="cDirection" c:type="GocDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document" c:identifier="goc_canvas_get_document">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GODoc associated with the #GocCanvas.</doc>
          <type name="Doc" c:type="GODoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_grabbed_item"
              c:identifier="goc_canvas_get_grabbed_item">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The currently grabbed #GocItem.</doc>
          <type name="cItem" c:type="GocItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="goc_canvas_get_height">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of the widget visible region.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item_at" c:identifier="goc_canvas_get_item_at">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GocItem displayed at (@x,@y) if any.</doc>
          <type name="cItem" c:type="GocItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">vertical position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixels_per_unit"
              c:identifier="goc_canvas_get_pixels_per_unit">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">how many pixels are used for each unit when displaying the canvas.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_realized" c:identifier="goc_canvas_get_realized">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the canvas has been realized as a #GtkWidget.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="goc_canvas_get_root">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the top level item of @canvas, always a #GocGroup.</doc>
          <type name="cGroup" c:type="GocGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_position"
              c:identifier="goc_canvas_get_scroll_position">
        <doc xml:space="preserve">Retrieves the origin of the visible region of the canvas.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">where to store the horizontal position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">where to store the vertical position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="goc_canvas_get_width">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of the widget visible region.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grab_item" c:identifier="goc_canvas_grab_item">
        <doc xml:space="preserve">Grabs #GocItem. All subsequent events will be passed to #GocItem. This
function fails if an item is already grabbed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="goc_canvas_invalidate">
        <doc xml:space="preserve">Invalidates a region of the canvas. The canvas will be redrawn only if
the invalidated region intersects the visible area.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">minimum x coordinate of the invalidated region in canvas coordinates</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve">minimum y coordinate of the invalidated region in canvas coordinates</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">maximum x coordinate of the invalidated region in canvas coordinates</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">maximum y coordinate of the invalidated region in canvas coordinates</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate_region"
              c:identifier="goc_canvas_invalidate_region">
        <doc xml:space="preserve">Invalidates a region of the canvas. Only @item will be redrawn if the next
draw event is called with a cairo contest clipped to @region. Used in
gnumeric for the walking ants cursor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the item to redraw</doc>
            <type name="cItem" c:type="GocItem*"/>
          </parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">the region to redraw</doc>
            <type name="cairo.Region" c:type="cairo_region_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="goc_canvas_render">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to" c:identifier="goc_canvas_scroll_to">
        <doc xml:space="preserve">Scrolls the canvas so that the origin of the visible region is at (@x,@y).
The origin position depends on the canvas direction (see #GocDirection).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the horizontal position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the vertical position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direction" c:identifier="goc_canvas_set_direction">
        <doc xml:space="preserve">Sets the direction used by the canvas.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">#GocDirection</doc>
            <type name="cDirection" c:type="GocDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_document" c:identifier="goc_canvas_set_document">
        <doc xml:space="preserve">Associates the #GODoc with the #GocCanvas. This is needed to use images
when filling styled items (see #GocStyledItem).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">#GODoc</doc>
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixels_per_unit"
              c:identifier="goc_canvas_set_pixels_per_unit">
        <doc xml:space="preserve">Sets the scale as the number of pixels used for each unit when
displaying the canvas.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="pixels_per_unit" transfer-ownership="none">
            <doc xml:space="preserve">the new scale</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab_item" c:identifier="goc_canvas_ungrab_item">
        <doc xml:space="preserve">Ungrabs the currently grabbed #GocItem. This function fails
if no item is grabbed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="w2c" c:identifier="goc_canvas_w2c">
        <doc xml:space="preserve">Retrieves the canvas coordinates given the position in the widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="canvas" transfer-ownership="none">
            <doc xml:space="preserve">#GocCanvas</doc>
            <type name="cCanvas" c:type="GocCanvas*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the horizontal position as a widget coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">the vertical position as a widget coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x_" transfer-ownership="none">
            <doc xml:space="preserve">where to store the horizontal position as a canvas coordinate.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y_" transfer-ownership="none">
            <doc xml:space="preserve">where to store the vertical position as a canvas coordinate.</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="Gtk.Layout" c:type="GtkLayout"/>
      </field>
      <field name="scroll_x1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="scroll_y1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="pixels_per_unit">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height">
        <type name="gint" c:type="int"/>
      </field>
      <field name="root">
        <type name="cGroup" c:type="GocGroup*"/>
      </field>
      <field name="grabbed_item">
        <type name="cItem" c:type="GocItem*"/>
      </field>
      <field name="last_item">
        <type name="cItem" c:type="GocItem*"/>
      </field>
      <field name="document">
        <type name="Doc" c:type="GODoc*"/>
      </field>
      <field name="cur_event">
        <type name="Gdk.Event" c:type="GdkEvent*"/>
      </field>
      <field name="direction">
        <type name="cDirection" c:type="GocDirection"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cCircle"
           c:symbol-prefix="goc_circle"
           c:type="GocCircle"
           parent="cStyledItem"
           glib:type-name="GocCircle"
           glib:get-type="goc_circle_get_type">
      <implements name="StyledObject"/>
      <property name="radius" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="radius">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cComponent"
           c:symbol-prefix="goc_component"
           c:type="GocComponent"
           parent="cItem"
           glib:type-name="GocComponent"
           glib:get-type="goc_component_get_type">
      <method name="get_object" c:identifier="goc_component_get_object">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the embedded object.</doc>
          <type name="Component" c:type="GOComponent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="component" transfer-ownership="none">
            <doc xml:space="preserve">#GocComponent</doc>
            <type name="cComponent" c:type="GocComponent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="object" writable="1" transfer-ownership="none">
        <type name="Component"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <enumeration name="cDirection" c:type="GocDirection">
      <member name="ltr" value="0" c:identifier="GOC_DIRECTION_LTR">
        <doc xml:space="preserve">Left to right direction</doc>
      </member>
      <member name="rtl" value="1" c:identifier="GOC_DIRECTION_RTL">
        <doc xml:space="preserve">Right to left direction</doc>
      </member>
      <member name="max" value="2" c:identifier="GOC_DIRECTION_MAX">
        <doc xml:space="preserve">First invalid value</doc>
      </member>
    </enumeration>
    <class name="cEllipse"
           c:symbol-prefix="goc_ellipse"
           c:type="GocEllipse"
           parent="cStyledItem"
           glib:type-name="GocEllipse"
           glib:get-type="goc_ellipse_get_type">
      <implements name="StyledObject"/>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cGraph"
           c:symbol-prefix="goc_graph"
           c:type="GocGraph"
           parent="cItem"
           glib:type-name="GocGraph"
           glib:get-type="goc_graph_get_type">
      <property name="graph"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="gGraph"/>
      </property>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="renderer" writable="1" transfer-ownership="none">
        <type name="gRenderer"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="w">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="renderer">
        <type name="gRenderer" c:type="GogRenderer*"/>
      </field>
      <record name="coords" c:type="coords">
        <field name="timer_id" writable="1">
          <type name="guint" c:type="guint"/>
        </field>
        <field name="x" writable="1">
          <type name="gdouble" c:type="double"/>
        </field>
        <field name="y" writable="1">
          <type name="gdouble" c:type="double"/>
        </field>
      </record>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cGroup"
           c:symbol-prefix="goc_group"
           c:type="GocGroup"
           parent="cItem"
           glib:type-name="GocGroup"
           glib:get-type="goc_group_get_type"
           glib:type-struct="cGroupClass">
      <method name="add_child" c:identifier="goc_group_add_child">
        <doc xml:space="preserve">Adds @item as a new child to @parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="adjust_bounds" c:identifier="goc_group_adjust_bounds">
        <doc xml:space="preserve">Adds @group horizontal offset to @x0 and @x1, and vertical offset to @y0
and @y1. This function is called recursively so that when returning @x0,
@y0, @x1, and @y1 are absolute coordinates in canvas space,</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">first horizontal coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve">first vertical coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">last horizontal coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">last vertical coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="adjust_coords" c:identifier="goc_group_adjust_coords">
        <doc xml:space="preserve">Adds @group horizontal offset to @x0, and vertical offset to @y0.
This function is called recursively so that when returning @x0 and
@y0 are absolute coordinates in canvas space,</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">vertical coordinate</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cairo_transform"
              c:identifier="goc_group_cairo_transform"
              introspectable="0">
        <doc xml:space="preserve">Translates @cr current context so that operations start at (@x,@y), which
are @group relative coordinates, and is scaled according to the containing
#GocCanvas current scale (see goc_canvas_get_pixels_per_unit()). The
translation takes all @group ancestors into account.

This function does not call cairo_save().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">vertical coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="goc_group_clear">
        <doc xml:space="preserve">Destroys all @group children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new" c:identifier="goc_group_new">
        <doc xml:space="preserve">Creates a new #GocGroup as a child of @parent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the newly created #GocGroup.</doc>
          <type name="cGroup" c:type="GocGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_child" c:identifier="goc_group_remove_child">
        <doc xml:space="preserve">Removes @item from @parent. This function will fail if @item is not a
child of @parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_clip_path"
              c:identifier="goc_group_set_clip_path"
              introspectable="0">
        <doc xml:space="preserve">Clips the drawing inside @path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">#GocGroup</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </instance-parameter>
          <parameter name="clip_path" transfer-ownership="none">
            <doc xml:space="preserve">#GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </parameter>
          <parameter name="clip_rule" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_fill_rule_t</doc>
            <type c:type="cairo_fill_rule_t"/>
          </parameter>
        </parameters>
      </method>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="children">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="clip_path">
        <type name="Path" c:type="GOPath*"/>
      </field>
      <field name="clip_rule" introspectable="0">
        <type c:type="cairo_fill_rule_t"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="cGroupClass"
            c:type="GocGroupClass"
            glib:is-gtype-struct-for="cGroup">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="cItemClass" c:type="GocItemClass"/>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved3">
        <callback name="reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved4">
        <callback name="reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="cImage"
           c:symbol-prefix="goc_image"
           c:type="GocImage"
           parent="cItem"
           glib:type-name="GocImage"
           glib:get-type="goc_image_get_type">
      <property name="crop-bottom" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="crop-left" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="crop-right" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="crop-top" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="image" writable="1" transfer-ownership="none">
        <type name="Image"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="crop_left">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="crop_right">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="crop_top">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="crop_bottom">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="image">
        <type name="Image" c:type="GOImage*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="cIntArray"
            c:type="GocIntArray"
            version="0.8.2"
            glib:type-name="GocIntArray"
            glib:get-type="goc_int_array_get_type"
            c:symbol-prefix="goc_int_array">
      <doc xml:space="preserve">FocIntArray::n is the size of the array.
A boxed type used to hold an array of integers.</doc>
      <field name="refs" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="n" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="vals" writable="1">
        <doc xml:space="preserve">The embedded values.</doc>
        <type name="gint" c:type="int*"/>
      </field>
      <constructor name="new" c:identifier="goc_int_array_new" version="0.8.2">
        <doc xml:space="preserve">Creates a new #GocIntArray instances with @n values initialized to 0.
The values can be changed using direct access:

&lt;programlisting&gt;
     GocIntArray array = goc_int_array_new (2);
     array-&gt;vals[0] = my_first_int;
     array-&gt;vals[1] = my_second_int;
&lt;/programlisting&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GocIntArray with an initial references count of 1.</doc>
          <type name="cIntArray" c:type="GocIntArray*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of integers in the array.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="ref" c:identifier="goc_int_array_ref" version="0.8.2">
        <doc xml:space="preserve">Increases the references count of @array by 1.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the referenced #GocIntArray.</doc>
          <type name="cIntArray" c:type="GocIntArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">#GocIntArray</doc>
            <type name="cIntArray" c:type="GocIntArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="goc_int_array_unref" version="0.8.2">
        <doc xml:space="preserve">Decreases the references count of @array by 1, and destroys it if the
references count becomes 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">#GocIntArray</doc>
            <type name="cIntArray" c:type="GocIntArray*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="cItem"
           c:symbol-prefix="goc_item"
           c:type="GocItem"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GocItem"
           glib:get-type="goc_item_get_type"
           glib:type-struct="cItemClass">
      <constructor name="new" c:identifier="goc_item_new" introspectable="0">
        <doc xml:space="preserve">Creates a new item of type @type in group @group. Properties can be
set just the same way they are in #g_object_new.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the newly created #GocItem.</doc>
          <type name="cItem" c:type="GocItem*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">parent #GocGroup for the new item</doc>
            <type name="cGroup" c:type="GocGroup*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">#GType of the new item</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_arg_name" transfer-ownership="none">
            <doc xml:space="preserve">property name or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="button2_pressed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="button_pressed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="button_released">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="distance" invoker="distance">
        <doc xml:space="preserve">Evaluates the distance between the point with canvas coordinates @x,@y
and the nearest point of @item. @near_item is set with either @item or
its appropriate child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the evaluated distance.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">vertical position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="near_item" transfer-ownership="none">
            <doc xml:space="preserve">where to store the nearest item</doc>
            <type name="cItem" c:type="GocItem**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw" invoker="draw">
        <doc xml:space="preserve">Renders @item using @cr. There is no need to call this function directly.
Invalidating the item is the way to go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_region" invoker="draw_region">
        <doc xml:space="preserve">Renders @item using @cr, limiting all drawings to the region limited by
@x0, @y0, @x1, and @y1. If this function returns %FALSE, #goc_item_draw
should be called. There is no need to call this function directly.
Invalidating the item is the way to go.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">the lowest horizontal bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve">the lowest vertical bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">the highest horizontal bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">the highest vertical bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="enter_notify">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_window" invoker="get_window">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkWindow associated with the item if any or
NULL. Only #GocWidget owns a #GdkWindow.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="key_pressed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="ev" transfer-ownership="none">
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="key_released">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="ev" transfer-ownership="none">
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="leave_notify">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="motion">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify_scrolled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="realize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unrealize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="bounds_changed" c:identifier="goc_item_bounds_changed">
        <doc xml:space="preserve">This function needs to be called each time the bounds of @item change. It
is normally called from inside the implementation of items derived classes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="goc_item_destroy">
        <doc xml:space="preserve">Destroys @item, removes it from its parent group and updates the canvas
accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="distance" c:identifier="goc_item_distance">
        <doc xml:space="preserve">Evaluates the distance between the point with canvas coordinates @x,@y
and the nearest point of @item. @near_item is set with either @item or
its appropriate child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the evaluated distance.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">horizontal position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">vertical position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="near_item" transfer-ownership="none">
            <doc xml:space="preserve">where to store the nearest item</doc>
            <type name="cItem" c:type="GocItem**"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw" c:identifier="goc_item_draw">
        <doc xml:space="preserve">Renders @item using @cr. There is no need to call this function directly.
Invalidating the item is the way to go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_region" c:identifier="goc_item_draw_region">
        <doc xml:space="preserve">Renders @item using @cr, limiting all drawings to the region limited by
@x0, @y0, @x1, and @y1. If this function returns %FALSE, #goc_item_draw
should be called. There is no need to call this function directly.
Invalidating the item is the way to go.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">the lowest horizontal bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve">the lowest vertical bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">the highest horizontal bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">the highest vertical bound of the region to draw</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="goc_item_get_bounds">
        <doc xml:space="preserve">Retrieves the bounds of @item in canvas coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">where to store the lowest horizontal bound</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <doc xml:space="preserve">where to store the lowest vertical bound</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">where to store the highest horizontal bound</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">where to store the highest vertical bound</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_operator"
              c:identifier="goc_item_get_operator"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">the operator used when drawing the item.</doc>
          <type c:type="cairo_operator_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="goc_item_get_parent">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The item parent #GocGroup.</doc>
          <type name="cGroup" c:type="GocGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style_context"
              c:identifier="goc_item_get_style_context">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The style context to use for the item.</doc>
          <type name="Gtk.StyleContext" c:type="GtkStyleContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="const GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window" c:identifier="goc_item_get_window">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GdkWindow associated with the item if any or
NULL. Only #GocWidget owns a #GdkWindow.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="goc_item_grab">
        <doc xml:space="preserve">Grabs the item. This function will fail if another item is grabbed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="goc_item_hide">
        <doc xml:space="preserve">Hides @item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="goc_item_invalidate">
        <doc xml:space="preserve">Force a redraw of @item bounding region.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_visible" c:identifier="goc_item_is_visible">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @item is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lower" c:identifier="goc_item_lower">
        <doc xml:space="preserve">Lowers @item by @n steps inside its parent #GocGroup (or less if the list
is too short) in the item list so that it is displayed more deeply in the
items stack.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the rank change</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="lower_to_bottom" c:identifier="goc_item_lower_to_bottom">
        <doc xml:space="preserve">Lowers @item to bottom inside its parent #GocGroup so that it will be at
least partly hidden by any overlapping item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="raise" c:identifier="goc_item_raise">
        <doc xml:space="preserve">Raises @item by @n steps inside its parent #GocGroup (or less if the list
is too short) in the item list so that it is displayed nearer the top of
the items stack.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the rank change</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="raise_to_top" c:identifier="goc_item_raise_to_top">
        <doc xml:space="preserve">Raises @item to front so that it becomes the toplevel item inside
its parent #GocGroup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="goc_item_set" introspectable="0">
        <doc xml:space="preserve">Set properties and updates the canvas. Using #g_object_set instead would
set the properties, but not update the canvas.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="first_arg_name" transfer-ownership="none">
            <doc xml:space="preserve">property name or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator"
              c:identifier="goc_item_set_operator"
              introspectable="0">
        <doc xml:space="preserve">Set the operator used when drawing the item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_operator_t</doc>
            <type c:type="cairo_operator_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transform"
              c:identifier="goc_item_set_transform"
              introspectable="0">
        <doc xml:space="preserve">Set the matrix used to transform the item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_matrix_t</doc>
            <type name="cairo.Matrix" c:type="cairo_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible" c:identifier="goc_item_set_visible">
        <doc xml:space="preserve">Either hides or shows @item as appropriate..</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve">whether the item should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="goc_item_show">
        <doc xml:space="preserve">Makes @item visible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ungrab" c:identifier="goc_item_ungrab">
        <doc xml:space="preserve">Ungrabs the item. This function will fail if @item is not grabbed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">#GocItem</doc>
            <type name="cItem" c:type="GocItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="canvas" transfer-ownership="none">
        <type name="cCanvas"/>
      </property>
      <property name="parent" transfer-ownership="none">
        <type name="cGroup"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="canvas">
        <type name="cCanvas" c:type="GocCanvas*"/>
      </field>
      <field name="parent">
        <type name="cGroup" c:type="GocGroup*"/>
      </field>
      <field name="cached_bounds">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="visible">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="realized">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="x0">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y0">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="op" introspectable="0">
        <type c:type="cairo_operator_t"/>
      </field>
      <field name="transform">
        <type name="cairo.Matrix" c:type="cairo_matrix_t"/>
      </field>
      <field name="transformed">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="cItemClass"
            c:type="GocItemClass"
            glib:is-gtype-struct-for="cItem">
      <doc xml:space="preserve">The base class for all canvas items.</doc>
      <field name="base">
        <doc xml:space="preserve">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="distance">
        <callback name="distance">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the evaluated distance.</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve">#GocItem</doc>
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">horizontal position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">vertical position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="near_item" transfer-ownership="none">
              <doc xml:space="preserve">where to store the nearest item</doc>
              <type name="cItem" c:type="GocItem**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw">
        <callback name="draw">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve">#GocItem</doc>
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <doc xml:space="preserve">#cairo_t</doc>
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_region">
        <callback name="draw_region">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve">#GocItem</doc>
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <doc xml:space="preserve">#cairo_t</doc>
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
            <parameter name="x0" transfer-ownership="none">
              <doc xml:space="preserve">the lowest horizontal bound of the region to draw</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y0" transfer-ownership="none">
              <doc xml:space="preserve">the lowest vertical bound of the region to draw</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x1" transfer-ownership="none">
              <doc xml:space="preserve">the highest horizontal bound of the region to draw</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y1" transfer-ownership="none">
              <doc xml:space="preserve">the highest vertical bound of the region to draw</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_bounds">
        <callback name="update_bounds">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_pressed">
        <callback name="button_pressed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button2_pressed">
        <callback name="button2_pressed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="button_released">
        <callback name="button_released">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="motion">
        <callback name="motion">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enter_notify">
        <callback name="enter_notify">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leave_notify">
        <callback name="leave_notify">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="realize">
        <callback name="realize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unrealize">
        <callback name="unrealize">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify_scrolled">
        <callback name="notify_scrolled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_pressed">
        <callback name="key_pressed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="ev" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_released">
        <callback name="key_released">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
            <parameter name="ev" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_window">
        <callback name="get_window">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The #GdkWindow associated with the item if any or
NULL. Only #GocWidget owns a #GdkWindow.</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve">#GocItem</doc>
              <type name="cItem" c:type="GocItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved3">
        <callback name="reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved4">
        <callback name="reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="cLine"
           c:symbol-prefix="goc_line"
           c:type="GocLine"
           parent="cStyledItem"
           glib:type-name="GocLine"
           glib:get-type="goc_line_get_type">
      <implements name="StyledObject"/>
      <property name="end-arrow" writable="1" transfer-ownership="none">
        <type name="Arrow"/>
      </property>
      <property name="start-arrow" writable="1" transfer-ownership="none">
        <type name="Arrow"/>
      </property>
      <property name="x0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="startx">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="starty">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="endx">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="endy">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="start_arrow">
        <type name="Arrow" c:type="GOArrow"/>
      </field>
      <field name="end_arrow">
        <type name="Arrow" c:type="GOArrow"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cPath"
           c:symbol-prefix="goc_path"
           c:type="GocPath"
           parent="cStyledItem"
           glib:type-name="GocPath"
           glib:get-type="goc_path_get_type">
      <implements name="StyledObject"/>
      <property name="closed" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fill-rule" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="path" writable="1" transfer-ownership="none">
        <type name="Path"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="closed">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="fill_rule">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="path">
        <type name="Path" c:type="GOPath*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cPixbuf"
           c:symbol-prefix="goc_pixbuf"
           c:type="GocPixbuf"
           parent="cItem"
           glib:type-name="GocPixbuf"
           glib:get-type="goc_pixbuf_get_type">
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="pixbuf" writable="1" transfer-ownership="none">
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="pixbuf">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="cPoint" c:type="GocPoint">
      <doc xml:space="preserve">A simple point.</doc>
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position of the point.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical position of the point.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="cPoints"
            c:type="GocPoints"
            glib:type-name="GocPoints"
            glib:get-type="goc_points_get_type"
            c:symbol-prefix="goc_points">
      <doc xml:space="preserve">A boxed type used to hold a list of #GocPoint instances.</doc>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="refs" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="points" writable="1">
        <doc xml:space="preserve">The embedded points.</doc>
        <type name="cPoint" c:type="GocPoint*"/>
      </field>
      <constructor name="new" c:identifier="goc_points_new">
        <doc xml:space="preserve">Creates a new #GocPoints instances with @n points with nul initial
coordinates. The coordinates can be changed using direct access:

&lt;programlisting&gt;
     GocPoints points = goc_points_new (1);
     points-&gt;points[0].x = my_x;
     points-&gt;points[0].y = my_y;
&lt;/programlisting&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GocPoints with an initial references count of 1.</doc>
          <type name="cPoints" c:type="GocPoints*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the number of #GocPoint instances.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="ref" c:identifier="goc_points_ref">
        <doc xml:space="preserve">Increases the references count of @points by 1.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the referenced #GocPoints.</doc>
          <type name="cPoints" c:type="GocPoints*"/>
        </return-value>
        <parameters>
          <instance-parameter name="points" transfer-ownership="none">
            <doc xml:space="preserve">#GocPoints</doc>
            <type name="cPoints" c:type="GocPoints*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="goc_points_unref">
        <doc xml:space="preserve">Decreases the references count of @points by 1, and destroys it if the
references count becomes 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="points" transfer-ownership="none">
            <doc xml:space="preserve">#GocPoints</doc>
            <type name="cPoints" c:type="GocPoints*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="cPolygon"
           c:symbol-prefix="goc_polygon"
           c:type="GocPolygon"
           parent="cStyledItem"
           glib:type-name="GocPolygon"
           glib:get-type="goc_polygon_get_type">
      <implements name="StyledObject"/>
      <property name="fill-rule" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="points" writable="1" transfer-ownership="none">
        <type name="cPoints"/>
      </property>
      <property name="sizes" writable="1" transfer-ownership="none">
        <type name="cIntArray"/>
      </property>
      <property name="use-spline" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="points">
        <type name="cPoint" c:type="GocPoint*"/>
      </field>
      <field name="nb_points">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="use_spline">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="fill_rule">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="nb_sizes">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="sizes">
        <type name="gint" c:type="int*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cPolyline"
           c:symbol-prefix="goc_polyline"
           c:type="GocPolyline"
           parent="cStyledItem"
           glib:type-name="GocPolyline"
           glib:get-type="goc_polyline_get_type">
      <implements name="StyledObject"/>
      <property name="points" writable="1" transfer-ownership="none">
        <type name="cPoints"/>
      </property>
      <property name="use-spline" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="points">
        <type name="cPoint" c:type="GocPoint*"/>
      </field>
      <field name="nb_points">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="use_spline">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="cRect" c:type="GocRect">
      <doc xml:space="preserve">A simple rectangle.</doc>
      <field name="x" writable="1">
        <doc xml:space="preserve">lowest horizontal bound of the rectangle.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">lowest vertical bound of the rectangle.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve">rectangle width.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve">rectangle height.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <class name="cRectangle"
           c:symbol-prefix="goc_rectangle"
           c:type="GocRectangle"
           parent="cStyledItem"
           glib:type-name="GocRectangle"
           glib:get-type="goc_rectangle_get_type">
      <implements name="StyledObject"/>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="rx" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ry" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="type">
        <type name="gint" c:type="int"/>
      </field>
      <field name="rx">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ry">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cStyledItem"
           c:symbol-prefix="goc_styled_item"
           c:type="GocStyledItem"
           parent="cItem"
           abstract="1"
           glib:type-name="GocStyledItem"
           glib:get-type="goc_styled_item_get_type"
           glib:type-struct="cStyledItemClass">
      <implements name="StyledObject"/>
      <virtual-method name="init_style">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cStyledItem" c:type="GocStyledItem*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="style_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="cStyledItem" c:type="GocStyledItem*"/>
          </instance-parameter>
          <parameter name="new_style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_scale_line_width"
              c:identifier="goc_styled_item_get_scale_line_width">
        <doc xml:space="preserve">This function returns %TRUE if the line width needs to be scaled. It will
always return %FALSE if the line width is 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the line width needs to be scaled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gsi" transfer-ownership="none">
            <doc xml:space="preserve">#GocStyledItem</doc>
            <type name="cStyledItem" c:type="GocStyledItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cairo_line"
              c:identifier="goc_styled_item_set_cairo_line">
        <doc xml:space="preserve">Prepares the cairo context @cr to draw a line according to the
item style and canvas scale. The line width is scaled only if
the scale-line-width property is set to %TRUE. This function calls
go_styled_object_set_cairo_line().

If the item drawing used goc_group_cairo_transform(),
scale-line-width should be %FALSE to avoid scaling twice, or
go_styled_object_set_cairo_line() should be called directly instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the line is not invisible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gsi" transfer-ownership="none">
            <doc xml:space="preserve">#GocStyledItem</doc>
            <type name="cStyledItem" c:type="GocStyledItem*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">#cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale_line_width"
              c:identifier="goc_styled_item_set_scale_line_width">
        <doc xml:space="preserve">Sets whether the line width needs to be scaled according to the current
canvas resolution and the item transformation. It will be ignored if the
line width is 0. Default value is %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gsi" transfer-ownership="none">
            <doc xml:space="preserve">#GocStyledItem</doc>
            <type name="cStyledItem" c:type="GocStyledItem*"/>
          </instance-parameter>
          <parameter name="scale_line_width" transfer-ownership="none">
            <doc xml:space="preserve">boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="scale-line-width" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="style" writable="1" transfer-ownership="none">
        <type name="Style"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="style">
        <type name="Style" c:type="GOStyle*"/>
      </field>
      <field name="scale_line_width">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="style-changed" when="last">
        <doc xml:space="preserve">The ::style-changed signal is emitted when a new style
has been set on a styled item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">the new #GOStyle.</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="cStyledItemClass"
            c:type="GocStyledItemClass"
            glib:is-gtype-struct-for="cStyledItem">
      <field name="base" readable="0" private="1">
        <type name="cItemClass" c:type="GocItemClass"/>
      </field>
      <field name="init_style">
        <callback name="init_style">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cStyledItem" c:type="GocStyledItem*"/>
            </parameter>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="style_changed">
        <callback name="style_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="item" transfer-ownership="none">
              <type name="cStyledItem" c:type="GocStyledItem*"/>
            </parameter>
            <parameter name="new_style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved_signal1">
        <callback name="reserved_signal1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved_signal2">
        <callback name="reserved_signal2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="cText"
           c:symbol-prefix="goc_text"
           c:type="GocText"
           parent="cStyledItem"
           glib:type-name="GocText"
           glib:get-type="goc_text_get_type">
      <implements name="StyledObject"/>
      <property name="anchor"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="attributes" writable="1" transfer-ownership="none">
        <type name="Pango.AttrList"/>
      </property>
      <property name="clip" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="clip-height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="clip-width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="rotation" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wrap-width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cStyledItem" c:type="GocStyledItem"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="w">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="clipped">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="clip_width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="clip_height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="wrap_width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="text">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="anchor">
        <type name="AnchorType" c:type="GOAnchorType"/>
      </field>
      <field name="attributes">
        <type name="Pango.AttrList" c:type="PangoAttrList*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <class name="cWidget"
           c:symbol-prefix="goc_widget"
           c:type="GocWidget"
           parent="cItem"
           glib:type-name="GocWidget"
           glib:get-type="goc_widget_get_type">
      <method name="set_bounds" c:identifier="goc_widget_set_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="widget" transfer-ownership="none">
            <type name="cWidget" c:type="GocWidget*"/>
          </instance-parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="height" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="widget" writable="1" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="cItem" c:type="GocItem"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="w">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="widget">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="ofbox">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="scale">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="rotation">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <function name="cairo_convert_data_from_pixbuf"
              c:identifier="go_cairo_convert_data_from_pixbuf">
      <doc xml:space="preserve">Converts the pixel data stored in @src in GDK_COLORSPACE_RGB pixbuf
format to CAIRO_FORMAT_ARGB32 cairo format and move them
to @dst. If @src == @dst, pixel are converted in place.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to pixel data in cairo format</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to pixel data in pixbuf format</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">image width</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">image height</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="rowstride" transfer-ownership="none">
          <doc xml:space="preserve">data rowstride</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_convert_data_to_pixbuf"
              c:identifier="go_cairo_convert_data_to_pixbuf">
      <doc xml:space="preserve">Converts the pixel data stored in @src in CAIRO_FORMAT_ARGB32 cairo format
to GDK_COLORSPACE_RGB pixbuf format and move them
to @dst. If @src == @dst, pixel are converted in place.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to pixel data in pixbuf format</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to pixel data in cairo format</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">image width</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">image height</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="rowstride" transfer-ownership="none">
          <doc xml:space="preserve">data rowstride</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_emit_svg_path" c:identifier="go_cairo_emit_svg_path">
      <doc xml:space="preserve">Emits a path described as a SVG path string (d property of path elements) to
a cairo context.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve">a cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve">a SVG path</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_surface_is_vector"
              c:identifier="go_cairo_surface_is_vector">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_as_str" c:identifier="go_color_as_str">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_from_gdk_rgba" c:identifier="go_color_from_gdk_rgba">
      <return-value transfer-ownership="none">
        <type name="Color" c:type="GOColor"/>
      </return-value>
      <parameters>
        <parameter name="rgbacolor" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="Color" c:type="GOColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_from_str" c:identifier="go_color_from_str">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if @str can be parsed as a color of the form R:G:B:A and the
	result is stored in @res.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="Color" c:type="GOColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_selector_get_color"
              c:identifier="go_color_selector_get_color">
      <doc xml:space="preserve">Retrieves current color selection of a #GOSelector
created via @go_color_selector_new. @is_auto will be set to
TRUE if current selection was set by clicking on automatic palette item.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">current color selection.</doc>
        <type name="Color" c:type="GOColor"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <doc xml:space="preserve">a #GOSelector</doc>
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="is_auto" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL result storage</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_selector_set_allow_alpha"
              c:identifier="go_color_selector_set_allow_alpha">
      <doc xml:space="preserve">Should the custom colour selector allow the use of opacity.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <doc xml:space="preserve">#GOColorSelector</doc>
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="allow_alpha" transfer-ownership="none">
          <doc xml:space="preserve">boolean</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_selector_set_color"
              c:identifier="go_color_selector_set_color">
      <doc xml:space="preserve">Sets current selection to @color. An "activate" signal will be emited.
Selector has to be a selector created via @go_color_selector_new.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if selection changed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <doc xml:space="preserve">a color selector</doc>
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve">a color</doc>
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_to_gdk_rgba" c:identifier="go_color_to_gdk_rgba">
      <return-value transfer-ownership="full">
        <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_to_pango"
              c:identifier="go_color_to_pango"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the newly created #PangoAttribute.</doc>
        <type name="Pango.Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve">#GOColor</doc>
          <type name="Color" c:type="GOColor"/>
        </parameter>
        <parameter name="is_fore" transfer-ownership="none">
          <doc xml:space="preserve">whether to create a foreground or background color attribute.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_addl"
              c:identifier="go_complex_addl"
              moved-to="Complex.addl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_conjl"
              c:identifier="go_complex_conjl"
              moved-to="Complex.conjl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_cosl"
              c:identifier="go_complex_cosl"
              moved-to="Complex.cosl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_divl"
              c:identifier="go_complex_divl"
              moved-to="Complex.divl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_expl"
              c:identifier="go_complex_expl"
              moved-to="Complex.expl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_from_stringl"
              c:identifier="go_complex_from_stringl"
              moved-to="Complex.from_stringl">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="imunit" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_invalid_pl"
              c:identifier="go_complex_invalid_pl"
              moved-to="Complex.invalid_pl">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_invalidl"
              c:identifier="go_complex_invalidl"
              moved-to="Complex.invalidl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_lnl"
              c:identifier="go_complex_lnl"
              moved-to="Complex.lnl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_mull"
              c:identifier="go_complex_mull"
              moved-to="Complex.mull">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_powl"
              c:identifier="go_complex_powl"
              moved-to="Complex.powl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_real_pl"
              c:identifier="go_complex_real_pl"
              moved-to="Complex.real_pl">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_sinl"
              c:identifier="go_complex_sinl"
              moved-to="Complex.sinl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_sqrtl"
              c:identifier="go_complex_sqrtl"
              moved-to="Complex.sqrtl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_subl"
              c:identifier="go_complex_subl"
              moved-to="Complex.subl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_tanl"
              c:identifier="go_complex_tanl"
              moved-to="Complex.tanl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_to_polar"
              c:identifier="go_complex_to_polar"
              moved-to="Complex.to_polar">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mod" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="angle" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="Complex" c:type="GOComplex*"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_to_stringl"
              c:identifier="go_complex_to_stringl"
              moved-to="Complex.to_stringl">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="reformat" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="imformat" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="imunit" transfer-ownership="none">
          <type name="gchar" c:type="char"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_zero_pl"
              c:identifier="go_complex_zero_pl"
              moved-to="Complex.zero_pl">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_add_filter"
              c:identifier="go_components_add_filter">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chooser" transfer-ownership="none">
          <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_add_mime_type"
              c:identifier="go_components_add_mime_type">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mime" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="priority" transfer-ownership="none">
          <type name="MimePriority" c:type="GOMimePriority"/>
        </parameter>
        <parameter name="service_id" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_get_mime_suffix"
              c:identifier="go_components_get_mime_suffix">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="mime" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_get_mime_types"
              c:identifier="go_components_get_mime_types">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the list of mime types
supported by at least one registered component.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
    </function>
    <function name="components_get_priority"
              c:identifier="go_components_get_priority">
      <return-value transfer-ownership="none">
        <type name="MimePriority" c:type="GOMimePriority"/>
      </return-value>
      <parameters>
        <parameter name="mime_type" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_set_mime_suffix"
              c:identifier="go_components_set_mime_suffix">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mime" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="suffix" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="components_support_clipboard"
              c:identifier="go_components_support_clipboard">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mime_type" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_add_monitor" c:identifier="go_conf_add_monitor">
      <doc xml:space="preserve">@monitor will be called whenever the value associated with @key changes.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the signal ID.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">#GOConfNode</doc>
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">configuration key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="monitor"
                   transfer-ownership="none"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve">#GOMonitorFunc</doc>
          <type name="ConfMonitorFunc" c:type="GOConfMonitorFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_free_node" c:identifier="go_conf_free_node">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_bool" c:identifier="go_conf_get_bool">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_double" c:identifier="go_conf_get_double">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_enum_as_str"
              c:identifier="go_conf_get_enum_as_str">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_int" c:identifier="go_conf_get_int">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_node" c:identifier="go_conf_get_node">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the #GOConfNode associated with @key</doc>
        <type name="ConfNode" c:type="GOConfNode*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve">parent node or %NULL</doc>
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">configuration key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_str_list" c:identifier="go_conf_get_str_list">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a list of strings asociated
with @key.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">#GOConfNode</doc>
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">configuration key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_get_string" c:identifier="go_conf_get_string">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_bool" c:identifier="go_conf_load_bool">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="default_val" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_double" c:identifier="go_conf_load_double">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="minima" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="maxima" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="default_val" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_enum" c:identifier="go_conf_load_enum">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="t" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="default_val" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_int" c:identifier="go_conf_load_int">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="minima" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="maxima" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="default_val" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_str_list" c:identifier="go_conf_load_str_list">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a list of strings asociated
with @key.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">#GOConfNode</doc>
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">configuration key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_load_string" c:identifier="go_conf_load_string">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_remove_monitor" c:identifier="go_conf_remove_monitor">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="monitor_id" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_bool" c:identifier="go_conf_set_bool">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_double" c:identifier="go_conf_set_double">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_enum" c:identifier="go_conf_set_enum">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="t" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_int" c:identifier="go_conf_set_int">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_str_list" c:identifier="go_conf_set_str_list">
      <doc xml:space="preserve">Sets @list as the value for @key.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">#GOConfNode</doc>
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">configuration key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">the list of strings to set.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="conf_set_string" c:identifier="go_conf_set_string">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="conf_sync" c:identifier="go_conf_sync">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="ConfNode" c:type="GOConfNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="continued_fraction" c:identifier="go_continued_fraction">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="max_denom" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res_num" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="res_denom" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cospi" c:identifier="go_cospi">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the cosine of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="cospil" c:identifier="go_cospil" introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the cosine of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="cotpi" c:identifier="go_cotpi">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="cotpil" c:identifier="go_cotpil" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="coup_cd" c:identifier="go_coup_cd">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="settle" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="mat" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="freq" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="eom" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="next" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="coupdaybs" c:identifier="go_coupdaybs">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the number of days from the beginning of the coupon period to the
	settlement date.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="settlement" transfer-ownership="none">
          <doc xml:space="preserve">#GDate</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="maturity" transfer-ownership="none">
          <doc xml:space="preserve">#GDate</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">#GoCouponConvention</doc>
          <type name="CouponConvention" c:type="GoCouponConvention*"/>
        </parameter>
      </parameters>
    </function>
    <function name="coupdays" c:identifier="go_coupdays">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the number of days in the coupon period of the settlement date.
Currently, returns negative numbers if the branch is not implemented.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="settlement" transfer-ownership="none">
          <doc xml:space="preserve">#GDate</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="maturity" transfer-ownership="none">
          <doc xml:space="preserve">#GDate</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">#GoCouponConvention</doc>
          <type name="CouponConvention" c:type="GoCouponConvention*"/>
        </parameter>
      </parameters>
    </function>
    <function name="coupdaysnc" c:identifier="go_coupdaysnc">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the number of days from the settlement date to the next
coupon date.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="settlement" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="maturity" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">#GoCouponConvention</doc>
          <type name="CouponConvention" c:type="GoCouponConvention*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_std_tags_for_buffer"
              c:identifier="go_create_std_tags_for_buffer">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cspline_destroyl"
              c:identifier="go_cspline_destroyl"
              moved-to="CSpline.destroyl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sp" transfer-ownership="none">
          <type name="CSplinel" c:type="GOCSplinel*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cspline_init"
              c:identifier="go_cspline_init"
              moved-to="CSpline.init">
      <doc xml:space="preserve">Creates a spline structure, and computes the coefficients associated with the
polynoms. The ith polynome (between x[i-1] and x[i] is:
y(x) = y[i-1] + (c[i-1] + (b[i-1] + a[i] * (x - x[i-1])) * (x - x[i-1])) * (x - x[i-1])
where a[i-1], b[i-1], c[i-1], x[i-1] and y[i-1] are the corresponding
members of the new structure.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly created GOCSpline instance which should be
destroyed by a call to go_cspline_destroy.</doc>
        <type name="CSpline" c:type="GOCSpline*"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">the x values</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">the y values</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">the number of x and y values</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="limits" transfer-ownership="none">
          <doc xml:space="preserve">how the limits must be treated, four values are allowed:
GO_CSPLINE_NATURAL: first and least second derivatives are 0.
GO_CSPLINE_PARABOLIC: the curve will be a parabole arc outside of the limits.
GO_CSPLINE_CUBIC: the curve will be cubic outside of the limits.
GO_CSPLINE_CLAMPED: the first and last derivatives are imposed.</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
        <parameter name="c0" transfer-ownership="none">
          <doc xml:space="preserve">the first derivative when using clamped splines, not used in the
     other limit types.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="cn" transfer-ownership="none">
          <doc xml:space="preserve">the first derivative when using clamped splines, not used in the
     other limit types.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_conv_equal" c:identifier="go_date_conv_equal">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="DateConventions" c:type="const GODateConventions*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="DateConventions" c:type="const GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_conv_from_str" c:identifier="go_date_conv_from_str">
      <return-value transfer-ownership="none">
        <type name="DateConventions" c:type="const GODateConventions*"/>
      </return-value>
      <parameters>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_conv_translate" c:identifier="go_date_conv_translate">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="DateConventions" c:type="const GODateConventions*"/>
        </parameter>
        <parameter name="dst" transfer-ownership="none">
          <type name="DateConventions" c:type="const GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_convention_base"
              c:identifier="go_date_convention_base">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_days_between_basis"
              c:identifier="go_date_days_between_basis">
      <return-value transfer-ownership="none">
        <type name="gint32" c:type="gint32"/>
      </return-value>
      <parameters>
        <parameter name="from" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="to" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="basis" transfer-ownership="none">
          <type name="BasisType" c:type="GOBasisType"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_g_months_between"
              c:identifier="go_date_g_months_between">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="date1" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="date2" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_g_to_serial" c:identifier="go_date_g_to_serial">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_g_years_between"
              c:identifier="go_date_g_years_between">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="date1" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="date2" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_month_name" c:identifier="go_date_month_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="m" transfer-ownership="none">
          <type name="GLib.DateMonth" c:type="GDateMonth"/>
        </parameter>
        <parameter name="abbrev" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_serial_raw_to_seconds"
              c:identifier="go_date_serial_raw_to_seconds">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="raw" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_serial_raw_to_serial"
              c:identifier="go_date_serial_raw_to_serial">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="raw" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_serial_to_g" c:identifier="go_date_serial_to_g">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="serial" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_serial_to_timet"
              c:identifier="go_date_serial_to_timet">
      <return-value transfer-ownership="none">
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="serial" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_timet_to_seconds"
              c:identifier="go_date_timet_to_seconds">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_timet_to_serial"
              c:identifier="go_date_timet_to_serial">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_timet_to_serial_raw"
              c:identifier="go_date_timet_to_serial_raw">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_weekday_name" c:identifier="go_date_weekday_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="wd" transfer-ownership="none">
          <type name="GLib.DateWeekday" c:type="GDateWeekday"/>
        </parameter>
        <parameter name="abbrev" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="date_weeknum" c:identifier="go_date_weeknum">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">week number according to the given method.
1:   Week starts on Sunday.  January 1 is in week 1.
2:   Week starts on Monday.  January 1 is in week 1.
150: ISO 8601 week number.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve">date</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve">week numbering method</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="dcauchy" c:identifier="go_dcauchy">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dcauchyl" c:identifier="go_dcauchyl" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_check_finalized"
              c:identifier="go_debug_check_finalized">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_flag" c:identifier="go_debug_flag">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flag" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="destroy_password" c:identifier="go_destroy_password">
      <doc xml:space="preserve">Overwrite a string holding a password.  This is a separate routine to
ensure that the compiler does not try to outsmart us.

Note: this does not free the memory.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="passwd" transfer-ownership="none">
          <doc xml:space="preserve">The buffer to clear</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dialog_guess_alternative_button_order"
              c:identifier="go_dialog_guess_alternative_button_order">
      <doc xml:space="preserve">This function inspects the buttons in the dialog and comes up
with a reasonable alternative dialog order.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dialog" transfer-ownership="none">
          <doc xml:space="preserve">#GtkDialog</doc>
          <type name="Gtk.Dialog" c:type="GtkDialog*"/>
        </parameter>
      </parameters>
    </function>
    <function name="direction_get_name"
              c:identifier="go_direction_get_name"
              moved-to="Direction.get_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <type name="Direction" c:type="GODirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="direction_is_forward"
              c:identifier="go_direction_is_forward"
              moved-to="Direction.is_forward">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE for GO_DIRECTION_DOWN or GO_DIRECTION_RIGHT.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">#GODirection</doc>
          <type name="Direction" c:type="GODirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="direction_is_horizontal"
              c:identifier="go_direction_is_horizontal"
              moved-to="Direction.is_horizontal">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE for GO_DIRECTION_LEFT and GO_DIRECTION_RIGHT.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">#GODirection</doc>
          <type name="Direction" c:type="GODirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="dirname_from_uri" c:identifier="go_dirname_from_uri">
      <doc xml:space="preserve">Decode the all but the final path component.  Returns as UTF-8 encoded
suitable for display.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">dirname which the caller is responsible for freeing.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">target</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="brief" transfer-ownership="none">
          <doc xml:space="preserve">if TRUE, hide "file://" if present.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dlnorm" c:identifier="go_dlnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="meanlog" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="sdlog" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dlnorml" c:identifier="go_dlnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="meanlog" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="sdlog" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnorm" c:identifier="go_dnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnorml" c:identifier="go_dnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dtoa" c:identifier="go_dtoa" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="dweibull" c:identifier="go_dweibull">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dweibulll" c:identifier="go_dweibulll" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="give_log" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_export" c:identifier="go_error_export">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_import" c:identifier="go_error_import">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_invalid" c:identifier="go_error_invalid">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_system" c:identifier="go_error_system">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="exponential_regression"
              c:identifier="go_exponential_regression">
      <doc xml:space="preserve">Performs one-dimensional linear regressions on the input points.
Fits to "y = b * m1^x1 * ... * md^xd " or equivalently to
"log y = log b + x1 * log m1 + ... + xd * log md".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <doc xml:space="preserve">x-vectors (i.e. independent data)</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <doc xml:space="preserve">number of x-vectors</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector (dependent data)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, a non-one multiplier is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">output place for constant[0] and root1[1], root2[2],... There will be dim+1 results.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for additional results.</doc>
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="exponential_regression_as_log"
              c:identifier="go_exponential_regression_as_log">
      <doc xml:space="preserve">Performs one-dimensional linear regressions on the input points as
go_exponential_regression, but returns the logarithm of the coefficients instead
or the coefficients themselves.
Fits to "y = b * exp (m1*x1) * ... * exp (md*xd) " or equivalently to
"ln y = ln b + x1 * m1 + ... + xd * md".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <doc xml:space="preserve">x-vectors (i.e. independent data)</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <doc xml:space="preserve">number of x-vectors</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector (dependent data)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, a non-one multiplier is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">output place for constant[0] and root1[1], root2[2],... There will be dim+1 results.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for additional results.</doc>
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="exponential_regression_as_logl"
              c:identifier="go_exponential_regression_as_logl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="exponential_regressionl"
              c:identifier="go_exponential_regressionl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_ceil" c:identifier="go_fake_ceil">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_ceill"
              c:identifier="go_fake_ceill"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_floor" c:identifier="go_fake_floor">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_floorl"
              c:identifier="go_fake_floorl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_round" c:identifier="go_fake_round">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_roundl"
              c:identifier="go_fake_roundl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_trunc" c:identifier="go_fake_trunc">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="fake_truncl"
              c:identifier="go_fake_truncl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_access" c:identifier="go_file_access">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_create" c:identifier="go_file_create" throws="1">
      <doc xml:space="preserve">Creates a file or return an error. If the file already exists, it is
replaced.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">non-%NULL on success</doc>
        <type name="Gsf.Output" c:type="GsfOutput*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">target uri</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_date_accessed"
              c:identifier="go_file_get_date_accessed">
      <return-value transfer-ownership="none">
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_date_changed"
              c:identifier="go_file_get_date_changed">
      <return-value transfer-ownership="none">
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_date_modified"
              c:identifier="go_file_get_date_modified">
      <return-value transfer-ownership="none">
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_group_name" c:identifier="go_file_get_group_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_get_owner_name" c:identifier="go_file_get_owner_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_open" c:identifier="go_file_open" throws="1">
      <doc xml:space="preserve">Try all available methods to open a file or return an error</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">non-%NULL on success</doc>
        <type name="Gsf.Input" c:type="GsfInput*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">target uri</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_split_urls" c:identifier="go_file_split_urls">
      <doc xml:space="preserve">Splits the chain into a list of URIs. Lines starting with '#' are ignored.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the URIs list.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">a string filled with a list of URIs separated by new lines.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_from_uri" c:identifier="go_filename_from_uri">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_simplify" c:identifier="go_filename_simplify">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="dotdot" transfer-ownership="none">
          <type name="DotDot" c:type="GODotDot"/>
        </parameter>
        <parameter name="make_absolute" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_to_uri" c:identifier="go_filename_to_uri">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="finite" c:identifier="go_finite">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="finitel" c:identifier="go_finitel" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_cache_register"
              c:identifier="go_font_cache_register"
              moved-to="Font.cache_register">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="callback" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_cache_unregister"
              c:identifier="go_font_cache_unregister"
              moved-to="Font.cache_unregister">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="callback" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_list_families" c:identifier="go_fonts_list_families">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a sorted list of strings of
font family names.  The list and the names must be freed.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">#PangoContext</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fonts_list_sizes" c:identifier="go_fonts_list_sizes">
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">a sorted list of font
sizes in Pango units.  The list must be freed.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="none"/>
        </type>
      </return-value>
    </function>
    <function name="format_allow_ee_markup"
              c:identifier="go_format_allow_ee_markup"
              moved-to="Format.allow_ee_markup">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="format_allow_pi_slash"
              c:identifier="go_format_allow_pi_slash"
              moved-to="Format.allow_pi_slash">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="format_allow_si"
              c:identifier="go_format_allow_si"
              moved-to="Format.allow_si">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="format_default_accounting"
              c:identifier="go_format_default_accounting"
              moved-to="Format.default_accounting">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_default_date"
              c:identifier="go_format_default_date"
              moved-to="Format.default_date">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_default_date_time"
              c:identifier="go_format_default_date_time"
              moved-to="Format.default_date_time">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_default_money"
              c:identifier="go_format_default_money"
              moved-to="Format.default_money">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_default_percentage"
              c:identifier="go_format_default_percentage"
              moved-to="Format.default_percentage">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_default_time"
              c:identifier="go_format_default_time"
              moved-to="Format.default_time">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_empty"
              c:identifier="go_format_empty"
              moved-to="Format.empty">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_foreach"
              c:identifier="go_format_foreach"
              moved-to="Format.foreach">
      <doc xml:space="preserve">Executes @func for each registered #GOFormat</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="1">
          <doc xml:space="preserve">function to execute for each known format</doc>
          <type name="GLib.HFunc" c:type="GHFunc"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">user data for @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_general"
              c:identifier="go_format_general"
              moved-to="Format.general">
      <return-value transfer-ownership="full">
        <type name="Format" c:type="GOFormat*"/>
      </return-value>
    </function>
    <function name="format_generate_number_str"
              c:identifier="go_format_generate_number_str"
              moved-to="Format.generate_number_str">
      <doc xml:space="preserve">Generates a format string for a number format with the given
parameters and appends it to @dst.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <doc xml:space="preserve">GString to append format string to.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="min_digits" transfer-ownership="none">
          <doc xml:space="preserve">minimum number of digits before decimal separator.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="num_decimals" transfer-ownership="none">
          <doc xml:space="preserve">number of decimals</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="thousands_sep" transfer-ownership="none">
          <doc xml:space="preserve">if true, use a thousands separator.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="negative_red" transfer-ownership="none">
          <doc xml:space="preserve">if true, make negative values red.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="negative_paren" transfer-ownership="none">
          <doc xml:space="preserve">if true, enclose negative values in parentheses.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="prefix" transfer-ownership="none">
          <doc xml:space="preserve">optional string to place before number part of the format</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="postfix" transfer-ownership="none">
          <doc xml:space="preserve">optional string to place after number part of the format</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_generate_str"
              c:identifier="go_format_generate_str"
              moved-to="Format.generate_str">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dst" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="details" transfer-ownership="none">
          <type name="FormatDetails" c:type="GOFormatDetails*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_locale_currency"
              c:identifier="go_format_locale_currency"
              moved-to="Format.locale_currency">
      <return-value transfer-ownership="full">
        <type name="FormatCurrency" c:type="GOFormatCurrency*"/>
      </return-value>
    </function>
    <function name="format_measure_pango"
              c:identifier="go_format_measure_pango"
              moved-to="Format.measure_pango">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_measure_strlen"
              c:identifier="go_format_measure_strlen"
              moved-to="Format.measure_strlen">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_measure_zero"
              c:identifier="go_format_measure_zero"
              moved-to="Format.measure_zero">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_output_to_odf"
              c:identifier="go_format_output_to_odf"
              moved-to="Format.output_to_odf">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="xout" transfer-ownership="none">
          <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="Format" c:type="GOFormat*"/>
        </parameter>
        <parameter name="cond_part" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="with_extension" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_palette_color_of_index"
              c:identifier="go_format_palette_color_of_index"
              moved-to="Format.palette_color_of_index">
      <return-value transfer-ownership="none">
        <type name="Color" c:type="GOColor"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_palette_index_from_color"
              c:identifier="go_format_palette_index_from_color"
              moved-to="Format.palette_index_from_color">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the index of the color closest to the argument color in some
sense.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="c" transfer-ownership="none">
          <doc xml:space="preserve">color</doc>
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_palette_name_of_index"
              c:identifier="go_format_palette_name_of_index"
              moved-to="Format.palette_name_of_index">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_str_delocalize"
              c:identifier="go_format_str_delocalize"
              moved-to="Format.str_delocalize">
      <doc xml:space="preserve">De-localizes the given format string, i.e., changes locale's decimal
separators to dots and performs other such transformations.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a non-local format string, or NULL if the format was not valid.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">A *valid* localized format string</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_str_localize"
              c:identifier="go_format_str_localize"
              moved-to="Format.str_localize">
      <doc xml:space="preserve">Localizes the given format string, i.e., changes decimal dots to the
locale's notion of that and performs other such transformations.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a localized format string, or NULL if the format was not valid.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">A *valid* format string</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="format_value_gstring"
              c:identifier="go_format_value_gstring"
              moved-to="Format.value_gstring">
      <doc xml:space="preserve">Render a floating-point value into @layout in such a way that the
layouting width does not needlessly exceed @col_width.  Optionally
use unicode minus instead of hyphen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GOFormatNumberError</doc>
        <type name="FormatNumberError" c:type="GOFormatNumberError"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve">Optional PangoLayout, probably preseeded with font attribute.</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">a GString to store (not append!) the resulting string in.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="measure" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">Function to measure width of string/layout.</doc>
          <type name="FormatMeasure" c:type="const GOFormatMeasure"/>
        </parameter>
        <parameter name="metrics" transfer-ownership="none">
          <doc xml:space="preserve">Font metrics corresponding to @mesaure.</doc>
          <type name="FontMetrics" c:type="const GOFontMetrics*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <doc xml:space="preserve">#GOFormat</doc>
          <type name="Format" c:type="GOFormat*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">floating-point value.  Must be finite.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">a format character</doc>
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="sval" transfer-ownership="none">
          <doc xml:space="preserve">a string to append to @str after @val</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="go_color" transfer-ownership="none">
          <doc xml:space="preserve">a color to rende</doc>
          <type name="Color" c:type="GOColor*"/>
        </parameter>
        <parameter name="col_width" transfer-ownership="none">
          <doc xml:space="preserve">intended max width of layout in pango units.  -1 means
            no restriction.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="date_conv" transfer-ownership="none">
          <doc xml:space="preserve">#GODateConventions</doc>
          <type name="DateConventions" c:type="GODateConventions*"/>
        </parameter>
        <parameter name="unicode_minus" transfer-ownership="none">
          <doc xml:space="preserve">Use unicode minuses, not hyphens.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="fourier_fft" c:identifier="go_fourier_fft">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="Complex" c:type="GOComplex*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="skip" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fourier" transfer-ownership="none">
          <type name="Complex" c:type="GOComplex**"/>
        </parameter>
        <parameter name="inverse" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="fourier_fftl" c:identifier="go_fourier_fftl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="skip" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fourier" transfer-ownership="none">
          <type name="Complexl" c:type="GOComplexl**"/>
        </parameter>
        <parameter name="inverse" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <class name="g3DBox"
           c:symbol-prefix="gog_3d_box"
           c:type="Gog3DBox"
           parent="gObject"
           glib:type-name="Gog3DBox"
           glib:get-type="gog_3d_box_get_type">
      <property name="fov" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="phi" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="psi" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="theta" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="base">
        <type name="gObject" c:type="GogObject"/>
      </field>
      <field name="fov">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="psi">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="theta">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="phi">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="mat">
        <type name="Matrix3x3" c:type="GOMatrix3x3"/>
      </field>
    </class>
    <class name="g3DBoxView"
           c:symbol-prefix="gog_3d_box_view"
           c:type="Gog3DBoxView"
           parent="gView"
           glib:type-name="Gog3DBoxView"
           glib:get-type="gog_3d_box_view_get_type">
      <field name="base">
        <type name="gView" c:type="GogView"/>
      </field>
      <field name="dx">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="dy">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="dz">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="r">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ratio">
        <type name="gdouble" c:type="double"/>
      </field>
    </class>
    <class name="gAxis"
           c:symbol-prefix="gog_axis"
           c:type="GogAxis"
           parent="gAxisBase"
           glib:type-name="GogAxis"
           glib:get-type="gog_axis_get_type">
      <implements name="Persist"/>
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <function name="set_from_str" c:identifier="gog_axis_set_from_str">
        <return-value transfer-ownership="none">
          <type name="gAxisSet" c:type="GogAxisSet"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_contributor" c:identifier="gog_axis_add_contributor">
        <doc xml:space="preserve">Register @contrib as taking part in the negotiation of @axis's bounds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="contrib" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject (can we relax this to use an interface ?)</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bound_changed" c:identifier="gog_axis_bound_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="contrib" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_contributors"
              c:identifier="gog_axis_clear_contributors">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contributors" c:identifier="gog_axis_contributors">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of the axis
contributors</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gObject"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="data_get_bounds" c:identifier="gog_axis_data_get_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </parameter>
          <parameter name="minimum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="del_contributor" c:identifier="gog_axis_del_contributor">
        <doc xml:space="preserve">@contrib no longer takes part in the negotiation of @axis's bounds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="contrib" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject (can we relax this to use an interface ?)</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_atype" c:identifier="gog_axis_get_atype">
        <return-value transfer-ownership="none">
          <type name="gAxisType" c:type="GogAxisType"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="gog_axis_get_bounds">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the bounds stored in @minima and @maxima are sane</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="minima" transfer-ownership="none">
            <doc xml:space="preserve">non-NULL storage for result</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maxima" transfer-ownership="none">
            <doc xml:space="preserve">non-NULL storage for result</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_circular_rotation"
              c:identifier="gog_axis_get_circular_rotation">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">rotation of a circular #GogAxis.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color_map" c:identifier="gog_axis_get_color_map">
        <doc xml:space="preserve">Retrieves the #GogAxisColorMap associated to the axis or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the color map used by the axis if any.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color_scale" c:identifier="gog_axis_get_color_scale">
        <doc xml:space="preserve">Retrieves the #GogColorScale associated to the axis or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the color scale used to display the axis colors
dor color and pseudo-3d axes.</doc>
          <type name="gColorScale" c:type="GogColorScale*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_date_conv" c:identifier="gog_axis_get_date_conv">
        <return-value transfer-ownership="none">
          <type name="DateConventions" c:type="const GODateConventions*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_effective_format"
              c:identifier="gog_axis_get_effective_format">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GOFormat used for the axis labels. Differs
from gog_axis_get_format in that it never returns a general format
(see #go_format_is_general).</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_effective_span"
              c:identifier="gog_axis_get_effective_span">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entry" c:identifier="gog_axis_get_entry">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of axis element @i and sets @user_defined or
	NaN on error</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="gAxisElemType" c:type="GogAxisElemType"/>
          </parameter>
          <parameter name="user_defined" transfer-ownership="none">
            <doc xml:space="preserve">an optionally NULL pointr to gboolean</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_format" c:identifier="gog_axis_get_format">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the format assigned to @axis but does not add
a reference.</doc>
          <type name="Format" c:type="GOFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_grid_line" c:identifier="gog_axis_get_grid_line">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to GridLine object associated to given axis, NULL
if it doesn't exists.</doc>
          <type name="gGridLine" c:type="GogGridLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="major" transfer-ownership="none">
            <doc xml:space="preserve">whether to retrieve major or minor grid line.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_labels" c:identifier="gog_axis_get_labels">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the possibly NULL #GOData used as a label for this axis
along with the plot that it was associated with</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="plot_that_labeled_axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogPlot</doc>
            <type name="gPlot" c:type="GogPlot**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_major_ticks_distance"
              c:identifier="gog_axis_get_major_ticks_distance">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="gog_axis_get_metrics">
        <return-value transfer-ownership="none">
          <type name="gAxisMetrics" c:type="GogAxisMetrics"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_polar_perimeter"
              c:identifier="gog_axis_get_polar_perimeter">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_polar_unit" c:identifier="gog_axis_get_polar_unit">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">unit of @axis if it's a circular axis of a polar
	axis set, -1 otherwise.</doc>
          <type name="gAxisPolarUnit" c:type="GogAxisPolarUnit"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ref_axis"
              c:identifier="gog_axis_get_ref_axis"
              version="0.10.17">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the axis used to evaluate the length of @axis or
NULL.</doc>
          <type name="gAxis" c:type="GogAxis*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ticks" c:identifier="gog_axis_get_ticks">
        <doc xml:space="preserve">An accessor to @axis-&gt;ticks.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of ticks</doc>
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="ticks" transfer-ownership="none">
            <doc xml:space="preserve">an array of #GogAxisTick</doc>
            <type name="gAxisTick" c:type="GogAxisTick**"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_center_on_ticks"
              c:identifier="gog_axis_is_center_on_ticks">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if labels are centered on ticks when @axis is discrete</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_discrete" c:identifier="gog_axis_is_discrete">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @axis enumerates a set of discrete items, rather than a
	continuous value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_inverted" c:identifier="gog_axis_is_inverted">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @axis is inverted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_zero_important"
              c:identifier="gog_axis_is_zero_important">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bounds" c:identifier="gog_axis_set_bounds">
        <doc xml:space="preserve">Sets axis bounds. If minimum or maximum are not finite values, corresponding
bound remains unchanged.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="minimum" transfer-ownership="none">
            <doc xml:space="preserve">axis low bound</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <doc xml:space="preserve">axis high bound</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extents" c:identifier="gog_axis_set_extents">
        <doc xml:space="preserve">Set axis exents. It's a convenience function that sets axis bounds taking
into account invert flag.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">axis start bound</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:space="preserve">axis stop bound</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format" c:identifier="gog_axis_set_format">
        <doc xml:space="preserve">Absorbs a reference to @fmt, and accepts NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if things changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="fmt" transfer-ownership="full">
            <doc xml:space="preserve">#GOFormat</doc>
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_polar_unit" c:identifier="gog_axis_set_polar_unit">
        <doc xml:space="preserve">Sets unit of a circular axis. See #GogAxisPolarUnit for valid
values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisPolarUnit</doc>
            <type name="gAxisPolarUnit" c:type="GogAxisPolarUnit"/>
          </parameter>
        </parameters>
      </method>
      <property name="assigned-format-string-XL"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="axis-ref" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="circular-rotation"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="color-map-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-factor" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="invert-axis" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="map-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metrics" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metrics-ratio" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="metrics-unit" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="polar-unit" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="span-end" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="span-start" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <class name="gAxisBase"
           c:symbol-prefix="gog_axis_base"
           c:type="GogAxisBase"
           parent="gStyledObject"
           abstract="1"
           glib:type-name="GogAxisBase"
           glib:get-type="gog_axis_base_get_type">
      <implements name="StyledObject"/>
      <method name="get_clamped_position"
              c:identifier="gog_axis_base_get_clamped_position">
        <return-value transfer-ownership="none">
          <type name="gAxisPosition" c:type="GogAxisPosition"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cross_location"
              c:identifier="gog_axis_base_get_cross_location">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crossed_axis"
              c:identifier="gog_axis_base_get_crossed_axis">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">returns the crossing axis in a 2D chart if set.</doc>
          <type name="gAxis" c:type="GogAxis*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisBase</doc>
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crossed_axis_for_plot"
              c:identifier="gog_axis_base_get_crossed_axis_for_plot">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">returns the crossing axis in a 2D plot if set.</doc>
          <type name="gAxis" c:type="GogAxis*"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisBase</doc>
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
          <parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_crossed_axis_type"
              c:identifier="gog_axis_base_get_crossed_axis_type">
        <return-value transfer-ownership="none">
          <type name="gAxisType" c:type="GogAxisType"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gog_axis_base_get_position">
        <return-value transfer-ownership="none">
          <type name="gAxisPosition" c:type="GogAxisPosition"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gog_axis_base_set_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_base" transfer-ownership="none">
            <type name="gAxisBase" c:type="GogAxisBase*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gAxisPosition" c:type="GogAxisPosition"/>
          </parameter>
        </parameters>
      </method>
      <property name="cross-axis-id" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="major-tick-in" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="major-tick-labeled"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="major-tick-out" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="major-tick-size-pts"
                writable="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="minor-tick-in" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="minor-tick-out" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="minor-tick-size-pts"
                writable="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="padding-pts" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pos" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pos-str" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="gAxisColorMap"
           c:symbol-prefix="gog_axis_color_map"
           c:type="GogAxisColorMap"
           parent="GObject.Object"
           glib:type-name="GogAxisColorMap"
           glib:get-type="gog_axis_color_map_get_type">
      <implements name="Persist"/>
      <function name="foreach" c:identifier="gog_axis_color_map_foreach">
        <doc xml:space="preserve">Executes @handler to each color map installed on the system or loaded from
a document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">a #GogAxisColorMapHandler</doc>
            <type name="gAxisColorMapHandler" c:type="GogAxisColorMapHandler"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">data to pass to @handler</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_colors"
                c:identifier="gog_axis_color_map_from_colors">
        <doc xml:space="preserve">Creates a color map using @colors.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created color map.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">color map name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">colors number</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:space="preserve">the colors</doc>
            <type name="Color" c:type="GOColor*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the resource type</doc>
            <type name="ResourceType" c:type="GoResourceType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_from_id"
                c:identifier="gog_axis_color_map_get_from_id">
        <doc xml:space="preserve">Retrieves the color map whose identifier is @id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the found color map.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the color map identifier to search for</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="gog_axis_color_map_delete">
        <doc xml:space="preserve">Destroys the color map and remove it from the user directory and from the
database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisColorMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="gog_axis_color_map_dup">
        <doc xml:space="preserve">Duplicates the color map.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new color map.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisColorMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="edit" c:identifier="gog_axis_color_map_edit">
        <doc xml:space="preserve">Opens a dialog to edit the color map. If @map is %NULL, creates a new one
unless the user cancels the edition.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the edited color map.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisColorMap or %NULL</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">a #GOCmdContext or %NULL</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color" c:identifier="gog_axis_color_map_get_color">
        <doc xml:space="preserve">Maps @x to a color.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the found color.</doc>
          <type name="Color" c:type="GOColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">the value to map</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gog_axis_color_map_get_id">
        <doc xml:space="preserve">Retrieves the color map name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the map name.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max" c:identifier="gog_axis_color_map_get_max">
        <doc xml:space="preserve">Retrieves the value corresponding to the last color in the map. The first
always corresponds to 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum value.</doc>
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gog_axis_color_map_get_name">
        <doc xml:space="preserve">Retrieves the color map localized name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the map name.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_type"
              c:identifier="gog_axis_color_map_get_resource_type">
        <doc xml:space="preserve">Retrieves the resource type for @map.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the resource type.</doc>
          <type name="ResourceType" c:type="GoResourceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snapshot"
              c:identifier="gog_axis_color_map_get_snapshot">
        <doc xml:space="preserve">Builds a snapshot of the color map.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #GdkPixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
          <parameter name="discrete" transfer-ownership="none">
            <doc xml:space="preserve">whether to use constant colors between each stop or a gradient.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="horizontal" transfer-ownership="none">
            <doc xml:space="preserve">whether to get an horizontal or a vertical snapshot.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the pixbuf width.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">the pixbuf height.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_cairo" c:identifier="gog_axis_color_map_to_cairo">
        <doc xml:space="preserve">When @discrete is larger than 1, it will be interpreted as the number of
major ticks used. The number of colors will then be @discrete − 1.
Draws a snapshot of the color map inside the rectangle.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context.</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="discrete" transfer-ownership="none">
            <doc xml:space="preserve">whether to use constant colors between each stop or a gradient.</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="horizontal" transfer-ownership="none">
            <doc xml:space="preserve">whether to get an horizontal or a vertical snapshot.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the rectangle width.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">the rectangle height.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="resource-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ResourceType"/>
      </property>
    </class>
    <callback name="gAxisColorMapHandler" c:type="GogAxisColorMapHandler">
      <doc xml:space="preserve">Type of the callback to pass to gog_axis_color_map_foreach()
to iterate through color maps.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="map" transfer-ownership="none">
          <doc xml:space="preserve">a #GogAxisColorMap</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:space="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="gAxisElemType" c:type="GogAxisElemType">
      <doc xml:space="preserve">The indices of the #GOData associated to the axis.</doc>
      <member name="min" value="0" c:identifier="GOG_AXIS_ELEM_MIN">
        <doc xml:space="preserve">minimum value.</doc>
      </member>
      <member name="max" value="1" c:identifier="GOG_AXIS_ELEM_MAX">
        <doc xml:space="preserve">maximum value.</doc>
      </member>
      <member name="major_tick"
              value="2"
              c:identifier="GOG_AXIS_ELEM_MAJOR_TICK">
        <doc xml:space="preserve">distance between two major ticks.</doc>
      </member>
      <member name="minor_tick"
              value="3"
              c:identifier="GOG_AXIS_ELEM_MINOR_TICK">
        <doc xml:space="preserve">distance between two minor ticks.</doc>
      </member>
      <member name="cross_point"
              value="4"
              c:identifier="GOG_AXIS_ELEM_CROSS_POINT">
        <doc xml:space="preserve">position of the other axis crossing.</doc>
      </member>
      <member name="max_entry"
              value="5"
              c:identifier="GOG_AXIS_ELEM_MAX_ENTRY">
        <doc xml:space="preserve">maximum value, should not occur.</doc>
      </member>
    </enumeration>
    <class name="gAxisLine"
           c:symbol-prefix="gog_axis_line"
           c:type="GogAxisLine"
           parent="gAxisBase"
           glib:type-name="GogAxisLine"
           glib:get-type="gog_axis_line_get_type">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <method name="get_ticks" c:identifier="gog_axis_line_get_ticks">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="axis_line" transfer-ownership="none">
            <type name="gAxisLine" c:type="GogAxisLine*"/>
          </instance-parameter>
          <parameter name="ticks" transfer-ownership="none">
            <type name="gAxisTick" c:type="GogAxisTick**"/>
          </parameter>
        </parameters>
      </method>
      <property name="assigned-format-string-XL"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="gAxisMap"
            c:type="GogAxisMap"
            glib:type-name="GogAxisMap"
            glib:get-type="gog_axis_map_get_type"
            c:symbol-prefix="gog_axis_map">
      <constructor name="new" c:identifier="gog_axis_map_new">
        <doc xml:space="preserve">Creates a #GogAxisMap for data mapping to plot window.
offset and length are optional parameters to be used with
gog_axis_map_to_view in order to translates data coordinates
into canvas space.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated #GogAxisMap.</doc>
          <type name="gAxisMap" c:type="GogAxisMap*"/>
        </return-value>
        <parameters>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">start of plot area.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">length of plot area.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="" c:identifier="gog_axis_map" moved-to="gog_axis_map">
        <doc xml:space="preserve">Converts @value to plot coordinates. A value in [0,1.0] range means a data
within axis bounds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">mapped value.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to map to plot space.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="derivative_to_view"
              c:identifier="gog_axis_map_derivative_to_view">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the derivative of the mapping expression at value.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to map to canvas space</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="finite" c:identifier="gog_axis_map_finite">
        <doc xml:space="preserve">Tests whether @value is valid for the given @map.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if value means something</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to test</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gog_axis_map_free">
        <doc xml:space="preserve">Frees #GogAxisMap object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="from_view" c:identifier="gog_axis_map_from_view">
        <doc xml:space="preserve">Converts value from canvas space to data space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value in data coordinates</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to unmap from canvas space.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_baseline" c:identifier="gog_axis_map_get_baseline">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the baseline for @map, in view coordinates,
	clipped to offset and offset+length, where offset and length
	are the parameters of gog_axis_map_new.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="gog_axis_map_get_bounds">
        <doc xml:space="preserve">Gets bounds for the whole chart relative to the given axis map in data
coordinates. If axis is invalid, it'll return arbitrary bounds.

Any of @minimum and @maximum may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="minimum" transfer-ownership="none">
            <doc xml:space="preserve">location to store minimum for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <doc xml:space="preserve">location to store maximum for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extents" c:identifier="gog_axis_map_get_extents">
        <doc xml:space="preserve">Gets start and stop for the whole chart relative to the given axis map
in data coordinates. If axis is not inverted, start = minimum and
stop = maximum.  If axis is invalid, it'll return arbitrary bounds.

Any of @start and @stop may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">location to store start for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:space="preserve">location to store stop for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_real_bounds"
              c:identifier="gog_axis_map_get_real_bounds">
        <doc xml:space="preserve">Gets bounds for the given axis map in data coordinates. If axis is invalid,
it'll return arbitrary bounds.

Any of @minimum and @maximum may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="minimum" transfer-ownership="none">
            <doc xml:space="preserve">location to store minimum for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="maximum" transfer-ownership="none">
            <doc xml:space="preserve">location to store maximum for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_real_extents"
              c:identifier="gog_axis_map_get_real_extents">
        <doc xml:space="preserve">Gets start and stop for the given axis map in data coordinates. If
axis is not inverted, start = minimum and stop = maximum.  If axis is invalid,
it'll return arbitrary bounds.

Any of @start and @stop may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">location to store start for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:space="preserve">location to store stop for this axis</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_discrete" c:identifier="gog_axis_map_is_discrete">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE is the axis is discrete;</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_inverted" c:identifier="gog_axis_map_is_inverted">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE is the axis is inverted;</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gog_axis_map_is_valid">
        <doc xml:space="preserve">Tests if @map was correctly initialized, i.e. if bounds are
valid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if map is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_view" c:identifier="gog_axis_map_to_view">
        <doc xml:space="preserve">Converts value from data space to canvas space, using
offset and length parameters given to gog_axis_map_new.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a value in canvas coordinates</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogAxisMap</doc>
            <type name="gAxisMap" c:type="GogAxisMap*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to map to canvas space</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="gAxisMetrics" c:type="GogAxisMetrics">
      <member name="invalid"
              value="-1"
              c:identifier="GOG_AXIS_METRICS_INVALID">
        <doc xml:space="preserve">invalid.</doc>
      </member>
      <member name="default" value="0" c:identifier="GOG_AXIS_METRICS_DEFAULT">
        <doc xml:space="preserve">default.</doc>
      </member>
      <member name="absolute"
              value="1"
              c:identifier="GOG_AXIS_METRICS_ABSOLUTE">
        <doc xml:space="preserve">absolute distance between major ticks.</doc>
      </member>
      <member name="relative"
              value="2"
              c:identifier="GOG_AXIS_METRICS_RELATIVE">
        <doc xml:space="preserve">relative to another axis.</doc>
      </member>
      <member name="relative_ticks"
              value="3"
              c:identifier="GOG_AXIS_METRICS_RELATIVE_TICKS">
        <doc xml:space="preserve">relative distance between ticks related to
another axis.</doc>
      </member>
      <member name="max" value="4" c:identifier="GOG_AXIS_METRICS_MAX">
        <doc xml:space="preserve">first unused value.</doc>
      </member>
    </enumeration>
    <enumeration name="gAxisPolarUnit" c:type="GogAxisPolarUnit">
      <member name="degrees"
              value="0"
              c:identifier="GOG_AXIS_POLAR_UNIT_DEGREES">
        <doc xml:space="preserve">units as degrees.</doc>
      </member>
      <member name="radians"
              value="1"
              c:identifier="GOG_AXIS_POLAR_UNIT_RADIANS">
        <doc xml:space="preserve">units as radians.</doc>
      </member>
      <member name="grads" value="2" c:identifier="GOG_AXIS_POLAR_UNIT_GRADS">
        <doc xml:space="preserve">units as grads.</doc>
      </member>
      <member name="max" value="3" c:identifier="GOG_AXIS_POLAR_UNIT_MAX">
        <doc xml:space="preserve">maximum values, should not occur.</doc>
      </member>
    </enumeration>
    <enumeration name="gAxisPosition" c:type="GogAxisPosition">
      <member name="at_low" value="0" c:identifier="GOG_AXIS_AT_LOW">
        <doc xml:space="preserve">crosses the other axis at low values.</doc>
      </member>
      <member name="cross" value="1" c:identifier="GOG_AXIS_CROSS">
        <doc xml:space="preserve">crosses the other axis at a given value.</doc>
      </member>
      <member name="at_high" value="2" c:identifier="GOG_AXIS_AT_HIGH">
        <doc xml:space="preserve">crosses the other axis at high values.</doc>
      </member>
      <member name="auto" value="3" c:identifier="GOG_AXIS_AUTO">
        <doc xml:space="preserve">crosses at an automatically determined position.</doc>
      </member>
    </enumeration>
    <bitfield name="gAxisSet" c:type="GogAxisSet">
      <doc xml:space="preserve">Gives the needed axes for a plot.</doc>
      <member name="unknown" value="-1" c:identifier="GOG_AXIS_SET_UNKNOWN">
        <doc xml:space="preserve">unkown, should not occur.</doc>
      </member>
      <member name="none" value="0" c:identifier="GOG_AXIS_SET_NONE">
        <doc xml:space="preserve">no axis.</doc>
      </member>
      <member name="x" value="1" c:identifier="GOG_AXIS_SET_X">
        <doc xml:space="preserve">only an X axis.</doc>
      </member>
      <member name="xy" value="3" c:identifier="GOG_AXIS_SET_XY">
        <doc xml:space="preserve">both X and Y axes.</doc>
      </member>
      <member name="xy_pseudo_3d"
              value="35"
              c:identifier="GOG_AXIS_SET_XY_pseudo_3d">
        <doc xml:space="preserve">X, Y, and pseudo-3D axes.</doc>
      </member>
      <member name="xy_color" value="67" c:identifier="GOG_AXIS_SET_XY_COLOR">
        <doc xml:space="preserve">X, Y, and color axes.</doc>
      </member>
      <member name="xy_bubble"
              value="131"
              c:identifier="GOG_AXIS_SET_XY_BUBBLE">
        <doc xml:space="preserve">X, Y, and bubble axes.</doc>
      </member>
      <member name="xyz" value="7" c:identifier="GOG_AXIS_SET_XYZ">
        <doc xml:space="preserve">X, Y, and Z axes.</doc>
      </member>
      <member name="radar" value="24" c:identifier="GOG_AXIS_SET_RADAR">
        <doc xml:space="preserve">circular and radial axes.</doc>
      </member>
      <member name="fundamental"
              value="31"
              c:identifier="GOG_AXIS_SET_FUNDAMENTAL">
        <doc xml:space="preserve">mask for all fundamental axes.</doc>
      </member>
      <member name="all" value="255" c:identifier="GOG_AXIS_SET_ALL">
        <doc xml:space="preserve">mask for all known axis types.</doc>
      </member>
    </bitfield>
    <record name="gAxisTick" c:type="GogAxisTick">
      <field name="position" writable="1">
        <doc xml:space="preserve">position on the axis.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve">#GogAxisTickTypes</doc>
        <type name="gAxisTickTypes" c:type="GogAxisTickTypes"/>
      </field>
      <field name="str" writable="1">
        <doc xml:space="preserve">label, might be rich text.</doc>
        <type name="String" c:type="GOString*"/>
      </field>
    </record>
    <enumeration name="gAxisTickTypes" c:type="GogAxisTickTypes">
      <member name="none" value="0" c:identifier="GOG_AXIS_TICK_NONE">
        <doc xml:space="preserve">no tick, should not occur.</doc>
      </member>
      <member name="major" value="1" c:identifier="GOG_AXIS_TICK_MAJOR">
        <doc xml:space="preserve">major tick.</doc>
      </member>
      <member name="minor" value="2" c:identifier="GOG_AXIS_TICK_MINOR">
        <doc xml:space="preserve">minor tick.</doc>
      </member>
    </enumeration>
    <enumeration name="gAxisType" c:type="GogAxisType">
      <member name="unknown" value="-1" c:identifier="GOG_AXIS_UNKNOWN">
        <doc xml:space="preserve">invalid, should not occur.</doc>
      </member>
      <member name="x" value="0" c:identifier="GOG_AXIS_X">
        <doc xml:space="preserve">X axis.</doc>
      </member>
      <member name="y" value="1" c:identifier="GOG_AXIS_Y">
        <doc xml:space="preserve">Y axis.</doc>
      </member>
      <member name="z" value="2" c:identifier="GOG_AXIS_Z">
        <doc xml:space="preserve">Z axis.</doc>
      </member>
      <member name="circular" value="3" c:identifier="GOG_AXIS_CIRCULAR">
        <doc xml:space="preserve">circular axis/</doc>
      </member>
      <member name="radial" value="4" c:identifier="GOG_AXIS_RADIAL">
        <doc xml:space="preserve">radial axis.</doc>
      </member>
      <member name="virtual" value="5" c:identifier="GOG_AXIS_VIRTUAL">
        <doc xml:space="preserve">start of virtual axes.</doc>
      </member>
      <member name="pseudo_3d" value="5" c:identifier="GOG_AXIS_PSEUDO_3D">
        <doc xml:space="preserve">pseudo-3d axis.</doc>
      </member>
      <member name="color" value="6" c:identifier="GOG_AXIS_COLOR">
        <doc xml:space="preserve">color axis.</doc>
      </member>
      <member name="bubble" value="7" c:identifier="GOG_AXIS_BUBBLE">
        <doc xml:space="preserve">bubble axis.</doc>
      </member>
      <member name="types" value="8" c:identifier="GOG_AXIS_TYPES">
        <doc xml:space="preserve">maximum value, should not occur.</doc>
      </member>
    </enumeration>
    <class name="gChart"
           c:symbol-prefix="gog_chart"
           c:type="GogChart"
           parent="gOutlinedObject"
           glib:type-name="GogChart"
           glib:get-type="gog_chart_get_type">
      <implements name="StyledObject"/>
      <function name="view_get_plot_area"
                c:identifier="gog_chart_view_get_plot_area">
        <return-value transfer-ownership="full">
          <type name="gViewAllocation" c:type="GogViewAllocation*"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </parameter>
        </parameters>
      </function>
      <method name="axis_set_assign" c:identifier="gog_chart_axis_set_assign">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="axis_set_is_valid"
              c:identifier="gog_chart_axis_set_is_valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_elem" c:identifier="gog_chart_foreach_elem">
        <doc xml:space="preserve">Applies @handler to children</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="only_visible" transfer-ownership="none">
            <doc xml:space="preserve">whether to only apply to visible children</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">callback</doc>
            <type name="gEnumFunc" c:type="GogEnumFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axes" c:identifier="gog_chart_get_axes">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a list which the
caller must free of all axis of type @target
associated with @chart.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gAxis"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisType</doc>
            <type name="gAxisType" c:type="GogAxisType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_set" c:identifier="gog_chart_get_axis_set">
        <return-value transfer-ownership="none">
          <type name="gAxisSet" c:type="GogAxisSet"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cardinality" c:identifier="gog_chart_get_cardinality">
        <doc xml:space="preserve">Update and cache cardinality values if required, and returns
full and visible cardinality. Full cardinality is the number of
chart elements that require a different style. Visible cardinality is
the number of chart elements shown in chart legend.

@full and @visible may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="full" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for full cardinality</doc>
            <type name="guint" c:type="unsigned*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for visible cardinality</doc>
            <type name="guint" c:type="unsigned*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_grid" c:identifier="gog_chart_get_grid">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the grid associated with @chart if one exists
otherwise NULL.</doc>
          <type name="gGrid" c:type="GogGrid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plot_area" c:identifier="gog_chart_get_plot_area">
        <doc xml:space="preserve">Stores plot area in plot_area, in fraction of chart size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if plot area position is manual.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="plot_area" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plots" c:identifier="gog_chart_get_plots">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of the plots
in @chart.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gPlot"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gog_chart_get_position">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the chart has been positioned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">const #GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="guint" c:type="unsigned*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="guint" c:type="unsigned*"/>
          </parameter>
          <parameter name="cols" transfer-ownership="none">
            <type name="guint" c:type="unsigned*"/>
          </parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="unsigned*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_3d" c:identifier="gog_chart_is_3d">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_cardinality_update"
              c:identifier="gog_chart_request_cardinality_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_plot_area" c:identifier="gog_chart_set_plot_area">
        <doc xml:space="preserve">If plot_area != NULL, sets plot area size and location, in fraction
of chart size, and sets GogChart::is_plot_area_manual flag to TRUE.
If plot_area == NULL, sets GogChart::is_plot_area_manual to FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="plot_area" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gog_chart_set_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">#GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="cols" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <property name="cardinality-valid" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="columns" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="is-plot-area-manual"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="plot-area" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rows" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="xpos" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="ypos" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="base">
        <type name="gOutlinedObject" c:type="GogOutlinedObject"/>
      </field>
      <field name="plots">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="full_cardinality">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="visible_cardinality">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="cardinality_valid">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="x_pos">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="y_pos">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="cols">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="rows">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="x_pos_actual">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="y_pos_actual">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="grid">
        <type name="gObject" c:type="GogObject*"/>
      </field>
      <field name="axes">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="axis_set">
        <type name="gAxisSet" c:type="GogAxisSet"/>
      </field>
      <field name="plot_area">
        <type name="gViewAllocation" c:type="GogViewAllocation"/>
      </field>
      <field name="is_plot_area_manual">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="gChartMap"
            c:type="GogChartMap"
            glib:type-name="GogChartMap"
            glib:get-type="gog_chart_map_get_type"
            c:symbol-prefix="gog_chart_map">
      <constructor name="new" c:identifier="gog_chart_map_new">
        <doc xml:space="preserve">Creates a new #GogChartMap, used for conversion from data space
to canvas space.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GogChartMap object.</doc>
          <type name="gChartMap" c:type="GogChartMap*"/>
        </return-value>
        <parameters>
          <parameter name="chart" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChart</doc>
            <type name="gChart" c:type="GogChart*"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <doc xml:space="preserve">area allocated to chart</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="axis0" transfer-ownership="none">
            <doc xml:space="preserve">1st dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="axis1" transfer-ownership="none">
            <doc xml:space="preserve">2nd dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="axis2" transfer-ownership="none">
            <doc xml:space="preserve">3rd dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="fill_area" transfer-ownership="none">
            <doc xml:space="preserve">does chart fill allocated area</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="2D_derivative_to_view"
              c:identifier="gog_chart_map_2D_derivative_to_view">
        <doc xml:space="preserve">Converts a 2D slope from data space to canvas space. It is only implemented
 for xy maps.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the slope in canvas space or go_nan.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="deriv" transfer-ownership="none">
            <doc xml:space="preserve">the slope in data space</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">data x value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">data y value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="2D_to_view" c:identifier="gog_chart_map_2D_to_view">
        <doc xml:space="preserve">Converts a 2D coordinate from data space to canvas space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">data x value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">data y value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for x converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for y converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gog_chart_map_free">
        <doc xml:space="preserve">Frees @map object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_axis_map" c:identifier="gog_chart_map_get_axis_map">
        <doc xml:space="preserve">Convenience function which returns one of the associated axis_map.

Valid values are in range [0..2].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GogAxisMap.</doc>
          <type name="gAxisMap" c:type="GogAxisMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">axis index</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_polar_parms"
              c:identifier="gog_chart_map_get_polar_parms">
        <doc xml:space="preserve">Convenience function for retrieving data related to polar plot layout.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GogChartMapPolarData struct.</doc>
          <type name="gChartMapPolarData" c:type="GogChartMapPolarData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gog_chart_map_is_valid">
        <doc xml:space="preserve">Tests if @map was correctly initializied, i.e. if all associated axis_map
are valid (see gog_axis_map_is_valid() ).

given
to gog_chart_map_new.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @map is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_close_path"
              c:identifier="gog_chart_map_make_close_path">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GOPath using @x and @y data, with respect to @fill_type.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x data</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y data</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n_points" transfer-ownership="none">
            <doc xml:space="preserve">number of points</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <doc xml:space="preserve">fill type</doc>
            <type name="gSeriesFillType" c:type="GogSeriesFillType"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_path" c:identifier="gog_chart_map_make_path">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GOPath using @x and @y data, each valid point being connected with respect to @interpolation.</doc>
          <type name="Path" c:type="GOPath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x data</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y data</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="n_points" transfer-ownership="none">
            <doc xml:space="preserve">number of points</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interpolation" transfer-ownership="none">
            <doc xml:space="preserve">interpolation type</doc>
            <type name="LineInterpolation" c:type="GOLineInterpolation"/>
          </parameter>
          <parameter name="skip_invalid" transfer-ownership="none">
            <doc xml:space="preserve">whether to ignore invalid data or interrupt the interpolation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a user pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="view_to_2D" c:identifier="gog_chart_map_view_to_2D">
        <doc xml:space="preserve">Converts a 2D coordinate from canvas space to data space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">data x value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">data y value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for x converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for y converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="gChartMap3D"
            c:type="GogChartMap3D"
            glib:type-name="GogChartMap3D"
            glib:get-type="gog_chart_map_3d_get_type"
            c:symbol-prefix="gog_chart_map_3d">
      <constructor name="new" c:identifier="gog_chart_map_3d_new">
        <doc xml:space="preserve">Creates a new #GogChartMap3D, used for conversion from data space
to canvas space.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GogChartMap3D object.</doc>
          <type name="gChartMap3D" c:type="GogChartMap3D*"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView for a chart with 3D support or one of its children</doc>
            <type name="gView" c:type="GogView*"/>
          </parameter>
          <parameter name="area" transfer-ownership="none">
            <doc xml:space="preserve">area allocated to chart</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="axis0" transfer-ownership="none">
            <doc xml:space="preserve">1st dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="axis1" transfer-ownership="none">
            <doc xml:space="preserve">2nd dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
          <parameter name="axis2" transfer-ownership="none">
            <doc xml:space="preserve">3rd dimension axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="gog_chart_map_3d_free">
        <doc xml:space="preserve">Frees @map object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap3D</doc>
            <type name="gChartMap3D" c:type="GogChartMap3D*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_axis_map" c:identifier="gog_chart_map_3d_get_axis_map">
        <doc xml:space="preserve">Convenience function which returns one of the associated axis_map.

Valid values are in range [0..2].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GogAxisMap.</doc>
          <type name="gAxisMap" c:type="GogAxisMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap3D</doc>
            <type name="gChartMap3D" c:type="GogChartMap3D*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">axis index</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gog_chart_map_3d_is_valid">
        <doc xml:space="preserve">Tests if @map was correctly initialized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @map is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap3D</doc>
            <type name="gChartMap3D" c:type="GogChartMap3D*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_view" c:identifier="gog_chart_map_3d_to_view">
        <doc xml:space="preserve">Converts a 3D coordinate from data space to canvas space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChartMap3D</doc>
            <type name="gChartMap3D" c:type="GogChartMap3D*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">data x value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">data y value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">data y value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for x converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for y converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for z converted value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="gChartMapPolarData" c:type="GogChartMapPolarData">
      <field name="cx" writable="1">
        <doc xml:space="preserve">center horizontal position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="cy" writable="1">
        <doc xml:space="preserve">center vertical position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="rx" writable="1">
        <doc xml:space="preserve">available horizontal space from the center.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ry" writable="1">
        <doc xml:space="preserve">available vertical space from the center.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="th0" writable="1">
        <doc xml:space="preserve">start angle.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="th1" writable="1">
        <doc xml:space="preserve">end angle.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <class name="gChildButton"
           c:symbol-prefix="gog_child_button"
           c:type="GogChildButton"
           parent="Gtk.Box"
           glib:type-name="GogChildButton"
           glib:get-type="gog_child_button_get_type"
           glib:type-struct="gChildButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="gog_child_button_new">
        <doc xml:space="preserve">Creates an add button that provides a popup menu for child creation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="set_object" c:identifier="gog_child_button_set_object">
        <doc xml:space="preserve">Sets the current object with which @child_button operates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="child_button" transfer-ownership="none">
            <doc xml:space="preserve">a #GogChildButton</doc>
            <type name="gChildButton" c:type="GogChildButton*"/>
          </instance-parameter>
          <parameter name="gog_object" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="gChildButtonClass"
            c:type="GogChildButtonClass"
            disguised="1"
            glib:is-gtype-struct-for="gChildButton">
    </record>
    <class name="gColorScale"
           c:symbol-prefix="gog_color_scale"
           c:type="GogColorScale"
           parent="gStyledObject"
           glib:type-name="GogColorScale"
           glib:get-type="gog_color_scale_get_type">
      <implements name="StyledObject"/>
      <method name="get_axis" c:identifier="gog_color_scale_get_axis">
        <doc xml:space="preserve">Gets the axis mapping to the colors and associated with @scale</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the associated axis.</doc>
          <type name="gAxis" c:type="GogAxis*"/>
        </return-value>
        <parameters>
          <instance-parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">#GogColorScale</doc>
            <type name="gColorScale" c:type="GogColorScale*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_axis" c:identifier="gog_color_scale_set_axis">
        <doc xml:space="preserve">Associates the axis with @scale.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">#GogColorScale</doc>
            <type name="gColorScale" c:type="GogColorScale*"/>
          </instance-parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">a color or pseudo-3d axis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
        </parameters>
      </method>
      <property name="axis" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="horizontal" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tick-size-pts" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <interface name="gDataAllocator"
               c:symbol-prefix="gog_data_allocator"
               c:type="GogDataAllocator"
               glib:type-name="GogDataAllocator"
               glib:get-type="gog_data_allocator_get_type">
      <method name="allocate" c:identifier="gog_data_allocator_allocate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dalloc" transfer-ownership="none">
            <doc xml:space="preserve">a #GogDataAllocator</doc>
            <type name="gDataAllocator" c:type="GogDataAllocator*"/>
          </instance-parameter>
          <parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">a #GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </parameter>
        </parameters>
      </method>
      <method name="editor" c:identifier="gog_data_allocator_editor">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GtkWidget.</doc>
          <type name="gDataEditor" c:type="GogDataEditor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dalloc" transfer-ownership="none">
            <doc xml:space="preserve">a #GogDataAllocator</doc>
            <type name="gDataAllocator" c:type="GogDataAllocator*"/>
          </instance-parameter>
          <parameter name="set" transfer-ownership="none">
            <type name="gDataset" c:type="GogDataset*"/>
          </parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="data_type" transfer-ownership="none">
            <type name="gDataType" c:type="GogDataType"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="gDataAllocatorClass" c:type="GogDataAllocatorClass">
      <field name="base" writable="1">
        <doc xml:space="preserve">base interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="allocate">
        <callback name="allocate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="a" transfer-ownership="none">
              <type name="gDataAllocator" c:type="GogDataAllocator*"/>
            </parameter>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="editor" introspectable="0">
        <callback name="editor" introspectable="0">
          <return-value>
            <type name="gDataEditor" c:type="GogDataEditor*"/>
          </return-value>
          <parameters>
            <parameter name="a" transfer-ownership="none">
              <type name="gDataAllocator" c:type="GogDataAllocator*"/>
            </parameter>
            <parameter name="set" transfer-ownership="none">
              <type name="gDataset" c:type="GogDataset*"/>
            </parameter>
            <parameter name="dim_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="data_type" transfer-ownership="none">
              <type name="gDataType" c:type="GogDataType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="gDataDuplicator" c:type="GogDataDuplicator">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <type name="gDataset" c:type="GogDataset*"/>
        </parameter>
        <parameter name="dst" transfer-ownership="none">
          <type name="gDataset" c:type="GogDataset*"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="gDataEditor"
               c:symbol-prefix="gog_data_editor"
               c:type="GogDataEditor"
               glib:type-name="GogDataEditor"
               glib:get-type="gog_data_editor_get_type">
      <method name="set_format" c:identifier="gog_data_editor_set_format">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <type name="gDataEditor" c:type="GogDataEditor*"/>
          </instance-parameter>
          <parameter name="fmt" transfer-ownership="none">
            <type name="Format" c:type="GOFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_double"
              c:identifier="gog_data_editor_set_value_double">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <type name="gDataEditor" c:type="GogDataEditor*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="date_conv" transfer-ownership="none">
            <type name="DateConventions" c:type="GODateConventions*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="gDataEditorClass" c:type="GogDataEditorClass">
      <doc xml:space="preserve">Interface to edit #GOData.</doc>
      <field name="base" writable="1">
        <doc xml:space="preserve">base interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_format">
        <callback name="set_format">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <type name="gDataEditor" c:type="GogDataEditor*"/>
            </parameter>
            <parameter name="fmt" transfer-ownership="none">
              <type name="Format" c:type="GOFormat*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_value_double">
        <callback name="set_value_double">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <type name="gDataEditor" c:type="GogDataEditor*"/>
            </parameter>
            <parameter name="val" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="date_conv" transfer-ownership="none">
              <type name="DateConventions" c:type="GODateConventions*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="gDataLabel"
           c:symbol-prefix="gog_data_label"
           c:type="GogDataLabel"
           parent="gOutlinedObject"
           glib:type-name="GogDataLabel"
           glib:get-type="gog_data_label_get_type">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <method name="get_element" c:identifier="gog_data_label_get_element">
        <return-value transfer-ownership="full">
          <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbl" transfer-ownership="none">
            <type name="gDataLabel" c:type="GogDataLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gog_data_label_get_position">
        <return-value transfer-ownership="none">
          <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbl" transfer-ownership="none">
            <type name="gDataLabel" c:type="GogDataLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allowed_position"
              c:identifier="gog_data_label_set_allowed_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbl" transfer-ownership="none">
            <type name="gDataLabel" c:type="GogDataLabel*"/>
          </instance-parameter>
          <parameter name="allowed" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_position"
              c:identifier="gog_data_label_set_default_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbl" transfer-ownership="none">
            <type name="gDataLabel" c:type="GogDataLabel*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position" c:identifier="gog_data_label_set_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbl" transfer-ownership="none">
            <type name="gDataLabel" c:type="GogDataLabel*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
          </parameter>
        </parameters>
      </method>
      <property name="format" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="index" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="offset" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="base">
        <type name="gOutlinedObject" c:type="GogOutlinedObject"/>
      </field>
      <field name="index">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="position">
        <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
      </field>
      <field name="default_pos">
        <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
      </field>
      <field name="allowed_pos">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="offset">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="format">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="separator">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="custom_label">
        <array zero-terminated="0" c:type="GogDatasetElement" fixed-size="2">
          <type name="gDatasetElement" c:type="GogDatasetElement"/>
        </array>
      </field>
      <field name="element">
        <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt"/>
      </field>
      <field name="supports_percent">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <enumeration name="gDataType" c:type="GogDataType">
      <member name="scalar" value="0" c:identifier="GOG_DATA_SCALAR">
        <doc xml:space="preserve">scalar value.</doc>
      </member>
      <member name="vector" value="1" c:identifier="GOG_DATA_VECTOR">
        <doc xml:space="preserve">vector data.</doc>
      </member>
      <member name="matrix" value="2" c:identifier="GOG_DATA_MATRIX">
        <doc xml:space="preserve">matrix data.</doc>
      </member>
    </enumeration>
    <interface name="gDataset"
               c:symbol-prefix="gog_dataset"
               c:type="GogDataset"
               glib:type-name="GogDataset"
               glib:get-type="gog_dataset_get_type">
      <method name="dims" c:identifier="gog_dataset_dims">
        <doc xml:space="preserve">FIXME ?? Fix what ??
Stores the first and last valid indicises to get/set dim
in @first and @last.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataset</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="first" transfer-ownership="none">
            <doc xml:space="preserve">inclusive</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="last" transfer-ownership="none">
            <doc xml:space="preserve">_inclusive_</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_to_simple" c:identifier="gog_dataset_dup_to_simple">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <type name="gDataset" c:type="GogDataset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="finalize" c:identifier="gog_dataset_finalize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dim" c:identifier="gog_dataset_get_dim">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the GOData associated with dimension @dim_i.  Does NOT add a
	reference.  or %NULL on failure.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataset</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_elem"
              c:identifier="gog_dataset_get_elem"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">the GODataset associated with dimension @dim_i.</doc>
          <type name="gDatasetElement" c:type="GogDatasetElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataset</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="parent_changed" c:identifier="gog_dataset_parent_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="was_set" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dim" c:identifier="gog_dataset_set_dim" throws="1">
        <doc xml:space="preserve">Absorbs a ref to @val if it is non NULL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataset</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <doc xml:space="preserve">&lt; 0 gets the name</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="val" transfer-ownership="full">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dim_internal"
              c:identifier="gog_dataset_set_dim_internal">
        <doc xml:space="preserve">an internal routine to handle signal setup and teardown</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataset</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <doc xml:space="preserve">the index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
          <parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="gDatasetClass" c:type="GogDatasetClass">
      <field name="base" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_elem" introspectable="0">
        <callback name="get_elem" introspectable="0">
          <return-value>
            <type name="gDatasetElement" c:type="GogDatasetElement*"/>
          </return-value>
          <parameters>
            <parameter name="set" transfer-ownership="none">
              <type name="gDataset" c:type="GogDataset*"/>
            </parameter>
            <parameter name="dim_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_dim">
        <callback name="set_dim" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="set" transfer-ownership="none">
              <type name="gDataset" c:type="GogDataset*"/>
            </parameter>
            <parameter name="dim_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="val" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dims">
        <callback name="dims">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="set" transfer-ownership="none">
              <type name="gDataset" c:type="GogDataset*"/>
            </parameter>
            <parameter name="first" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="last" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dim_changed">
        <callback name="dim_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="set" transfer-ownership="none">
              <type name="gDataset" c:type="GogDataset*"/>
            </parameter>
            <parameter name="dim_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="gDatasetElement" c:type="GogDatasetElement">
      <field name="data" writable="1">
        <doc xml:space="preserve">the #GOData</doc>
        <type name="Data" c:type="GOData*"/>
      </field>
      <field name="set" writable="1">
        <doc xml:space="preserve">the owner data set.</doc>
        <type name="gDataset" c:type="GogDataset*"/>
      </field>
      <field name="dim_i" writable="1">
        <doc xml:space="preserve">the dimension iside the dataset.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="handler" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
    </record>
    <enumeration name="gDimType" c:type="GogDimType">
      <doc xml:space="preserve">Data types for plots.</doc>
      <member name="invalid" value="-1" c:identifier="GOG_DIM_INVALID">
        <doc xml:space="preserve">invalid should not occur.</doc>
      </member>
      <member name="label" value="0" c:identifier="GOG_DIM_LABEL">
        <doc xml:space="preserve">labels.</doc>
      </member>
      <member name="index" value="1" c:identifier="GOG_DIM_INDEX">
        <doc xml:space="preserve">indices.</doc>
      </member>
      <member name="value" value="2" c:identifier="GOG_DIM_VALUE">
        <doc xml:space="preserve">vector of values.</doc>
      </member>
      <member name="matrix" value="3" c:identifier="GOG_DIM_MATRIX">
        <doc xml:space="preserve">matrix of values.</doc>
      </member>
      <member name="types" value="4" c:identifier="GOG_DIM_TYPES">
        <doc xml:space="preserve">should not occur.</doc>
      </member>
    </enumeration>
    <callback name="gEnumFunc" c:type="GogEnumFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </parameter>
        <parameter name="style" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="gEquation"
           c:symbol-prefix="gog_equation"
           c:type="GogEquation"
           parent="gOutlinedObject"
           glib:type-name="GogEquation"
           glib:get-type="gog_equation_get_type">
      <implements name="StyledObject"/>
      <property name="inline-mode" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="itex" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="gErrorBar"
           c:symbol-prefix="gog_error_bar"
           c:type="GogErrorBar"
           parent="GObject.Object"
           glib:type-name="GogErrorBar"
           glib:get-type="gog_error_bar_get_type">
      <implements name="Persist"/>
      <function name="prefs" c:identifier="gog_error_bar_prefs">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the error bar properties #GtkWidget</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">the name of the @series property correspondig to the #GogErrorBar.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">#GogErrorBarDirection</doc>
            <type name="gErrorBarDirection" c:type="GogErrorBarDirection"/>
          </parameter>
          <parameter name="dalloc" transfer-ownership="none">
            <doc xml:space="preserve">#GogDataAllocator</doc>
            <type name="gDataAllocator" c:type="GogDataAllocator*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">#GOCmdContext</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="dup" c:identifier="gog_error_bar_dup">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicated error bar.</doc>
          <type name="gErrorBar" c:type="GogErrorBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <doc xml:space="preserve">#GogErrorBar</doc>
            <type name="gErrorBar" c:type="GogErrorBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="gog_error_bar_get_bounds">
        <doc xml:space="preserve">If the value correponding to @index is valid, fills min and max with the error values:
-&gt; positive_error in @max.
-&gt; negative_error in @min.
If one of the errors is not valid or not defined, its value is set to -1.0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if the @bar-&gt;type is %GOG_ERROR_BAR_TYPE_NONE or if the value is not valid,
	%TRUE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <doc xml:space="preserve">A GogErrorBar</doc>
            <type name="gErrorBar" c:type="const GogErrorBar*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">the index corresponding to the value which error limits are</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve">where the minimum value will be stored</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve">where the maximum value will be stored</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_minmax" c:identifier="gog_error_bar_get_minmax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <type name="gErrorBar" c:type="const GogErrorBar*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_visible" c:identifier="gog_error_bar_is_visible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <type name="gErrorBar" c:type="GogErrorBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="gog_error_bar_render">
        <doc xml:space="preserve">Displays the error bar. If @plus is negative, the positive side of the bar is not displayed,
and if @minus is negative, the negative side of the bar is not displayed.
x_map and y_map are used to convert coordinates from data space to canvas coordinates.
This function must not be called if #gog_error_bar_get_bounds returned FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bar" transfer-ownership="none">
            <doc xml:space="preserve">A GogErrorBar</doc>
            <type name="gErrorBar" c:type="const GogErrorBar*"/>
          </instance-parameter>
          <parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">A GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">A GogChartMap for the chart</doc>
            <type name="gChartMap" c:type="GogChartMap*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x coordinate of the origin of the bar</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y coordinate of the origin of the bar</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="minus" transfer-ownership="none">
            <doc xml:space="preserve">distance from the origin to the negative end of the bar</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="plus" transfer-ownership="none">
            <doc xml:space="preserve">distance from the origin to the positive end of the bar</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">the #GogErrorBarDirection for the bar.</doc>
            <type name="gErrorBarDirection" c:type="GogErrorBarDirection"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="type">
        <type name="gErrorBarType" c:type="GogErrorBarType"/>
      </field>
      <field name="series">
        <type name="gSeries" c:type="GogSeries*"/>
      </field>
      <field name="dim_i">
        <type name="gint" c:type="int"/>
      </field>
      <field name="error_i">
        <type name="gint" c:type="int"/>
      </field>
      <field name="display">
        <type name="gErrorBarDisplay" c:type="GogErrorBarDisplay"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="style">
        <type name="Style" c:type="GOStyle*"/>
      </field>
    </class>
    <enumeration name="gErrorBarDirection" c:type="GogErrorBarDirection">
      <member name="horizontal"
              value="0"
              c:identifier="GOG_ERROR_BAR_DIRECTION_HORIZONTAL">
        <doc xml:space="preserve">horizontal (xy plots).</doc>
      </member>
      <member name="vertical"
              value="1"
              c:identifier="GOG_ERROR_BAR_DIRECTION_VERTICAL">
        <doc xml:space="preserve">vertical (xy plots).</doc>
      </member>
      <member name="angular"
              value="2"
              c:identifier="GOG_ERROR_BAR_DIRECTION_ANGULAR">
        <doc xml:space="preserve">angular (polar plots).</doc>
      </member>
      <member name="radial"
              value="3"
              c:identifier="GOG_ERROR_BAR_DIRECTION_RADIAL">
        <doc xml:space="preserve">radial (polar plots).</doc>
      </member>
    </enumeration>
    <enumeration name="gErrorBarDisplay" c:type="GogErrorBarDisplay">
      <member name="none" value="0" c:identifier="GOG_ERROR_BAR_DISPLAY_NONE">
        <doc xml:space="preserve">no display.</doc>
      </member>
      <member name="positive"
              value="1"
              c:identifier="GOG_ERROR_BAR_DISPLAY_POSITIVE">
        <doc xml:space="preserve">display positive deviations.</doc>
      </member>
      <member name="negative"
              value="2"
              c:identifier="GOG_ERROR_BAR_DISPLAY_NEGATIVE">
        <doc xml:space="preserve">display negative deviations.</doc>
      </member>
      <member name="both" value="3" c:identifier="GOG_ERROR_BAR_DISPLAY_BOTH">
        <doc xml:space="preserve">display both positive and negative deviations.</doc>
      </member>
    </enumeration>
    <enumeration name="gErrorBarType" c:type="GogErrorBarType">
      <member name="none" value="0" c:identifier="GOG_ERROR_BAR_TYPE_NONE">
        <doc xml:space="preserve">No error bars.</doc>
      </member>
      <member name="absolute"
              value="1"
              c:identifier="GOG_ERROR_BAR_TYPE_ABSOLUTE">
        <doc xml:space="preserve">Absolute errors.</doc>
      </member>
      <member name="relative"
              value="2"
              c:identifier="GOG_ERROR_BAR_TYPE_RELATIVE">
        <doc xml:space="preserve">Relative errors.</doc>
      </member>
      <member name="percent"
              value="3"
              c:identifier="GOG_ERROR_BAR_TYPE_PERCENT">
        <doc xml:space="preserve">Relative errors as percent.</doc>
      </member>
    </enumeration>
    <class name="gGraph"
           c:symbol-prefix="gog_graph"
           c:type="GogGraph"
           parent="gOutlinedObject"
           glib:type-name="GogGraph"
           glib:get-type="gog_graph_get_type"
           glib:type-struct="gGraphClass">
      <implements name="Persist"/>
      <implements name="StyledObject"/>
      <function name="get_supported_image_formats"
                c:identifier="gog_graph_get_supported_image_formats">
        <doc xml:space="preserve">Builds a list of supported formats for image export.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GSList
of #GOImageFormat.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="ImageFormat"/>
          </type>
        </return-value>
      </function>
      <virtual-method name="add_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="dup" c:identifier="gog_graph_dup">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a deep copy of @graph.</doc>
          <type name="gGraph" c:type="GogGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="export_image" c:identifier="gog_graph_export_image">
        <doc xml:space="preserve">Exports an image of @graph in given @format, writing results in a #GsfOutput stream.
If export format type is a bitmap one, it computes image size with x_dpi, y_dpi and
@graph size (see @gog_graph_get_size()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if export succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">a #GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">image format for export</doc>
            <type name="ImageFormat" c:type="GOImageFormat"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #GsfOutput stream</doc>
            <type name="Gsf.Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="x_dpi" transfer-ownership="none">
            <doc xml:space="preserve">x resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y_dpi" transfer-ownership="none">
            <doc xml:space="preserve">y resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_update" c:identifier="gog_graph_force_update">
        <doc xml:space="preserve">Do an update now if one has been queued.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="gog_graph_get_data">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a list of the GOData objects that are data to the graph.
The caller should _not_ modify or free the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Data"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document" c:identifier="gog_graph_get_document">
        <doc xml:space="preserve">Retrieves the #GODoc for @graph.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the document.</doc>
          <type name="Doc" c:type="GODoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">a #GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="gog_graph_get_size">
        <doc xml:space="preserve">FIXME Returns the logical size of graph, in points.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">logical width in pts</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">logical height in pts</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_theme" c:identifier="gog_graph_get_theme">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogTheme used by @graph.</doc>
          <type name="gTheme" c:type="GogTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="num_cols" c:identifier="gog_graph_num_cols">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="num_rows" c:identifier="gog_graph_num_rows">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_data" c:identifier="gog_graph_ref_data">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@dat or something equivalent to it that already exists in the graph.
	Otherwise use @dat.  Adds a gobject ref to the target and increments a
 count of the number of refs made from this #GogGraph.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_to_cairo" c:identifier="gog_graph_render_to_cairo">
        <doc xml:space="preserve">Renders a graph using @cairo. @w and @h are the requested width an height of the rendered graph, in the current @cairo coordinate space. This function is not suited for multiple rendering of the same graph. gog_renderer_render_to cairo or gog_renderer_update/gog_renderer_get_cairo_surface should be used instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">a #GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="cairo" transfer-ownership="none">
            <doc xml:space="preserve">a cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">width</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">height</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_update" c:identifier="gog_graph_request_update">
        <doc xml:space="preserve">queue an update if one had not already be queued.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a handler has been added.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="gog_graph_set_size">
        <doc xml:space="preserve">Sets the logical size of graph, given in points.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">logical width in pts</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">logical height in pts</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme" c:identifier="gog_graph_set_theme">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="theme" transfer-ownership="none">
            <type name="gTheme" c:type="GogTheme*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref_data" c:identifier="gog_graph_unref_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
          <parameter name="dat" transfer-ownership="none">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate_chart_layout"
              c:identifier="gog_graph_validate_chart_layout">
        <doc xml:space="preserve">Check the layout of the chart grid and ensure that there are no empty
cols or rows, and resize as necessary</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if anything changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraph</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="document" writable="1" transfer-ownership="none">
        <type name="Doc"/>
      </property>
      <property name="height-pts" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="theme" writable="1" transfer-ownership="none">
        <type name="gTheme"/>
      </property>
      <property name="theme-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width-pts" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="gOutlinedObject" c:type="GogOutlinedObject"/>
      </field>
      <field name="theme">
        <type name="gTheme" c:type="GogTheme*"/>
      </field>
      <field name="charts">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="data">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="num_cols">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="num_rows">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="width">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="idle_handler">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="data_refs">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="doc">
        <type name="Doc" c:type="GODoc*"/>
      </field>
      <glib:signal name="add-data" when="last">
        <doc xml:space="preserve">The ::add-data signal is emitted BEFORE @data has been added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The new #GOData being added to @graph</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-data" when="last">
        <doc xml:space="preserve">The ::remove-data signal is emitted BEFORE @data has been removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The new #GOData being removed to @graph</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="gGraphClass"
            c:type="GogGraphClass"
            glib:is-gtype-struct-for="gGraph">
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="gOutlinedObjectClass" c:type="GogOutlinedObjectClass"/>
      </field>
      <field name="add_data">
        <callback name="add_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="graph" transfer-ownership="none">
              <type name="gGraph" c:type="GogGraph*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_data">
        <callback name="remove_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="graph" transfer-ownership="none">
              <type name="gGraph" c:type="GogGraph*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Data" c:type="GOData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="gGraphView"
           c:symbol-prefix="gog_graph_view"
           c:type="GogGraphView"
           parent="gOutlinedView"
           glib:type-name="GogGraphView"
           glib:get-type="gog_graph_view_get_type">
      <method name="get_selection" c:identifier="gog_graph_view_get_selection">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current selected view.</doc>
          <type name="gView" c:type="GogView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gview" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraphView</doc>
            <type name="gGraphView" c:type="GogGraphView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_event" c:identifier="gog_graph_view_handle_event">
        <doc xml:space="preserve">Handle events.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gview" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraphView</doc>
            <type name="gGraphView" c:type="GogGraphView*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">#GdkEvent</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
          <parameter name="x_offset" transfer-ownership="none">
            <doc xml:space="preserve">in pixels</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y_offset" transfer-ownership="none">
            <doc xml:space="preserve">in pixels</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selection" c:identifier="gog_graph_view_set_selection">
        <doc xml:space="preserve">Sets @gobj as current selection. If @gobj is different from previously
selected object, a selection-changed signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gview" transfer-ownership="none">
            <doc xml:space="preserve">#GogGraphView</doc>
            <type name="gGraphView" c:type="GogGraphView*"/>
          </instance-parameter>
          <parameter name="gobj" transfer-ownership="none">
            <doc xml:space="preserve">new selected object</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <property name="renderer"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="gRenderer"/>
      </property>
      <glib:signal name="selection-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="gGrid"
           c:symbol-prefix="gog_grid"
           c:type="GogGrid"
           parent="gStyledObject"
           glib:type-name="GogGrid"
           glib:get-type="gog_grid_get_type">
      <implements name="StyledObject"/>
      <method name="get_gtype" c:identifier="gog_grid_get_gtype">
        <return-value transfer-ownership="none">
          <type name="gGridType" c:type="GogGridType"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="gGrid" c:type="GogGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gtype" c:identifier="gog_grid_set_gtype">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="gGrid" c:type="GogGrid*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gGridType" c:type="GogGridType"/>
          </parameter>
        </parameters>
      </method>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <class name="gGridLine"
           c:symbol-prefix="gog_grid_line"
           c:type="GogGridLine"
           parent="gStyledObject"
           glib:type-name="GogGridLine"
           glib:get-type="gog_grid_line_get_type">
      <implements name="StyledObject"/>
      <function name="view_render_lines"
                c:identifier="gog_grid_line_view_render_lines">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </parameter>
        </parameters>
      </function>
      <function name="view_render_stripes"
                c:identifier="gog_grid_line_view_render_stripes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </parameter>
        </parameters>
      </function>
      <method name="is_minor" c:identifier="gog_grid_line_is_minor">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ggl" transfer-ownership="none">
            <type name="gGridLine" c:type="GogGridLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="is-minor" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <enumeration name="gGridType" c:type="GogGridType">
      <doc xml:space="preserve">Used for base planes in 3d plots.</doc>
      <member name="unknown" value="-1" c:identifier="GOG_GRID_UNKNOWN">
        <doc xml:space="preserve">unkown, should not occur.</doc>
      </member>
      <member name="xy" value="0" c:identifier="GOG_GRID_XY">
        <doc xml:space="preserve">XY plane.</doc>
      </member>
      <member name="yz" value="1" c:identifier="GOG_GRID_YZ">
        <doc xml:space="preserve">YZ plane.</doc>
      </member>
      <member name="zx" value="2" c:identifier="GOG_GRID_ZX">
        <doc xml:space="preserve">ZY plane.</doc>
      </member>
      <member name="types" value="3" c:identifier="GOG_GRID_TYPES">
        <doc xml:space="preserve">last defined, should not occur.</doc>
      </member>
    </enumeration>
    <class name="gLabel"
           c:symbol-prefix="gog_label"
           c:type="GogLabel"
           parent="gText"
           glib:type-name="GogLabel"
           glib:get-type="gog_label_get_type">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <property name="justification" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="gLegend"
           c:symbol-prefix="gog_legend"
           c:type="GogLegend"
           parent="gOutlinedObject"
           glib:type-name="GogLegend"
           glib:get-type="gog_legend_get_type">
      <implements name="StyledObject"/>
      <property name="swatch-padding-pts"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="swatch-size-pts" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <enumeration name="gMSDimType" c:type="GogMSDimType">
      <doc xml:space="preserve">Data types classed according to what they become when exported to foreign
formats.</doc>
      <member name="labels" value="0" c:identifier="GOG_MS_DIM_LABELS">
        <doc xml:space="preserve">labels.</doc>
      </member>
      <member name="values" value="1" c:identifier="GOG_MS_DIM_VALUES">
        <doc xml:space="preserve">values.</doc>
      </member>
      <member name="categories" value="2" c:identifier="GOG_MS_DIM_CATEGORIES">
        <doc xml:space="preserve">categories.</doc>
      </member>
      <member name="bubbles" value="3" c:identifier="GOG_MS_DIM_BUBBLES">
        <doc xml:space="preserve">bubble values.</doc>
      </member>
      <member name="types" value="4" c:identifier="GOG_MS_DIM_TYPES">
        <doc xml:space="preserve">maximum value known by MS, should not occur.</doc>
      </member>
      <member name="err_plus1" value="5" c:identifier="GOG_MS_DIM_ERR_plus1">
        <doc xml:space="preserve">positive erros on first dimension, we made it up.</doc>
      </member>
      <member name="err_minus1" value="6" c:identifier="GOG_MS_DIM_ERR_minus1">
        <doc xml:space="preserve">negative erros on first dimension, we made it up.</doc>
      </member>
      <member name="err_plus2" value="7" c:identifier="GOG_MS_DIM_ERR_plus2">
        <doc xml:space="preserve">positive erros on second dimension, we made it up.</doc>
      </member>
      <member name="err_minus2" value="8" c:identifier="GOG_MS_DIM_ERR_minus2">
        <doc xml:space="preserve">negative erros on second dimension, we made it up</doc>
      </member>
      <member name="start" value="9" c:identifier="GOG_MS_DIM_START">
        <doc xml:space="preserve">start value, we made it up for dropbars.</doc>
      </member>
      <member name="end" value="10" c:identifier="GOG_MS_DIM_END">
        <doc xml:space="preserve">end value, we made it up for dropbars.</doc>
      </member>
      <member name="low" value="11" c:identifier="GOG_MS_DIM_LOW">
        <doc xml:space="preserve">low value, we made it up for hi-lo.</doc>
      </member>
      <member name="high" value="12" c:identifier="GOG_MS_DIM_HIGH">
        <doc xml:space="preserve">high value, we made it up for hi-lo.</doc>
      </member>
      <member name="extra1" value="13" c:identifier="GOG_MS_DIM_EXTRA1">
        <doc xml:space="preserve">we made it up for other uses.</doc>
      </member>
      <member name="extra2" value="14" c:identifier="GOG_MS_DIM_EXTRA2">
        <doc xml:space="preserve">we made it up for other uses.</doc>
      </member>
    </enumeration>
    <enumeration name="gManualSizeMode" c:type="GogManualSizeMode">
      <member name="auto" value="0" c:identifier="GOG_MANUAL_SIZE_AUTO">
        <doc xml:space="preserve">auto size, can't be changed.</doc>
      </member>
      <member name="width" value="1" c:identifier="GOG_MANUAL_SIZE_WIDTH">
        <doc xml:space="preserve">the width can be changed.</doc>
      </member>
      <member name="height" value="2" c:identifier="GOG_MANUAL_SIZE_HEIGHT">
        <doc xml:space="preserve">the height can be changed.</doc>
      </member>
      <member name="full" value="3" c:identifier="GOG_MANUAL_SIZE_FULL">
        <doc xml:space="preserve">both height and width can be changed.</doc>
      </member>
    </enumeration>
    <class name="gObject"
           c:symbol-prefix="gog_object"
           c:type="GogObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GogObject"
           glib:get-type="gog_object_get_type"
           glib:type-struct="gObjectClass">
      <constructor name="new_from_input"
                   c:identifier="gog_object_new_from_input">
        <return-value transfer-ownership="full">
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <parameter name="input" transfer-ownership="none">
            <type name="Gsf.Input" c:type="GsfInput*"/>
          </parameter>
          <parameter name="user_unserialize" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="register_roles" c:identifier="gog_object_register_roles">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectClass</doc>
            <type name="gObjectClass" c:type="GogObjectClass*"/>
          </parameter>
          <parameter name="roles" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectRole</doc>
            <type name="gObjectRole" c:type="GogObjectRole*"/>
          </parameter>
          <parameter name="n_roles" transfer-ownership="none">
            <doc xml:space="preserve">number of roles</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </function>
      <function name="sax_push_parser"
                c:identifier="gog_object_sax_push_parser">
        <doc xml:space="preserve">Unserializes a #GogObject using @handler when done.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xin" transfer-ownership="none">
            <doc xml:space="preserve">#GsfXMLIn</doc>
            <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve">XML attributes</doc>
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve">callback</doc>
            <type name="gObjectSaxHandler" c:type="GogObjectSaxHandler"/>
          </parameter>
          <parameter name="user_unserialize" transfer-ownership="none">
            <doc xml:space="preserve">user data for #GOData reading</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data for @handler</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_arg" c:identifier="gog_object_set_arg">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="child_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="child_name_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="child_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="children_reordered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="document_changed" invoker="document_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="extra_signal1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="extra_signal2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_manual_size_mode"
                      invoker="get_manual_size_mode">
        <return-value transfer-ownership="none">
          <type name="gManualSizeMode" c:type="GogManualSizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="name_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="parent_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="was_set" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate_editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="editor" transfer-ownership="none">
            <type name="Editor" c:type="GOEditor*"/>
          </parameter>
          <parameter name="dalloc" transfer-ownership="none">
            <type name="gDataAllocator" c:type="GogDataAllocator*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="possible_additions_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reserved1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reserved2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="type_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_by_name" c:identifier="gog_object_add_by_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a newly created child of @parent in @role.  If @child is provided,
it is assumed to be an unaffiliated object that will be assigned in @role.
On failure return NULL.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="child"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optionally null #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_by_role" c:identifier="gog_object_add_by_role">
        <doc xml:space="preserve">Absorb a ref to @child if it is non-NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@child or a newly created object with @role.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectRole</doc>
            <type name="gObjectRole" c:type="GogObjectRole*"/>
          </parameter>
          <parameter name="child"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_reorder" c:identifier="gog_object_can_reorder">
        <doc xml:space="preserve">If @obj can move forward or backward in its parents child list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="inc_ok" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL pointer for result.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="dec_ok" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL pointer for result.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_parent" c:identifier="gog_object_clear_parent">
        <doc xml:space="preserve">Does _not_ unref the child, which in effect adds a ref by freeing up the ref
previously associated with the parent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="document_changed"
              c:identifier="gog_object_document_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="doc" transfer-ownership="none">
            <type name="Doc" c:type="GODoc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="gog_object_dup">
        <doc xml:space="preserve">Create a deep copy of @obj using @new_parent as its parent.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicated object</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="new_parent" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject the parent tree for the object (can be NULL)</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
          <parameter name="datadup" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">a function to duplicate the data (a default one is used if NULL)</doc>
            <type name="gDataDuplicator" c:type="GogDataDuplicator"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_changed" c:identifier="gog_object_emit_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_role_by_name"
              c:identifier="gog_object_find_role_by_name">
        <return-value transfer-ownership="full">
          <type name="gObjectRole" c:type="GogObjectRole*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="gog_object_get_child_by_name">
        <doc xml:space="preserve">A convenience routine to find a unique child with role == @name</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%NULL and spews an error if there is more than one.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a #char to use as a role name filter</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_by_role"
              c:identifier="gog_object_get_child_by_role">
        <doc xml:space="preserve">A convenience routine to find a unique child with @role.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%NULL and spews an error if there is more than one.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObjectRole to use as a filter</doc>
            <type name="gObjectRole" c:type="GogObjectRole*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children" c:identifier="gog_object_get_children">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">list of @obj's
Children.  Caller must free the list, but not the children.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gObject"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">an optional #GogObjectRole to use as a filter</doc>
            <type name="gObjectRole" c:type="GogObjectRole*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_editor" c:identifier="gog_object_get_editor">
        <doc xml:space="preserve">Builds an object property editor, by calling GogObject::populate_editor
virtual functions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GtkNotebook widget</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="dalloc" transfer-ownership="none">
            <doc xml:space="preserve">a #GogDataAllocator</doc>
            <type name="gDataAllocator" c:type="GogDataAllocator*"/>
          </parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">a #GOCmdContext</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_graph" c:identifier="gog_object_get_graph">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the parent graph.</doc>
          <type name="gGraph" c:type="GogGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">const * #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gog_object_get_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manual_allocation"
              c:identifier="gog_object_get_manual_allocation">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">manual allocation of a GogObject given its parent allocation and
its size request.</doc>
          <type name="gViewAllocation" c:type="GogViewAllocation"/>
        </return-value>
        <parameters>
          <instance-parameter name="gobj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="parent_allocation" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewRequisition</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manual_position"
              c:identifier="gog_object_get_manual_position">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manual_size_mode"
              c:identifier="gog_object_get_manual_size_mode">
        <return-value transfer-ownership="none">
          <type name="gManualSizeMode" c:type="GogManualSizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gog_object_get_name">
        <doc xml:space="preserve">No need to free the result</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a name.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gog_object_get_parent">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@obj's parent, potentially %NULL if it has not been added to a
	heirarchy yet.  does not change ref-count in any way.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent_typed"
              c:identifier="gog_object_get_parent_typed">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@obj's parent of type @type, potentially %NULL if it has not been
added to a hierarchy yet or none of the parents are of type @type.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position_flags"
              c:identifier="gog_object_get_position_flags">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@obj's position flags, masked by @mask.</doc>
          <type name="gObjectPosition" c:type="GogObjectPosition"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectPosition</doc>
            <type name="gObjectPosition" c:type="GogObjectPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_theme" c:identifier="gog_object_get_theme">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the parent graph theme.</doc>
          <type name="gTheme" c:type="GogTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">const * #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_default_position_flags"
              c:identifier="gog_object_is_default_position_flags">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_deletable" c:identifier="gog_object_is_deletable">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @obj can be deleted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_view" c:identifier="gog_object_new_view">
        <doc xml:space="preserve">Creates a new #GogView associated to @obj, and sets its parent to @parent.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GogView</doc>
          <type name="gView" c:type="GogView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">parent view</doc>
            <type name="gView" c:type="GogView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="possible_additions"
              c:identifier="gog_object_possible_additions">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a list
of GogObjectRoles that could be added. The resulting list needs to be freed</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gObjectRole"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">a #GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reorder" c:identifier="gog_object_reorder">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the object just before @obj in the new ordering.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="inc" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="goto_max" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_editor_update"
              c:identifier="gog_object_request_editor_update">
        <doc xml:space="preserve">Emits a update-editor signal. This signal should be used by object editors
in order to refresh their states.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_update" c:identifier="gog_object_request_update">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_invisible" c:identifier="gog_object_set_invisible">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="invisible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manual_position"
              c:identifier="gog_object_set_manual_position">
        <doc xml:space="preserve">set manual position of given object, in points.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gog_object_set_name" throws="1">
        <doc xml:space="preserve">Assign the new name and signals that it has changed.
NOTE : it _absorbs_ @name rather than copying it, and generates a new name
if @name == %NULL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="full">
            <doc xml:space="preserve">The new name for @obj</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent" c:identifier="gog_object_set_parent">
        <doc xml:space="preserve">Absorbs a ref to @child</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="child" transfer-ownership="full">
            <doc xml:space="preserve">#GogObject.</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject.</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">a static string that can be sent to @parent::add</doc>
            <type name="gObjectRole" c:type="GogObjectRole*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">optionally %NULL.</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position_flags"
              c:identifier="gog_object_set_position_flags">
        <doc xml:space="preserve">Attempts to set the position flags of @obj to @flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE the new flags are permitted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectPosition</doc>
            <type name="gObjectPosition" c:type="GogObjectPosition"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve">#GogObjectPosition</doc>
            <type name="gObjectPosition" c:type="GogObjectPosition"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gog_object_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write_xml_sax" c:identifier="gog_object_write_xml_sax">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gObject" c:type="GogObject*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="alignment" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="anchor" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="compass" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="invisible" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-position-manual"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="manual-size" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="id">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="user_name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="auto_name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="role">
        <type name="gObjectRole" c:type="GogObjectRole*"/>
      </field>
      <field name="parent">
        <type name="gObject" c:type="GogObject*"/>
      </field>
      <field name="children">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="position">
        <type name="gObjectPosition" c:type="GogObjectPosition"/>
      </field>
      <field name="manual_position">
        <type name="gViewAllocation" c:type="GogViewAllocation"/>
      </field>
      <field name="needs_update" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="being_updated" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="explicitly_typed_role" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="invisible" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="_priv">
        <type name="gpointer" c:type="void*"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-added" when="last">
        <doc xml:space="preserve">The ::child-added signal is emitted AFTER the child has been added
and AFTER the parent-changed signal has been called for it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">The new #GogObject whose parent is @object</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-name-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-removed" when="last">
        <doc xml:space="preserve">The ::child-removed signal is emitted BEFORE the child has been
added and BEFORE the parent-changed signal has been called for it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">The new #GogObject whose parent is @object</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="children-reordered" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="name-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="update-editor" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="gObjectClass"
            c:type="GogObjectClass"
            glib:is-gtype-struct-for="gObject">
      <field name="base">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="roles">
        <doc xml:space="preserve">roles for the class.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="view_type">
        <doc xml:space="preserve">view type.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="use_parent_as_proxy" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="roles_allocated" readable="0" bits="1" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parent_changed">
        <callback name="parent_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="was_set" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="type_name">
        <callback name="type_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_editor">
        <callback name="populate_editor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="editor" transfer-ownership="none">
              <type name="Editor" c:type="GOEditor*"/>
            </parameter>
            <parameter name="dalloc" transfer-ownership="none">
              <type name="gDataAllocator" c:type="GogDataAllocator*"/>
            </parameter>
            <parameter name="cc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="document_changed">
        <callback name="document_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="doc" transfer-ownership="none">
              <type name="Doc" c:type="GODoc*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_manual_size_mode">
        <callback name="get_manual_size_mode">
          <return-value transfer-ownership="none">
            <type name="gManualSizeMode" c:type="GogManualSizeMode"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="name_changed">
        <callback name="name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="possible_additions_changed">
        <callback name="possible_additions_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_added">
        <callback name="child_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_removed">
        <callback name="child_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_name_changed">
        <callback name="child_name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="children_reordered">
        <callback name="children_reordered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_editor">
        <callback name="update_editor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="extra_signal1">
        <callback name="extra_signal1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="extra_signal2">
        <callback name="extra_signal2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="gObjectNamingConv" c:type="GogObjectNamingConv">
      <member name="by_role" value="1" c:identifier="GOG_OBJECT_NAME_BY_ROLE">
        <doc xml:space="preserve">named built from role.</doc>
      </member>
      <member name="by_type" value="2" c:identifier="GOG_OBJECT_NAME_BY_TYPE">
        <doc xml:space="preserve">named built from type.</doc>
      </member>
      <member name="manually"
              value="3"
              c:identifier="GOG_OBJECT_NAME_MANUALLY">
        <doc xml:space="preserve">custom name.</doc>
      </member>
    </enumeration>
    <bitfield name="gObjectPosition" c:type="GogObjectPosition">
      <member name="auto" value="0" c:identifier="GOG_POSITION_AUTO">
        <doc xml:space="preserve">automatic.</doc>
      </member>
      <member name="n" value="1" c:identifier="GOG_POSITION_N">
        <doc xml:space="preserve">north, might be combined with east or west.</doc>
      </member>
      <member name="s" value="2" c:identifier="GOG_POSITION_S">
        <doc xml:space="preserve">south, might be combined with east or west.</doc>
      </member>
      <member name="e" value="4" c:identifier="GOG_POSITION_E">
        <doc xml:space="preserve">east.</doc>
      </member>
      <member name="w" value="8" c:identifier="GOG_POSITION_W">
        <doc xml:space="preserve">west.</doc>
      </member>
      <member name="compass" value="15" c:identifier="GOG_POSITION_COMPASS">
        <doc xml:space="preserve">mask of the four previous positions.</doc>
      </member>
      <member name="align_fill"
              value="0"
              c:identifier="GOG_POSITION_ALIGN_FILL">
        <doc xml:space="preserve">fills.</doc>
      </member>
      <member name="align_start"
              value="16"
              c:identifier="GOG_POSITION_ALIGN_START">
        <doc xml:space="preserve">start.</doc>
      </member>
      <member name="align_end"
              value="32"
              c:identifier="GOG_POSITION_ALIGN_END">
        <doc xml:space="preserve">end.</doc>
      </member>
      <member name="align_center"
              value="48"
              c:identifier="GOG_POSITION_ALIGN_CENTER">
        <doc xml:space="preserve">centered.</doc>
      </member>
      <member name="alignment"
              value="48"
              c:identifier="GOG_POSITION_ALIGNMENT">
        <doc xml:space="preserve">mask for start or end.</doc>
      </member>
      <member name="special" value="64" c:identifier="GOG_POSITION_SPECIAL">
        <doc xml:space="preserve">special.</doc>
      </member>
      <member name="manual" value="128" c:identifier="GOG_POSITION_MANUAL">
        <doc xml:space="preserve">manual.</doc>
      </member>
      <member name="manual_x_abs"
              value="256"
              c:identifier="GOG_POSITION_MANUAL_X_ABS">
        <doc xml:space="preserve">whether the x position is absolute or relative.</doc>
      </member>
      <member name="manual_y_abs"
              value="512"
              c:identifier="GOG_POSITION_MANUAL_Y_ABS">
        <doc xml:space="preserve">whether the y position is absolute or relative.</doc>
      </member>
      <member name="manual_x_end"
              value="1024"
              c:identifier="GOG_POSITION_MANUAL_X_END">
        <doc xml:space="preserve">x position relative to start or end.</doc>
      </member>
      <member name="manual_y_end"
              value="2048"
              c:identifier="GOG_POSITION_MANUAL_Y_END">
        <doc xml:space="preserve">y position relative to start or end.</doc>
      </member>
      <member name="anchor_nw" value="0" c:identifier="GOG_POSITION_ANCHOR_NW">
        <doc xml:space="preserve">anchored north-west.</doc>
      </member>
      <member name="anchor_n"
              value="4096"
              c:identifier="GOG_POSITION_ANCHOR_N">
        <doc xml:space="preserve">anchored north.</doc>
      </member>
      <member name="anchor_ne"
              value="8192"
              c:identifier="GOG_POSITION_ANCHOR_NE">
        <doc xml:space="preserve">anchored north-east.</doc>
      </member>
      <member name="anchor_e"
              value="12288"
              c:identifier="GOG_POSITION_ANCHOR_E">
        <doc xml:space="preserve">anchored east.</doc>
      </member>
      <member name="anchor_se"
              value="16384"
              c:identifier="GOG_POSITION_ANCHOR_SE">
        <doc xml:space="preserve">anchored south-east.</doc>
      </member>
      <member name="anchor_s"
              value="20480"
              c:identifier="GOG_POSITION_ANCHOR_S">
        <doc xml:space="preserve">anchored south.</doc>
      </member>
      <member name="anchor_sw"
              value="24576"
              c:identifier="GOG_POSITION_ANCHOR_SW">
        <doc xml:space="preserve">anchored south-west.</doc>
      </member>
      <member name="anchor_w"
              value="28672"
              c:identifier="GOG_POSITION_ANCHOR_W">
        <doc xml:space="preserve">anchored west.</doc>
      </member>
      <member name="anchor_center"
              value="32768"
              c:identifier="GOG_POSITION_ANCHOR_CENTER">
        <doc xml:space="preserve">anchored at center.</doc>
      </member>
      <member name="anchor" value="126976" c:identifier="GOG_POSITION_ANCHOR">
        <doc xml:space="preserve">mask for anchors.</doc>
      </member>
      <member name="any_manual"
              value="130944"
              c:identifier="GOG_POSITION_ANY_MANUAL">
        <doc xml:space="preserve">mask for all manual positions</doc>
      </member>
      <member name="padding" value="65536" c:identifier="GOG_POSITION_PADDING">
        <doc xml:space="preserve">padding.</doc>
      </member>
      <member name="manual_w"
              value="2097152"
              c:identifier="GOG_POSITION_MANUAL_W">
        <doc xml:space="preserve">relative width.</doc>
      </member>
      <member name="manual_w_abs"
              value="4194304"
              c:identifier="GOG_POSITION_MANUAL_W_ABS">
        <doc xml:space="preserve">absolute width.</doc>
      </member>
      <member name="manual_h"
              value="8388608"
              c:identifier="GOG_POSITION_MANUAL_H">
        <doc xml:space="preserve">relative height.</doc>
      </member>
      <member name="manual_h_abs"
              value="16777216"
              c:identifier="GOG_POSITION_MANUAL_H_ABS">
        <doc xml:space="preserve">absolute height.</doc>
      </member>
      <member name="any_manual_size"
              value="31457280"
              c:identifier="GOG_POSITION_ANY_MANUAL_SIZE">
        <doc xml:space="preserve">mask for manual sizes.</doc>
      </member>
      <member name="hexpand"
              value="33554432"
              c:identifier="GOG_POSITION_HEXPAND">
      </member>
      <member name="vexpand"
              value="67108864"
              c:identifier="GOG_POSITION_VEXPAND">
      </member>
      <member name="expand"
              value="100663296"
              c:identifier="GOG_POSITION_EXPAND">
      </member>
    </bitfield>
    <record name="gObjectRole"
            c:type="GogObjectRole"
            glib:type-name="GogObjectRole"
            glib:get-type="gog_object_role_get_type"
            c:symbol-prefix="gog_object_role">
      <doc xml:space="preserve">Describes allowable children for a #GogObject.</doc>
      <field name="id" writable="1">
        <doc xml:space="preserve">id for persistence.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="is_a_typename" writable="1">
        <doc xml:space="preserve">type name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="priority" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="allowable_positions" writable="1">
        <doc xml:space="preserve">allowed positions inside parent.</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="default_position" writable="1">
        <doc xml:space="preserve">default position.</doc>
        <type name="gObjectPosition" c:type="GogObjectPosition"/>
      </field>
      <field name="naming_conv" writable="1">
        <doc xml:space="preserve">naming convention.</doc>
        <type name="gObjectNamingConv" c:type="GogObjectNamingConv"/>
      </field>
      <field name="can_add">
        <callback name="can_add">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_remove">
        <callback name="can_remove">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="allocate" introspectable="0">
        <callback name="allocate" introspectable="0">
          <return-value>
            <type name="gObject" c:type="GogObject*"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="post_add">
        <callback name="post_add">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pre_remove">
        <callback name="pre_remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="post_remove">
        <callback name="post_remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="parent" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <union name="user" c:type="user">
        <field name="i" writable="1">
          <type name="gint" c:type="int"/>
        </field>
        <field name="p" writable="1">
          <type name="gpointer" c:type="gpointer"/>
        </field>
      </union>
    </record>
    <callback name="gObjectSaxHandler" c:type="GogObjectSaxHandler">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <type name="gObject" c:type="GogObject*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="gOutlinedObject"
           c:symbol-prefix="gog_outlined_object"
           c:type="GogOutlinedObject"
           parent="gStyledObject"
           glib:type-name="GogOutlinedObject"
           glib:get-type="gog_outlined_object_get_type">
      <implements name="StyledObject"/>
      <method name="get_pad" c:identifier="gog_outlined_object_get_pad">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="goo" transfer-ownership="none">
            <type name="gOutlinedObject" c:type="GogOutlinedObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="padding-pts" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="base">
        <type name="gStyledObject" c:type="GogStyledObject"/>
      </field>
      <field name="padding_pts">
        <type name="gdouble" c:type="double"/>
      </field>
    </class>
    <class name="gOutlinedView"
           c:symbol-prefix="gog_outlined_view"
           c:type="GogOutlinedView"
           parent="gView"
           abstract="1"
           glib:type-name="GogOutlinedView"
           glib:get-type="gog_outlined_view_get_type"
           glib:type-struct="gOutlinedViewClass">
      <field name="base">
        <type name="gView" c:type="GogView"/>
      </field>
    </class>
    <record name="gOutlinedViewClass"
            c:type="GogOutlinedViewClass"
            glib:is-gtype-struct-for="gOutlinedView">
      <field name="base">
        <type name="gViewClass" c:type="GogViewClass"/>
      </field>
      <field name="call_parent_render">
        <doc xml:space="preserve">whether the parent class render() method must be
called when done.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <class name="gPlot"
           c:symbol-prefix="gog_plot"
           c:type="GogPlot"
           parent="gObject"
           abstract="1"
           glib:type-name="GogPlot"
           glib:get-type="gog_plot_get_type"
           glib:type-struct="gPlotClass">
      <constructor name="new_by_name" c:identifier="gog_plot_new_by_name">
        <return-value transfer-ownership="full">
          <type name="gPlot" c:type="GogPlot*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_type" c:identifier="gog_plot_new_by_type">
        <return-value transfer-ownership="full">
          <type name="gPlot" c:type="GogPlot*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="gPlotType" c:type="GogPlotType*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="families"
                c:identifier="gog_plot_families"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the registered plot families.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </function>
      <function name="family_by_name"
                c:identifier="gog_plot_family_by_name"
                introspectable="0">
        <return-value>
          <doc xml:space="preserve">the plot family if it exists.</doc>
          <type name="gPlotFamily" c:type="GogPlotFamily*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">family name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="family_register"
                c:identifier="gog_plot_family_register"
                introspectable="0">
        <return-value>
          <doc xml:space="preserve">the new #GogPlotFamily.</doc>
          <type name="gPlotFamily" c:type="GogPlotFamily*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">family name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="sample_image_file" transfer-ownership="none">
            <doc xml:space="preserve">the sample image file name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="axis_set" transfer-ownership="none">
            <doc xml:space="preserve">the used axis set.</doc>
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </function>
      <function name="family_unregister"
                c:identifier="gog_plot_family_unregister">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <type name="gPlotFamily" c:type="GogPlotFamily*"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_register"
                c:identifier="gog_plot_type_register"
                introspectable="0">
        <return-value>
          <doc xml:space="preserve">the new #GogPlotType.</doc>
          <type name="gPlotType" c:type="GogPlotType*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlotFamily</doc>
            <type name="gPlotFamily" c:type="GogPlotFamily*"/>
          </parameter>
          <parameter name="col" transfer-ownership="none">
            <doc xml:space="preserve">the column where the sample should appear.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="row" transfer-ownership="none">
            <doc xml:space="preserve">the row where the sample should appear.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the plot type name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="sample_image_file" transfer-ownership="none">
            <doc xml:space="preserve">the sample image file name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">the plot type description.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="engine" transfer-ownership="none">
            <doc xml:space="preserve">the plot engine name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="axis_get_bounds" introspectable="0">
        <return-value>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="axis" transfer-ownership="none">
            <type name="gAxisType" c:type="GogAxisType"/>
          </parameter>
          <parameter name="bounds" transfer-ownership="none">
            <type name="gPlotBoundInfo" c:type="GogPlotBoundInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="enum_in_reverse">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="foreach_elem" invoker="foreach_elem">
        <doc xml:space="preserve">Executes @funcfor each plot element. Used to build a legend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="only_visible" transfer-ownership="none">
            <doc xml:space="preserve">whether to restrict to visible elements.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">#GogEnumFunc</doc>
            <type name="gEnumFunc" c:type="GogEnumFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_percent">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="series" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="guru_helper">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="hint" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_vary_style_by_element"
                      invoker="supports_vary_style_by_element">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_3d" invoker="update_3d">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="axis_clear" c:identifier="gog_plot_axis_clear">
        <doc xml:space="preserve">A utility method to clear all existing axis associations flagged by @filter</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisSet</doc>
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="axis_set_assign" c:identifier="gog_plot_axis_set_assign">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="axis_set_is_valid"
              c:identifier="gog_plot_axis_set_is_valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="gAxisSet" c:type="GogAxisSet"/>
          </parameter>
        </parameters>
      </method>
      <method name="axis_set_pref" c:identifier="gog_plot_axis_set_pref">
        <return-value transfer-ownership="none">
          <type name="gAxisSet" c:type="GogAxisSet"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_series" c:identifier="gog_plot_clear_series">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="description"
              c:identifier="gog_plot_description"
              introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogPlotDesc for @plot.</doc>
          <type name="gPlotDesc" c:type="GogPlotDesc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach_elem" c:identifier="gog_plot_foreach_elem">
        <doc xml:space="preserve">Executes @funcfor each plot element. Used to build a legend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="only_visible" transfer-ownership="none">
            <doc xml:space="preserve">whether to restrict to visible elements.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">#GogEnumFunc</doc>
            <type name="gEnumFunc" c:type="GogEnumFunc"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis" c:identifier="gog_plot_get_axis">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the axis if any.</doc>
          <type name="gAxis" c:type="GogAxis*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisType</doc>
            <type name="gAxisType" c:type="GogAxisType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_axis_bounds" c:identifier="gog_plot_get_axis_bounds">
        <doc xml:space="preserve">Queries @plot for its axis preferences for @axis and stores the results in
@bounds.  All elements of @bounds are initialized to sane values before the
query _EXCEPT_ ::fmt.  The caller is responsible for initializing it.  This
is done so that once on plot has selected a format the others need not do
the lookup too if so desired.

Caller is responsible for unrefing ::fmt.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The data providing the bound (does not add a ref)</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxisType</doc>
            <type name="gAxisType" c:type="GogAxisType"/>
          </parameter>
          <parameter name="bounds" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlotBoundInfo</doc>
            <type name="gPlotBoundInfo" c:type="GogPlotBoundInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cardinality" c:identifier="gog_plot_get_cardinality">
        <doc xml:space="preserve">Return the number of logical elements in the plot.
See @gog_chart_get_cardinality.

@full and @visible may be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="full" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for full cardinality</doc>
            <type name="guint" c:type="unsigned*"/>
          </parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve">placeholder for visible cardinality</doc>
            <type name="guint" c:type="unsigned*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_percent_value"
              c:identifier="gog_plot_get_percent_value">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="series" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_series" c:identifier="gog_plot_get_series">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of the series in @plot.  Do not modify or free the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gSeries"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="guru_helper" c:identifier="gog_plot_guru_helper">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_series" c:identifier="gog_plot_new_series">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new GogSeries of a type consistent with @plot.</doc>
          <type name="gSeries" c:type="GogSeries*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_cardinality_update"
              c:identifier="gog_plot_request_cardinality_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_axis" c:identifier="gog_plot_set_axis">
        <doc xml:space="preserve">Connect @axis and @plot.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">#GogAxis</doc>
            <type name="gAxis" c:type="GogAxis*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_vary_style_by_element"
              c:identifier="gog_plot_supports_vary_style_by_element">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_3d" c:identifier="gog_plot_update_3d">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_cardinality"
              c:identifier="gog_plot_update_cardinality">
        <doc xml:space="preserve">Update cardinality and cache result. See @gog_chart_get_cardinality.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plot" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlot</doc>
            <type name="gPlot" c:type="GogPlot*"/>
          </instance-parameter>
          <parameter name="index_num" transfer-ownership="none">
            <doc xml:space="preserve">index offset for this plot</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="bubble-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="circ-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="color-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="guru-hints" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interpolation" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plot-group" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pseudo-3d-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="radial-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="vary-style-by-element"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="x-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="y-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="z-axis" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="base">
        <type name="gObject" c:type="GogObject"/>
      </field>
      <field name="series">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="full_cardinality">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="visible_cardinality">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="cardinality_valid">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="index_num">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="vary_style_by_element">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="rendering_order">
        <type name="gPlotRenderingOrder" c:type="GogPlotRenderingOrder"/>
      </field>
      <field name="plot_group">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="guru_hints">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="interpolation">
        <type name="LineInterpolation" c:type="GOLineInterpolation"/>
      </field>
      <field name="axis">
        <array zero-terminated="0" c:type="GogAxis">
          <type name="gAxis" c:type="GogAxis*"/>
        </array>
      </field>
      <field name="desc">
        <type name="gPlotDesc" c:type="GogPlotDesc"/>
      </field>
    </class>
    <record name="gPlotBoundInfo" c:type="GogPlotBoundInfo">
      <doc xml:space="preserve">Used by plots to give formating informations to each axis.
GogPlotBoundInfo::val are the values limits, GogPlotBoundInfo::logical are
the actual needed display limits.</doc>
      <field name="val" writable="1">
        <type name="gpointer" c:type="_GogPlotBound"/>
      </field>
      <field name="logical" writable="1">
        <type name="gpointer" c:type="_GogPlotBound"/>
      </field>
      <field name="is_discrete" writable="1">
        <doc xml:space="preserve">whether the data are discrete.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="center_on_ticks" writable="1">
        <doc xml:space="preserve">whether to center data on ticks.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="fmt" writable="1">
        <doc xml:space="preserve">#GOFormat to use.</doc>
        <type name="Format" c:type="GOFormat*"/>
      </field>
      <field name="date_conv" writable="1">
        <doc xml:space="preserve">the used #GODateConventions.</doc>
        <type name="DateConventions" c:type="const GODateConventions*"/>
      </field>
    </record>
    <record name="gPlotClass"
            c:type="GogPlotClass"
            glib:is-gtype-struct-for="gPlot">
      <field name="base">
        <type name="gObjectClass" c:type="GogObjectClass"/>
      </field>
      <field name="desc">
        <doc xml:space="preserve">#GogPlotDesc</doc>
        <type name="gPlotDesc" c:type="GogPlotDesc"/>
      </field>
      <field name="series_type">
        <doc xml:space="preserve">series type.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="axis_set">
        <doc xml:space="preserve">set of use axes.</doc>
        <type name="gAxisSet" c:type="GogAxisSet"/>
      </field>
      <field name="axis_get_bounds" introspectable="0">
        <callback name="axis_get_bounds" introspectable="0">
          <return-value>
            <type name="Data" c:type="GOData*"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
            <parameter name="axis" transfer-ownership="none">
              <type name="gAxisType" c:type="GogAxisType"/>
            </parameter>
            <parameter name="bounds" transfer-ownership="none">
              <type name="gPlotBoundInfo" c:type="GogPlotBoundInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_vary_style_by_element">
        <callback name="supports_vary_style_by_element">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enum_in_reverse">
        <callback name="enum_in_reverse">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="foreach_elem">
        <callback name="foreach_elem">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <doc xml:space="preserve">#GogPlot</doc>
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
            <parameter name="only_visible" transfer-ownership="none">
              <doc xml:space="preserve">whether to restrict to visible elements.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="handler"
                       transfer-ownership="none"
                       scope="call"
                       closure="3">
              <doc xml:space="preserve">#GogEnumFunc</doc>
              <type name="gEnumFunc" c:type="GogEnumFunc"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">user data for @func</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_3d">
        <callback name="update_3d">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="guru_helper">
        <callback name="guru_helper">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
            <parameter name="hint" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_percent">
        <callback name="get_percent">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="plot" transfer-ownership="none">
              <type name="gPlot" c:type="GogPlot*"/>
            </parameter>
            <parameter name="series" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="guint" c:type="unsigned"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="gPlotDesc" c:type="GogPlotDesc">
      <field name="num_series_max" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="series" writable="1">
        <doc xml:space="preserve">series description.</doc>
        <type name="gSeriesDesc" c:type="GogSeriesDesc"/>
      </field>
    </record>
    <record name="gPlotFamily" c:type="GogPlotFamily">
      <doc xml:space="preserve">Plot types family.</doc>
      <field name="name" writable="1">
        <doc xml:space="preserve">family name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="sample_image_file" writable="1">
        <doc xml:space="preserve">sample image for the graph editor.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="priority" writable="1">
        <doc xml:space="preserve">priority.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="axis_set" writable="1">
        <doc xml:space="preserve">#GogAxisSet used.</doc>
        <type name="gAxisSet" c:type="GogAxisSet"/>
      </field>
      <field name="types" writable="1">
        <doc xml:space="preserve">known types in the family.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <enumeration name="gPlotRenderingOrder" c:type="GogPlotRenderingOrder">
      <member name="last" value="0" c:identifier="GOG_PLOT_RENDERING_LAST">
        <doc xml:space="preserve">render after axis and grid lines.</doc>
      </member>
      <member name="before_axis"
              value="1"
              c:identifier="GOG_PLOT_RENDERING_BEFORE_AXIS">
        <doc xml:space="preserve">render before axis but after grid lines.</doc>
      </member>
      <member name="before_grid"
              value="2"
              c:identifier="GOG_PLOT_RENDERING_BEFORE_GRID">
        <doc xml:space="preserve">render before grid lines.</doc>
      </member>
    </enumeration>
    <record name="gPlotType" c:type="GogPlotType">
      <field name="family" writable="1">
        <doc xml:space="preserve">plot family.</doc>
        <type name="gPlotFamily" c:type="GogPlotFamily*"/>
      </field>
      <field name="engine" writable="1">
        <doc xml:space="preserve">plot engine.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">plot type name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="sample_image_file" writable="1">
        <doc xml:space="preserve">sample image for the graph editor.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="description" writable="1">
        <doc xml:space="preserve">untranslated description.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="col" writable="1">
        <doc xml:space="preserve">column where the plot type appears in the table inside the graph editor.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="row" writable="1">
        <doc xml:space="preserve">row.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="properties" writable="1">
        <doc xml:space="preserve">plot type properties.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <class name="gPlotView"
           c:symbol-prefix="gog_plot_view"
           c:type="GogPlotView"
           parent="gView"
           abstract="1"
           glib:type-name="GogPlotView"
           glib:get-type="gog_plot_view_get_type"
           glib:type-struct="gPlotViewClass">
      <virtual-method name="get_data_at_point" invoker="get_data_at_point">
        <doc xml:space="preserve">Search a data represented at (@x,@y) in @view and set @series on success.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">index of the found data in @series or -1.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlotView</doc>
            <type name="gPlotView" c:type="GogPlotView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">where to store the series</doc>
            <type name="gSeries" c:type="GogSeries**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_data_at_point"
              c:identifier="gog_plot_view_get_data_at_point">
        <doc xml:space="preserve">Search a data represented at (@x,@y) in @view and set @series on success.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">index of the found data in @series or -1.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogPlotView</doc>
            <type name="gPlotView" c:type="GogPlotView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">where to store the series</doc>
            <type name="gSeries" c:type="GogSeries**"/>
          </parameter>
        </parameters>
      </method>
      <field name="base">
        <type name="gView" c:type="GogView"/>
      </field>
    </class>
    <record name="gPlotViewClass"
            c:type="GogPlotViewClass"
            glib:is-gtype-struct-for="gPlotView">
      <field name="base">
        <type name="gViewClass" c:type="GogViewClass"/>
      </field>
      <field name="get_data_at_point">
        <callback name="get_data_at_point">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">index of the found data in @series or -1.</doc>
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <doc xml:space="preserve">#GogPlotView</doc>
              <type name="gPlotView" c:type="GogPlotView*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="series" transfer-ownership="none">
              <doc xml:space="preserve">where to store the series</doc>
              <type name="gSeries" c:type="GogSeries**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="gRegCurve"
           c:symbol-prefix="gog_reg_curve"
           c:type="GogRegCurve"
           parent="gTrendLine"
           abstract="1"
           glib:type-name="GogRegCurve"
           glib:get-type="gog_reg_curve_get_type"
           glib:type-struct="gRegCurveClass">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <virtual-method name="get_equation" invoker="get_equation">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value_at">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate_editor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_R2" c:identifier="gog_reg_curve_get_R2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="gog_reg_curve_get_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
          <parameter name="xmin" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="xmax" transfer-ownership="none">
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_equation" c:identifier="gog_reg_curve_get_equation">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reg_curve" transfer-ownership="none">
            <type name="gRegCurve" c:type="GogRegCurve*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="drawing-bounds" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="skip-invalid" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="gTrendLine" c:type="GogTrendLine"/>
      </field>
      <field name="weighted">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="bounds">
        <type name="gDatasetElement" c:type="GogDatasetElement*"/>
      </field>
      <field name="skip_invalid">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ninterp">
        <type name="gint" c:type="int"/>
      </field>
      <field name="a">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="R2">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="equation">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="drawing_bounds">
        <type name="gRegCurveDrawingBounds" c:type="GogRegCurveDrawingBounds"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="gRegCurveClass"
            c:type="GogRegCurveClass"
            glib:is-gtype-struct-for="gRegCurve">
      <field name="base">
        <type name="gTrendLineClass" c:type="GogTrendLineClass"/>
      </field>
      <field name="get_value_at">
        <callback name="get_value_at">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="reg_curve" transfer-ownership="none">
              <type name="gRegCurve" c:type="GogRegCurve*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_equation">
        <callback name="get_equation">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="reg_curve" transfer-ownership="none">
              <type name="gRegCurve" c:type="GogRegCurve*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_editor">
        <callback name="populate_editor">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="reg_curve" transfer-ownership="none">
              <type name="gRegCurve" c:type="GogRegCurve*"/>
            </parameter>
            <parameter name="table" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="gRegCurveDrawingBounds"
                 c:type="GogRegCurveDrawingBounds">
      <member name="none"
              value="0"
              c:identifier="GOG_REG_CURVE_DRAWING_BOUNDS_NONE">
        <doc xml:space="preserve">no limits.</doc>
      </member>
      <member name="absolute"
              value="1"
              c:identifier="GOG_REG_CURVE_DRAWING_BOUNDS_ABSOLUTE">
        <doc xml:space="preserve">absolute limits.</doc>
      </member>
      <member name="relative"
              value="2"
              c:identifier="GOG_REG_CURVE_DRAWING_BOUNDS_RELATIVE">
        <doc xml:space="preserve">limits relative to the data range.</doc>
      </member>
    </enumeration>
    <class name="gRegEqn"
           c:symbol-prefix="gog_reg_eqn"
           c:type="GogRegEqn"
           parent="gText"
           glib:type-name="GogRegEqn"
           glib:get-type="gog_reg_eqn_get_type">
      <implements name="StyledObject"/>
      <property name="show-eq" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-r2" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <class name="gRenderer"
           c:symbol-prefix="gog_renderer"
           c:type="GogRenderer"
           parent="GObject.Object"
           glib:type-name="GogRenderer"
           glib:get-type="gog_renderer_get_type">
      <constructor name="new" c:identifier="gog_renderer_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GogRenderer which can render into a pixbuf, and sets @graph
	as its model.</doc>
          <type name="gRenderer" c:type="GogRenderer*"/>
        </return-value>
        <parameters>
          <parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">graph model</doc>
            <type name="gGraph" c:type="GogGraph*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="draw_circle" c:identifier="gog_renderer_draw_circle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_color_map" c:identifier="gog_renderer_draw_color_map">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
          </parameter>
          <parameter name="discrete" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="horizontal" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_data_label"
              c:identifier="gog_renderer_draw_data_label">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="elt" transfer-ownership="none">
            <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <type name="AnchorType" c:type="GOAnchorType"/>
          </parameter>
          <parameter name="legend_style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_gostring" c:identifier="gog_renderer_draw_gostring">
        <doc xml:space="preserve">Have @rend draw @layout in the at @pos.{x,y} anchored by the @anchor corner.
If @pos.w or @pos.h are &gt;= 0 then clip the results to less than that size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the #GOString to draw</doc>
            <type name="String" c:type="GOString*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">#GOAnchorType how to draw relative to @pos</doc>
            <type name="AnchorType" c:type="GOAnchorType"/>
          </parameter>
          <parameter name="justification" transfer-ownership="none">
            <doc xml:space="preserve">#GoJustification for multiline string.</doc>
            <type name="Justification" c:type="GoJustification"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">if positive, the maximum width to get a multiline string if needed.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_grip" c:identifier="gog_renderer_draw_grip">
        <doc xml:space="preserve">Draw a grip, used for moving/resizing of objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position of grip</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position of grip</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_marker" c:identifier="gog_renderer_draw_marker">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">X-coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">Y-coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_rectangle" c:identifier="gog_renderer_draw_rectangle">
        <doc xml:space="preserve">A utility routine to build a closed rectangle vpath.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">a #GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <doc xml:space="preserve">position and extent of rectangle</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_rotated_rectangle"
              c:identifier="gog_renderer_draw_rotated_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="rotate_bg" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_selection_rectangle"
              c:identifier="gog_renderer_draw_selection_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="rectangle" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_shape" c:identifier="gog_renderer_draw_shape">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_text" c:identifier="gog_renderer_draw_text">
        <doc xml:space="preserve">Have @rend draw @text in the at @pos.{x,y} anchored by the @anchor corner.
If @pos.w or @pos.h are &gt;= 0 then clip the results to less than that size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the string to draw</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve">#GogViewAllocation</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">#GOAnchorType how to draw relative to @pos</doc>
            <type name="AnchorType" c:type="GOAnchorType"/>
          </parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve">wether to use pango markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="justification" transfer-ownership="none">
            <doc xml:space="preserve">#GoJustification for multiline text.</doc>
            <type name="Justification" c:type="GoJustification"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">if positive, the maximum width to get a multiline text if needed.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="export_image" c:identifier="gog_renderer_export_image">
        <doc xml:space="preserve">Exports an image of @graph in given @format, writing results in a #GsfOutput stream.
If export format type is a bitmap one, it computes image size with x_dpi, y_dpi and
@graph size (see gog_graph_get_size()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if export succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">image format for export</doc>
            <type name="ImageFormat" c:type="GOImageFormat"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #GsfOutput stream</doc>
            <type name="Gsf.Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="x_dpi" transfer-ownership="none">
            <doc xml:space="preserve">x resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y_dpi" transfer-ownership="none">
            <doc xml:space="preserve">y resolution of exported graph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_circle" c:identifier="gog_renderer_fill_circle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_rectangle" c:identifier="gog_renderer_fill_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_serie" c:identifier="gog_renderer_fill_serie">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
          <parameter name="close_path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_shape" c:identifier="gog_renderer_fill_shape">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cairo_surface"
              c:identifier="gog_renderer_get_cairo_surface">
        <return-value transfer-ownership="full">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gostring_AABR"
              c:identifier="gog_renderer_get_gostring_AABR">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string to draw</doc>
            <type name="String" c:type="GOString*"/>
          </parameter>
          <parameter name="aabr" transfer-ownership="none">
            <doc xml:space="preserve">#GOGeometryAABR to store the Axis Aligned Bounding Rectangle of @text.</doc>
            <type name="GeometryAABR" c:type="GOGeometryAABR*"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gostring_OBR"
              c:identifier="gog_renderer_get_gostring_OBR">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string to draw</doc>
            <type name="String" c:type="GOString*"/>
          </parameter>
          <parameter name="obr" transfer-ownership="none">
            <doc xml:space="preserve">#GOGeometryOBR to store the Object Bounding Rectangle of @text.</doc>
            <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hairline_width_pts"
              c:identifier="gog_renderer_get_hairline_width_pts">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the hairline width in pts.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">a #GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="gog_renderer_get_pixbuf">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current pixbuf buffer from a renderer that can render into a pixbuf.
	or %NULL on error.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scale" c:identifier="gog_renderer_get_scale">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text_AABR" c:identifier="gog_renderer_get_text_AABR">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the string to draw</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve">whether to use pango markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="aabr" transfer-ownership="none">
            <doc xml:space="preserve">#GOGeometryAABR to store the Axis Aligned Bounding Rectangle of @text.</doc>
            <type name="GeometryAABR" c:type="GOGeometryAABR*"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_text_OBR" c:identifier="gog_renderer_get_text_OBR">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the string to draw</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve">wether to use pango markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="obr" transfer-ownership="none">
            <doc xml:space="preserve">#GOGeometryOBR to store the Object Bounding Rectangle of @text.</doc>
            <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="line_size" c:identifier="gog_renderer_line_size">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="r" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pop_clip" c:identifier="gog_renderer_pop_clip">
        <doc xml:space="preserve">End the current clipping.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop_style" c:identifier="gog_renderer_pop_style">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pt2r" c:identifier="gog_renderer_pt2r">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="r" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="d" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pt2r_x" c:identifier="gog_renderer_pt2r_x">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="r" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="d" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pt2r_y" c:identifier="gog_renderer_pt2r_y">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="r" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="d" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_clip" c:identifier="gog_renderer_push_clip">
        <doc xml:space="preserve">Defines the current clipping region.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a #GOPath</doc>
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_clip_rectangle"
              c:identifier="gog_renderer_push_clip_rectangle">
        <doc xml:space="preserve">Defines a rectangular clipping region. For efficient screen rendering,
this function takes care to round the coordinates.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <doc xml:space="preserve">#GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">left coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">top coordinate</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">width of clipping rectangle</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">height of clipping rectangle</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_style" c:identifier="gog_renderer_push_style">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_to_cairo"
              c:identifier="gog_renderer_render_to_cairo">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="cairo" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_update" c:identifier="gog_renderer_request_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stroke_circle" c:identifier="gog_renderer_stroke_circle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_rectangle"
              c:identifier="gog_renderer_stroke_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="rect" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_serie" c:identifier="gog_renderer_stroke_serie">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stroke_shape" c:identifier="gog_renderer_stroke_shape">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gog_renderer_update">
        <doc xml:space="preserve">Requests a renderer update, only useful for pixbuf based renderer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a redraw is necessary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GogRenderer</doc>
            <type name="gRenderer" c:type="GogRenderer*"/>
          </instance-parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">requested width</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">requested height</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="gGraph"/>
      </property>
      <property name="view" transfer-ownership="none">
        <type name="gView"/>
      </property>
      <glib:signal name="request-update" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="gSeries"
           c:symbol-prefix="gog_series"
           c:type="GogSeries"
           parent="gStyledObject"
           abstract="1"
           glib:type-name="GogSeries"
           glib:get-type="gog_series_get_type"
           glib:type-struct="gSeriesClass">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <virtual-method name="dim_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_interpolation_params"
                      invoker="get_interpolation_params">
        <doc xml:space="preserve">Only constrained cubic spline interpolation use parameters (for the
slopes at each end).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the interpolation parameters.</doc>
          <type name="gDataset" c:type="GogDataset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_xy_data" invoker="get_xy_data">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_validity" c:identifier="gog_series_check_validity">
        <doc xml:space="preserve">Updates the is_valid flag for a series.
This is an internal utility that should not really be necessary for general
usage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_element" c:identifier="gog_series_get_element">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogSeriesElement corresponding to @index if
any</doc>
          <type name="gSeriesElement" c:type="GogSeriesElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">the element index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fill_type" c:identifier="gog_series_get_fill_type">
        <return-value transfer-ownership="none">
          <type name="gSeriesFillType" c:type="GogSeriesFillType"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fill_type_from_combo"
              c:identifier="gog_series_get_fill_type_from_combo">
        <return-value transfer-ownership="none">
          <type name="gSeriesFillType" c:type="GogSeriesFillType"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="combo" transfer-ownership="none">
            <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interpolation_params"
              c:identifier="gog_series_get_interpolation_params">
        <doc xml:space="preserve">Only constrained cubic spline interpolation use parameters (for the
slopes at each end).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the interpolation parameters.</doc>
          <type name="gDataset" c:type="GogDataset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gog_series_get_name">
        <doc xml:space="preserve">Gets the _source_ of the name associated with the series.
NOTE : this is _NOT_ the actual name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GODataScalar, without added reference.</doc>
          <type name="Data" c:type="GOData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">a #GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_overrides" c:identifier="gog_series_get_overrides">
        <doc xml:space="preserve">Overrides are data owning their own style, overriding the series style.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the series
overrides.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gSeriesElement"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plot" c:identifier="gog_series_get_plot">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the possibly NULL plot that contains this series.</doc>
          <type name="gPlot" c:type="GogPlot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xy_data" c:identifier="gog_series_get_xy_data">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_xyz_data" c:identifier="gog_series_get_xyz_data">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="double**"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_legend" c:identifier="gog_series_has_legend">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the series has a visible legend entry</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gog_series_is_valid">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current cached validity.  Does not recheck</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="map_XL_dim" c:identifier="gog_series_map_XL_dim">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="ms_type" transfer-ownership="none">
            <type name="gMSDimType" c:type="GogMSDimType"/>
          </parameter>
        </parameters>
      </method>
      <method name="num_elements" c:identifier="gog_series_num_elements">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of elements in the series</doc>
          <type name="guint" c:type="unsigned"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="populate_fill_type_combo"
              c:identifier="gog_series_populate_fill_type_combo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="combo" transfer-ownership="none">
            <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_XL_dim"
              c:identifier="gog_series_set_XL_dim"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="ms_type" transfer-ownership="none">
            <type name="gMSDimType" c:type="GogMSDimType"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dim" c:identifier="gog_series_set_dim" throws="1">
        <doc xml:space="preserve">Absorbs a ref to @val</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="dim_i" transfer-ownership="none">
            <doc xml:space="preserve">Which dimension</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="val" transfer-ownership="full">
            <doc xml:space="preserve">#GOData</doc>
            <type name="Data" c:type="GOData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fill_type" c:identifier="gog_series_set_fill_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="fill_type" transfer-ownership="none">
            <type name="gSeriesFillType" c:type="GogSeriesFillType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_index" c:identifier="gog_series_set_index">
        <doc xml:space="preserve">If @ind &gt;= 0 attempt to assign the new index.  Auto
indicies (@is_manual == FALSE) will not override the current
index if it is manual.  An @index &lt; 0, will reset the index to
automatic and potentially queue a revaluation of the parent
chart's cardinality.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">#GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="ind" transfer-ownership="none">
            <doc xml:space="preserve">&gt;= 0 assigns a new index, &lt; 0 resets to auto</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="is_manual" transfer-ownership="none">
            <doc xml:space="preserve">gboolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gog_series_set_name" throws="1">
        <doc xml:space="preserve">Absorbs a ref to @name_src.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="series" transfer-ownership="none">
            <doc xml:space="preserve">a #GogSeries</doc>
            <type name="gSeries" c:type="GogSeries*"/>
          </instance-parameter>
          <parameter name="name_src" transfer-ownership="full">
            <doc xml:space="preserve">a #GODataScalar</doc>
            <type name="DataScalar" c:type="GODataScalar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="fill-type" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-legend" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolation" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interpolation-skip-invalid"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="gStyledObject" c:type="GogStyledObject"/>
      </field>
      <field name="index">
        <type name="gint" c:type="int"/>
      </field>
      <field name="manual_index" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="is_valid" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="needs_recalc" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="acceptable_children" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="plot">
        <type name="gPlot" c:type="GogPlot*"/>
      </field>
      <field name="values">
        <type name="gDatasetElement" c:type="GogDatasetElement*"/>
      </field>
      <field name="has_legend">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="num_elements">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="fill_type">
        <type name="gSeriesFillType" c:type="GogSeriesFillType"/>
      </field>
      <field name="overrides">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="interpolation">
        <type name="LineInterpolation" c:type="GOLineInterpolation"/>
      </field>
      <field name="interpolation_skip_invalid">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="default_pos">
        <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
      </field>
      <field name="allowed_pos">
        <type name="guint" c:type="unsigned"/>
      </field>
    </class>
    <record name="gSeriesClass"
            c:type="GogSeriesClass"
            glib:is-gtype-struct-for="gSeries">
      <field name="base">
        <type name="gStyledObjectClass" c:type="GogStyledObjectClass"/>
      </field>
      <field name="has_interpolation">
        <doc xml:space="preserve">supports interpolation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="has_fill_type">
        <doc xml:space="preserve">%TRUE if filling is supported.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="valid_fill_type_list">
        <doc xml:space="preserve">list of supported #GogSeriesFillType values.</doc>
        <type name="gSeriesFillType" c:type="GogSeriesFillType*"/>
      </field>
      <field name="series_element_type">
        <doc xml:space="preserve">#GType for the series element if supported.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="dim_changed">
        <callback name="dim_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="series" transfer-ownership="none">
              <type name="gSeries" c:type="GogSeries*"/>
            </parameter>
            <parameter name="dim_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_xy_data">
        <callback name="get_xy_data">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </return-value>
          <parameters>
            <parameter name="series" transfer-ownership="none">
              <type name="gSeries" c:type="GogSeries*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double**"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_interpolation_params">
        <callback name="get_interpolation_params">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the interpolation parameters.</doc>
            <type name="gDataset" c:type="GogDataset*"/>
          </return-value>
          <parameters>
            <parameter name="series" transfer-ownership="none">
              <doc xml:space="preserve">#GogSeries</doc>
              <type name="gSeries" c:type="GogSeries*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="gSeriesDesc" c:type="GogSeriesDesc">
      <field name="style_fields" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="num_dim" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="dim" writable="1">
        <doc xml:space="preserve">dimensions descriptions.</doc>
        <type name="gSeriesDimDesc" c:type="GogSeriesDimDesc*"/>
      </field>
    </record>
    <record name="gSeriesDimDesc" c:type="GogSeriesDimDesc">
      <field name="name" writable="1">
        <doc xml:space="preserve">name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="priority" writable="1">
        <doc xml:space="preserve">priority.</doc>
        <type name="gSeriesPriority" c:type="GogSeriesPriority"/>
      </field>
      <field name="is_shared" writable="1">
        <doc xml:space="preserve">whether the dimension is shared among the series.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="val_type" writable="1">
        <doc xml:space="preserve">data type.</doc>
        <type name="gDimType" c:type="GogDimType"/>
      </field>
      <field name="ms_type" writable="1">
        <doc xml:space="preserve">data type for foreign formats.</doc>
        <type name="gMSDimType" c:type="GogMSDimType"/>
      </field>
    </record>
    <class name="gSeriesElement"
           c:symbol-prefix="gog_series_element"
           c:type="GogSeriesElement"
           parent="gStyledObject"
           abstract="1"
           glib:type-name="GogSeriesElement"
           glib:get-type="gog_series_element_get_type"
           glib:type-struct="gSeriesElementClass">
      <implements name="StyledObject"/>
      <property name="index" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="base">
        <type name="gStyledObject" c:type="GogStyledObject"/>
      </field>
      <field name="index">
        <type name="guint" c:type="unsigned"/>
      </field>
    </class>
    <record name="gSeriesElementClass"
            c:type="GogSeriesElementClass"
            glib:is-gtype-struct-for="gSeriesElement">
      <field name="base">
        <type name="gStyledObjectClass" c:type="GogStyledObjectClass"/>
      </field>
      <field name="gse_populate_editor" introspectable="0">
        <callback name="gse_populate_editor" introspectable="0">
          <return-value>
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
          <parameters>
            <parameter name="gobj" transfer-ownership="none">
              <type name="gObject" c:type="GogObject*"/>
            </parameter>
            <parameter name="editor" transfer-ownership="none">
              <type name="Editor" c:type="GOEditor*"/>
            </parameter>
            <parameter name="cc" transfer-ownership="none">
              <type name="CmdContext" c:type="GOCmdContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="gSeriesFillType" c:type="GogSeriesFillType">
      <member name="y_origin"
              value="0"
              c:identifier="GOG_SERIES_FILL_TYPE_Y_ORIGIN">
        <doc xml:space="preserve">from origin ox the X-axis.</doc>
      </member>
      <member name="x_origin"
              value="1"
              c:identifier="GOG_SERIES_FILL_TYPE_X_ORIGIN">
        <doc xml:space="preserve">from the origin of the Y-axis</doc>
      </member>
      <member name="bottom"
              value="2"
              c:identifier="GOG_SERIES_FILL_TYPE_BOTTOM">
        <doc xml:space="preserve">from the chart bottom.</doc>
      </member>
      <member name="left" value="3" c:identifier="GOG_SERIES_FILL_TYPE_LEFT">
        <doc xml:space="preserve">from the chart left side.</doc>
      </member>
      <member name="top" value="4" c:identifier="GOG_SERIES_FILL_TYPE_TOP">
        <doc xml:space="preserve">from the chart top.</doc>
      </member>
      <member name="right" value="5" c:identifier="GOG_SERIES_FILL_TYPE_RIGHT">
        <doc xml:space="preserve">, from the chart right side.</doc>
      </member>
      <member name="origin"
              value="6"
              c:identifier="GOG_SERIES_FILL_TYPE_ORIGIN">
        <doc xml:space="preserve">from the origin (for radar and polar plots).</doc>
      </member>
      <member name="center"
              value="7"
              c:identifier="GOG_SERIES_FILL_TYPE_CENTER">
        <doc xml:space="preserve">from the center (for radar and polar plots).</doc>
      </member>
      <member name="edge" value="8" c:identifier="GOG_SERIES_FILL_TYPE_EDGE">
        <doc xml:space="preserve">from the edge (for radar and polar plots).</doc>
      </member>
      <member name="self" value="9" c:identifier="GOG_SERIES_FILL_TYPE_SELF">
        <doc xml:space="preserve">close the series curve and fills it.</doc>
      </member>
      <member name="next" value="10" c:identifier="GOG_SERIES_FILL_TYPE_NEXT">
        <doc xml:space="preserve">from next series.</doc>
      </member>
      <member name="x_axis_min"
              value="11"
              c:identifier="GOG_SERIES_FILL_TYPE_X_AXIS_MIN">
        <doc xml:space="preserve">from X-axis minimum.</doc>
      </member>
      <member name="x_axis_max"
              value="12"
              c:identifier="GOG_SERIES_FILL_TYPE_X_AXIS_MAX">
        <doc xml:space="preserve">from X-axis maximum.</doc>
      </member>
      <member name="y_axis_min"
              value="13"
              c:identifier="GOG_SERIES_FILL_TYPE_Y_AXIS_MIN">
        <doc xml:space="preserve">from Y-axis minimum.</doc>
      </member>
      <member name="y_axis_max"
              value="14"
              c:identifier="GOG_SERIES_FILL_TYPE_Y_AXIS_MAX">
        <doc xml:space="preserve">from Y-axis maximum.</doc>
      </member>
      <member name="invalid"
              value="15"
              c:identifier="GOG_SERIES_FILL_TYPE_INVALID">
        <doc xml:space="preserve">invalid, should not happen.</doc>
      </member>
    </enumeration>
    <record name="gSeriesLabelElt"
            c:type="GogSeriesLabelElt"
            glib:type-name="GogSeriesLabelElt"
            glib:get-type="gog_series_label_elt_get_type"
            c:symbol-prefix="gog_series_label_elt">
      <field name="str" writable="1">
        <doc xml:space="preserve">the string to display.</doc>
        <type name="String" c:type="GOString*"/>
      </field>
      <field name="legend_pos" writable="1">
        <doc xml:space="preserve">the label position.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="point" writable="1">
        <doc xml:space="preserve">#GogObject
}</doc>
        <type name="gObject" c:type="GogObject*"/>
      </field>
    </record>
    <class name="gSeriesLabels"
           c:symbol-prefix="gog_series_labels"
           c:type="GogSeriesLabels"
           parent="gOutlinedObject"
           glib:type-name="GogSeriesLabels"
           glib:get-type="gog_series_labels_get_type">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <method name="get_position"
              c:identifier="gog_series_labels_get_position">
        <return-value transfer-ownership="none">
          <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scalar_get_element"
              c:identifier="gog_series_labels_scalar_get_element">
        <return-value transfer-ownership="full">
          <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allowed_position"
              c:identifier="gog_series_labels_set_allowed_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
          <parameter name="allowed" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_position"
              c:identifier="gog_series_labels_set_default_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position"
              c:identifier="gog_series_labels_set_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
          </parameter>
        </parameters>
      </method>
      <method name="vector_get_element"
              c:identifier="gog_series_labels_vector_get_element">
        <return-value transfer-ownership="full">
          <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lbls" transfer-ownership="none">
            <type name="gSeriesLabels" c:type="GogSeriesLabels*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </method>
      <property name="format" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="offset" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="base">
        <type name="gOutlinedObject" c:type="GogOutlinedObject"/>
      </field>
      <field name="position">
        <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
      </field>
      <field name="default_pos">
        <type name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos"/>
      </field>
      <field name="allowed_pos">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="offset">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="format">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="separator">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="custom_labels">
        <array zero-terminated="0" c:type="GogDatasetElement" fixed-size="2">
          <type name="gDatasetElement" c:type="GogDatasetElement"/>
        </array>
      </field>
      <field name="n_elts">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="elements">
        <type name="gSeriesLabelElt" c:type="GogSeriesLabelElt*"/>
      </field>
      <field name="overrides">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="supports_percent">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <bitfield name="gSeriesLabelsPos" c:type="GogSeriesLabelsPos">
      <member name="default_pos"
              value="0"
              c:identifier="GOG_SERIES_LABELS_DEFAULT_POS">
        <doc xml:space="preserve">default position.</doc>
      </member>
      <member name="centered"
              value="1"
              c:identifier="GOG_SERIES_LABELS_CENTERED">
        <doc xml:space="preserve">centered.</doc>
      </member>
      <member name="top" value="2" c:identifier="GOG_SERIES_LABELS_TOP">
        <doc xml:space="preserve">at top.</doc>
      </member>
      <member name="bottom" value="4" c:identifier="GOG_SERIES_LABELS_BOTTOM">
        <doc xml:space="preserve">at bottom.</doc>
      </member>
      <member name="left" value="8" c:identifier="GOG_SERIES_LABELS_LEFT">
        <doc xml:space="preserve">at left.</doc>
      </member>
      <member name="right" value="16" c:identifier="GOG_SERIES_LABELS_RIGHT">
        <doc xml:space="preserve">at right.</doc>
      </member>
      <member name="outside"
              value="32"
              c:identifier="GOG_SERIES_LABELS_OUTSIDE">
        <doc xml:space="preserve">outside the element.</doc>
      </member>
      <member name="inside" value="64" c:identifier="GOG_SERIES_LABELS_INSIDE">
        <doc xml:space="preserve">inside the element.</doc>
      </member>
      <member name="near_origin"
              value="128"
              c:identifier="GOG_SERIES_LABELS_NEAR_ORIGIN">
        <doc xml:space="preserve">near origin.</doc>
      </member>
    </bitfield>
    <class name="gSeriesLines"
           c:symbol-prefix="gog_series_lines"
           c:type="GogSeriesLines"
           parent="gStyledObject"
           glib:type-name="GogSeriesLines"
           glib:get-type="gog_series_lines_get_type">
      <implements name="StyledObject"/>
      <method name="stroke" c:identifier="gog_series_lines_stroke">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lines" transfer-ownership="none">
            <type name="gSeriesLines" c:type="GogSeriesLines*"/>
          </instance-parameter>
          <parameter name="rend" transfer-ownership="none">
            <type name="gRenderer" c:type="GogRenderer*"/>
          </parameter>
          <parameter name="bbox" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="Path" c:type="GOPath*"/>
          </parameter>
          <parameter name="invert" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="use_markers" c:identifier="gog_series_lines_use_markers">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lines" transfer-ownership="none">
            <type name="gSeriesLines" c:type="GogSeriesLines*"/>
          </instance-parameter>
          <parameter name="use_markers" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="gSeriesPriority" c:type="GogSeriesPriority">
      <doc xml:space="preserve">Applies to data declarations in #GogSeriesDimDesc.</doc>
      <member name="required" value="0" c:identifier="GOG_SERIES_REQUIRED">
        <doc xml:space="preserve">it must be there.</doc>
      </member>
      <member name="suggested" value="1" c:identifier="GOG_SERIES_SUGGESTED">
        <doc xml:space="preserve">allocator will fill it in, but use need not.</doc>
      </member>
      <member name="optional" value="2" c:identifier="GOG_SERIES_OPTIONAL">
        <doc xml:space="preserve">optional data.</doc>
      </member>
      <member name="errors" value="3" c:identifier="GOG_SERIES_ERRORS">
        <doc xml:space="preserve">optional data for error bars.</doc>
      </member>
    </enumeration>
    <class name="gSmoothedCurve"
           c:symbol-prefix="gog_smoothed_curve"
           c:type="GogSmoothedCurve"
           parent="gTrendLine"
           abstract="1"
           glib:type-name="GogSmoothedCurve"
           glib:get-type="gog_smoothed_curve_get_type"
           glib:type-struct="gSmoothedCurveClass">
      <implements name="StyledObject"/>
      <implements name="gDataset"/>
      <field name="base">
        <type name="gTrendLine" c:type="GogTrendLine"/>
      </field>
      <field name="series">
        <type name="gSeries" c:type="GogSeries*"/>
      </field>
      <field name="x">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="y">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="nb">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="name">
        <type name="gDatasetElement" c:type="GogDatasetElement*"/>
      </field>
    </class>
    <record name="gSmoothedCurveClass"
            c:type="GogSmoothedCurveClass"
            glib:is-gtype-struct-for="gSmoothedCurve">
      <doc xml:space="preserve">Base class for smoothed curves.</doc>
      <field name="base">
        <doc xml:space="preserve">base class.</doc>
        <type name="gTrendLineClass" c:type="GogTrendLineClass"/>
      </field>
      <field name="max_dim">
        <doc xml:space="preserve">number of #GOData parameters.</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="gStyle" c:type="GogStyle" disguised="1">
    </record>
    <class name="gStyledObject"
           c:symbol-prefix="gog_styled_object"
           c:type="GogStyledObject"
           parent="gObject"
           abstract="1"
           glib:type-name="GogStyledObject"
           glib:get-type="gog_styled_object_get_type"
           glib:type-struct="gStyledObjectClass">
      <implements name="StyledObject"/>
      <virtual-method name="init_style">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gStyledObject" c:type="GogStyledObject*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="style_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="gStyledObject" c:type="GogStyledObject*"/>
          </instance-parameter>
          <parameter name="new_style" transfer-ownership="none">
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="style"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <type/>
      </property>
      <field name="base">
        <type name="gObject" c:type="GogObject"/>
      </field>
      <field name="style">
        <type name="Style" c:type="GOStyle*"/>
      </field>
      <glib:signal name="style-changed" when="last">
        <doc xml:space="preserve">The ::style-changed signal is emitted after the style has been changed
by a call to go_styled_object_set_style().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">The new #GOStyle</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="gStyledObjectClass"
            c:type="GogStyledObjectClass"
            glib:is-gtype-struct-for="gStyledObject">
      <field name="base">
        <type name="gObjectClass" c:type="GogObjectClass"/>
      </field>
      <field name="init_style">
        <callback name="init_style">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gStyledObject" c:type="GogStyledObject*"/>
            </parameter>
            <parameter name="style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="style_changed">
        <callback name="style_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="obj" transfer-ownership="none">
              <type name="gStyledObject" c:type="GogStyledObject*"/>
            </parameter>
            <parameter name="new_style" transfer-ownership="none">
              <type name="Style" c:type="GOStyle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="gText"
           c:symbol-prefix="gog_text"
           c:type="GogText"
           parent="gOutlinedObject"
           abstract="1"
           glib:type-name="GogText"
           glib:get-type="gog_text_get_type"
           glib:type-struct="gTextClass">
      <implements name="StyledObject"/>
      <virtual-method name="get_markup" invoker="get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="text" transfer-ownership="none">
            <type name="gText" c:type="GogText*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_str" invoker="get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="text" transfer-ownership="none">
            <type name="gText" c:type="GogText*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_markup" c:identifier="gog_text_get_markup">
        <return-value transfer-ownership="full">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="text" transfer-ownership="none">
            <type name="gText" c:type="GogText*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_str" c:identifier="gog_text_get_str">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="text" transfer-ownership="none">
            <type name="gText" c:type="GogText*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="allow-markup" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-wrap" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rotate-bg" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rotate-frame" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="gOutlinedObject" c:type="GogOutlinedObject"/>
      </field>
      <field name="allow_markup">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="rotate_frame">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="rotate_bg">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="allow_wrap">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="gTextClass"
            c:type="GogTextClass"
            glib:is-gtype-struct-for="gText">
      <field name="base">
        <type name="gOutlinedObjectClass" c:type="GogOutlinedObjectClass"/>
      </field>
      <field name="get_str">
        <callback name="get_str">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="text" transfer-ownership="none">
              <type name="gText" c:type="GogText*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_markup">
        <callback name="get_markup">
          <return-value transfer-ownership="full">
            <type name="Pango.AttrList" c:type="PangoAttrList*"/>
          </return-value>
          <parameters>
            <parameter name="text" transfer-ownership="none">
              <type name="gText" c:type="GogText*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="gTheme"
           c:symbol-prefix="gog_theme"
           c:type="GogTheme"
           parent="GObject.Object"
           glib:type-name="GogTheme"
           glib:get-type="gog_theme_get_type">
      <implements name="Persist"/>
      <function name="foreach" c:identifier="gog_theme_foreach">
        <doc xml:space="preserve">Executes @handler to each theme installed on the system, including built-in
themes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">a #GFunc using a theme as first argument</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">data to pass to @handler</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="registry_get_theme_names"
                c:identifier="gog_theme_registry_get_theme_names">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a newly allocated theme name list from theme registry.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </function>
      <function name="registry_lookup"
                c:identifier="gog_theme_registry_lookup">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GogTheme from theme registry.</doc>
          <type name="gTheme" c:type="GogTheme*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a theme name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="gog_theme_delete">
        <doc xml:space="preserve">Destroys the theme and remove it from the user directory and from the
database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">a #GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="gog_theme_dup">
        <doc xml:space="preserve">Duplicates @theme with a new Id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new theme.</doc>
          <type name="gTheme" c:type="GogTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">a #GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="edit" c:identifier="gog_theme_edit">
        <doc xml:space="preserve">Displays a dialog box to edit the theme. This can be done only for
locally installed themes that are writeable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The edited theme or %NULL if the edition has
been cancelled.</doc>
          <type name="gTheme" c:type="GogTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">the #GogTheme to edit or %NULL to create a new one.</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve">a #GOCmdContext or %NULL.</doc>
            <type name="CmdContext" c:type="GOCmdContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fillin_style" c:identifier="gog_theme_fillin_style">
        <doc xml:space="preserve">Fill in the auto aspects of @style based on @theme 's element for objects of
type/role similar to @obj with index @ind.  If @relevant_fields is GO_STYLE_ALL,
fillin the entire style, not just the auto portions included in @relevant_fields.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">#GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve">#GOStyle to initialize</doc>
            <type name="Style" c:type="GOStyle*"/>
          </parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject The object associated with @style</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
          <parameter name="ind" transfer-ownership="none">
            <doc xml:space="preserve">an optional index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="relevant_fields" transfer-ownership="none">
            <doc xml:space="preserve">GOStyleFlag</doc>
            <type name="StyleFlag" c:type="GOStyleFlag"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color_map" c:identifier="gog_theme_get_color_map">
        <doc xml:space="preserve">Retrieves the themed color map. Each theme has a discrete color map and a
continuous one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the requested color map.</doc>
          <type name="gAxisColorMap" c:type="GogAxisColorMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">#GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
          <parameter name="discrete" transfer-ownership="none">
            <doc xml:space="preserve">whether the map is for a discrete axis.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description" c:identifier="gog_theme_get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gog_theme_get_id">
        <doc xml:space="preserve">Retrieves the theme Id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the GogTheme Id.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">a #GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gog_theme_get_name">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the GogTheme name.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">a #GogTheme</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_type"
              c:identifier="gog_theme_get_resource_type">
        <return-value transfer-ownership="none">
          <type name="ResourceType" c:type="GoResourceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_home_dir"
              c:identifier="gog_theme_save_to_home_dir">
        <doc xml:space="preserve">Writes the theme to the user directory so that it becomes permanently
available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">the #GogTheme to save</doc>
            <type name="gTheme" c:type="GogTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="resource-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ResourceType"/>
      </property>
    </class>
    <record name="gTool" c:type="GogTool">
      <field name="name" writable="1">
        <doc xml:space="preserve">tool name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="cursor_type" writable="1">
        <doc xml:space="preserve">pointer cursor type for the tool.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="point">
        <callback name="point">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="gObject" c:type="GogObject**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render">
        <callback name="render">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init">
        <callback name="init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="gToolAction" c:type="GogToolAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move">
        <callback name="move">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="gToolAction" c:type="GogToolAction*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="double_click">
        <callback name="double_click">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="gToolAction" c:type="GogToolAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="gToolAction" c:type="GogToolAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="gToolAction"
            c:type="GogToolAction"
            glib:type-name="GogToolAction"
            glib:get-type="gog_tool_action_get_type"
            c:symbol-prefix="gog_tool_action">
      <field name="start_x" writable="1">
        <doc xml:space="preserve">initial pointer horizontal position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="start_y" writable="1">
        <doc xml:space="preserve">initial pointer vertical position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="view" writable="1">
        <doc xml:space="preserve">#GogView</doc>
        <type name="gView" c:type="GogView*"/>
      </field>
      <field name="tool" writable="1">
        <doc xml:space="preserve">#GogTool</doc>
        <type name="gTool" c:type="GogTool*"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve">user data.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="ref_count" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <constructor name="new" c:identifier="gog_tool_action_new">
        <return-value transfer-ownership="full">
          <type name="gToolAction" c:type="GogToolAction*"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </parameter>
          <parameter name="tool" transfer-ownership="none">
            <type name="gTool" c:type="GogTool*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="double_click" c:identifier="gog_tool_action_double_click">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="gToolAction" c:type="GogToolAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gog_tool_action_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="gToolAction" c:type="GogToolAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move" c:identifier="gog_tool_action_move">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="gToolAction" c:type="GogToolAction*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="gTrendLine"
           c:symbol-prefix="gog_trend_line"
           c:type="GogTrendLine"
           parent="gStyledObject"
           abstract="1"
           glib:type-name="GogTrendLine"
           glib:get-type="gog_trend_line_get_type">
      <implements name="StyledObject"/>
      <constructor name="new_by_name"
                   c:identifier="gog_trend_line_new_by_name">
        <return-value transfer-ownership="full">
          <type name="gTrendLine" c:type="GogTrendLine*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_type"
                   c:identifier="gog_trend_line_new_by_type">
        <return-value transfer-ownership="full">
          <type name="gTrendLine" c:type="GogTrendLine*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="gTrendLineType" c:type="GogTrendLineType*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="types" c:identifier="gog_trend_line_types">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the registered trend line types.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </function>
      <method name="has_legend" c:identifier="gog_trend_line_has_legend">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <type name="gTrendLine" c:type="GogTrendLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="has-legend" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="base">
        <type name="gStyledObject" c:type="GogStyledObject"/>
      </field>
    </class>
    <record name="gTrendLineType" c:type="GogTrendLineType">
      <field name="engine" writable="1">
        <doc xml:space="preserve">trend line engine.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">trend line type name.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="description" writable="1">
        <doc xml:space="preserve">untranslated description.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="properties" writable="1">
        <doc xml:space="preserve">trend line type properties.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <class name="gView"
           c:symbol-prefix="gog_view"
           c:type="GogView"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GogView"
           glib:get-type="gog_view_get_type"
           glib:type-struct="gViewClass">
      <virtual-method name="build_toolkit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tip_at_point" invoker="get_tip_at_point">
        <doc xml:space="preserve">Gets a tip string related to the position as defined by (@x,@y) in @view.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly allocated tip string if the view class supports
that or NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="natural_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="req" transfer-ownership="none">
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="padding_request" invoker="padding_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="bbox" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <type name="gViewPadding" c:type="GogViewPadding*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="render" invoker="render">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="bbox" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reserved1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reserved2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="size_allocate" invoker="size_allocate">
        <doc xml:space="preserve">Assign a size and position to a GogView.  Primarilly used by containers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="allocation" transfer-ownership="none">
            <doc xml:space="preserve">position and size to be allocated to @view</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="size_request" invoker="size_request">
        <doc xml:space="preserve">Determines the desired size of a view.

Note, that the virtual method deviates slightly from this function.  This
function will zero @requisition before calling the virtual method.

Remember that the size request is not necessarily the size a view will
actually be allocated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve">available space.</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">a #GogViewRequisition.</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="find_child_view" c:identifier="gog_view_find_child_view">
        <doc xml:space="preserve">Find the GogView contained in @container that corresponds to @model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">NULL on error or if @target_model has no view.</doc>
          <type name="gView" c:type="GogView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="container" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="target_model" transfer-ownership="none">
            <doc xml:space="preserve">#GogObject</doc>
            <type name="gObject" c:type="GogObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="gog_view_get_model">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogObject owning the view.</doc>
          <type name="gObject" c:type="GogObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_natural_size" c:identifier="gog_view_get_natural_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tip_at_point" c:identifier="gog_view_get_tip_at_point">
        <doc xml:space="preserve">Gets a tip string related to the position as defined by (@x,@y) in @view.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly allocated tip string if the view class supports
that or NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tool_at_point"
              c:identifier="gog_view_get_tool_at_point">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">tool under cursor for a given view, or %NULL</doc>
          <type name="gTool" c:type="GogTool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">in coords</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">in coords</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="gobj" transfer-ownership="none">
            <doc xml:space="preserve">pointed object or NULL</doc>
            <type name="gObject" c:type="GogObject**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_toolkit" c:identifier="gog_view_get_toolkit">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">toolkit associated with given view.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gTool"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view_at_point"
              c:identifier="gog_view_get_view_at_point">
        <doc xml:space="preserve">Gets view under cursor, searching recursively from @view. Corresponding object
is stored in @obj. This object may or may not be @view-&gt;model of pointed view.
This function also stores tool under cursor, for the pointed view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GogView at x,y position</doc>
          <type name="gView" c:type="GogView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">cursor x position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">cursor y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">pointed object or NULL</doc>
            <type name="gObject" c:type="GogObject**"/>
          </parameter>
          <parameter name="tool" transfer-ownership="none">
            <doc xml:space="preserve">pointed tool or NULL</doc>
            <type name="gTool" c:type="GogTool**"/>
          </parameter>
        </parameters>
      </method>
      <method name="padding_request" c:identifier="gog_view_padding_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="bbox" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
          <parameter name="padding" transfer-ownership="none">
            <type name="gViewPadding" c:type="GogViewPadding*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_redraw" c:identifier="gog_view_queue_redraw">
        <doc xml:space="preserve">Requests a redraw for the entire graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="queue_resize" c:identifier="gog_view_queue_resize">
        <doc xml:space="preserve">Flags a view to have its size renegotiated; should
be called when a model for some reason has a new size request.
For example, when you change the size of a legend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="gog_view_render">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="bbox" transfer-ownership="none">
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_toolkit" c:identifier="gog_view_render_toolkit">
        <doc xml:space="preserve">Render toolkit elements.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="size_allocate" c:identifier="gog_view_size_allocate">
        <doc xml:space="preserve">Assign a size and position to a GogView.  Primarilly used by containers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="allocation" transfer-ownership="none">
            <doc xml:space="preserve">position and size to be allocated to @view</doc>
            <type name="gViewAllocation" c:type="GogViewAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size_child_request"
              c:identifier="gog_view_size_child_request">
        <doc xml:space="preserve">Computes additional requision in @req which must be added to parent requisition,
and minimum requisition in @min_req which is minimum space for displaying all
children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve">the amount of space available in total</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
          <parameter name="req" transfer-ownership="none">
            <doc xml:space="preserve">additionnal requisition</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
          <parameter name="min_req" transfer-ownership="none">
            <doc xml:space="preserve">minimum size for displaying all children</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size_request" c:identifier="gog_view_size_request">
        <doc xml:space="preserve">Determines the desired size of a view.

Note, that the virtual method deviates slightly from this function.  This
function will zero @requisition before calling the virtual method.

Remember that the size request is not necessarily the size a view will
actually be allocated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve">available space.</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">a #GogViewRequisition.</doc>
            <type name="gViewRequisition" c:type="GogViewRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_sizes" c:identifier="gog_view_update_sizes">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a redraw is necessary.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">#GogView</doc>
            <type name="gView" c:type="GogView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="model"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="gObject"/>
      </property>
      <property name="parent"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="gView"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="model">
        <type name="gObject" c:type="GogObject*"/>
      </field>
      <field name="renderer">
        <type name="gRenderer" c:type="GogRenderer*"/>
      </field>
      <field name="parent">
        <type name="gView" c:type="GogView*"/>
      </field>
      <field name="children">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="allocation">
        <type name="gViewAllocation" c:type="GogViewAllocation"/>
      </field>
      <field name="residual">
        <type name="gViewAllocation" c:type="GogViewAllocation"/>
      </field>
      <field name="allocation_valid" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="child_allocations_valid" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="being_updated" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="toolkit">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="_priv">
        <type name="gpointer" c:type="void*"/>
      </field>
    </class>
    <record name="gViewAllocation"
            c:type="GogViewAllocation"
            glib:type-name="GogViewAllocation"
            glib:get-type="gog_view_allocation_get_type"
            c:symbol-prefix="gog_view_allocation">
      <field name="w" writable="1">
        <doc xml:space="preserve">width.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h" writable="1">
        <doc xml:space="preserve">height.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x" writable="1">
        <doc xml:space="preserve">horizontal position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve">vertical position.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="gViewClass"
            c:type="GogViewClass"
            glib:is-gtype-struct-for="gView">
      <doc xml:space="preserve">the GogViewClass::clip firled should be set to %TRUE to clip drawings to
the vew allocation.</doc>
      <field name="base">
        <doc xml:space="preserve"> base class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="clip">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="state_init">
        <callback name="state_init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding_request">
        <callback name="padding_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="bbox" transfer-ownership="none">
              <type name="gViewAllocation" c:type="GogViewAllocation*"/>
            </parameter>
            <parameter name="padding" transfer-ownership="none">
              <type name="gViewPadding" c:type="GogViewPadding*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="size_request">
        <callback name="size_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <doc xml:space="preserve">a #GogView</doc>
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="available" transfer-ownership="none">
              <doc xml:space="preserve">available space.</doc>
              <type name="gViewRequisition" c:type="GogViewRequisition*"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <doc xml:space="preserve">a #GogViewRequisition.</doc>
              <type name="gViewRequisition" c:type="GogViewRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="size_allocate">
        <callback name="size_allocate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <doc xml:space="preserve">a #GogView</doc>
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="allocation" transfer-ownership="none">
              <doc xml:space="preserve">position and size to be allocated to @view</doc>
              <type name="gViewAllocation" c:type="GogViewAllocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="render">
        <callback name="render">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="bbox" transfer-ownership="none">
              <type name="gViewAllocation" c:type="GogViewAllocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_toolkit">
        <callback name="build_toolkit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tip_at_point">
        <callback name="get_tip_at_point">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the newly allocated tip string if the view class supports
that or NULL.</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <doc xml:space="preserve">#GogView</doc>
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y position</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="natural_size">
        <callback name="natural_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
            <parameter name="req" transfer-ownership="none">
              <type name="gViewRequisition" c:type="GogViewRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved1">
        <callback name="reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved2">
        <callback name="reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="gView" c:type="GogView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="gViewPadding" c:type="GogViewPadding">
      <field name="wr" writable="1">
        <doc xml:space="preserve">right padding.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="hb" writable="1">
        <doc xml:space="preserve">bottom padding.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="wl" writable="1">
        <doc xml:space="preserve">left pdding.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ht" writable="1">
        <doc xml:space="preserve">top padding.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="gViewRequisition" c:type="GogViewRequisition">
      <field name="w" writable="1">
        <doc xml:space="preserve">width.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="h" writable="1">
        <doc xml:space="preserve">height.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <function name="gdk_pixbuf_get_from_cache"
              c:identifier="go_gdk_pixbuf_get_from_cache">
      <doc xml:space="preserve">Retrieves a pixbuf from the image cache, loading it from the file
@filename located in goffice_icon_dir if not cached yet.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a GdkPixbuf, NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">pixbuf filename</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdk_pixbuf_load_from_file"
              c:identifier="go_gdk_pixbuf_load_from_file"
              version="0.9.6">
      <doc xml:space="preserve">Utility routine to create pixbufs from file @name in the goffice_icon_dir.
As a special case, @filename may have the form "res:&lt;resource name&gt;" in
which case the resource manager is queried instead of loading a file.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a GdkPixbuf that the caller is responsible for.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">pixbuf filename</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_AABR_add" c:identifier="go_geometry_AABR_add">
      <doc xml:space="preserve">Computes the Axis Aligned Bounding Rectangle of aabr0 and aabr1,
and stores result in aabr0.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="aabr0" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryAABR</doc>
          <type name="GeometryAABR" c:type="GOGeometryAABR*"/>
        </parameter>
        <parameter name="aabr1" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryAABR</doc>
          <type name="GeometryAABR" c:type="GOGeometryAABR*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_OBR_to_AABR"
              c:identifier="go_geometry_OBR_to_AABR">
      <doc xml:space="preserve">Stores Axis Aligned Bounding Rectangle of @obr in @aabr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obr" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryOBR</doc>
          <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
        </parameter>
        <parameter name="aabr" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryAABR</doc>
          <type name="GeometryAABR" c:type="GOGeometryAABR*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_calc_label_anchor"
              c:identifier="go_geometry_calc_label_anchor">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">computed label anchor, to be used by go_geometry_calc_label_position.</doc>
        <type name="GeometrySide" c:type="GOGeometrySide"/>
      </return-value>
      <parameters>
        <parameter name="obr" transfer-ownership="none">
          <doc xml:space="preserve">bounding rectangle of label</doc>
          <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">angle of axis</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_calc_label_position"
              c:identifier="go_geometry_calc_label_position">
      <doc xml:space="preserve">Convenience routine that computes position of a label relative to an axis.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the computed anchor if @anchor == GO_SIDE_AUTO, or @anchor value.</doc>
        <type name="GeometrySide" c:type="GOGeometrySide"/>
      </return-value>
      <parameters>
        <parameter name="obr" transfer-ownership="none">
          <doc xml:space="preserve">bounding rectangle of label</doc>
          <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">angle of axis</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve">minimum distance between label and axis</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="side" transfer-ownership="none">
          <doc xml:space="preserve">side of label with respect to axis</doc>
          <type name="GeometrySide" c:type="GOGeometrySide"/>
        </parameter>
        <parameter name="anchor" transfer-ownership="none">
          <doc xml:space="preserve">where to anchor the label</doc>
          <type name="GeometrySide" c:type="GOGeometrySide"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_cartesian_to_polar"
              c:identifier="go_geometry_cartesian_to_polar">
      <doc xml:space="preserve">Converts cartesion coordinates to polar coordinates.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">cartesian coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">cartesian coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="rho" transfer-ownership="none">
          <doc xml:space="preserve">polar coordinate</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">polar coordinate</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_get_rotation_type"
              c:identifier="go_geometry_get_rotation_type">
      <doc xml:space="preserve">Calculates rotation type for handling of special angles (alpha = n * pi / 2)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GOGeometryRotationType</doc>
        <type name="GeometryRotationType" c:type="GOGeometryRotationType"/>
      </return-value>
      <parameters>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">angle in radians</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_point_to_segment"
              c:identifier="go_geometry_point_to_segment">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the distance between a point and a segment.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="xp" transfer-ownership="none">
          <doc xml:space="preserve">point coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="yp" transfer-ownership="none">
          <doc xml:space="preserve">point coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="xs" transfer-ownership="none">
          <doc xml:space="preserve">segment start coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">segment start coordinate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">extent of segment</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve">extent of segment</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="geometry_test_OBR_overlap"
              c:identifier="go_geometry_test_OBR_overlap">
      <doc xml:space="preserve">Overlap test of Oriented Bounding Rectangles by the separating axis method.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if OOBRs overlap</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obr0" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryOBR</doc>
          <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
        </parameter>
        <parameter name="obr1" transfer-ownership="none">
          <doc xml:space="preserve">a #GOGeometryOBR</doc>
          <type name="GeometryOBR" c:type="GOGeometryOBR*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_file_openers" c:identifier="go_get_file_openers">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">list of known
#GOFileOpener types (do not modify list)</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="FileSaver"/>
        </type>
      </return-value>
    </function>
    <function name="get_file_permissions"
              c:identifier="go_get_file_permissions">
      <return-value transfer-ownership="full">
        <type name="FilePermissions" c:type="GOFilePermissions*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_file_savers" c:identifier="go_get_file_savers">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">list of known
#GOFileSaver types (do not modify list)</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="FileSaver"/>
        </type>
      </return-value>
    </function>
    <function name="get_mime_type" c:identifier="go_get_mime_type">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the mime type for the file as a newly allocated string. Needs to
be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">the uri.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_mime_type_for_data"
              c:identifier="go_get_mime_type_for_data">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the mime type for the data as a newly allocated string. Needs to
be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">the data.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="data_size" transfer-ownership="none">
          <doc xml:space="preserve">the data size</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_real_name" c:identifier="go_get_real_name">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a utf8 encoded string with the current user name.
	Caller should _NOT_ free the result.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <record name="go_regression_stat_t"
            c:type="go_regression_stat_t"
            glib:type-name="go_regression_stat_t"
            glib:get-type="go_regression_stat_get_type"
            c:symbol-prefix="regression_stat">
      <field name="se" writable="1">
        <doc xml:space="preserve">SE for each parameter estimator.</doc>
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="t" writable="1">
        <doc xml:space="preserve">t values for each parameter estimator.</doc>
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="sqr_r" writable="1">
        <doc xml:space="preserve">squared R.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="adj_sqr_r" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="se_y" writable="1">
        <doc xml:space="preserve">the Standard Error of Y.</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="F" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="df_reg" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="df_resid" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="df_total" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="ss_reg" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ss_resid" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ss_total" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ms_reg" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ms_resid" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ybar" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="xbar" writable="1">
        <type name="gdouble" c:type="double*"/>
      </field>
      <field name="var" writable="1">
        <doc xml:space="preserve">the variance of the entire regression: sum(errors^2)/(n-xdim).</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <constructor name="new" c:identifier="go_regression_stat_new">
        <return-value transfer-ownership="full">
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </return-value>
      </constructor>
      <method name="destroy" c:identifier="go_regression_stat_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stat_" transfer-ownership="none">
            <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="destroyl" c:identifier="go_regression_stat_destroyl">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stat_" transfer-ownership="none">
            <type name="go_regression_stat_tl"
                  c:type="go_regression_stat_tl*"/>
          </parameter>
        </parameters>
      </function>
      <function name="newl" c:identifier="go_regression_stat_newl">
        <return-value transfer-ownership="full">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </return-value>
      </function>
    </record>
    <record name="go_regression_stat_tl"
            c:type="go_regression_stat_tl"
            glib:type-name="go_regression_stat_tl"
            glib:get-type="go_regression_statl_get_type"
            c:symbol-prefix="regression_statl">
      <field name="se" writable="1">
        <doc xml:space="preserve">SE for each parameter estimator.</doc>
        <type name="glong" c:type="long*"/>
      </field>
      <field name="t" writable="1">
        <doc xml:space="preserve">t values for each parameter estimator.</doc>
        <type name="glong" c:type="long*"/>
      </field>
      <field name="sqr_r" writable="1">
        <doc xml:space="preserve">squared R.</doc>
        <type name="glong" c:type="long"/>
      </field>
      <field name="adj_sqr_r" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="se_y" writable="1">
        <doc xml:space="preserve">the Standard Error of Y.</doc>
        <type name="glong" c:type="long"/>
      </field>
      <field name="F" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="df_reg" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="df_resid" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="df_total" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="ss_reg" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="ss_resid" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="ss_total" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="ms_reg" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="ms_resid" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="ybar" writable="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="xbar" writable="1">
        <type name="glong" c:type="long*"/>
      </field>
      <field name="var" writable="1">
        <doc xml:space="preserve">the variance of the entire regression: sum(errors^2)/(n-xdim).</doc>
        <type name="glong" c:type="long"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="unsigned"/>
      </field>
    </record>
    <function name="gog_axis_map" c:identifier="gog_axis_map">
      <doc xml:space="preserve">Converts @value to plot coordinates. A value in [0,1.0] range means a data
within axis bounds.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">mapped value.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="map" transfer-ownership="none">
          <doc xml:space="preserve">a #GogAxisMap</doc>
          <type name="gAxisMap" c:type="GogAxisMap*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">value to map to plot space.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="gog_guru" c:identifier="gog_guru">
      <doc xml:space="preserve">CHANGED 0.5.3
	: drop the @toplevel window argument and have the callers handle
	  widget_show and set_transient</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the dialog, and shows new graph guru.</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="graph" transfer-ownership="none">
          <doc xml:space="preserve">the graph to edit</doc>
          <type name="gGraph" c:type="GogGraph*"/>
        </parameter>
        <parameter name="dalloc" transfer-ownership="none">
          <doc xml:space="preserve">The data allocator to use for editing</doc>
          <type name="gDataAllocator" c:type="GogDataAllocator*"/>
        </parameter>
        <parameter name="cc" transfer-ownership="none">
          <doc xml:space="preserve">Where to report errors</doc>
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve">#GClosure</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gog_guru_add_custom_widget"
              c:identifier="gog_guru_add_custom_widget">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="guru" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="custom" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gog_guru_get_help_button"
              c:identifier="gog_guru_get_help_button">
      <doc xml:space="preserve">Quick utility to allow application specific help.  Required until we clean
up the relationship between goffice and gnumeric to decide which parts of
the help live where.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GtkWidget associated with the gurus help button.</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="guru" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget  (the result of gog_guru).</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gog_style_new"
              c:identifier="gog_style_new"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #GogStyle</doc>
        <type name="gStyle" c:type="GogStyle*"/>
      </return-value>
    </function>
    <function name="gog_xml_read_state_get_obj"
              c:identifier="gog_xml_read_state_get_obj">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the laset rerad #GogObject</doc>
        <type name="gObject" c:type="GogObject*"/>
      </return-value>
      <parameters>
        <parameter name="xin" transfer-ownership="none">
          <doc xml:space="preserve">#GsfXMLIn</doc>
          <type name="Gsf.XMLIn" c:type="GsfXMLIn*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradient_dir_as_str" c:identifier="go_gradient_dir_as_str">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="dir" transfer-ownership="none">
          <type name="GradientDirection" c:type="GOGradientDirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradient_dir_from_str"
              c:identifier="go_gradient_dir_from_str">
      <return-value transfer-ownership="none">
        <type name="GradientDirection" c:type="GOGradientDirection"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gradient_selector_set_colors"
              c:identifier="go_gradient_selector_set_colors">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
        <parameter name="stop" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_combo_box_init_text"
              c:identifier="go_gtk_builder_combo_box_init_text">
      <doc xml:space="preserve">searches the #GtkComboBox in @gui and ensures it has a model and a
renderer appropriate for using with #gtk_combo_box_append_text and friends.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the #GtkComboBox or NULL</doc>
        <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
      </return-value>
      <parameters>
        <parameter name="gui" transfer-ownership="none">
          <doc xml:space="preserve">the #GtkBuilder</doc>
          <type name="Gtk.Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="widget_name" transfer-ownership="none">
          <doc xml:space="preserve">the name of the combo box in the ui file.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_get_widget"
              c:identifier="go_gtk_builder_get_widget">
      <doc xml:space="preserve">Simple wrapper to #gtk_builder_get_object which returns the object
as a GtkWidget.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a new #GtkWidget or NULL</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="gui" transfer-ownership="none">
          <doc xml:space="preserve">the #GtkBuilder</doc>
          <type name="Gtk.Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="widget_name" transfer-ownership="none">
          <doc xml:space="preserve">the name of the combo box in the ui file.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_group_value"
              c:identifier="go_gtk_builder_group_value">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="gui" transfer-ownership="none">
          <type name="Gtk.Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="char* const"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_load" c:identifier="go_gtk_builder_load">
      <doc xml:space="preserve">Simple utility to open ui files

Since 0.9.6</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #GtkBuilder or NULL

@uifile should be one of these:

res:NAME  -- data from resource manager
data:DATA -- data right here
filename  -- data from local file

Data may be compressed, regardless of source.</doc>
        <type name="Gtk.Builder" c:type="GtkBuilder*"/>
      </return-value>
      <parameters>
        <parameter name="uifile" transfer-ownership="none">
          <doc xml:space="preserve">the name of the file load</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">the translation domain</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="gcc" transfer-ownership="none">
          <doc xml:space="preserve">#GOCmdContext</doc>
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_load_internal"
              c:identifier="go_gtk_builder_load_internal"
              version="0.9.6">
      <doc xml:space="preserve">Simple utility to open ui files</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #GtkBuilder or NULL

Variant of go_gtk_builder_new that searchs goffice directories
for files.
@uifile should be one of these:

res:NAME  -- data from resource manager
data:DATA -- data right here
filename  -- data from local file

Data may be compressed, regardless of source.</doc>
        <type name="Gtk.Builder" c:type="GtkBuilder*"/>
      </return-value>
      <parameters>
        <parameter name="uifile" transfer-ownership="none">
          <doc xml:space="preserve">the name of the file load</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">the translation domain</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="gcc" transfer-ownership="none">
          <doc xml:space="preserve">#GOCmdContext</doc>
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_signal_connect"
              c:identifier="go_gtk_builder_signal_connect">
      <doc xml:space="preserve">Convenience wrapper around g_signal_connect for GtkBuilder.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The signal id</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="gui" transfer-ownership="none">
          <doc xml:space="preserve">#GtkBuilder</doc>
          <type name="Gtk.Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="instance_name" transfer-ownership="none">
          <doc xml:space="preserve">widget name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve">signal name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="c_handler"
                   transfer-ownership="none"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve">#GCallback</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">arbitrary</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_builder_signal_connect_swapped"
              c:identifier="go_gtk_builder_signal_connect_swapped">
      <doc xml:space="preserve">Convenience wrapper around g_signal_connect_swapped for GtkBuilder.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The signal id</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="gui" transfer-ownership="none">
          <doc xml:space="preserve">#GtkBuilder</doc>
          <type name="Gtk.Builder" c:type="GtkBuilder*"/>
        </parameter>
        <parameter name="instance_name" transfer-ownership="none">
          <doc xml:space="preserve">widget name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve">signal name</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="c_handler"
                   transfer-ownership="none"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve">#GCallback</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">arbitary</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_button_build_with_stock"
              c:identifier="go_gtk_button_build_with_stock"
              version="0.9.9">
      <doc xml:space="preserve">FROM : gedit
Creates a new GtkButton with custom label and stock image.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">newly created button</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve">button label</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:space="preserve">icon name (or stock id)</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_combo_box_append_text"
              c:identifier="go_gtk_combo_box_append_text">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="combo" transfer-ownership="none">
          <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_combo_box_remove_text"
              c:identifier="go_gtk_combo_box_remove_text">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="combo" transfer-ownership="none">
          <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
        </parameter>
        <parameter name="position" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_dialog_add_button"
              c:identifier="go_gtk_dialog_add_button">
      <doc xml:space="preserve">FROM : gedit
Creates and adds a button with stock image to the action area of an existing dialog.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">newly created button</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="dialog" transfer-ownership="none">
          <doc xml:space="preserve">dialog you want to add a button</doc>
          <type name="Gtk.Dialog" c:type="GtkDialog*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve">button label</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="stock_id" transfer-ownership="none">
          <doc xml:space="preserve">stock icon id</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="response_id" transfer-ownership="none">
          <doc xml:space="preserve">respond id when button clicked</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_dialog_run" c:identifier="go_gtk_dialog_run">
      <doc xml:space="preserve">Pop up a dialog as child of a window.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">result ID.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="dialog" transfer-ownership="none">
          <doc xml:space="preserve">#GtkDialog</doc>
          <type name="Gtk.Dialog" c:type="GtkDialog*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_editable_enters" c:identifier="go_gtk_editable_enters">
      <doc xml:space="preserve">Normally if there's an editable widget (such as #GtkEntry) in your
dialog, pressing Enter will activate the editable rather than the
default dialog button. However, in most cases, the user expects to
type something in and then press enter to close the dialog. This
function enables that behavior.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_file_sel_dialog" c:identifier="go_gtk_file_sel_dialog">
      <doc xml:space="preserve">Runs a modal dialog to select a file.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if a file was selected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_grid_remove_row" c:identifier="go_gtk_grid_remove_row">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="grid" transfer-ownership="none">
          <type name="Gtk.Grid" c:type="GtkGrid*"/>
        </parameter>
        <parameter name="row" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_help_button_init"
              c:identifier="go_gtk_help_button_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="w" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="data_dir" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="app" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="link" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_nonmodal_dialog" c:identifier="go_gtk_nonmodal_dialog">
      <doc xml:space="preserve">Utility to set @dialog as a transient of @toplevel
and to set up a handler for "Escape"</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="dialog" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_notice_dialog"
              c:identifier="go_gtk_notice_dialog"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="Gtk.MessageType" c:type="GtkMessageType"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_notice_nonmodal_dialog"
              c:identifier="go_gtk_notice_nonmodal_dialog"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="ref" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget**"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="Gtk.MessageType" c:type="GtkMessageType"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_query_yes_no"
              c:identifier="go_gtk_query_yes_no"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="default_answer" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_select_image" c:identifier="go_gtk_select_image">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="initial" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_select_image_with_extra_widget"
              c:identifier="go_gtk_select_image_with_extra_widget">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="initial" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="extra" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_url_is_writeable"
              c:identifier="go_gtk_url_is_writeable">
      <doc xml:space="preserve">Check if it makes sense to try saving.
If it's an existing file and writable for us, ask if we want to overwrite.
We check for other problems, but if we miss any, the saver will report.
So it doesn't have to be bulletproof.

FIXME: The message boxes should really be children of the file selector,
not the workbook.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @url is writable</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">the uri to test.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="overwrite_by_default" transfer-ownership="none">
          <doc xml:space="preserve">gboolean</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_url_show" c:identifier="go_gtk_url_show">
      <doc xml:space="preserve">This function is a simple convenience wrapper for #gtk_show_uri.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">%NULL on sucess, or a newly allocated #GError if something
went wrong.</doc>
        <type name="GLib.Error" c:type="GError*"/>
      </return-value>
      <parameters>
        <parameter name="url" transfer-ownership="none">
          <doc xml:space="preserve">the url to show</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:space="preserve">screen to show the uri on or %NULL for the default screen</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_disable_focus"
              c:identifier="go_gtk_widget_disable_focus">
      <doc xml:space="preserve">Convenience wrapper to disable focus on a container and it's children.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">#GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_render_icon_pixbuf"
              c:identifier="go_gtk_widget_render_icon_pixbuf">
      <doc xml:space="preserve">This function works as gtk_widget_render_icon_pixbuf except that it takes
an icon name, not a stock id.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A #GdkPixbuf.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve">a mapped widget determining the screen targeted</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="icon_name" transfer-ownership="none">
          <doc xml:space="preserve">the name of the icon to render</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve">the symbolic size desired.</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_replace" c:identifier="go_gtk_widget_replace">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="victim" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="replacement" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_window_set_transient"
              c:identifier="go_gtk_window_set_transient">
      <doc xml:space="preserve">Make the window a child of the workbook in the command context, if there is
one.  The function duplicates the positioning functionality in
gnome_dialog_set_parent, but does not require the transient window to be
a GnomeDialog.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <doc xml:space="preserve">The calling window</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">the transient window</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="guess_encoding" c:identifier="go_guess_encoding">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="raw" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="user_guess" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="utf8_str" transfer-ownership="none">
          <type name="GLib.String" c:type="GString**"/>
        </parameter>
        <parameter name="truncated" transfer-ownership="none">
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gui_get_image_save_info"
              c:identifier="go_gui_get_image_save_info">
      <doc xml:space="preserve">Opens a file chooser and let user choose file URI and format in a list of
supported ones.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">file URI string, file #GOImageFormat stored in @ret_format, and
	export resolution in @resolution.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="toplevel" transfer-ownership="none">
          <doc xml:space="preserve">a #GtkWindow</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="supported_formats" transfer-ownership="none">
          <doc xml:space="preserve">a #GSList of supported file formats</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="none"/>
          </type>
        </parameter>
        <parameter name="ret_format" transfer-ownership="none">
          <doc xml:space="preserve">default file format</doc>
          <type name="ImageFormat" c:type="GOImageFormat*"/>
        </parameter>
        <parameter name="resolution" transfer-ownership="none">
          <doc xml:space="preserve">export resolution</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="hash_keys" c:identifier="go_hash_keys">
      <doc xml:space="preserve">Collects an unordered list of the keys in @hash.</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">a list which the
caller needs to free. The content has not additional references added</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="none"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve">#GHashTable</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="libgoffice_init">
      <doc xml:space="preserve">Initialize GOffice.

This function can be called several times; each call will
increment a reference counter. Code that calls this function should call
libgoffice_shutdown() when done to decrement the counter.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="io_count_progress_set"
              c:identifier="go_io_count_progress_set">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="total" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="step" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_count_progress_update"
              c:identifier="go_io_count_progress_update">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="inc" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_clear" c:identifier="go_io_error_clear">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_display" c:identifier="go_io_error_display">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_info_set" c:identifier="go_io_error_info_set">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_occurred" c:identifier="go_io_error_occurred">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_push" c:identifier="go_io_error_push">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="ErrorInfo" c:type="GOErrorInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_string" c:identifier="go_io_error_string">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_error_unknown" c:identifier="go_io_error_unknown">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_progress_message" c:identifier="go_io_progress_message">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_progress_range_pop"
              c:identifier="go_io_progress_range_pop">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_progress_range_push"
              c:identifier="go_io_progress_range_push">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="min" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_progress_unset" c:identifier="go_io_progress_unset">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_progress_update" c:identifier="go_io_progress_update">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_value_progress_set"
              c:identifier="go_io_value_progress_set">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="total" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="step" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_value_progress_update"
              c:identifier="go_io_value_progress_update">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="io_context" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning"
              c:identifier="go_io_warning"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning_occurred" c:identifier="go_io_warning_occurred">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning_unknown_font"
              c:identifier="go_io_warning_unknown_font">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="font_name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning_unknown_function"
              c:identifier="go_io_warning_unknown_function">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="funct_name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning_unsupported_feature"
              c:identifier="go_io_warning_unsupported_feature">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="feature" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="io_warning_varargs"
              c:identifier="go_io_warning_varargs"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ioc" transfer-ownership="none">
          <type name="IOContext" c:type="GOIOContext*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_dash_as_label" c:identifier="go_line_dash_as_label">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to the user readable name of the dash type,
	or the name of %GO_LINE_NONE if type is invalid. The returned
	string should not be freed.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">a #GOLineDashType</doc>
          <type name="LineDashType" c:type="GOLineDashType"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_dash_as_str" c:identifier="go_line_dash_as_str">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to the nickname of the dash type, or "none" if
	type is invalid. The returning string should not be freed.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">a #GOLineDashType</doc>
          <type name="LineDashType" c:type="GOLineDashType"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_dash_from_str" c:identifier="go_line_dash_from_str">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GOLineDashType corresponding to name, or %GO_LINE_NONE
	if not found.</doc>
        <type name="LineDashType" c:type="GOLineDashType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">Name of the dash type</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_dash_get_length"
              c:identifier="go_line_dash_get_length">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the unscaled length of the dash sequence.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">#GOLineDashType</doc>
          <type name="LineDashType" c:type="GOLineDashType"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_dash_get_sequence"
              c:identifier="go_line_dash_get_sequence">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a struct containing the dash sequence corresponding to @type,
	or %NULL if type is invalid or equal to %GO_LINE_NONE.
	The lengths are scaled according to @scale.</doc>
        <type name="LineDashSequence" c:type="GOLineDashSequence*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">a #GOLineDashType</doc>
          <type name="LineDashType" c:type="GOLineDashType"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <doc xml:space="preserve">dash scale</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_interpolation_as_label"
              c:identifier="go_line_interpolation_as_label">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to the label of @type, or the name of
%GO_LINE_INTERPOLATION_LINEAR if type is invalid.
The returned string should not be freed.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">an interpolation type</doc>
          <type name="LineInterpolation" c:type="GOLineInterpolation"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_interpolation_as_str"
              c:identifier="go_line_interpolation_as_str">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to the nickname of @type, or "linear" if type
	is invalid. The returned string should not be freed.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">an interpolation type</doc>
          <type name="LineInterpolation" c:type="GOLineInterpolation"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_interpolation_auto_skip"
              c:identifier="go_line_interpolation_auto_skip">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the line interpolation type forces skipping invalid
data, FALSE if it is only optional.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">an interpolation type</doc>
          <type name="LineInterpolation" c:type="GOLineInterpolation"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_interpolation_from_str"
              c:identifier="go_line_interpolation_from_str">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GOLineInterpolation corresponding to @name, or
	%GO_LINE_INTERPOLATION_LINEAR if not found.</doc>
        <type name="LineInterpolation" c:type="GOLineInterpolation"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">an interpolation type nickname</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="line_interpolation_supports_radial"
              c:identifier="go_line_interpolation_supports_radial">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the line interpolation type can be used with radial
axes set, FALSE if it can't.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">an interpolation type</doc>
          <type name="LineInterpolation" c:type="GOLineInterpolation"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_regression" c:identifier="go_linear_regression">
      <doc xml:space="preserve">Performs multi-dimensional linear regressions on the input points.
Fits to "y = b + a1 * x1 + ... ad * xd".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <doc xml:space="preserve">x-vectors (i.e. independent data)</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <doc xml:space="preserve">number of x-vectors.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector.  (Dependent data.)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <doc xml:space="preserve">if true, a non-zero constant is allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">place for constant[0] and slope1[1], slope2[2],... There will be dim+1 results.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="stat_"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for additional results.</doc>
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_regression_leverage"
              c:identifier="go_linear_regression_leverage">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="m" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_regression_leveragel"
              c:identifier="go_linear_regression_leveragel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="m" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_regressionl"
              c:identifier="go_linear_regressionl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_solve" c:identifier="go_linear_solve">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double* const* const"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_solve_multiple"
              c:identifier="go_linear_solve_multiple">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double* const* const"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="bn" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_solve_multiplel"
              c:identifier="go_linear_solve_multiplel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double* const* const"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="bn" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="linear_solvel"
              c:identifier="go_linear_solvel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double* const* const"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_index_custom" c:identifier="go_list_index_custom">
      <doc xml:space="preserve">Searched for @data in @list and return the corresponding index or -1 if not
found.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the data index in the list.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">#GList</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="none"/>
          </type>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">element for which the index is searched for</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cmp_func" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">#GCompareFunc</doc>
          <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="load_pango_attributes_into_buffer"
              c:identifier="go_load_pango_attributes_into_buffer">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="markup" transfer-ownership="none">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="locale_24h" c:identifier="go_locale_24h">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the locale uses a 24h clock, FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="locale_boolean_name" c:identifier="go_locale_boolean_name">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="b" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="locale_get_arg_sep" c:identifier="go_locale_get_arg_sep">
      <return-value transfer-ownership="none">
        <type name="gchar" c:type="char"/>
      </return-value>
    </function>
    <function name="locale_get_col_sep" c:identifier="go_locale_get_col_sep">
      <return-value transfer-ownership="none">
        <type name="gchar" c:type="char"/>
      </return-value>
    </function>
    <function name="locale_get_currency" c:identifier="go_locale_get_currency">
      <doc xml:space="preserve">Play with the default logic so that things come out nicely for the default
case.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A string with the default currency</doc>
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
      <parameters>
        <parameter name="precedes" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a boolean which is set to TRUE if the currency
		should precede</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="space_sep" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a boolean which is set to TRUE if the currency
		should have a space separating it from the value</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="locale_get_date_format"
              c:identifier="go_locale_get_date_format">
      <return-value transfer-ownership="full">
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="locale_get_decimal" c:identifier="go_locale_get_decimal">
      <return-value transfer-ownership="full">
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="locale_get_row_sep" c:identifier="go_locale_get_row_sep">
      <return-value transfer-ownership="none">
        <type name="gchar" c:type="char"/>
      </return-value>
    </function>
    <function name="locale_get_thousand" c:identifier="go_locale_get_thousand">
      <return-value transfer-ownership="full">
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="locale_get_time_format"
              c:identifier="go_locale_get_time_format">
      <return-value transfer-ownership="full">
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
    </function>
    <function name="locale_month_before_day"
              c:identifier="go_locale_month_before_day">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="locale_untranslated_booleans"
              c:identifier="go_locale_untranslated_booleans">
      <doc xml:space="preserve">Short circuit the current locale so that we can import files
and still produce error messages in the current LC_MESSAGE</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="logarithmic_fit" c:identifier="go_logarithmic_fit">
      <doc xml:space="preserve">Performs a two-dimensional non-linear fitting on the input points.
Fits to "y = a + b * ln (sign * (x - c))", with sign in {-1, +1}.
The graph is a logarithmic curve moved horizontally by c and possibly
mirrored across the y-axis (if sign = -1).

Fits c (and sign) by iterative trials, but seems to be fast enough even
for automatic recomputation.

Adapts c until a local minimum of squared residuals is reached. For each
new c tried out the corresponding a and b are calculated by linear
regression. If no local minimum is found, an error is returned. If there
is more than one local minimum, the one found is not necessarily the
smallest (i.e., there might be cases in which the returned fit is not the
best possible). If the shape of the point cloud is to different from
``logarithmic'', either sign can not be determined (error returned) or no
local minimum will be found.

(Requires: at least 3 different x values, at least 3 different y values.)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <doc xml:space="preserve">x-vector (i.e. independent data)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector (dependent data)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">output place for sign[0], a[1], b[2], c[3], and sum of squared residuals[4].</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="logarithmic_fitl"
              c:identifier="go_logarithmic_fitl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="logarithmic_regression"
              c:identifier="go_logarithmic_regression">
      <doc xml:space="preserve">This is almost a copy of linear_regression and produces multi-dimensional
linear regressions on the input points after transforming xss to ln(xss).
Fits to "y = b + a1 * z1 + ... ad * zd" with "zi = ln (xi)".
Problems with arrays in the calling function: see comment to
gnumeric_linest, which is also valid for gnumeric_logreg.

(Errors: less than two points, all points on a vertical line, non-positive x data.)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <doc xml:space="preserve">x-vectors (i.e. independent data)</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <doc xml:space="preserve">number of x-vectors</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector (dependent data)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, a non-zero constant is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">output place for constant[0] and factor1[1], factor2[2],... There will be dim+1 results.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for additional results.</doc>
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="logarithmic_regressionl"
              c:identifier="go_logarithmic_regressionl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mathml_to_itex" c:identifier="go_mathml_to_itex">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mml" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="compact" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="gcc" transfer-ownership="none">
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_determinant" c:identifier="go_matrix_determinant">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double* const* const"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_determinantl"
              c:identifier="go_matrix_determinantl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double* const* const"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_invert" c:identifier="go_matrix_invert">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_invertl"
              c:identifier="go_matrix_invertl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_pseudo_inverse"
              c:identifier="go_matrix_pseudo_inverse">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="gdouble" c:type="double* const* const"/>
        </parameter>
        <parameter name="m" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="gdouble" c:type="double**"/>
        </parameter>
      </parameters>
    </function>
    <function name="matrix_pseudo_inversel"
              c:identifier="go_matrix_pseudo_inversel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="long double" c:type="long double* const* const"/>
        </parameter>
        <parameter name="m" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
      </parameters>
    </function>
    <function name="menu_position_below" c:identifier="go_menu_position_below">
      <doc xml:space="preserve">Implementation of a GtkMenuPositionFunc that positions
the child window under the parent one, for use with gtk_menu_popup.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="menu" transfer-ownership="none">
          <doc xml:space="preserve">a #GtkMenu</doc>
          <type name="Gtk.Menu" c:type="GtkMenu*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for the X coordinate of the menu</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for the Y coordinate of the menu</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="push_in" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for the push-in distance</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">arbitrary</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="mime_to_image_format"
              c:identifier="go_mime_to_image_format">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">file extension for the given mime type.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="mime_type" transfer-ownership="none">
          <doc xml:space="preserve">a mime type string</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mime_type_get_description"
              c:identifier="go_mime_type_get_description"
              moved-to="MimeType.get_description">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the description for the mime type as a newly allocated string.
Needs to be freed with g_free(). If the description is not found, the
mime type itself will be returned.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mime_type" transfer-ownership="none">
          <doc xml:space="preserve">the mime type to describe.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="non_linear_regression"
              c:identifier="go_non_linear_regression">
      <doc xml:space="preserve">SYNOPSIS:
  result = non_linear_regression (f, xvals, par, yvals, sigmas,
                                  x_dim, p_dim, &amp;chi, errors)
Non linear regression.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the results of the non-linear regression from the given initial
values.
The resulting parameters are placed back into @par.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">the model function</doc>
          <type name="RegressionFunction" c:type="GORegressionFunction"/>
        </parameter>
        <parameter name="xvals" transfer-ownership="none">
          <doc xml:space="preserve">independent values.</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="par" transfer-ownership="none">
          <doc xml:space="preserve">model parameters.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="yvals" transfer-ownership="none">
          <doc xml:space="preserve">dependent values.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="sigmas" transfer-ownership="none">
          <doc xml:space="preserve">stahdard deviations for the dependent values.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="x_dim" transfer-ownership="none">
          <doc xml:space="preserve">Number of data points.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="p_dim" transfer-ownership="none">
          <doc xml:space="preserve">Number of parameters.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="chi" transfer-ownership="none">
          <doc xml:space="preserve">Chi Squared of the final result.  This value is not very
meaningful without the sigmas.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="errors" transfer-ownership="none">
          <doc xml:space="preserve">MUST ALREADY BE ALLOCATED.  These are the approximated standard
deviation for each parameter.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="non_linear_regressionl"
              c:identifier="go_non_linear_regressionl"
              introspectable="0">
      <doc xml:space="preserve">SYNOPSIS:
  result = non_linear_regression (f, xvals, par, yvals, sigmas,
                                  x_dim, p_dim, &amp;chi, errors)
Non linear regression.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the results of the non-linear regression from the given initial
values.
The resulting parameters are placed back into @par.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">the model function</doc>
          <type name="RegressionFunctionl" c:type="GORegressionFunctionl"/>
        </parameter>
        <parameter name="xvals" transfer-ownership="none">
          <doc xml:space="preserve">independent values.</doc>
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="par" transfer-ownership="none">
          <doc xml:space="preserve">model parameters.</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="yvals" transfer-ownership="none">
          <doc xml:space="preserve">dependent values.</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="sigmas" transfer-ownership="none">
          <doc xml:space="preserve">stahdard deviations for the dependent values.</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="x_dim" transfer-ownership="none">
          <doc xml:space="preserve">Number of data points.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="p_dim" transfer-ownership="none">
          <doc xml:space="preserve">Number of parameters.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="chi" transfer-ownership="none">
          <doc xml:space="preserve">Chi Squared of the final result.  This value is not very
meaningful without the sigmas.</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="errors" transfer-ownership="none">
          <doc xml:space="preserve">MUST ALREADY BE ALLOCATED.  These are the approximated standard
deviation for each parameter.</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_properties_apply"
              c:identifier="go_object_properties_apply">
      <doc xml:space="preserve">Sets a list of properties for @obj. The list needs to be a list of
alternating #GParamSpec and #GValue.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve">#GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="props" transfer-ownership="none">
          <doc xml:space="preserve">the list of properties and their values to
apply</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="none"/>
          </type>
        </parameter>
        <parameter name="changed_only" transfer-ownership="none">
          <doc xml:space="preserve">whether to restrict calls to g_object_set_property() to
properties with changed values.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_properties_collect"
              c:identifier="go_object_properties_collect">
      <doc xml:space="preserve">Collect all rw properties and their values.</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">the list of collected
properties as #GParamSpec and values as #GValue.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="none"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve">#GObject</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_properties_free"
              c:identifier="go_object_properties_free">
      <doc xml:space="preserve">Unsezts the values in the list which needs to be a list of alternating
#GParamSpec and #GValue.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="props" transfer-ownership="none">
          <doc xml:space="preserve">the list of properties and their values to
unset</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="none"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="object_set_property" c:identifier="go_object_set_property">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_prop_name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="error_template" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="object_toggle" c:identifier="go_object_toggle">
      <doc xml:space="preserve">Toggle a boolean object property.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve">#GObject</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <doc xml:space="preserve">name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_list_erase"
              c:identifier="go_pango_attr_list_erase">
      <doc xml:space="preserve">This function erases a segment of attributes.  This is what to call
after deleting a segment from the text described by the attributes.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve">An attribute list</doc>
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <doc xml:space="preserve">a text position in bytes</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">length of segment in bytes</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_list_is_empty"
              c:identifier="go_pango_attr_list_is_empty">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="attrs" transfer-ownership="none">
          <type name="Pango.AttrList" c:type="const PangoAttrList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_list_open_hole"
              c:identifier="go_pango_attr_list_open_hole">
      <doc xml:space="preserve">This function opens up a blank segment of attributes.  This is what to
call after inserting a segment into the text described by the attributes.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tape" transfer-ownership="none">
          <doc xml:space="preserve">An attribute list</doc>
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <doc xml:space="preserve">a text position in bytes</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">length of segment in bytes</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_list_unset"
              c:identifier="go_pango_attr_list_unset">
      <doc xml:space="preserve">See http://bugzilla.gnome.org/show_bug.cgi?id=163679</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">#PangoAttrList</doc>
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve">starting character index</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve">last character index</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">#PangoAttrType</doc>
          <type name="Pango.AttrType" c:type="PangoAttrType"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_subscript_get_attr_type"
              c:identifier="go_pango_attr_subscript_get_attr_type"
              moved-to="PangoAttrSubscript.get_attr_type">
      <return-value transfer-ownership="none">
        <type name="Pango.AttrType" c:type="PangoAttrType"/>
      </return-value>
    </function>
    <function name="pango_attr_subscript_new"
              c:identifier="go_pango_attr_subscript_new"
              moved-to="PangoAttrSubscript.new"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a subscript attribute.</doc>
        <type name="Pango.Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the characters must be lowered.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attr_superscript_get_attr_type"
              c:identifier="go_pango_attr_superscript_get_attr_type"
              moved-to="PangoAttrSuperscript.get_attr_type">
      <return-value transfer-ownership="none">
        <type name="Pango.AttrType" c:type="PangoAttrType"/>
      </return-value>
    </function>
    <function name="pango_attr_superscript_new"
              c:identifier="go_pango_attr_superscript_new"
              moved-to="PangoAttrSuperscript.new"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a superscript attribute.</doc>
        <type name="Pango.Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the characters must be raised.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_attrs_to_markup"
              c:identifier="go_pango_attrs_to_markup">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="attrs" transfer-ownership="none">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_measure_string"
              c:identifier="go_pango_measure_string">
      <doc xml:space="preserve">A utility function to measure text.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the pixel length of @str according to @context.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">#PangoContext</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="font_desc" transfer-ownership="none">
          <doc xml:space="preserve">#PangoFontDescription</doc>
          <type name="Pango.FontDescription" c:type="PangoFontDescription*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">The text to measure.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_translate_attributes"
              c:identifier="go_pango_translate_attributes">
      <return-value transfer-ownership="full">
        <type name="Pango.AttrList" c:type="PangoAttrList*"/>
      </return-value>
      <parameters>
        <parameter name="attrs" transfer-ownership="none">
          <type name="Pango.AttrList" c:type="PangoAttrList*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pango_translate_layout"
              c:identifier="go_pango_translate_layout">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_key_value" c:identifier="go_parse_key_value">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="options" transfer-ownership="none">
          <doc xml:space="preserve">Options string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve">Reference to store GError if parsing fails.</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="handler" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">Handler to call for each key-value pair.</doc>
          <type name="ParseKeyValueFunc" c:type="GOParseKeyValueFunc"/>
        </parameter>
        <parameter name="user" transfer-ownership="none">
          <doc xml:space="preserve">user pointer.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="pattern_as_str"
              c:identifier="go_pattern_as_str"
              moved-to="Pattern.as_str">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <type name="PatternType" c:type="GOPatternType"/>
        </parameter>
      </parameters>
    </function>
    <function name="pattern_from_str"
              c:identifier="go_pattern_from_str"
              moved-to="Pattern.from_str">
      <return-value transfer-ownership="none">
        <type name="PatternType" c:type="GOPatternType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pattern_selector_new"
              c:identifier="go_pattern_selector_new"
              moved-to="Pattern.selector_new">
      <doc xml:space="preserve">Creates a new pattern selector.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #GtkWidget.</doc>
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="initial_type" transfer-ownership="none">
          <doc xml:space="preserve">pattern type initially selected</doc>
          <type name="PatternType" c:type="GOPatternType"/>
        </parameter>
        <parameter name="default_type" transfer-ownership="none">
          <doc xml:space="preserve">automatic pattern type</doc>
          <type name="PatternType" c:type="GOPatternType"/>
        </parameter>
      </parameters>
    </function>
    <function name="pattern_selector_set_colors"
              c:identifier="go_pattern_selector_set_colors"
              moved-to="Pattern.selector_set_colors">
      <doc xml:space="preserve">Updates swatch colors of @selector.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="selector" transfer-ownership="none">
          <doc xml:space="preserve">a pattern #GOSelector</doc>
          <type name="Selector" c:type="GOSelector*"/>
        </parameter>
        <parameter name="foreground" transfer-ownership="none">
          <doc xml:space="preserve">foreground color</doc>
          <type name="Color" c:type="GOColor"/>
        </parameter>
        <parameter name="background" transfer-ownership="none">
          <doc xml:space="preserve">background color</doc>
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="pcauchy" c:identifier="go_pcauchy">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pcauchyl" c:identifier="go_pcauchyl" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="plnorm" c:identifier="go_plnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="logmean" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="logsd" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="plnorml" c:identifier="go_plnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="logmean" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="logsd" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_get_active_plugins"
              c:identifier="go_plugins_get_active_plugins">
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">the list of active
plugins names.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="plugins_get_available_plugins"
              c:identifier="go_plugins_get_available_plugins">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the list of available
plugins. The returned value must not be freed and stays valid until calling
plugins_rescan or plugins_shutdown.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="Plugin"/>
        </type>
      </return-value>
    </function>
    <function name="plugins_get_plugin_by_id"
              c:identifier="go_plugins_get_plugin_by_id">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">GOPlugin object for plugin with ID equal to @plugin_id or NULL
	if there's no plugin available with given id.  Function returns
	"borrowed" reference, use g_object_ref if you want to be sure that
	plugin won't disappear.</doc>
        <type name="Plugin" c:type="GOPlugin*"/>
      </return-value>
      <parameters>
        <parameter name="plugin_id" transfer-ownership="none">
          <doc xml:space="preserve">String containing plugin ID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_get_plugin_dir"
              c:identifier="go_plugins_get_plugin_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="plugins_init" c:identifier="go_plugins_init">
      <doc xml:space="preserve">Initializes the plugin subsystem. Might be called several times to add
new plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">#GOCmdContext used to report errors</doc>
          <type name="CmdContext" c:type="GOCmdContext*"/>
        </parameter>
        <parameter name="known_states"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A list of known states (defined how ?)</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </parameter>
        <parameter name="active_plugins"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A list of active plugins</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </parameter>
        <parameter name="plugin_dirs"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a list of directories to search for plugins</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gchar"/>
          </type>
        </parameter>
        <parameter name="activate_new_plugins" transfer-ownership="none">
          <doc xml:space="preserve">activate plugins we have no seen before.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="default_loader_type" transfer-ownership="none">
          <doc xml:space="preserve">importer to use by default.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_register_loader"
              c:identifier="go_plugins_register_loader">
      <doc xml:space="preserve">Registers new type of plugin loader identified by @loader_id (identifier
consists of loader's plugin ID and service ID concatenated using colon).
All requests to create new loader object of this type will be passed to
@service.

This function is intended for use by GOPluginService objects.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="id_str" transfer-ownership="none">
          <doc xml:space="preserve">Loader's id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="service" transfer-ownership="none">
          <doc xml:space="preserve">Plugin service of type "plugin_loader"</doc>
          <type name="PluginService" c:type="GOPluginService*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_rescan" c:identifier="go_plugins_rescan">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ret_error" transfer-ownership="none">
          <doc xml:space="preserve">Pointer used to report errors</doc>
          <type name="ErrorInfo" c:type="GOErrorInfo**"/>
        </parameter>
        <parameter name="ret_new_plugins" transfer-ownership="none">
          <doc xml:space="preserve">Optional pointer to return list
of new plugins</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="Plugin"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_shutdown" c:identifier="go_plugins_shutdown">
      <doc xml:space="preserve">Shuts down the plugin subsystem. Call this function only once before
exiting the application. Some plugins may be left active or in broken
state, so calling plugins_init again will NOT work properly.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the list of plugins still in
use.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
    </function>
    <function name="plugins_unregister_loader"
              c:identifier="go_plugins_unregister_loader">
      <doc xml:space="preserve">Unregisters a type of plugin loader identified by @loader_id. After
callingthis function Gnumeric will be unable to load plugins supported
by the specified loader.

This function is intended for use by GOPluginService objects.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="id_str" transfer-ownership="none">
          <doc xml:space="preserve">Loader's id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pnorm" c:identifier="go_pnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pnorm_both" c:identifier="go_pnorm_both">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="cum" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="ccum" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="i_tail" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pnorm_bothl"
              c:identifier="go_pnorm_bothl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="cum" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="ccum" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="i_tail" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pnorml" c:identifier="go_pnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pow10" c:identifier="go_pow10">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pow10l" c:identifier="go_pow10l" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pow2" c:identifier="go_pow2">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pow2l" c:identifier="go_pow2l" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="power_regression" c:identifier="go_power_regression">
      <doc xml:space="preserve">Performs one-dimensional linear regressions on the input points.
Fits to "y = b * x1^m1 * ... * xd^md " or equivalently to
"log y = log b + m1 * log x1 + ... + md * log xd".</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GORegressionResult as above.</doc>
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <doc xml:space="preserve">x-vectors (i.e. independent data)</doc>
          <type name="gdouble" c:type="double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <doc xml:space="preserve">number of x-vectors</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <doc xml:space="preserve">y-vector (dependent data)</doc>
          <type name="gdouble" c:type="const double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of data points</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, a non-one multiplier is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">output place for constant[0] and root1[1], root2[2],... There will be dim+1 results.</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <doc xml:space="preserve">non-NULL storage for additional results.</doc>
          <type name="go_regression_stat_t" c:type="go_regression_stat_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="power_regressionl"
              c:identifier="go_power_regressionl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="RegressionResult" c:type="GORegressionResult"/>
      </return-value>
      <parameters>
        <parameter name="xss" transfer-ownership="none">
          <type name="long double" c:type="long double**"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ys" transfer-ownership="none">
          <type name="long double" c:type="const long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="affine" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ptr_array_insert" c:identifier="go_ptr_array_insert">
      <doc xml:space="preserve">Inserts a pointer inside an existing array.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve">a #GPtrArray</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="none"/>
          </array>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">the pointer to insert</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="index" transfer-ownership="none">
          <doc xml:space="preserve">where to insert @value</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pweibull" c:identifier="go_pweibull">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pweibulll" c:identifier="go_pweibulll" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qcauchy" c:identifier="go_qcauchy">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qcauchyl" c:identifier="go_qcauchyl" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qlnorm" c:identifier="go_qlnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="logmean" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="logsd" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qlnorml" c:identifier="go_qlnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="logmean" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="logsd" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qnorm" c:identifier="go_qnorm">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qnorml" c:identifier="go_qnorml" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="mu" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="sigma" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_acos"
              c:identifier="go_quad_acos"
              moved-to="Quad.acos">
      <doc xml:space="preserve">This function computes the arc cosine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_acosl"
              c:identifier="go_quad_acosl"
              moved-to="Quad.acosl">
      <doc xml:space="preserve">This function computes the arc cosine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_add" c:identifier="go_quad_add" moved-to="Quad.add">
      <doc xml:space="preserve">This function adds @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_addl"
              c:identifier="go_quad_addl"
              moved-to="Quad.addl">
      <doc xml:space="preserve">This function adds @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_asin"
              c:identifier="go_quad_asin"
              moved-to="Quad.asin">
      <doc xml:space="preserve">This function computes the arc sine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_asinl"
              c:identifier="go_quad_asinl"
              moved-to="Quad.asinl">
      <doc xml:space="preserve">This function computes the arc sine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_atan2"
              c:identifier="go_quad_atan2"
              moved-to="Quad.atan2">
      <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y), storing
the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_atan2l"
              c:identifier="go_quad_atan2l"
              moved-to="Quad.atan2l">
      <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y), storing
the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_atan2pi"
              c:identifier="go_quad_atan2pi"
              moved-to="Quad.atan2pi">
      <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y) divided
by pi, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_atan2pil"
              c:identifier="go_quad_atan2pil"
              moved-to="Quad.atan2pil">
      <doc xml:space="preserve">This function computes polar angle coordinate of the point (@x,@y) divided
by pi, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_constant8l"
              c:identifier="go_quad_constant8l"
              moved-to="Quad.constant8l"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="base" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_cos" c:identifier="go_quad_cos" moved-to="Quad.cos">
      <doc xml:space="preserve">This function computes the cosine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_cosl"
              c:identifier="go_quad_cosl"
              moved-to="Quad.cosl">
      <doc xml:space="preserve">This function computes the cosine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_cospi"
              c:identifier="go_quad_cospi"
              moved-to="Quad.cospi">
      <doc xml:space="preserve">This function computes the cosine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_cospil"
              c:identifier="go_quad_cospil"
              moved-to="Quad.cospil">
      <doc xml:space="preserve">This function computes the cosine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_div" c:identifier="go_quad_div" moved-to="Quad.div">
      <doc xml:space="preserve">This function divides @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_divl"
              c:identifier="go_quad_divl"
              moved-to="Quad.divl">
      <doc xml:space="preserve">This function divides @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_dot_productl"
              c:identifier="go_quad_dot_productl"
              moved-to="Quad.dot_productl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_end" c:identifier="go_quad_end" moved-to="Quad.end">
      <doc xml:space="preserve">This ends a section of quad precision arithmetic.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <doc xml:space="preserve">state pointer from go_quad_start.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_endl"
              c:identifier="go_quad_endl"
              moved-to="Quad.endl">
      <doc xml:space="preserve">This ends a section of quad precision arithmetic.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <doc xml:space="preserve">state pointer from go_quad_startl.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_exp" c:identifier="go_quad_exp" moved-to="Quad.exp">
      <doc xml:space="preserve">This function computes the exponential function at @a, storing the result
in @res.  If the optional @exp2 is supplied, it is used to return a
power of 2 by which the result should be scaled.  This is useful to
represent results much, much bigger than double precision can handle.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="exp2"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_expm1"
              c:identifier="go_quad_expm1"
              moved-to="Quad.expm1">
      <doc xml:space="preserve">This function computes the exponential function at @a with 1 subtracted,
storing the difference in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_expm1l"
              c:identifier="go_quad_expm1l"
              moved-to="Quad.expm1l">
      <doc xml:space="preserve">This function computes the exponential function at @a with 1 subtracted,
storing the difference in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_floor"
              c:identifier="go_quad_floor"
              moved-to="Quad.floor">
      <doc xml:space="preserve">This function takes the floor of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_floorl"
              c:identifier="go_quad_floorl"
              moved-to="Quad.floorl">
      <doc xml:space="preserve">This function takes the floor of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_functional"
              c:identifier="go_quad_functional"
              moved-to="Quad.functional">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="quad_functionall"
              c:identifier="go_quad_functionall"
              moved-to="Quad.functionall">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="quad_hypot"
              c:identifier="go_quad_hypot"
              moved-to="Quad.hypot">
      <doc xml:space="preserve">This function computes the square root of @a^2 plugs @b^2, storing the
result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_hypotl"
              c:identifier="go_quad_hypotl"
              moved-to="Quad.hypotl">
      <doc xml:space="preserve">This function computes the square root of @a^2 plugs @b^2, storing the
result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_init"
              c:identifier="go_quad_init"
              moved-to="Quad.init">
      <doc xml:space="preserve">This stores the value @h in @res.  As an exception, this may be called
outside go_quad_start and go_quad_end sections.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve">a double precision value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_log" c:identifier="go_quad_log" moved-to="Quad.log">
      <doc xml:space="preserve">This function computes the natural logarithm at @a, storing the result
in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_logl"
              c:identifier="go_quad_logl"
              moved-to="Quad.logl">
      <doc xml:space="preserve">This function computes the natural logarithm at @a, storing the result
in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_back_solvel"
              c:identifier="go_quad_matrix_back_solvel"
              moved-to="QuadMatrix.back_solvel">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="R" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="allow_degenerate" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_copyl"
              c:identifier="go_quad_matrix_copyl"
              moved-to="QuadMatrix.copyl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_determinantl"
              c:identifier="go_quad_matrix_determinantl"
              moved-to="QuadMatrix.determinantl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_dumpl"
              c:identifier="go_quad_matrix_dumpl"
              moved-to="QuadMatrix.dumpl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_dupl"
              c:identifier="go_quad_matrix_dupl"
              moved-to="QuadMatrix.dupl"
              introspectable="0">
      <return-value>
        <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_freel"
              c:identifier="go_quad_matrix_freel"
              moved-to="QuadMatrix.freel">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_fwd_solvel"
              c:identifier="go_quad_matrix_fwd_solvel"
              moved-to="QuadMatrix.fwd_solvel">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="R" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="allow_degenerate" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_inversel"
              c:identifier="go_quad_matrix_inversel"
              moved-to="QuadMatrix.inversel"
              introspectable="0">
      <return-value>
        <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_multiplyl"
              c:identifier="go_quad_matrix_multiplyl"
              moved-to="QuadMatrix.multiplyl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="C" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </parameter>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_new"
              c:identifier="go_quad_matrix_new"
              moved-to="QuadMatrix.new"
              introspectable="0">
      <return-value>
        <doc xml:space="preserve">a new zero matrix.</doc>
        <type name="QuadMatrix" c:type="GOQuadMatrix*"/>
      </return-value>
      <parameters>
        <parameter name="m" transfer-ownership="none">
          <doc xml:space="preserve">number of rows</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">number of columns</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_newl"
              c:identifier="go_quad_matrix_newl"
              moved-to="QuadMatrix.newl"
              introspectable="0">
      <return-value>
        <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
      </return-value>
      <parameters>
        <parameter name="m" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_pseudo_inversel"
              c:identifier="go_quad_matrix_pseudo_inversel"
              moved-to="QuadMatrix.pseudo_inversel"
              introspectable="0">
      <return-value>
        <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
        <parameter name="threshold" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_matrix_transposel"
              c:identifier="go_quad_matrix_transposel"
              moved-to="QuadMatrix.transposel">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="GOQuadMatrixl*"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_mul" c:identifier="go_quad_mul" moved-to="Quad.mul">
      <doc xml:space="preserve">This function multiplies @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_mul12"
              c:identifier="go_quad_mul12"
              moved-to="Quad.mul12">
      <doc xml:space="preserve">This function multiplies @x and @y, storing the result in @res with full
quad precision.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">double precision value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">double precision value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_mull"
              c:identifier="go_quad_mull"
              moved-to="Quad.mull">
      <doc xml:space="preserve">This function multiplies @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_pow" c:identifier="go_quad_pow" moved-to="Quad.pow">
      <doc xml:space="preserve">This function computes @x to the power of @y, storing the result in @res.
If the optional @exp2 is supplied, it is used to return a power of 2 by
which the result should be scaled.  This is useful to represent results
much, much bigger than double precision can handle.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="exp2"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">(allow-none): power-of-2 result scaling location</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_determinantl"
              c:identifier="go_quad_qr_determinantl"
              moved-to="QuadQR.determinantl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="qr" transfer-ownership="none">
          <type name="QuadQRl" c:type="const GOQuadQRl*"/>
        </parameter>
        <parameter name="det" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_freel"
              c:identifier="go_quad_qr_freel"
              moved-to="QuadQR.freel">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="qr" transfer-ownership="none">
          <type name="QuadQRl" c:type="GOQuadQRl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_mark_degeneratel"
              c:identifier="go_quad_qr_mark_degeneratel"
              moved-to="QuadQR.mark_degeneratel">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="qr" transfer-ownership="none">
          <type name="QuadQRl" c:type="GOQuadQRl*"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_multiply_qtl"
              c:identifier="go_quad_qr_multiply_qtl"
              moved-to="QuadQR.multiply_qtl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="qr" transfer-ownership="none">
          <type name="QuadQRl" c:type="const GOQuadQRl*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_new"
              c:identifier="go_quad_qr_new"
              moved-to="QuadQR.new"
              introspectable="0">
      <doc xml:space="preserve">QR decomposition of a matrix using Householder matrices.

A (input) is an m-times-n matrix.  A[0...m-1][0..n-1]
If qAT is TRUE, this parameter is transposed.

V is a pre-allocated output m-times-n matrix.  V will contrain
n vectors of different lengths: n, n-1, ..., 1.  These are the
Householder vectors (or null for the degenerate case).  The
matrix Q of size m-times-m is implied from V.

R is a matrix of size n-times-n.  (To get the m-times-n version
of R, simply add m-n null rows.)</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #GOQuadQR.</doc>
        <type name="QuadQR" c:type="GOQuadQR*"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <doc xml:space="preserve">Source matrix.</doc>
          <type name="QuadMatrix" c:type="const GOQuadMatrix*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_newl"
              c:identifier="go_quad_qr_newl"
              moved-to="QuadQR.newl"
              introspectable="0">
      <return-value>
        <type name="QuadQRl" c:type="GOQuadQRl*"/>
      </return-value>
      <parameters>
        <parameter name="A" transfer-ownership="none">
          <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_qr_rl"
              c:identifier="go_quad_qr_rl"
              moved-to="QuadQR.rl">
      <return-value transfer-ownership="none">
        <type name="QuadMatrixl" c:type="const GOQuadMatrixl*"/>
      </return-value>
      <parameters>
        <parameter name="qr" transfer-ownership="none">
          <type name="QuadQRl" c:type="const GOQuadQRl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sin" c:identifier="go_quad_sin" moved-to="Quad.sin">
      <doc xml:space="preserve">This function computes the sine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sinl"
              c:identifier="go_quad_sinl"
              moved-to="Quad.sinl">
      <doc xml:space="preserve">This function computes the sine of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sinpi"
              c:identifier="go_quad_sinpi"
              moved-to="Quad.sinpi">
      <doc xml:space="preserve">This function computes the sine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sinpil"
              c:identifier="go_quad_sinpil"
              moved-to="Quad.sinpil">
      <doc xml:space="preserve">This function computes the sine of @a times pi, storing the result in @res.
This is more accurate than actually doing the multiplication.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sqrt"
              c:identifier="go_quad_sqrt"
              moved-to="Quad.sqrt">
      <doc xml:space="preserve">This function takes the square root of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_sqrtl"
              c:identifier="go_quad_sqrtl"
              moved-to="Quad.sqrtl">
      <doc xml:space="preserve">This function takes the square root of @a, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_start"
              c:identifier="go_quad_start"
              moved-to="Quad.start">
      <doc xml:space="preserve">Initializes #GOQuad arithmetic. Any use of #GOQuad must occur between calls
to go_quad_start() and go_quad_end().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to pass to go_quad_end() when done.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="quad_startl"
              c:identifier="go_quad_startl"
              moved-to="Quad.startl">
      <doc xml:space="preserve">Initializes #GOQuadl arithmetic. Any use of #GOQuadl must occur between calls
to go_quad_startl() and go_quad_endl().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a pointer to pass to go_quad_endl() when done.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="quad_sub" c:identifier="go_quad_sub" moved-to="Quad.sub">
      <doc xml:space="preserve">This function subtracts @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quad" c:type="GOQuad*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quad" c:type="const GOQuad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quad_subl"
              c:identifier="go_quad_subl"
              moved-to="Quad.subl">
      <doc xml:space="preserve">This function subtracts @a and @b, storing the result in @res.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">result location</doc>
          <type name="Quadl" c:type="GOQuadl*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">quad-precision value</doc>
          <type name="Quadl" c:type="const GOQuadl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="qweibull" c:identifier="go_qweibull">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="qweibulll" c:identifier="go_qweibulll" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="shape" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="scale" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="lower_tail" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="log_p" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_average" c:identifier="go_range_average">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_averagel"
              c:identifier="go_range_averagel"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_constant" c:identifier="go_range_constant">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_constantl"
              c:identifier="go_range_constantl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_decreasing" c:identifier="go_range_decreasing">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_decreasingl"
              c:identifier="go_range_decreasingl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_devsq" c:identifier="go_range_devsq">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_devsql"
              c:identifier="go_range_devsql"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_inter"
              c:identifier="go_range_fractile_inter">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_inter_nonconst"
              c:identifier="go_range_fractile_inter_nonconst">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_inter_nonconstl"
              c:identifier="go_range_fractile_inter_nonconstl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_inter_sorted"
              c:identifier="go_range_fractile_inter_sorted">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_inter_sortedl"
              c:identifier="go_range_fractile_inter_sortedl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_fractile_interl"
              c:identifier="go_range_fractile_interl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_increasing" c:identifier="go_range_increasing">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_increasingl"
              c:identifier="go_range_increasingl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_max" c:identifier="go_range_max">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_maxabs" c:identifier="go_range_maxabs">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_maxabsl"
              c:identifier="go_range_maxabsl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_maxl"
              c:identifier="go_range_maxl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_inter" c:identifier="go_range_median_inter">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_inter_nonconst"
              c:identifier="go_range_median_inter_nonconst">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_inter_nonconstl"
              c:identifier="go_range_median_inter_nonconstl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_inter_sorted"
              c:identifier="go_range_median_inter_sorted">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_inter_sortedl"
              c:identifier="go_range_median_inter_sortedl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_median_interl"
              c:identifier="go_range_median_interl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_min" c:identifier="go_range_min">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_minl"
              c:identifier="go_range_minl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_sort" c:identifier="go_range_sort">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double*"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_sortl"
              c:identifier="go_range_sortl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double*"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_sum" c:identifier="go_range_sum">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_suml"
              c:identifier="go_range_suml"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_sumsq" c:identifier="go_range_sumsq">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_sumsql"
              c:identifier="go_range_sumsql"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_vary_uniformly"
              c:identifier="go_range_vary_uniformly">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="range_vary_uniformlyl"
              c:identifier="go_range_vary_uniformlyl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="xs" transfer-ownership="none">
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="regcomp" c:identifier="go_regcomp">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="preg" transfer-ownership="none">
          <type name="Regexp" c:type="GORegexp*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="cflags" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="regerror" c:identifier="go_regerror">
      <return-value transfer-ownership="none">
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="errcode" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="preg" transfer-ownership="none">
          <type name="Regexp" c:type="const GORegexp*"/>
        </parameter>
        <parameter name="errbuf" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="errbuf_size" transfer-ownership="none">
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="regexec" c:identifier="go_regexec">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="preg" transfer-ownership="none">
          <type name="Regexp" c:type="const GORegexp*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="nmatch" transfer-ownership="none">
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="pmatch" transfer-ownership="none">
          <type name="Regmatch" c:type="GORegmatch"/>
        </parameter>
        <parameter name="eflags" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="regexp_quote"
              c:identifier="go_regexp_quote"
              moved-to="Regexp.quote">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="regexp_quote1"
              c:identifier="go_regexp_quote1"
              moved-to="Regexp.quote1">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="regfree" c:identifier="go_regfree">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="preg" transfer-ownership="none">
          <type name="Regexp" c:type="GORegexp*"/>
        </parameter>
      </parameters>
    </function>
    <function name="regression_stat_destroyl"
              c:identifier="go_regression_stat_destroyl"
              moved-to="go_regression_stat_t.destroyl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="stat_" transfer-ownership="none">
          <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="regression_stat_newl"
              c:identifier="go_regression_stat_newl"
              moved-to="go_regression_stat_t.newl">
      <return-value transfer-ownership="full">
        <type name="go_regression_stat_tl" c:type="go_regression_stat_tl*"/>
      </return-value>
    </function>
    <function name="render_general" c:identifier="go_render_general">
      <doc xml:space="preserve">Render a floating-point value into @layout in such a way that the
layouting width does not needlessly exceed @col_width.  Optionally
use unicode minus instead of hyphen.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve">Optional PangoLayout, probably preseeded with font attribute.</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">a GString to store (not append!) the resulting string in.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="measure" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">Function to measure width of string/layout.</doc>
          <type name="FormatMeasure" c:type="GOFormatMeasure"/>
        </parameter>
        <parameter name="metrics" transfer-ownership="none">
          <doc xml:space="preserve">Font metrics corresponding to @mesaure.</doc>
          <type name="FontMetrics" c:type="const GOFontMetrics*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">floating-point value.  Must be finite.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="col_width" transfer-ownership="none">
          <doc xml:space="preserve">intended max width of layout in pango units.  -1 means
            no restriction.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="unicode_minus" transfer-ownership="none">
          <doc xml:space="preserve">Use unicode minuses, not hyphens.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="numeral_shape" transfer-ownership="none">
          <doc xml:space="preserve">numeral shape identifier.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="custom_shape_flags" transfer-ownership="none">
          <doc xml:space="preserve">flags for using @numeral_shape.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="render_generall"
              c:identifier="go_render_generall"
              introspectable="0">
      <doc xml:space="preserve">Render a floating-point value into @layout in such a way that the
layouting width does not needlessly exceed @col_width.  Optionally
use unicode minus instead of hyphen.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve">Optional PangoLayout, probably preseeded with font attribute.</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">a GString to store (not append!) the resulting string in.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="measure" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">Function to measure width of string/layout.</doc>
          <type name="FormatMeasure" c:type="GOFormatMeasure"/>
        </parameter>
        <parameter name="metrics" transfer-ownership="none">
          <doc xml:space="preserve">Font metrics corresponding to @mesaure.</doc>
          <type name="FontMetrics" c:type="const GOFontMetrics*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">floating-point value.  Must be finite.</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="col_width" transfer-ownership="none">
          <doc xml:space="preserve">intended max width of layout in pango units.  -1 means
            no restriction.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="unicode_minus" transfer-ownership="none">
          <doc xml:space="preserve">Use unicode minuses, not hyphens.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="numeral_shape" transfer-ownership="none">
          <doc xml:space="preserve">numeral shape identifier.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="custom_shape_flags" transfer-ownership="none">
          <doc xml:space="preserve">flags for using @numeral_shape.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rint" c:identifier="go_rint">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="rsm_lookup" c:identifier="go_rsm_lookup">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the resource or %NULL if not found</doc>
        <type name="gpointer" c:type="gconstpointer"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">resource name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">where to store the resource size in bytes</doc>
          <type name="gulong" c:type="size_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rsm_register_file" c:identifier="go_rsm_register_file">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="rsm_unregister_file" c:identifier="go_rsm_unregister_file">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_match_string" c:identifier="go_search_match_string">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sr" transfer-ownership="none">
          <type name="SearchReplace" c:type="GOSearchReplace*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_file_permissions"
              c:identifier="go_set_file_permissions">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="file_permissions" transfer-ownership="none">
          <type name="FilePermissions" c:type="GOFilePermissions*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setlocale" c:identifier="go_setlocale">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shell_arg_to_uri" c:identifier="go_shell_arg_to_uri">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shell_argv_to_glib_encoding"
              c:identifier="go_shell_argv_to_glib_encoding">
      <doc xml:space="preserve">Transform arguments to UTF-8 when needed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the arguments in UTF-8 locale.</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve">arguments number</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve">command line arguments</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="shell_argv_to_glib_encoding_free"
              c:identifier="go_shell_argv_to_glib_encoding_free">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="shutdown" c:identifier="libgoffice_shutdown">
      <doc xml:space="preserve">Decrements the counter for data initialized by libgoffice_init().
When the counter reaches 0, the data is freed/cleaned up as appropriate.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="sinpi" c:identifier="go_sinpi">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the sine of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="sinpil" c:identifier="go_sinpil" introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the sine of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="slist_create"
              c:identifier="go_slist_create"
              introspectable="0">
      <doc xml:space="preserve">Creates a GList from NULL-terminated list of arguments.
As the arguments are just copied to the list, the caller owns them.</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">created list.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="none"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="item1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">first item</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">%NULL terminated list of additional items</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="slist_map" c:identifier="go_slist_map" introspectable="0">
      <doc xml:space="preserve">The ownership of the list elements depends on map_func.</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">the mapped list</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="none"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">list of some items</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="none"/>
          </type>
        </parameter>
        <parameter name="map_func" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">mapping function</doc>
          <type name="MapFunc" c:type="GOMapFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="stern_brocot" c:identifier="go_stern_brocot">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="max_denom" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="res_num" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="res_denom" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="str_compare" c:identifier="go_str_compare">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strescape" c:identifier="go_strescape">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_ERROR"
              c:identifier="go_string_ERROR"
              moved-to="String.ERROR">
      <doc xml:space="preserve">A convenience for g_return_val to share one error string without adding a
reference to functions that do not add references to the result</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A string saying 'ERROR' but does not add a ref to it.</doc>
        <type name="String" c:type="GOString*"/>
      </return-value>
    </function>
    <function name="string_append_c_n"
              c:identifier="go_string_append_c_n"
              moved-to="String.append_c_n">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="c" transfer-ownership="none">
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_append_gstring"
              c:identifier="go_string_append_gstring"
              moved-to="String.append_gstring">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <type name="GLib.String" c:type="const GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_cmp"
              c:identifier="go_string_cmp"
              moved-to="String.cmp">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="gstr_a" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="gstr_b" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_cmp_ignorecase"
              c:identifier="go_string_cmp_ignorecase"
              moved-to="String.cmp_ignorecase">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="gstr_a" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="gstr_b" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_equal"
              c:identifier="go_string_equal"
              moved-to="String.equal">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gstr_a" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="gstr_b" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_equal_ignorecase"
              c:identifier="go_string_equal_ignorecase"
              moved-to="String.equal_ignorecase">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the two strings are equal when ignoring letter case.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gstr_a" transfer-ownership="none">
          <doc xml:space="preserve">string.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="gstr_b" transfer-ownership="none">
          <doc xml:space="preserve">string.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_equal_rich"
              c:identifier="go_string_equal_rich"
              moved-to="String.equal_rich">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gstr_a" transfer-ownership="none">
          <doc xml:space="preserve">string.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="gstr_b" transfer-ownership="none">
          <doc xml:space="preserve">string.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_foreach_base"
              c:identifier="go_string_foreach_base"
              moved-to="String.foreach_base">
      <doc xml:space="preserve">Iterates through the strings data base and apply @callback to each.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="1">
          <doc xml:space="preserve">callback</doc>
          <type name="GLib.HFunc" c:type="GHFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_hash"
              c:identifier="go_string_hash"
              moved-to="String.hash">
      <return-value transfer-ownership="none">
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="gstr" transfer-ownership="none">
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_replace"
              c:identifier="go_string_replace"
              moved-to="String.replace">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="pos" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="oldlen" transfer-ownership="none">
          <type name="gssize" c:type="gssize"/>
        </parameter>
        <parameter name="txt" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="newlen" transfer-ownership="none">
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="strsplit_to_slist" c:identifier="go_strsplit_to_slist">
      <doc xml:space="preserve">Splits up string into tokens at delim and returns a string list.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">string list which you should
free after use using function g_slist_free_full(), using g_free as second
argument.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gchar"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">String to split</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="delimiter" transfer-ownership="none">
          <doc xml:space="preserve">Token delimiter</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
      </parameters>
    </function>
    <function name="strtod" c:identifier="go_strtod">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="strtold" c:identifier="go_strtold" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="s" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="strunescape" c:identifier="go_strunescape">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sub_epsilon" c:identifier="go_sub_epsilon">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="sub_epsilonl"
              c:identifier="go_sub_epsilonl"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="sys_data_dir" c:identifier="go_sys_data_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="sys_extern_plugin_dir"
              c:identifier="go_sys_extern_plugin_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="sys_icon_dir" c:identifier="go_sys_icon_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="sys_lib_dir" c:identifier="go_sys_lib_dir">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="tanpi" c:identifier="go_tanpi">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the tangent of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="tanpil" c:identifier="go_tanpil" introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the tangent of Pi times @x, but with less error than doing the
multiplication outright.</doc>
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a number</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="trunc" c:identifier="go_trunc">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="truncl" c:identifier="go_truncl" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="long double" c:type="long double"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="unichar_issign" c:identifier="go_unichar_issign">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="uc" transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="unit_define"
              c:identifier="go_unit_define"
              moved-to="Unit.define">
      <return-value transfer-ownership="full">
        <type name="Unit" c:type="GoUnit*"/>
      </return-value>
      <parameters>
        <parameter name="symbol" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="dim" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="factor_to_SI" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="unit_get" c:identifier="go_unit_get" moved-to="Unit.get">
      <return-value transfer-ownership="full">
        <type name="Unit" c:type="GoUnit*"/>
      </return-value>
      <parameters>
        <parameter name="Id" transfer-ownership="none">
          <type name="UnitId" c:type="GoUnitId"/>
        </parameter>
      </parameters>
    </function>
    <function name="unit_get_from_symbol"
              c:identifier="go_unit_get_from_symbol"
              moved-to="Unit.get_from_symbol">
      <return-value transfer-ownership="full">
        <type name="Unit" c:type="GoUnit*"/>
      </return-value>
      <parameters>
        <parameter name="symbol" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_check_extension" c:identifier="go_url_check_extension">
      <doc xml:space="preserve">Modifies given @uri by adding the extension @std_ext if needed.
If no @std_ext is given or @uri already has some extension,
it just copies @uri.

Value in new_uri:  newly allocated string which you should free after
                   use, containing (optionally) modified uri.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FALSE if the uri has an extension not matching @std_ext</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">Uri</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="std_ext" transfer-ownership="none">
          <doc xml:space="preserve">Standard extension for the content type</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="new_uri" transfer-ownership="none">
          <doc xml:space="preserve">New uri</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_encode" c:identifier="go_url_encode">
      <doc xml:space="preserve">url-encode a string according to RFC 2368.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">an encoded string which the caller is responsible for freeing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">The uri part to be encoded</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">0: mailto, 1: file or http</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_make_relative" c:identifier="go_url_make_relative">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="ref_uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_resolve_relative"
              c:identifier="go_url_resolve_relative">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="ref_uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="rel_uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="url_simplify" c:identifier="go_url_simplify">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_collate_casefold"
              c:identifier="go_utf8_collate_casefold">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_strcapital" c:identifier="go_utf8_strcapital">
      <doc xml:space="preserve">Similar to g_utf8_strup and g_utf8_strup, except that this function
creates a string "Very Much Like: This, One".</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">newly allocated string.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve">pointer to UTF-8 string</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">length in bytes, or -1.</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="uuid" c:identifier="go_uuid">
      <doc xml:space="preserve">RFC4122 version 4 compliant random UUIDs generator.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A string with RFC41122 version 4 random UUID,
must be freed with _free().</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="xml_get_child_by_name"
              c:identifier="go_xml_get_child_by_name"
              introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the child with @name as name if any.</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <doc xml:space="preserve">#xmlNode</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">child name</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_child_by_name_by_lang"
              c:identifier="go_xml_get_child_by_name_by_lang"
              introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the child with @name as name and with "xml:lang"
attribute corresponding to the preferred language.</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <doc xml:space="preserve">#xmlNode</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">child name</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_child_by_name_no_lang"
              c:identifier="go_xml_get_child_by_name_no_lang"
              introspectable="0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the child with @name as name and withou "xml:lang"
attribute if any.</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <doc xml:space="preserve">#xmlNode</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">child name</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_in_doc_dispose_on_exit"
              c:identifier="go_xml_in_doc_dispose_on_exit">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pdoc" transfer-ownership="none">
          <type name="Gsf.XMLInDoc" c:type="GsfXMLInDoc**"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_bool" c:identifier="go_xml_node_get_bool">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_cstr"
              c:identifier="go_xml_node_get_cstr"
              introspectable="0">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the attribute value</doc>
        <type name="libxml2.Char" c:type="xmlChar*"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">#xmlNodePtr</doc>
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">attribute name
Get an xmlChar * value for a node carried as an attibute
result must be xmlFree</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_double" c:identifier="go_xml_node_get_double">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_enum" c:identifier="go_xml_node_get_enum">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="etype" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_gocolor"
              c:identifier="go_xml_node_get_gocolor">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <type name="Color" c:type="GOColor*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_get_int" c:identifier="go_xml_node_get_int">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_bool" c:identifier="go_xml_node_set_bool">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_cstr" c:identifier="go_xml_node_set_cstr">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_double" c:identifier="go_xml_node_set_double">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="precision" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_enum" c:identifier="go_xml_node_set_enum">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="etype" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_gocolor"
              c:identifier="go_xml_node_set_gocolor">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_node_set_int" c:identifier="go_xml_node_set_int">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_out_add_color" c:identifier="go_xml_out_add_color">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="out" transfer-ownership="none">
          <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="c" transfer-ownership="none">
          <type name="Color" c:type="GOColor"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_out_add_double" c:identifier="go_xml_out_add_double">
      <doc xml:space="preserve">Output a representation of @d that will be read back without loss of
precision.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="output" transfer-ownership="none">
          <doc xml:space="preserve">destination</doc>
          <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
        </parameter>
        <parameter name="id"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">attribute name</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_out_add_long_double"
              c:identifier="go_xml_out_add_long_double"
              introspectable="0">
      <doc xml:space="preserve">Output a representation of @ld that will be read back without loss of
precision.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="output" transfer-ownership="none">
          <doc xml:space="preserve">destination</doc>
          <type name="Gsf.XMLOut" c:type="GsfXMLOut*"/>
        </parameter>
        <parameter name="id"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">attribute name</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="ld" transfer-ownership="none">
          <doc xml:space="preserve">value</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parse_file"
              c:identifier="go_xml_parse_file"
              introspectable="0">
      <doc xml:space="preserve">Like xmlParseFile, but faster.  Does not accept compressed files.
See http://bugzilla.gnome.org/show_bug.cgi?id=168414

Note: this reads the entire file into memory and should therefore
not be used for user-supplied files.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A libxml2 xmlDocPtr or %NULL.</doc>
        <type name="libxml2.DocPtr" c:type="xmlDocPtr"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">the locale path to a file to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
