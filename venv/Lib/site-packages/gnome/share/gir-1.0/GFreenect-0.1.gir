<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="gfreenect-0.1"/>
  <c:include name="gfreenect.h"/>
  <namespace name="GFreenect"
             version="0.1"
             shared-library="libgfreenect-0.1-0.dll"
             c:identifier-prefixes="GFreenect"
             c:symbol-prefixes="gfreenect">
    <enumeration name="DepthFormat" c:type="GFreenectDepthFormat">
      <doc xml:space="preserve">Available formats for the depth camera stream.</doc>
      <member name="11bit"
              value="0"
              c:identifier="GFREENECT_DEPTH_FORMAT_11BIT">
        <doc xml:space="preserve">11 bit depth information in one uint16 per
pixel</doc>
      </member>
      <member name="10bit"
              value="1"
              c:identifier="GFREENECT_DEPTH_FORMAT_10BIT">
        <doc xml:space="preserve">10 bit depth information in one uint16 per
pixel</doc>
      </member>
      <member name="11bit_packed"
              value="2"
              c:identifier="GFREENECT_DEPTH_FORMAT_11BIT_PACKED">
        <doc xml:space="preserve">11 bit packed depth information</doc>
      </member>
      <member name="10bit_packed"
              value="3"
              c:identifier="GFREENECT_DEPTH_FORMAT_10BIT_PACKED">
        <doc xml:space="preserve">10 bit packed depth information</doc>
      </member>
      <member name="registered"
              value="4"
              c:identifier="GFREENECT_DEPTH_FORMAT_REGISTERED">
        <doc xml:space="preserve">Processed depth data in mm, aligned to 640x480 RGB</doc>
      </member>
      <member name="mm" value="5" c:identifier="GFREENECT_DEPTH_FORMAT_MM">
        <doc xml:space="preserve">Depth to each pixel in mm, but left unaligned to RGB image</doc>
      </member>
    </enumeration>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="GFreenectDevice"
           parent="GObject.Object"
           glib:type-name="GFreenectDevice"
           glib:get-type="gfreenect_device_get_type"
           glib:type-struct="DeviceClass">
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gfreenect_device_new_finish"
                   throws="1">
        <doc xml:space="preserve">Returns the new instance of #GFreenectDevice constructed with
gfreenect_device_new(), or %NULL if an error occurred, in which case
@error is set acordingly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The newly created #GFreenectDevice upon success,
of %NULL otherwise.</doc>
          <type name="Device" c:type="GFreenectDevice*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult provided in the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gfreenect_device_new">
        <doc xml:space="preserve">Constructs a new #GFreenectDevice object asynchronously. The actual instance is
obtained with gfreenect_device_new_finish() when @callback is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device_index" transfer-ownership="none">
            <doc xml:space="preserve">The device index to use, normally 0 for one kinect sensor attached</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="subdevices" transfer-ownership="none">
            <doc xml:space="preserve">Or'ed combination of subdevices to use from #GFreenectSubdevice set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The cancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">The callback to be called when the new instance is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass in @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="depth_frame">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="user_data" transfer-ownership="none" closure="0">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="video_frame">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="user_data" transfer-ownership="none" closure="0">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_accel" c:identifier="gfreenect_device_get_accel">
        <doc xml:space="preserve">Gets the accelerometer data asynchronously. Use
gfreenect_device_get_accel_finish() to obtain the results.

See gfreenect_device_get_accel_sync() for a blocking version of this
method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A function to be called upon
completion, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An arbitrary user data to pass in @callback,
or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_accel_finish"
              c:identifier="gfreenect_device_get_accel_finish"
              throws="1">
        <doc xml:space="preserve">Retrieves the result of a gfreenect_device_get_accel()
operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the X-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the Y-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the Z-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult provided in the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_accel_sync"
              c:identifier="gfreenect_device_get_accel_sync"
              throws="1">
        <doc xml:space="preserve">Retrieves the accelerometer data synchronously. See
gfreenect_device_get_accel() for a non-blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the X-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the Y-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the Z-axis value of the accelerometer</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_depth_frame_grayscale"
              c:identifier="gfreenect_device_get_depth_frame_grayscale">
        <doc xml:space="preserve">Retrieves one depth frame in RGB format using gray values to represent the
depth. This method is useful for rendering the frame directly to an RGB
capable texture.
Optionally the frame metadata can also be retrieved providing a non-%NULL
pointer to a #GFreenectFrameMode structure in @frame_mode.

This method should only be called within a #GFreenectDevice::depth-frame
signal handler, otherwise the returned values can be undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array
of @len bytes representing the frame data.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the length of the returned
frame data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="frame_mode"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GFreenectFrameMode structure to fill
with the attributes of the frame</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_depth_frame_raw"
              c:identifier="gfreenect_device_get_depth_frame_raw">
        <doc xml:space="preserve">Retrieves one depth frame in raw format as provided by the lower levels.
Optionally the frame metadata can also be retrieved providing a non-%NULL
pointer to a #GFreenectFrameMode structure in @frame_mode.

This method should only be called within a #GFreenectDevice::depth-frame
signal handler, otherwise the returned values can be undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array
of @len bytes representing the frame data.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the length of the returned
frame data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="frame_mode"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GFreenectFrameMode structure to fill
with the attributes of the frame</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tilt_angle"
              c:identifier="gfreenect_device_get_tilt_angle">
        <doc xml:space="preserve">Asynchronously gets the current angle of the tilt motor. Use
gfreenect_device_get_tilt_angle_finish() to obtain the results.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A function to be called upon
completion, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An arbitrary user data to pass in @callback,
or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tilt_angle_finish"
              c:identifier="gfreenect_device_get_tilt_angle_finish"
              throws="1">
        <doc xml:space="preserve">Obtains the result of a gfreenect_device_get_tilt_angle() operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The tilt motor angle, or 0.0 upon error. Notice that 0.0 is a valid
return value so the @error argument should also be checked.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult provided in the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tilt_angle_sync"
              c:identifier="gfreenect_device_get_tilt_angle_sync"
              throws="1">
        <doc xml:space="preserve">Gets the current angle of the tilt motor synchronously. This is the blocking
version of gfreenect_device_get_tilt_angle().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The tilt motor angle, or 0.0 upon error. Notice that 0.0 is a valid
return value so the @error argument should also be checked.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_video_frame_raw"
              c:identifier="gfreenect_device_get_video_frame_raw">
        <doc xml:space="preserve">Retrieves one video frame in raw format as provided by the lower levels.
Optionally the frame metadata can also be retrieved providing a non-%NULL
pointer to a #GFreenectFrameMode structure in @frame_mode.

This method should only be called within a #GFreenectDevice::video-frame
signal handler, otherwise the returned values can be undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array
of @len bytes representing the frame data.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the length of the returned
frame data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="frame_mode"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GFreenectFrameMode structure to fill
with the attributes of the frame</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_video_frame_rgb"
              c:identifier="gfreenect_device_get_video_frame_rgb">
        <doc xml:space="preserve">Retrieves one video frame in RGB format. A conversion to RGB is applied if
the video format is set to IR (infra-red). This method is useful for
rendering the frame directly to an RGB capable texture.

Optionally the frame metadata can also be retrieved providing a non-%NULL
pointer to a #GFreenectFrameMode structure in @frame_mode.

This method should only be called within a #GFreenectDevice::depth-frame
signal handler, otherwise the returned values can be undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array
of @len bytes representing the frame data.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A pointer to retrieve the length of the returned
frame data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="frame_mode"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GFreenectFrameMode structure to fill
with the attributes of the frame</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_led" c:identifier="gfreenect_device_set_led">
        <doc xml:space="preserve">Sets the status of the device's led asynchronously. Use
gfreenect_device_set_led_finish() to obtain the result of the operation.

If this method is called while a previous operation has not completed, a
%G_IO_ERROR_PENDING error occurs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="led" transfer-ownership="none">
            <doc xml:space="preserve">A led status from #GFreenectLed</doc>
            <type name="Led" c:type="GFreenectLed"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">The function to call upon completion,
or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Arbitrary user data to pass in @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_led_finish"
              c:identifier="gfreenect_device_set_led_finish"
              throws="1">
        <doc xml:space="preserve">Obtains the result of a gfreenect_device_set_led() operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult provided in the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tilt_angle"
              c:identifier="gfreenect_device_set_tilt_angle">
        <doc xml:space="preserve">Moves the tilt motor angle to @tilt_angle asynchronously. Acceptable values
are in the range -31.0 to 31.0. Use gfreenect_device_set_tilt_angle_finish()
to obtain the result of the operation.

If this method is called while a previous operation has not completed (the
motor is still moving), a %G_IO_ERROR_PENDING error occurs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="tilt_angle" transfer-ownership="none">
            <doc xml:space="preserve">The angle to move the tilt motor to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">The function to call upon completion,
or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Arbitrary user data to pass in @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tilt_angle_finish"
              c:identifier="gfreenect_device_set_tilt_angle_finish"
              throws="1">
        <doc xml:space="preserve">Obtains the result of a gfreenect_device_set_tilt_angle() operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult provided in the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_depth_stream"
              c:identifier="gfreenect_device_start_depth_stream"
              throws="1">
        <doc xml:space="preserve">Starts the depth camera stream. After calling this, the #GFreenectDevice::depth-frame
signal is triggered whenever a new frame is available. Use
gfreenect_device_stop_depth_stream() to stop it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">A #GFreenectDepthFormat to use</doc>
            <type name="DepthFormat" c:type="GFreenectDepthFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_video_stream"
              c:identifier="gfreenect_device_start_video_stream"
              throws="1">
        <doc xml:space="preserve">Starts the video camera stream. After calling this, the #GFreenectDevice::video-frame
signal is triggered whenever a new frame is available. Use
gfreenect_device_stop_video_stream() to stop it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve">A #GFreenectResolution to use</doc>
            <type name="Resolution" c:type="GFreenectResolution"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">A #GFreenectVideoFormat to use</doc>
            <type name="VideoFormat" c:type="GFreenectVideoFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_depth_stream"
              c:identifier="gfreenect_device_stop_depth_stream"
              throws="1">
        <doc xml:space="preserve">Stops the depth camera stream that was previously started with
gfreenect_device_start_depth_stream().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop_video_stream"
              c:identifier="gfreenect_device_stop_video_stream"
              throws="1">
        <doc xml:space="preserve">Stops the video camera stream that was previously started with
gfreenect_device_start_video_stream().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectDevice</doc>
            <type name="Device" c:type="GFreenectDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="index"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The index of the kinect device sensor in the bus. Normally zero for a
single device.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="led" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The status of the sensor's led, from  #GFreenectLed set.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="subdevices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The or'ed combination of subdevices from #GFreenectSubdevice that
have been activated.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tilt-angle" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The sensor's tilt motor angle relative to the horizon.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DevicePrivate" c:type="GFreenectDevicePrivate*"/>
      </field>
      <glib:signal name="depth-frame" when="last" action="1">
        <doc xml:space="preserve">Called whenever a new depth frame is available. The depth stream has to be
started with gfreenect_device_start_depth_stream().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="video-frame" when="last" action="1">
        <doc xml:space="preserve">Called whenever a new video frame is available. The video stream has to be
started with gfreenect_device_start_video_stream().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DeviceClass"
            c:type="GFreenectDeviceClass"
            glib:is-gtype-struct-for="Device">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="depth_frame">
        <callback name="depth_frame">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Device" c:type="GFreenectDevice*"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="video_frame">
        <callback name="video_frame">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Device" c:type="GFreenectDevice*"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DevicePrivate" c:type="GFreenectDevicePrivate" disguised="1">
    </record>
    <record name="FrameMode"
            c:type="GFreenectFrameMode"
            glib:type-name="GFreenectFrameMode"
            glib:get-type="gfreenect_frame_mode_get_type"
            c:symbol-prefix="frame_mode">
      <field name="resolution" writable="1">
        <doc xml:space="preserve">The image resolution of the frame from #GFreenectResolution</doc>
        <type name="Resolution" c:type="GFreenectResolution"/>
      </field>
      <field name="video_format" writable="1">
        <doc xml:space="preserve">The video format of the frame from #GFreenectVideoFormat</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="depth_format" writable="1">
        <doc xml:space="preserve">The depth format of the frame from #GFreenectDepthFormat</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve">The length of the frame data, in bytes</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve">The width of the frame, in pixels</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve">The height of the frame, in pixels</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="bits_per_pixel" writable="1">
        <doc xml:space="preserve">The number of bits to represent the data of one pixel</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="padding_bits_per_pixel" writable="1">
        <doc xml:space="preserve">The number of padding bits in the data of one pixel</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="frame_rate" writable="1">
        <doc xml:space="preserve">The expected frame rate</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new_from_native"
                   c:identifier="gfreenect_frame_mode_new_from_native">
        <doc xml:space="preserve">Creates a new #GFreenectFrameMode structure and fills all its values using
information from a native #freenect_frame_mode structure. This is a low
level method that a user would rarely use.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #GFreenectFrameMode. Use
gfreenect_frame_mode_free() to free it.</doc>
          <type name="FrameMode" c:type="GFreenectFrameMode*"/>
        </return-value>
        <parameters>
          <parameter name="native" transfer-ownership="none">
            <doc xml:space="preserve">Pointer to a #freenect_frame_mode structure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gfreenect_frame_mode_copy">
        <doc xml:space="preserve">Makes an exact copy of a #GFreenectFrameMode object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #GFreenectFrameMode. Use
gfreenect_frame_mode_free() to free it.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_mode" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectFrameMode to copy</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gfreenect_frame_mode_free">
        <doc xml:space="preserve">Frees a #GFreenectFrameMode object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame_mode" transfer-ownership="none">
            <doc xml:space="preserve">The #GFreenectFrameMode to free</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_from_native"
              c:identifier="gfreenect_frame_mode_set_from_native">
        <doc xml:space="preserve">Sets all values of a #GFreenectFrameMode using the information contained
in a native #freenect_frame_mode structure. This is a low level method that
a user would rarely use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">A #GFreenectFrameMode object</doc>
            <type name="FrameMode" c:type="GFreenectFrameMode*"/>
          </instance-parameter>
          <parameter name="native" transfer-ownership="none">
            <doc xml:space="preserve">Pointer to a #freenect_frame_mode structure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="Led" c:type="GFreenectLed">
      <doc xml:space="preserve">Available LED states.</doc>
      <member name="off" value="0" c:identifier="GFREENECT_LED_OFF">
        <doc xml:space="preserve">LED off</doc>
      </member>
      <member name="green" value="1" c:identifier="GFREENECT_LED_GREEN">
        <doc xml:space="preserve">LED green</doc>
      </member>
      <member name="red" value="2" c:identifier="GFREENECT_LED_RED">
        <doc xml:space="preserve">LED red</doc>
      </member>
      <member name="yellow" value="3" c:identifier="GFREENECT_LED_YELLOW">
        <doc xml:space="preserve">LED yellow</doc>
      </member>
      <member name="blink_green"
              value="4"
              c:identifier="GFREENECT_LED_BLINK_GREEN">
        <doc xml:space="preserve">LED blinking green</doc>
      </member>
      <member name="blink_red_yellow"
              value="6"
              c:identifier="GFREENECT_LED_BLINK_RED_YELLOW">
        <doc xml:space="preserve">LED blinking red/yellow</doc>
      </member>
    </enumeration>
    <enumeration name="Resolution" c:type="GFreenectResolution">
      <doc xml:space="preserve">Available resolutions for depth and video camera streams.</doc>
      <member name="low" value="0" c:identifier="GFREENECT_RESOLUTION_LOW">
        <doc xml:space="preserve">Low resolution (QVGA - 320x240)</doc>
      </member>
      <member name="medium"
              value="1"
              c:identifier="GFREENECT_RESOLUTION_MEDIUM">
        <doc xml:space="preserve">Medium resolution (VGA  - 640x480)</doc>
      </member>
      <member name="high" value="2" c:identifier="GFREENECT_RESOLUTION_HIGH">
        <doc xml:space="preserve">High resolution (SXGA - 1280x1024)</doc>
      </member>
    </enumeration>
    <enumeration name="Subdevice" c:type="GFreenectSubdevice">
      <doc xml:space="preserve">Enumeration of available subdevices. Used in gfreenect_device_new()
to specify what subdevices to activate.</doc>
      <member name="motor" value="1" c:identifier="GFREENECT_SUBDEVICE_MOTOR">
        <doc xml:space="preserve">Motor subdevice</doc>
      </member>
      <member name="camera"
              value="2"
              c:identifier="GFREENECT_SUBDEVICE_CAMERA">
        <doc xml:space="preserve">Camera subdevice</doc>
      </member>
      <member name="audio" value="4" c:identifier="GFREENECT_SUBDEVICE_AUDIO">
        <doc xml:space="preserve">Audio subdevice</doc>
      </member>
      <member name="all" value="7" c:identifier="GFREENECT_SUBDEVICE_ALL">
        <doc xml:space="preserve">Combination of all subdevices</doc>
      </member>
    </enumeration>
    <enumeration name="VideoFormat" c:type="GFreenectVideoFormat">
      <doc xml:space="preserve">Available video formats for the video camera stream.</doc>
      <member name="rgb" value="0" c:identifier="GFREENECT_VIDEO_FORMAT_RGB">
        <doc xml:space="preserve">Decompressed RGB mode (demosaicing done by
libfreenect)</doc>
      </member>
      <member name="bayer"
              value="1"
              c:identifier="GFREENECT_VIDEO_FORMAT_BAYER">
        <doc xml:space="preserve">Bayer compressed mode (raw information from
camera)</doc>
      </member>
      <member name="ir_8bit"
              value="2"
              c:identifier="GFREENECT_VIDEO_FORMAT_IR_8BIT">
        <doc xml:space="preserve">8-bit IR mode</doc>
      </member>
      <member name="ir_10bit"
              value="3"
              c:identifier="GFREENECT_VIDEO_FORMAT_IR_10BIT">
        <doc xml:space="preserve">10-bit IR mode</doc>
      </member>
      <member name="ir_10bit_packed"
              value="4"
              c:identifier="GFREENECT_VIDEO_FORMAT_IR_10BIT_PACKED">
        <doc xml:space="preserve">10-bit packed IR mode</doc>
      </member>
      <member name="yuv_rgb"
              value="5"
              c:identifier="GFREENECT_VIDEO_FORMAT_YUV_RGB">
        <doc xml:space="preserve">YUV RGB mode</doc>
      </member>
      <member name="yuv_raw"
              value="6"
              c:identifier="GFREENECT_VIDEO_FORMAT_YUV_RAW">
        <doc xml:space="preserve">YUV raw mode</doc>
      </member>
    </enumeration>
  </namespace>
</repository>
