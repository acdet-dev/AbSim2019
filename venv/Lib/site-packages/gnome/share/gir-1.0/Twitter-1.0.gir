<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Soup" version="2.4"/>
  <package name="gdk-pixbuf-2.0"/>
  <package name="gobject-2.0"/>
  <package name="libsoup-2.4"/>
  <namespace name="Twitter"
             version="1.0"
             shared-library="libtwitter-glib-1.0-0.dll"
             c:identifier-prefixes="Twitter"
             c:symbol-prefixes="twitter">
    <enumeration name="AuthState" c:type="TwitterAuthState">
      <doc xml:space="preserve">Enumeration used to distinguish the states of the authentication process
in the #TwitterClient::authenticate signal handlers.</doc>
      <member name="negotiating"
              value="0"
              c:identifier="TWITTER_AUTH_NEGOTIATING">
        <doc xml:space="preserve">Initial phase of the authentication</doc>
      </member>
      <member name="retry" value="1" c:identifier="TWITTER_AUTH_RETRY">
        <doc xml:space="preserve">Retry the authentication</doc>
      </member>
      <member name="failed" value="2" c:identifier="TWITTER_AUTH_FAILED">
        <doc xml:space="preserve">Authentication failed</doc>
      </member>
      <member name="success" value="3" c:identifier="TWITTER_AUTH_SUCCESS">
        <doc xml:space="preserve">Authentication succeded</doc>
      </member>
    </enumeration>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="TwitterClient"
           parent="GObject.Object"
           glib:type-name="TwitterClient"
           glib:get-type="twitter_client_get_type"
           glib:type-struct="ClientClass">
      <doc xml:space="preserve">#TwitterClient allows to connect to the Twitter web service
and operate using the RESTful API provided from any GLib-based
application.

The #TwitterClient-struct struct contains private data only, and
should only be accessed using the functions below.</doc>
      <constructor name="new" c:identifier="twitter_client_new">
        <doc xml:space="preserve">Creates a new #TwitterClient using the default provider.

It is possible to use the #TwitterClient::authenticate signal
to handle the authentication interactively when needed, or to
use twitter_client_set_user() to set the user credentials.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #TwitterClient. Use g_object_unref()
  to free the allocated resources</doc>
          <type name="Client" c:type="TwitterClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_user"
                   c:identifier="twitter_client_new_for_user">
        <doc xml:space="preserve">Creates a new #TwitterClient using the default provider, and
sets the credentials of the user.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #TwitterClient. Use g_object_unref()
  to free the allocated resources</doc>
          <type name="Client" c:type="TwitterClient*"/>
        </return-value>
        <parameters>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">the email address of the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">the password of the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="twitter_client_new_full">
        <return-value transfer-ownership="full">
          <type name="Client" c:type="TwitterClient*"/>
        </return-value>
        <parameters>
          <parameter name="provider" transfer-ownership="none">
            <type name="Provider" c:type="TwitterProvider"/>
          </parameter>
          <parameter name="base_url" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="authenticate">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="AuthState" c:type="TwitterAuthState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_ended">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="status_received">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timeline_complete">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="user_received">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="user_verified">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="is_verified" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_favorite" c:identifier="twitter_client_add_favorite">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_friend" c:identifier="twitter_client_add_friend">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_status" c:identifier="twitter_client_add_status">
        <doc xml:space="preserve">Adds @text to the status messages of the user currently
authenticated by @client.

The #TwitterClient::status-received signal will be emitted
with the #TwitterStatus for @text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the text of the status message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_session" c:identifier="twitter_client_end_session">
        <doc xml:space="preserve">Ends the current session of @client. The authentication state
will be reset.

The #TwitterClient::session-ended signal will be emitted when the
provider acknowledged the request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="follow_user" c:identifier="twitter_client_follow_user">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_archive" c:identifier="twitter_client_get_archive">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_base_url" c:identifier="twitter_client_get_base_url">
        <doc xml:space="preserve">Retrieves the base URL of the service provider used by @client</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the base URL. The returned string is owned by
  the #TwitterClient and should never be modified of freed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_favorites" c:identifier="twitter_client_get_favorites">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_followers" c:identifier="twitter_client_get_followers">
        <doc xml:space="preserve">Requests the provider used by @client for a (paged) list
of the people following the #TwitterClient authenticated
user.

The #TwitterClient::user-received signal will be emitted
for each follower.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve">the page number of the followers list</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="omit_status" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the #TwitterUser should not have
  the last status associated to them</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_friends" c:identifier="twitter_client_get_friends">
        <doc xml:space="preserve">Requests the provider used by @client for a (paged) list
of the people followed by the #TwitterClient authenticated
user.

The #TwitterClient::user-received signal will be emitted
for each followed user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">the user id or screen name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve">the page number of the friends list</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="omit_status" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the #TwitterUser should not have
  the last status associated to them</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_friends_timeline"
              c:identifier="twitter_client_get_friends_timeline">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="friend_" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="since_date" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_provider" c:identifier="twitter_client_get_provider">
        <doc xml:space="preserve">Retrieves the type of provider used by @client</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the provider logical id</doc>
          <type name="Provider" c:type="TwitterProvider"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_public_timeline"
              c:identifier="twitter_client_get_public_timeline">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="since_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_replies" c:identifier="twitter_client_get_replies">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="twitter_client_get_status">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="twitter_client_get_user">
        <doc xml:space="preserve">Retrieves the user credentials.

The returned strings are newly allocated and should be freed
using g_free() when done using them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient#</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">return location for the email address, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">return location for the password, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_timeline"
              c:identifier="twitter_client_get_user_timeline">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="since_date" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_user" c:identifier="twitter_client_leave_user">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_favorite"
              c:identifier="twitter_client_remove_favorite">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_friend" c:identifier="twitter_client_remove_friend">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_status" c:identifier="twitter_client_remove_status">
        <return-value transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="twitter_client_set_user">
        <doc xml:space="preserve">Sets the user credentials of the user. The [ @email, @password ] tuple
will be used to authenticate the @client whenever a request requiring
authentication is queued.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">the email address of the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">the password of the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_user_from_email"
              c:identifier="twitter_client_show_user_from_email">
        <doc xml:space="preserve">Requests the provider used by @client to "show" the user
matching the @email string.

The #TwitterClient::user-received signal will be emitted
with the requested #TwitterUser</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">E-mail address of the user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_user_from_id"
              c:identifier="twitter_client_show_user_from_id">
        <doc xml:space="preserve">Requests the provider used by @client to "show" the user
matching the @user string.

The @user string is either the user id as returned by
twitter_user_get_id(), or the screen name as returned
by twitter_user_get_screen_name().

The #TwitterClient::user-received signal will be emitted
with the requested #TwitterUser</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
          <parameter name="id_or_screen_name" transfer-ownership="none">
            <doc xml:space="preserve">user ID or screen name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_user" c:identifier="twitter_client_verify_user">
        <doc xml:space="preserve">Requests a verification of the user credentials used by @client
to the provider.

The #TwitterClient::user-verified signal will be emitted with
the results of the request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the handle of the request, or 0</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterClient</doc>
            <type name="Client" c:type="TwitterClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="base-url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="provider"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="user-agent"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ClientPrivate" c:type="TwitterClientPrivate*"/>
      </field>
      <glib:signal name="authenticate"
                   when="last"
                   no-recurse="1"
                   introspectable="0">
        <doc xml:space="preserve">Handles the authentication of the user onto the Twitter services.

The authentication can be a multi-state process. If the user's
credentials were not set before issuing a command that requires
authentication, the ::authenticate signal will be emitted with the
%TWITTER_AUTH_NEGOTIATING state. In this case, the credentials must
be set and the handler must return %TRUE.

|[
  if (state == TWITTER_AUTH_NEGOTIATING)
    {
      twitter_client_set_user (client, email, password);
      return TRUE;
    }
]|

In case of failed authentication, the %TWITTER_AUTH_RETRY state
will be used until the handler sets the correct credentials and
returns %TRUE or aborts the authentication process and returns
%FALSE; in the latter case, the signal will be emitted one last
time with the %TWITTER_AUTH_FAILED state.

If the authentication was successful, the signal will be emitted
with the %TWITTER_AUTH_SUCCESS state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the user credentials were correctly set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">the state of the authentication process</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-ended" when="last">
        <doc xml:space="preserve">The ::session-ended signal is emitted at the end of the
twitter_client_end_session() request</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="status-received" when="last">
        <doc xml:space="preserve">The ::status-received signal is emitted each time @client
receives a #TwitterStatus from the provider.

In case of error, @error will be set to the appropriate
#GError; otherwise, it will be %NULL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve">the handle of the request</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterStatus</doc>
            <type name="Status"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">set to a #GError in case of error</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timeline-complete" when="last">
        <doc xml:space="preserve">The ::timeline-complete signal is emitted at the end of
a timeline request to the provider</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="user-received" when="last">
        <doc xml:space="preserve">The ::user-received signal is emitted each time @client
receives a #TwitterUser from the provider.

In case of error, @error will be set to the appropriate
#GError; otherwise, it will be %NULL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve">the handle of the request</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterUser</doc>
            <type name="User"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">set to a #GError in case of error</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="user-verified" when="last">
        <doc xml:space="preserve">The ::user-verified signal is emitted by @client after
twitter_client_verify_user() has been called.

The @is_verified argument will be set to %TRUE of %FALSE
depending on the result of the verification. In case of
error, @error will be set to the appropriate #GError;
otherwise it will be %NULL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve">the handle of the request</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="is_verified" transfer-ownership="none">
            <doc xml:space="preserve">whether the user credentials are verified</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">set to a #GError in case of error</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="TwitterClientClass"
            glib:is-gtype-struct-for="Client">
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="authenticate">
        <callback name="authenticate">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="AuthState" c:type="TwitterAuthState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_verified">
        <callback name="user_verified">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="is_verified" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_ended">
        <callback name="session_ended">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="status_received">
        <callback name="status_received">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="status" transfer-ownership="none">
              <type name="Status" c:type="TwitterStatus*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_received">
        <callback name="user_received">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
            <parameter name="user" transfer-ownership="none">
              <type name="User" c:type="TwitterUser*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timeline_complete">
        <callback name="timeline_complete">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="TwitterClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_twitter_padding1" introspectable="0">
        <callback name="_twitter_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding2" introspectable="0">
        <callback name="_twitter_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding3" introspectable="0">
        <callback name="_twitter_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding4" introspectable="0">
        <callback name="_twitter_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding5" introspectable="0">
        <callback name="_twitter_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding6" introspectable="0">
        <callback name="_twitter_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding7" introspectable="0">
        <callback name="_twitter_padding7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_twitter_padding8" introspectable="0">
        <callback name="_twitter_padding8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ClientPrivate" c:type="TwitterClientPrivate" disguised="1">
    </record>
    <enumeration name="Error"
                 c:type="TwitterError"
                 glib:error-domain="twitter-error-quark">
      <doc xml:space="preserve">Twitter error enumeration.</doc>
      <member name="host_not_found"
              value="0"
              c:identifier="TWITTER_ERROR_HOST_NOT_FOUND">
        <doc xml:space="preserve">Host not found</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="TWITTER_ERROR_CANCELLED">
        <doc xml:space="preserve">Cancelled</doc>
      </member>
      <member name="permission_denied"
              value="2"
              c:identifier="TWITTER_ERROR_PERMISSION_DENIED">
        <doc xml:space="preserve">Permission denied</doc>
      </member>
      <member name="not_found"
              value="3"
              c:identifier="TWITTER_ERROR_NOT_FOUND">
        <doc xml:space="preserve">Operation not found</doc>
      </member>
      <member name="timed_out"
              value="4"
              c:identifier="TWITTER_ERROR_TIMED_OUT">
        <doc xml:space="preserve">Operation timed out</doc>
      </member>
      <member name="failed" value="5" c:identifier="TWITTER_ERROR_FAILED">
        <doc xml:space="preserve">Operation failed</doc>
      </member>
      <member name="not_modified"
              value="6"
              c:identifier="TWITTER_ERROR_NOT_MODIFIED">
        <doc xml:space="preserve">The result of the operation hasn't been
   modified since the last query</doc>
      </member>
      <member name="parse_error"
              value="7"
              c:identifier="TWITTER_ERROR_PARSE_ERROR">
        <doc xml:space="preserve">Unable to parse the JSON data coming
   from the provider</doc>
      </member>
    </enumeration>
    <enumeration name="Provider" c:type="TwitterProvider">
      <doc xml:space="preserve">The provider for the Twitter services.

%TWITTER_DEFAULT_PROVIDER is the default provider, at http://twitter.com.

%TWITTER_IDENTI_CA is the identi.ca Twitter compatibility provider,
at http://identi.ca/api.

%TWITTER_CUSTOM_PROVIDER is used with twitter_client_set_base_url()
for custom Twitter services providing a Twitter compatibility
layer

This enumeration can be extended at any later date.</doc>
      <member name="custom_provider"
              value="0"
              c:identifier="TWITTER_CUSTOM_PROVIDER">
        <doc xml:space="preserve">A custom provider</doc>
      </member>
      <member name="default_provider"
              value="1"
              c:identifier="TWITTER_DEFAULT_PROVIDER">
        <doc xml:space="preserve">The default Twitter provider</doc>
      </member>
      <member name="identi_ca" value="2" c:identifier="TWITTER_IDENTI_CA">
        <doc xml:space="preserve">The Identi.ca provider</doc>
      </member>
    </enumeration>
    <class name="Status"
           c:symbol-prefix="status"
           c:type="TwitterStatus"
           parent="GObject.InitiallyUnowned"
           glib:type-name="TwitterStatus"
           glib:get-type="twitter_status_get_type"
           glib:type-struct="StatusClass">
      <doc xml:space="preserve">The #TwitterStatus struct contains only private data and should
only be accessed through the provided API</doc>
      <constructor name="new" c:identifier="twitter_status_new">
        <return-value transfer-ownership="none">
          <type name="Status" c:type="TwitterStatus*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="twitter_status_new_from_data">
        <return-value transfer-ownership="none">
          <type name="Status" c:type="TwitterStatus*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_created_at"
              c:identifier="twitter_status_get_created_at">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="twitter_status_get_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reply_to_status"
              c:identifier="twitter_status_get_reply_to_status">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reply_to_user"
              c:identifier="twitter_status_get_reply_to_user">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source" c:identifier="twitter_status_get_source">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="twitter_status_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_truncated" c:identifier="twitter_status_get_truncated">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url" c:identifier="twitter_status_get_url">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user"
              c:identifier="twitter_status_get_user"
              introspectable="0">
        <return-value>
          <type name="User" c:type="TwitterUser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="twitter_status_load_from_data"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <type name="Status" c:type="TwitterStatus*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="created-at" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reply-to-status" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reply-to-user" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="source" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="text" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="truncated" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="url" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user" transfer-ownership="none">
        <type name="User"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StatusPrivate" c:type="TwitterStatusPrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">The ::changed signal is emitted each time an asynchronous
loading of the @status is complete</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="StatusClass"
            c:type="TwitterStatusClass"
            glib:is-gtype-struct-for="Status">
      <doc xml:space="preserve">The #TwitterStatusClass struct contains only private data</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="Status" c:type="TwitterStatus"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="StatusPrivate" c:type="TwitterStatusPrivate" disguised="1">
    </record>
    <class name="Timeline"
           c:symbol-prefix="timeline"
           c:type="TwitterTimeline"
           parent="GObject.Object"
           glib:type-name="TwitterTimeline"
           glib:get-type="twitter_timeline_get_type"
           glib:type-struct="TimelineClass">
      <doc xml:space="preserve">The #TwitterTimeline struct contains only private data
and should only be accessed through the provided API</doc>
      <constructor name="new" c:identifier="twitter_timeline_new">
        <doc xml:space="preserve">Creates a new, empty #TwitterTimeline</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #TwitterTimeline. Use g_object_unref()
  to free the resources it allocates</doc>
          <type name="Timeline" c:type="TwitterTimeline*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="twitter_timeline_new_from_data">
        <doc xml:space="preserve">Creates a new #TwitterTimeline from its JSON representation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #TwitterTimeline. Use g_object_unref()
  to free the resources it allocates</doc>
          <type name="Timeline" c:type="TwitterTimeline*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated string containing the JSON description
  of a timeline</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_all"
              c:identifier="twitter_timeline_get_all"
              introspectable="0">
        <doc xml:space="preserve">Retrieves all the #TwitterStatus instances inside @timeline</doc>
        <return-value>
          <doc xml:space="preserve">a copy of the list of statuses. The #TwitterStatus
  instances inside the returned list are owned by the timeline
  and should not be modified or freed. Use g_list_free() to free
  the resources allocated by the list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterTimeline</doc>
            <type name="Timeline" c:type="TwitterTimeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="twitter_timeline_get_count">
        <doc xml:space="preserve">Retrieves the number of #TwitterStatus instances inside @timeline</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of statuses</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterTimeline</doc>
            <type name="Timeline" c:type="TwitterTimeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="twitter_timeline_get_id"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the #TwitterStatus with the given @id, if present
inside the timeline</doc>
        <return-value>
          <doc xml:space="preserve">a #TwitterStatus or %NULL</doc>
          <type name="Status" c:type="TwitterStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterTimeline</doc>
            <type name="Timeline" c:type="TwitterTimeline*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a status id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pos"
              c:identifier="twitter_timeline_get_pos"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the #TwitterStatus at the given @index_</doc>
        <return-value>
          <doc xml:space="preserve">a #TwitterStatus</doc>
          <type name="Status" c:type="TwitterStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterTimeline</doc>
            <type name="Timeline" c:type="TwitterTimeline*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position in the timeline</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="twitter_timeline_load_from_data"
              throws="1">
        <doc xml:space="preserve">Updates @timeline from a JSON representation. All previous
content will be removed and disposed. On error, @error will
be set accordingly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @buffer was successfully parsed, %FALSE
  otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve">a #TwitterTimeline</doc>
            <type name="Timeline" c:type="TwitterTimeline*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated string containing the JSON description
  of a timeline</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TimelinePrivate" c:type="TwitterTimelinePrivate*"/>
      </field>
    </class>
    <record name="TimelineClass"
            c:type="TwitterTimelineClass"
            glib:is-gtype-struct-for="Timeline">
      <doc xml:space="preserve">The #TwitterTimelineClass contains only private data</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TimelinePrivate"
            c:type="TwitterTimelinePrivate"
            disguised="1">
    </record>
    <class name="User"
           c:symbol-prefix="user"
           c:type="TwitterUser"
           parent="GObject.InitiallyUnowned"
           glib:type-name="TwitterUser"
           glib:get-type="twitter_user_get_type"
           glib:type-struct="UserClass">
      <doc xml:space="preserve">The #TwitterUser struct contains only private data and
should only be accessed through the provided API.</doc>
      <constructor name="new" c:identifier="twitter_user_new">
        <return-value transfer-ownership="none">
          <type name="User" c:type="TwitterUser*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="twitter_user_new_from_data">
        <return-value transfer-ownership="none">
          <type name="User" c:type="TwitterUser*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_created_at" c:identifier="twitter_user_get_created_at">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="twitter_user_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_favorites_count"
              c:identifier="twitter_user_get_favorites_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_followers_count"
              c:identifier="twitter_user_get_followers_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_following" c:identifier="twitter_user_get_following">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_friends_count"
              c:identifier="twitter_user_get_friends_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="twitter_user_get_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="twitter_user_get_location">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="twitter_user_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile_image"
              c:identifier="twitter_user_get_profile_image"
              introspectable="0">
        <return-value>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile_image_url"
              c:identifier="twitter_user_get_profile_image_url">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protected" c:identifier="twitter_user_get_protected">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen_name"
              c:identifier="twitter_user_get_screen_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="twitter_user_get_status"
              introspectable="0">
        <return-value>
          <type name="Status" c:type="TwitterStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_statuses_count"
              c:identifier="twitter_user_get_statuses_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_zone" c:identifier="twitter_user_get_time_zone">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url" c:identifier="twitter_user_get_url">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_utc_offset" c:identifier="twitter_user_get_utc_offset">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="twitter_user_load_from_data"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="TwitterUser*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="created-at" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="favorites-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="followers-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="following" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="friends-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="location" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="profile-image-url" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protected" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="screen-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status" transfer-ownership="none">
        <type name="Status"/>
      </property>
      <property name="statuses-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="time-zone" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="utc-offset" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserPrivate" c:type="TwitterUserPrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">The ::changed signal is emitted each time the #TwitterUser
changes after an asynchronous operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="UserClass"
            c:type="TwitterUserClass"
            glib:is-gtype-struct-for="User">
      <doc xml:space="preserve">The #TwitterUserClass struct contains only private data</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="user" transfer-ownership="none">
              <type name="User" c:type="TwitterUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserList"
           c:symbol-prefix="user_list"
           c:type="TwitterUserList"
           parent="GObject.Object"
           glib:type-name="TwitterUserList"
           glib:get-type="twitter_user_list_get_type"
           glib:type-struct="UserListClass">
      <doc xml:space="preserve">The #TwitterUserList struct contains only private data
and should only be accessed through the provided API</doc>
      <constructor name="new" c:identifier="twitter_user_list_new">
        <return-value transfer-ownership="full">
          <type name="UserList" c:type="TwitterUserList*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="twitter_user_list_new_from_data">
        <return-value transfer-ownership="full">
          <type name="UserList" c:type="TwitterUserList*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_all"
              c:identifier="twitter_user_list_get_all"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="user_list" transfer-ownership="none">
            <type name="UserList" c:type="TwitterUserList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="twitter_user_list_get_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_list" transfer-ownership="none">
            <type name="UserList" c:type="TwitterUserList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="twitter_user_list_get_id"
              introspectable="0">
        <return-value>
          <type name="User" c:type="TwitterUser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_list" transfer-ownership="none">
            <type name="UserList" c:type="TwitterUserList*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pos"
              c:identifier="twitter_user_list_get_pos"
              introspectable="0">
        <return-value>
          <type name="User" c:type="TwitterUser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_list" transfer-ownership="none">
            <type name="UserList" c:type="TwitterUserList*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="twitter_user_list_load_from_data"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_list" transfer-ownership="none">
            <type name="UserList" c:type="TwitterUserList*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserListPrivate" c:type="TwitterUserListPrivate*"/>
      </field>
    </class>
    <record name="UserListClass"
            c:type="TwitterUserListClass"
            glib:is-gtype-struct-for="UserList">
      <doc xml:space="preserve">The #TwitterUserListClass struct contains only private data</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="UserListPrivate"
            c:type="TwitterUserListPrivate"
            disguised="1">
    </record>
    <record name="UserPrivate" c:type="TwitterUserPrivate" disguised="1">
    </record>
    <function name="date_to_time_val" c:identifier="twitter_date_to_time_val">
      <doc xml:space="preserve">Converts a Twitter date into a #GTimeVal. The timestamp is relative
to UTC.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the conversion was successful</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve">a timestamp coming from Twitter</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">return location for a #GTimeVal</doc>
          <type name="GLib.TimeVal" c:type="GTimeVal*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_from_status"
              c:identifier="twitter_error_from_status">
      <doc xml:space="preserve">Converts an HTTP status code coming from Libsoup into a
#TwitterError</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #TwitterError</doc>
        <type name="Error" c:type="TwitterError"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve">a Libsoup HTTP status code</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark" c:identifier="twitter_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="http_date_from_delta"
              c:identifier="twitter_http_date_from_delta">
      <doc xml:space="preserve">Creates an HTTP representation of a timestamp @seconds from now</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly allocated string containing the
  HTTP date. Use g_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="seconds" transfer-ownership="none">
          <doc xml:space="preserve">seconds from now</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_date_from_time_t"
              c:identifier="twitter_http_date_from_time_t">
      <doc xml:space="preserve">Converts a Unix time into an HTTP date</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly allocated string containing the
  HTTP date. Use g_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="time_" transfer-ownership="none">
          <doc xml:space="preserve">timestamp, expressed in seconds from the epoch</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_date_to_delta"
              c:identifier="twitter_http_date_to_delta">
      <doc xml:space="preserve">Converts a timestamp in HTTP into seconds from the current time</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">seconds from the current time</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve">a HTTP date string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_date_to_time_t"
              c:identifier="twitter_http_date_to_time_t">
      <doc xml:space="preserve">Converts a timestamp in HTTP format into a Unix timestamp</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the Unix timestamp equivalent to the HTTP one</doc>
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve">a HTTP date string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
