<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="GPlugin" version="0.0"/>
  <namespace name="Purple"
             version="3.0"
             shared-library="libpurple-20.dll"
             c:identifier-prefixes="Purple"
             c:symbol-prefixes="purple">
    <alias name="CmdId" c:type="PurpleCmdId">
      <doc xml:space="preserve">A unique integer representing a command registered with
purple_cmd_register(), which can subsequently be passed to
purple_cmd_unregister() to unregister that command.</doc>
      <type name="guint" c:type="guint"/>
    </alias>
    <alias name="Plugin" c:type="PurplePlugin">
      <type name="GObject.Object" c:type="GObject"/>
    </alias>
    <alias name="PluginClass" c:type="PurplePluginClass">
      <type name="GObject.ObjectClass" c:type="GObjectClass"/>
    </alias>
    <class name="AESCipher"
           c:symbol-prefix="aes_cipher"
           c:type="PurpleAESCipher"
           parent="Cipher"
           glib:type-name="PurpleAESCipher"
           glib:get-type="purple_aes_cipher_get_type"
           glib:type-struct="AESCipherClass">
      <constructor name="new" c:identifier="purple_aes_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
      </constructor>
      <property name="batch-mode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="CipherBatchMode"/>
      </property>
      <property name="iv" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="AESCipherClass"
            c:type="PurpleAESCipherClass"
            glib:is-gtype-struct-for="AESCipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Account"
           c:symbol-prefix="account"
           c:type="PurpleAccount"
           parent="GObject.Object"
           glib:type-name="PurpleAccount"
           glib:get-type="purple_account_get_type"
           glib:type-struct="AccountClass">
      <doc xml:space="preserve">Structure representing an account.</doc>
      <constructor name="new" c:identifier="purple_account_new">
        <doc xml:space="preserve">Creates a new account.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocol_id" transfer-ownership="none">
            <doc xml:space="preserve">The protocol ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="request_close"
                c:identifier="purple_account_request_close">
        <doc xml:space="preserve">Close the account request for the given ui handle</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ui_handle" transfer-ownership="none">
            <doc xml:space="preserve">The ui specific handle for which requests should be closed</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_buddies"
              c:identifier="purple_account_add_buddies"
              introspectable="0">
        <doc xml:space="preserve">Adds a list of buddies to the server-side buddy list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="buddies" transfer-ownership="none">
            <doc xml:space="preserve">The list of PurpleBlistNodes representing the buddies to add.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The invite message.  This may be ignored by a protocol.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_buddy" c:identifier="purple_account_add_buddy">
        <doc xml:space="preserve">Adds a buddy to the server-side buddy list for the specified account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy to add.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The invite message.  This may be ignored by a protocol.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_password"
              c:identifier="purple_account_change_password">
        <doc xml:space="preserve">Changes the password on the specified account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="orig_pw" transfer-ownership="none">
            <doc xml:space="preserve">The old password.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="new_pw" transfer-ownership="none">
            <doc xml:space="preserve">The new password.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_current_error"
              c:identifier="purple_account_clear_current_error">
        <doc xml:space="preserve">Clear an account's current error state, resetting it to %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account whose error state should be cleared.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_settings"
              c:identifier="purple_account_clear_settings">
        <doc xml:space="preserve">Clears all protocol-specific settings on an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="connect" c:identifier="purple_account_connect">
        <doc xml:space="preserve">Connects to an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to connect to.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy_log" c:identifier="purple_account_destroy_log">
        <doc xml:space="preserve">Frees the system log of an account</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="purple_account_disconnect">
        <doc xml:space="preserve">Disconnects from an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to disconnect from.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_status"
              c:identifier="purple_account_get_active_status"
              introspectable="0">
        <doc xml:space="preserve">Returns the active status for this account.  This looks through
the PurplePresence associated with this account and returns the
PurpleStatus that has its active flag set to "TRUE."  There can be
only one active PurpleStatus in a PurplePresence.</doc>
        <return-value>
          <doc xml:space="preserve">The active status.</doc>
          <type c:type="PurpleStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bool" c:identifier="purple_account_get_bool">
        <doc xml:space="preserve">Returns a protocol-specific boolean setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buddy_icon_path"
              c:identifier="purple_account_get_buddy_icon_path">
        <doc xml:space="preserve">Gets the account's buddy icon path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The buddy icon's non-cached path.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_check_mail"
              c:identifier="purple_account_get_check_mail">
        <doc xml:space="preserve">Returns whether or not this account should check for mail.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it should check for mail.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="purple_account_get_connection"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's connection.</doc>
        <return-value>
          <doc xml:space="preserve">The connection.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_error"
              c:identifier="purple_account_get_current_error">
        <doc xml:space="preserve">Get the error that caused the account to be disconnected, or %NULL if the
account is happily connected or disconnected without an error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of error and a human-readable description
         of the current error, or %NULL if there is no current error.  This
         pointer is guaranteed to remain valid until the @ref
         account-error-changed signal is emitted for @a account.</doc>
          <type name="ConnectionErrorInfo"
                c:type="const PurpleConnectionErrorInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account whose error should be retrieved.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled" c:identifier="purple_account_get_enabled">
        <doc xml:space="preserve">Returns whether or not this account is enabled for the
specified UI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it enabled on this UI.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="purple_account_get_int">
        <doc xml:space="preserve">Returns a protocol-specific integer setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_log"
              c:identifier="purple_account_get_log"
              introspectable="0">
        <doc xml:space="preserve">Returns the system log for an account.

Note: Callers should almost always pass %FALSE for @a create.
      Passing %TRUE could result in an existing log being reopened,
      if the log has already been closed, which not all loggers deal
      with appropriately.</doc>
        <return-value>
          <doc xml:space="preserve">The log.</doc>
          <type c:type="PurpleLog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="create" transfer-ownership="none">
            <doc xml:space="preserve">Should it be created if it doesn't exist?</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name_for_display"
              c:identifier="purple_account_get_name_for_display">
        <doc xml:space="preserve">Returns a name for this account appropriate for display to the user. In
order of preference: the account's alias; the contact or buddy alias (if
the account exists on its own buddy list); the connection's display name;
the account's username.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name to display.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="purple_account_get_password">
        <doc xml:space="preserve">Reads the password for the account.

This is an asynchronous call, that will return the password in a callback
once it has been read from the keyring. If the account is connected, and you
require the password immediately, then consider using @ref
purple_connection_get_password instead.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The callback to give the password.</doc>
            <type name="KeyringReadCallback"
                  c:type="PurpleKeyringReadCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_presence"
              c:identifier="purple_account_get_presence"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's presence.</doc>
        <return-value>
          <doc xml:space="preserve">The account's presence.</doc>
          <type c:type="PurplePresence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_privacy_type"
              c:identifier="purple_account_get_privacy_type">
        <doc xml:space="preserve">Returns the account's privacy type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The privacy type.</doc>
          <type name="AccountPrivacyType" c:type="PurpleAccountPrivacyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_alias"
              c:identifier="purple_account_get_private_alias">
        <doc xml:space="preserve">Returns the account's private alias.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The alias.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_id"
              c:identifier="purple_account_get_protocol_id">
        <doc xml:space="preserve">Returns the account's protocol ID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The protocol ID.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_name"
              c:identifier="purple_account_get_protocol_name">
        <doc xml:space="preserve">Returns the account's protocol name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The protocol name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proxy_info"
              c:identifier="purple_account_get_proxy_info"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's proxy information.</doc>
        <return-value>
          <doc xml:space="preserve">The proxy information.</doc>
          <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_public_alias"
              c:identifier="purple_account_get_public_alias">
        <doc xml:space="preserve">Fetch the server-side (public) alias for this account.  The account
must already be connected.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="success_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback which will be called with the alias</doc>
            <type name="GetPublicAliasSuccessCallback"
                  c:type="PurpleGetPublicAliasSuccessCallback"/>
          </parameter>
          <parameter name="failure_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback which will be called if the protocol is
             unable to retrieve the server-side alias.</doc>
            <type name="GetPublicAliasFailureCallback"
                  c:type="PurpleGetPublicAliasFailureCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remember_password"
              c:identifier="purple_account_get_remember_password">
        <doc xml:space="preserve">Returns whether or not this account should save its password.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it should remember the password.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_silence_suppression"
              c:identifier="purple_account_get_silence_suppression">
        <doc xml:space="preserve">Return whether silence suppression is used during voice call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if suppression is used, or %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="purple_account_get_status"
              introspectable="0">
        <doc xml:space="preserve">Returns the account status with the specified ID.</doc>
        <return-value>
          <doc xml:space="preserve">The status, or %NULL if it was never registered.</doc>
          <type c:type="PurpleStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <doc xml:space="preserve">The status ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_type"
              c:identifier="purple_account_get_status_type"
              introspectable="0">
        <doc xml:space="preserve">Returns the account status type with the specified ID.</doc>
        <return-value>
          <doc xml:space="preserve">The status type if found, or %NULL.</doc>
          <type c:type="PurpleStatusType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The ID of the status type to find.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_type_with_primitive"
              c:identifier="purple_account_get_status_type_with_primitive"
              introspectable="0">
        <doc xml:space="preserve">Returns the account status type with the specified primitive.
Note: It is possible for an account to have more than one
PurpleStatusType with the same primitive.  In this case, the
first PurpleStatusType is returned.</doc>
        <return-value>
          <doc xml:space="preserve">The status if found, or %NULL.</doc>
          <type c:type="PurpleStatusType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="primitive" transfer-ownership="none">
            <doc xml:space="preserve">The type of the status type to find.</doc>
            <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_types"
              c:identifier="purple_account_get_status_types"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's status types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The account's status types.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="purple_account_get_string">
        <doc xml:space="preserve">Returns a protocol-specific string setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_bool" c:identifier="purple_account_get_ui_bool">
        <doc xml:space="preserve">Returns a UI-specific boolean setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_account_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Returns the UI data associated with this account.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data associated with this account.  This is a
        convenience field provided to the UIs--it is not
        used by the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_int" c:identifier="purple_account_get_ui_int">
        <doc xml:space="preserve">Returns a UI-specific integer setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_string" c:identifier="purple_account_get_ui_string">
        <doc xml:space="preserve">Returns a UI-specific string setting for an account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_info" c:identifier="purple_account_get_user_info">
        <doc xml:space="preserve">Returns the account's user information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The user information.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="purple_account_get_username">
        <doc xml:space="preserve">Returns the account's username.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The username.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected" c:identifier="purple_account_is_connected">
        <doc xml:space="preserve">Returns whether or not the account is connected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if connected, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connecting" c:identifier="purple_account_is_connecting">
        <doc xml:space="preserve">Returns whether or not the account is connecting.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if connecting, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disconnected"
              c:identifier="purple_account_is_disconnected">
        <doc xml:space="preserve">Returns whether or not the account is disconnected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if disconnected, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disconnecting"
              c:identifier="purple_account_is_disconnecting">
        <doc xml:space="preserve">Indicates if the account is currently being disconnected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the account is being disconnected.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_status_active"
              c:identifier="purple_account_is_status_active">
        <doc xml:space="preserve">Returns whether or not an account status is active.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if active, or FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <doc xml:space="preserve">The status ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_added" c:identifier="purple_account_notify_added">
        <doc xml:space="preserve">Notifies the user that the account was added to a remote user's
buddy list.

This will present a dialog informing the user that he was added to the
remote user's buddy list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account that was added.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="remote_user" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user that added this account.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The optional ID of the local account. Rarely used.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The optional alias of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The optional message sent from the user adding you.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_allow" c:identifier="purple_account_privacy_allow">
        <doc xml:space="preserve">Allow a user to send messages. If current privacy setting for the account is:
	PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS:	The user is added to the allow-list.
	PURPLE_ACCOUNT_PRIVACY_DENY_USERS	:	The user is removed from the
	                                        deny-list.
	PURPLE_ACCOUNT_PRIVACY_ALLOW_ALL	:	No changes made.
	PURPLE_ACCOUNT_PRIVACY_DENY_ALL	:	The privacy setting is changed to
								PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS and the
								user is added to the allow-list.
	PURPLE_ACCOUNT_PRIVACY_ALLOW_BUDDYLIST: No changes made if the user is
								already in the buddy-list. Otherwise the
								setting is changed to
	PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS, all the buddies are added to the
								allow-list, and the user is also added to
								the allow-list.

The changes are reflected on the server. The previous allow/deny list is not
restored if the privacy setting is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_check" c:identifier="purple_account_privacy_check">
        <doc xml:space="preserve">Check the privacy-setting for a user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%FALSE if the specified account's privacy settings block the user
	or %TRUE otherwise. The meaning of "block" is protocol-dependent and
			generally relates to status and/or sending of messages.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_deny" c:identifier="purple_account_privacy_deny">
        <doc xml:space="preserve">Block messages from a user. If current privacy setting for the account is:
	PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS:	The user is removed from the
										allow-list.
	PURPLE_ACCOUNT_PRIVACY_DENY_USERS:	The user is added to the deny-list.
	PURPLE_ACCOUNT_PRIVACY_DENY_ALL:	No changes made.
	PURPLE_ACCOUNT_PRIVACY_ALLOW_ALL:	The privacy setting is changed to
								PURPLE_ACCOUNT_PRIVACY_DENY_USERS and the
								user is added to the deny-list.
	PURPLE_ACCOUNT_PRIVACY_ALLOW_BUDDYLIST: If the user is not in the
								buddy-list, then no changes made. Otherwise,
								the setting is changed to
								PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS, all
								the buddies are added to the allow-list, and
								this user is removed from the list.

The changes are reflected on the server. The previous allow/deny list is not
restored if the privacy setting is changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_deny_add"
              c:identifier="purple_account_privacy_deny_add">
        <doc xml:space="preserve">Adds a user to the account's deny list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the user was added successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user to add to the list.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:space="preserve">If TRUE, only the local list is updated, and not
                  the server.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_deny_remove"
              c:identifier="purple_account_privacy_deny_remove">
        <doc xml:space="preserve">Removes a user from the account's deny list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the user was removed successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user to add to the list.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:space="preserve">If TRUE, only the local list is updated, and not
                  the server.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_get_denied"
              c:identifier="purple_account_privacy_get_denied"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's deny list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of the denied users</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="privacy_get_permitted"
              c:identifier="purple_account_privacy_get_permitted"
              introspectable="0">
        <doc xml:space="preserve">Returns the account's permit list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of the permitted users</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="privacy_permit_add"
              c:identifier="purple_account_privacy_permit_add">
        <doc xml:space="preserve">Adds a user to the account's permit list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the user was added successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user to add to the list.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:space="preserve">If TRUE, only the local list is updated, and not
                  the server.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_permit_remove"
              c:identifier="purple_account_privacy_permit_remove">
        <doc xml:space="preserve">Removes a user from the account's permit list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the user was removed successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user to add to the list.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="local_only" transfer-ownership="none">
            <doc xml:space="preserve">If TRUE, only the local list is updated, and not
                  the server.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="purple_account_register">
        <doc xml:space="preserve">Registers an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to register.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_completed"
              c:identifier="purple_account_register_completed">
        <doc xml:space="preserve">Registration of the account was completed.
Calls the registration call-back set with purple_account_set_register_callback().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account being registered.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="succeeded" transfer-ownership="none">
            <doc xml:space="preserve">Was the account registration successful?</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_buddies"
              c:identifier="purple_account_remove_buddies"
              introspectable="0">
        <doc xml:space="preserve">Removes a list of buddies from the server-side buddy list.

Note: The lists buddies and groups are parallel lists.  Be sure that node n of
      groups matches node n of buddies.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="buddies" transfer-ownership="none">
            <doc xml:space="preserve">The list of buddies to remove.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="groups" transfer-ownership="none">
            <doc xml:space="preserve">The list of groups to remove buddies from.  Each node of this
              list should match the corresponding node of buddies.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="remove_buddy" c:identifier="purple_account_remove_buddy">
        <doc xml:space="preserve">Removes a buddy from the server-side buddy list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy to remove.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">The group to remove the buddy from.</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_group" c:identifier="purple_account_remove_group">
        <doc xml:space="preserve">Removes a group from the server-side buddy list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">The group to remove.</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_setting"
              c:identifier="purple_account_remove_setting">
        <doc xml:space="preserve">Removes an account-specific setting by name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve">The setting to remove.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_add" c:identifier="purple_account_request_add">
        <doc xml:space="preserve">Notifies the user that the account was addded to a remote user's buddy
list and asks ther user if they want to add the remote user to their buddy
list.

This will present a dialog informing the local user that the remote user
added them to the remote user's buddy list and will ask if they want to add
the remote user to the buddy list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account that was added.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="remote_user" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user that added this account.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The optional ID of the local account. Rarely used.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The optional alias of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The optional message sent from the user adding you.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_authorization"
              c:identifier="purple_account_request_authorization"
              introspectable="0">
        <doc xml:space="preserve">Notifies the user that a remote user has wants to add the local user
to his or her buddy list and requires authorization to do so.

This will present a dialog informing the user of this and ask if the
user authorizes or denies the remote user from adding him.</doc>
        <return-value>
          <doc xml:space="preserve">A UI-specific handle.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account that was added</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="remote_user" transfer-ownership="none">
            <doc xml:space="preserve">The name of the user that added this account.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The optional ID of the local account. Rarely used.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The optional alias of the remote user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The optional message sent by the user wanting to add you.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="on_list" transfer-ownership="none">
            <doc xml:space="preserve">Is the remote user already on the buddy list?</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="auth_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">The callback called when the local user accepts</doc>
            <type name="AccountRequestAuthorizationCb"
                  c:type="PurpleAccountRequestAuthorizationCb"/>
          </parameter>
          <parameter name="deny_cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="7">
            <doc xml:space="preserve">The callback called when the local user rejects</doc>
            <type name="AccountRequestAuthorizationCb"
                  c:type="PurpleAccountRequestAuthorizationCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Data to be passed back to the above callbacks</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_change_password"
              c:identifier="purple_account_request_change_password">
        <doc xml:space="preserve">Requests information from the user to change the account's password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to change the password on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_change_user_info"
              c:identifier="purple_account_request_change_user_info">
        <doc xml:space="preserve">Requests information from the user to change the account's
user information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to change the user information on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_close_with_account"
              c:identifier="purple_account_request_close_with_account">
        <doc xml:space="preserve">Close account requests registered for the given PurpleAccount</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account for which requests should be closed</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_password"
              c:identifier="purple_account_request_password">
        <doc xml:space="preserve">Requests a password from the user for the account. Does not set the
account password on success; do that in ok_cb if desired.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to request the password for.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ok_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">The callback for the OK button.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="cancel_cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">The callback for the cancel button.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to be passed into callbacks.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bool" c:identifier="purple_account_set_bool">
        <doc xml:space="preserve">Sets a protocol-specific boolean setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buddy_icon_path"
              c:identifier="purple_account_set_buddy_icon_path">
        <doc xml:space="preserve">Sets the account's buddy icon path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon non-cached path.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_check_mail"
              c:identifier="purple_account_set_check_mail">
        <doc xml:space="preserve">Sets whether or not this account should check for mail.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if it should check for mail.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection"
              c:identifier="purple_account_set_connection">
        <doc xml:space="preserve">Sets the account's connection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="purple_account_set_enabled">
        <doc xml:space="preserve">Sets whether or not this account is enabled for the specified
UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if it is enabled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="purple_account_set_int">
        <doc xml:space="preserve">Sets a protocol-specific integer setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password" c:identifier="purple_account_set_password">
        <doc xml:space="preserve">Sets the account's password.

The password in the keyring might not be immediately updated, but the cached
version will be, and it is therefore safe to read the password back before
the callback has been triggered. One can also set a %NULL callback if
notification of saving to the keyring is not required.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">The password.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A callback for once the password is saved.</doc>
            <type name="KeyringSaveCallback"
                  c:type="PurpleKeyringSaveCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_privacy_type"
              c:identifier="purple_account_set_privacy_type">
        <doc xml:space="preserve">Sets the account's privacy type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="privacy_type" transfer-ownership="none">
            <doc xml:space="preserve">The privacy type.</doc>
            <type name="AccountPrivacyType" c:type="PurpleAccountPrivacyType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_private_alias"
              c:identifier="purple_account_set_private_alias">
        <doc xml:space="preserve">Sets the account's private alias.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The alias.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_id"
              c:identifier="purple_account_set_protocol_id">
        <doc xml:space="preserve">Sets the account's protocol ID.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="protocol_id" transfer-ownership="none">
            <doc xml:space="preserve">The protocol ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_info"
              c:identifier="purple_account_set_proxy_info">
        <doc xml:space="preserve">Sets the account's proxy information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_public_alias"
              c:identifier="purple_account_set_public_alias">
        <doc xml:space="preserve">Set a server-side (public) alias for this account.  The account
must already be connected.

Currently, the public alias is not stored locally, although this
may change in a later version.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The new public alias for this account or %NULL
             to unset the alias/nickname (or return it to
             a protocol-specific "default", like the username)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="success_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback which will be called if the alias
             is successfully set on the server (or %NULL).</doc>
            <type name="SetPublicAliasSuccessCallback"
                  c:type="PurpleSetPublicAliasSuccessCallback"/>
          </parameter>
          <parameter name="failure_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback which will be called if the alias
             is not successfully set on the server (or %NULL).</doc>
            <type name="SetPublicAliasFailureCallback"
                  c:type="PurpleSetPublicAliasFailureCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_register_callback"
              c:identifier="purple_account_set_register_callback">
        <doc xml:space="preserve">Sets the callback for successful registration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account for which this callback should be used</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The callback</doc>
            <type name="AccountRegistrationCb"
                  c:type="PurpleAccountRegistrationCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">The user data passed to the callback</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remember_password"
              c:identifier="purple_account_set_remember_password">
        <doc xml:space="preserve">Sets whether or not this account should save its password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if it should remember the password.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_silence_suppression"
              c:identifier="purple_account_set_silence_suppression">
        <doc xml:space="preserve">Sets whether silence suppression is used during voice call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if suppression should be used.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="purple_account_set_status"
              introspectable="0">
        <doc xml:space="preserve">Variadic version of purple_account_set_status_list().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <doc xml:space="preserve">The ID of the status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve">Whether @a status_id is to be activated (%TRUE) or
            deactivated (%FALSE).</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">A %NULL-terminated list of pairs of &lt;type&gt;const char *&lt;/type&gt;
            attribute name followed by &lt;type&gt;const char *&lt;/type&gt; attribute
            value for the status. (For example, one pair might be
            &lt;literal&gt;"message"&lt;/literal&gt; followed by
            &lt;literal&gt;"hello, talk to me!"&lt;/literal&gt;.)</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_list"
              c:identifier="purple_account_set_status_list"
              introspectable="0">
        <doc xml:space="preserve">Activates or deactivates a status.  All changes to the statuses of
an account go through this function or purple_account_set_status().

You can only deactivate an exclusive status by activating another exclusive
status.  So, if @a status_id is an exclusive status and @a active is @c
FALSE, this function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="status_id" transfer-ownership="none">
            <doc xml:space="preserve">The ID of the status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve">Whether @a status_id is to be activated (%TRUE) or
            deactivated (%FALSE).</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve">A list of &lt;type&gt;const char *&lt;/type&gt; attribute names followed by
            &lt;type&gt;const char *&lt;/type&gt; attribute values for the status.
            (For example, one pair might be &lt;literal&gt;"message"&lt;/literal&gt;
            followed by &lt;literal&gt;"hello, talk to me!"&lt;/literal&gt;.)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_types"
              c:identifier="purple_account_set_status_types"
              introspectable="0">
        <doc xml:space="preserve">Sets the account's status types.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="status_types" transfer-ownership="none">
            <doc xml:space="preserve">The list of status types.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="purple_account_set_string">
        <doc xml:space="preserve">Sets a protocol-specific string setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_bool" c:identifier="purple_account_set_ui_bool">
        <doc xml:space="preserve">Sets a UI-specific boolean setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_account_set_ui_data">
        <doc xml:space="preserve">Set the UI data associated with this account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this object.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_int" c:identifier="purple_account_set_ui_int">
        <doc xml:space="preserve">Sets a UI-specific integer setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_string" c:identifier="purple_account_set_ui_string">
        <doc xml:space="preserve">Sets a UI-specific string setting for an account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The UI name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The setting's value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_info" c:identifier="purple_account_set_user_info">
        <doc xml:space="preserve">Sets the account's user information</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="user_info" transfer-ownership="none">
            <doc xml:space="preserve">The user information.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username" c:identifier="purple_account_set_username">
        <doc xml:space="preserve">Sets the account's username.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_offline_message"
              c:identifier="purple_account_supports_offline_message">
        <doc xml:space="preserve">Whether the account supports sending offline messages to buddy.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="purple_account_unregister">
        <doc xml:space="preserve">Unregisters an account (deleting it from the server).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to unregister.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </instance-parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">Optional callback to be called when unregistration is
                   complete</doc>
            <type name="AccountUnregistrationCb"
                  c:type="PurpleAccountUnregistrationCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to the callback</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buddy-icon-path" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="check-mail" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connection" writable="1" transfer-ownership="none">
        <type name="Connection"/>
      </property>
      <property name="enabled" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="private-alias" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remember-password"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-info" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="username"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this account. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="AccountClass"
            c:type="PurpleAccountClass"
            glib:is-gtype-struct-for="Account">
      <doc xml:space="preserve">The base class for all #PurpleAccount's.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AccountOption" c:type="PurpleAccountOption" disguised="1">
      <doc xml:space="preserve">An option for an account.

This is set by protocols, and appears in the account settings
dialogs.</doc>
      <method name="add_list_item"
              c:identifier="purple_account_option_add_list_item">
        <doc xml:space="preserve">Adds an item to a list account option.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_account_option_destroy">
        <doc xml:space="preserve">Destroys an account option.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The option to destroy.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_bool"
              c:identifier="purple_account_option_get_default_bool">
        <doc xml:space="preserve">Returns the default boolean value for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default boolean value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_int"
              c:identifier="purple_account_option_get_default_int">
        <doc xml:space="preserve">Returns the default integer value for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default integer value.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_list_value"
              c:identifier="purple_account_option_get_default_list_value">
        <doc xml:space="preserve">Returns the default string value for a list account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default list string value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_string"
              c:identifier="purple_account_option_get_default_string">
        <doc xml:space="preserve">Returns the default string value for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default string value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_list"
              c:identifier="purple_account_option_get_list"
              introspectable="0">
        <doc xml:space="preserve">Returns the list values for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of #PurpleKeyValuePair, mapping the human-readable
             description of the value to the &lt;type&gt;(const char *)&lt;/type&gt; that
             should be passed to purple_account_set_string() to set the
             option.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pref_type"
              c:identifier="purple_account_option_get_pref_type">
        <doc xml:space="preserve">Returns the specified account option's type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The account option's type.</doc>
          <type name="PrefType" c:type="PurplePrefType"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting"
              c:identifier="purple_account_option_get_setting">
        <doc xml:space="preserve">Returns the name of an account option.  This corresponds to the @c pref_name
parameter supplied to purple_account_option_new() or one of the
type-specific constructors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The option's name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="purple_account_option_get_text">
        <doc xml:space="preserve">Returns the text for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The account option's text.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_bool"
              c:identifier="purple_account_option_set_default_bool">
        <doc xml:space="preserve">Sets the default boolean value for an account option.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The default boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_int"
              c:identifier="purple_account_option_set_default_int">
        <doc xml:space="preserve">Sets the default integer value for an account option.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The default integer value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_string"
              c:identifier="purple_account_option_set_default_string">
        <doc xml:space="preserve">Sets the default string value for an account option.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The default string value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_list"
              c:identifier="purple_account_option_set_list"
              introspectable="0">
        <doc xml:space="preserve">Sets the list values for an account option.

The list passed will be owned by the account option, and the
strings inside will be freed automatically.

The list is in key, value pairs. The key is the ID stored and used
internally, and the value is the label displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve">The default list value.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="string_get_hints"
              c:identifier="purple_account_option_string_get_hints"
              introspectable="0">
        <doc xml:space="preserve">Returns the list of hints for an account option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of hints, stored as strings.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="string_get_masked"
              c:identifier="purple_account_option_string_get_masked">
        <doc xml:space="preserve">Returns whether an option's value should be masked from view, like a
password.  If so, the UI might display each character of the option
as a '*' (for example).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the option's value should be obscured.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="const PurpleAccountOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="string_set_hints"
              c:identifier="purple_account_option_string_set_hints"
              introspectable="0">
        <doc xml:space="preserve">Sets the hint list for an account option.

The list passed will be owned by the account option, and the
strings inside will be freed automatically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve">The list of hints, stored as strings.</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="string_set_masked"
              c:identifier="purple_account_option_string_set_masked">
        <doc xml:space="preserve">Sets the masking for an account option. Setting this to %TRUE acts
as a hint to the UI that the option's value should be obscured from
view, like a password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">The account option.</doc>
            <type name="AccountOption" c:type="PurpleAccountOption*"/>
          </instance-parameter>
          <parameter name="masked" transfer-ownership="none">
            <doc xml:space="preserve">The masking.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <function name="bool_new"
                c:identifier="purple_account_option_bool_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new boolean account option.</doc>
        <return-value>
          <doc xml:space="preserve">The account option.</doc>
          <type name="AccountOption" c:type="PurpleAccountOption*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pref_name" transfer-ownership="none">
            <doc xml:space="preserve">The account preference name for the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="int_new"
                c:identifier="purple_account_option_int_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new integer account option.</doc>
        <return-value>
          <doc xml:space="preserve">The account option.</doc>
          <type name="AccountOption" c:type="PurpleAccountOption*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pref_name" transfer-ownership="none">
            <doc xml:space="preserve">The account preference name for the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_new"
                c:identifier="purple_account_option_list_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new list account option.

The list passed will be owned by the account option, and the
strings inside will be freed automatically.

The list is a list of #PurpleKeyValuePair items. The key is the label that
should be displayed to the user, and the &lt;type&gt;(const char *)&lt;/type&gt; value is
the internal ID that should be passed to purple_account_set_string() to
choose that value.</doc>
        <return-value>
          <doc xml:space="preserve">The account option.</doc>
          <type name="AccountOption" c:type="PurpleAccountOption*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pref_name" transfer-ownership="none">
            <doc xml:space="preserve">The account preference name for the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The key, value list.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="purple_account_option_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new account option.  If you know what @a type will be in advance,
consider using purple_account_option_bool_new(),
purple_account_option_int_new(), purple_account_option_string_new() or
purple_account_option_list_new() (as appropriate) instead.</doc>
        <return-value>
          <doc xml:space="preserve">The account option.</doc>
          <type name="AccountOption" c:type="PurpleAccountOption*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of option.</doc>
            <type name="PrefType" c:type="PurplePrefType"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pref_name" transfer-ownership="none">
            <doc xml:space="preserve">The account preference name for the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="string_new"
                c:identifier="purple_account_option_string_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new string account option.</doc>
        <return-value>
          <doc xml:space="preserve">The account option.</doc>
          <type name="AccountOption" c:type="PurpleAccountOption*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pref_name" transfer-ownership="none">
            <doc xml:space="preserve">The account preference name for the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="AccountPrivacyType"
                 glib:type-name="PurpleAccountPrivacyType"
                 glib:get-type="purple_account_privacy_type_get_type"
                 c:type="PurpleAccountPrivacyType">
      <doc xml:space="preserve">Privacy data types.</doc>
      <member name="allow_all"
              value="1"
              c:identifier="PURPLE_ACCOUNT_PRIVACY_ALLOW_ALL"
              glib:nick="allow-all">
      </member>
      <member name="deny_all"
              value="2"
              c:identifier="PURPLE_ACCOUNT_PRIVACY_DENY_ALL"
              glib:nick="deny-all">
      </member>
      <member name="allow_users"
              value="3"
              c:identifier="PURPLE_ACCOUNT_PRIVACY_ALLOW_USERS"
              glib:nick="allow-users">
      </member>
      <member name="deny_users"
              value="4"
              c:identifier="PURPLE_ACCOUNT_PRIVACY_DENY_USERS"
              glib:nick="deny-users">
      </member>
      <member name="allow_buddylist"
              value="5"
              c:identifier="PURPLE_ACCOUNT_PRIVACY_ALLOW_BUDDYLIST"
              glib:nick="allow-buddylist">
      </member>
    </enumeration>
    <callback name="AccountRegistrationCb"
              c:type="PurpleAccountRegistrationCb">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="succeeded" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AccountRequestAuthorizationCb"
              c:type="PurpleAccountRequestAuthorizationCb">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="AccountRequestResponse"
                 glib:type-name="PurpleAccountRequestResponse"
                 glib:get-type="purple_account_request_response_get_type"
                 c:type="PurpleAccountRequestResponse">
      <doc xml:space="preserve">Account request response types</doc>
      <member name="ignore"
              value="-2"
              c:identifier="PURPLE_ACCOUNT_RESPONSE_IGNORE"
              glib:nick="ignore">
      </member>
      <member name="deny"
              value="-1"
              c:identifier="PURPLE_ACCOUNT_RESPONSE_DENY"
              glib:nick="deny">
      </member>
      <member name="pass"
              value="0"
              c:identifier="PURPLE_ACCOUNT_RESPONSE_PASS"
              glib:nick="pass">
      </member>
      <member name="accept"
              value="1"
              c:identifier="PURPLE_ACCOUNT_RESPONSE_ACCEPT"
              glib:nick="accept">
      </member>
    </enumeration>
    <enumeration name="AccountRequestType"
                 glib:type-name="PurpleAccountRequestType"
                 glib:get-type="purple_account_request_type_get_type"
                 c:type="PurpleAccountRequestType">
      <doc xml:space="preserve">Account request types.</doc>
      <member name="authorization"
              value="0"
              c:identifier="PURPLE_ACCOUNT_REQUEST_AUTHORIZATION"
              glib:nick="authorization">
        <doc xml:space="preserve">Account authorization request</doc>
      </member>
    </enumeration>
    <callback name="AccountUnregistrationCb"
              c:type="PurpleAccountUnregistrationCb">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="succeeded" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AccountUserSplit"
            c:type="PurpleAccountUserSplit"
            disguised="1">
      <doc xml:space="preserve">A username split.

This is used by some protocols to separate the fields of the username
into more human-readable components.</doc>
      <method name="destroy" c:identifier="purple_account_user_split_destroy">
        <doc xml:space="preserve">Destroys an account username split.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The split to destroy.</doc>
            <type name="AccountUserSplit" c:type="PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="purple_account_user_split_get_default_value">
        <doc xml:space="preserve">Returns the default string value for an account split.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The default string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit"
                  c:type="const PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reverse"
              c:identifier="purple_account_user_split_get_reverse">
        <doc xml:space="preserve">Returns the 'reverse' value for an account split.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The 'reverse' value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit"
                  c:type="const PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_separator"
              c:identifier="purple_account_user_split_get_separator">
        <doc xml:space="preserve">Returns the field separator for an account split.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The field separator.</doc>
          <type name="gchar" c:type="char"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit"
                  c:type="const PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="purple_account_user_split_get_text">
        <doc xml:space="preserve">Returns the text for an account username split.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The account username split's text.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit"
                  c:type="const PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_constant"
              c:identifier="purple_account_user_split_is_constant">
        <doc xml:space="preserve">Returns the constant parameter for an account split.

When split is constant, it does not need to be displayed
in configuration dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if the split is constant.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit"
                  c:type="const PurpleAccountUserSplit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_constant"
              c:identifier="purple_account_user_split_set_constant">
        <doc xml:space="preserve">Sets the constant parameter of account split.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit" c:type="PurpleAccountUserSplit*"/>
          </instance-parameter>
          <parameter name="constant" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE, if the split is a constant part.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reverse"
              c:identifier="purple_account_user_split_set_reverse">
        <doc xml:space="preserve">Sets the 'reverse' value for an account split.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="split" transfer-ownership="none">
            <doc xml:space="preserve">The account username split.</doc>
            <type name="AccountUserSplit" c:type="PurpleAccountUserSplit*"/>
          </instance-parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve">The 'reverse' value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_account_user_split_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new account username split.</doc>
        <return-value>
          <doc xml:space="preserve">The new user split.</doc>
          <type name="AccountUserSplit" c:type="PurpleAccountUserSplit*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The text of the option.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">The default value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="sep" transfer-ownership="none">
            <doc xml:space="preserve">The field separator.</doc>
            <type name="gchar" c:type="char"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="BlistNode"
           c:symbol-prefix="blist_node"
           c:type="PurpleBlistNode"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleBlistNode"
           glib:get-type="purple_blist_node_get_type"
           glib:type-struct="BlistNodeClass">
      <doc xml:space="preserve">A Buddy list node.  This can represent a group, a buddy, or anything else.
This is a base class for PurpleBuddy, PurpleContact, PurpleGroup, and for
anything else that wants to put itself in the buddy list.</doc>
      <method name="get_bool" c:identifier="purple_blist_node_get_bool">
        <doc xml:space="preserve">Retrieves a named boolean setting from a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value, or FALSE if there is no setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to retrieve the data from</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier of the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extended_menu"
              c:identifier="purple_blist_node_get_extended_menu"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the extended menu items for a buddy list node.</doc>
        <return-value>
          <doc xml:space="preserve">A list of PurpleMenuAction items, as harvested by the
         blist-node-extended-menu signal.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">The blist node for which to obtain the extended menu items.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_child"
              c:identifier="purple_blist_node_get_first_child"
              introspectable="0">
        <doc xml:space="preserve">Returns the the first child node of a given node.

See purple_blist_node_get_parent(), purple_blist_node_get_sibling_next(),
    purple_blist_node_get_sibling_prev(), purple_blist_node_next().</doc>
        <return-value>
          <doc xml:space="preserve">The child node.</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="purple_blist_node_get_int">
        <doc xml:space="preserve">Retrieves a named integer setting from a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value, or 0 if there is no setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to retrieve the data from</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier of the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="purple_blist_node_get_parent"
              introspectable="0">
        <doc xml:space="preserve">Returns the parent node of a given node.

See purple_blist_node_get_first_child(), purple_blist_node_get_sibling_next(),
    purple_blist_node_get_sibling_prev(), purple_blist_node_next().</doc>
        <return-value>
          <doc xml:space="preserve">The parent node.</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settings"
              c:identifier="purple_blist_node_get_settings"
              introspectable="0">
        <doc xml:space="preserve">Returns a node's settings</doc>
        <return-value>
          <doc xml:space="preserve">The hash table with the node's settings</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to from which to get settings</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_next"
              c:identifier="purple_blist_node_get_sibling_next"
              introspectable="0">
        <doc xml:space="preserve">Returns the sibling node of a given node.

See purple_blist_node_get_parent(), purple_blist_node_get_first_child(),
    purple_blist_node_get_sibling_prev(), purple_blist_node_next().</doc>
        <return-value>
          <doc xml:space="preserve">The sibling node.</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_prev"
              c:identifier="purple_blist_node_get_sibling_prev"
              introspectable="0">
        <doc xml:space="preserve">Returns the previous sibling node of a given node.

See purple_blist_node_get_parent(), purple_blist_node_get_first_child(),
    purple_blist_node_get_sibling_next(), purple_blist_node_next().</doc>
        <return-value>
          <doc xml:space="preserve">The sibling node.</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="purple_blist_node_get_string">
        <doc xml:space="preserve">Retrieves a named string setting from a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value, or NULL if there is no setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to retrieve the data from</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier of the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_blist_node_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Returns the UI data of a given node.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node.</doc>
            <type name="BlistNode" c:type="const PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_setting" c:identifier="purple_blist_node_has_setting">
        <doc xml:space="preserve">Checks whether a named setting exists for a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if a value exists, or FALSE if there is no setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to check from which to check settings</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier of the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_transient"
              c:identifier="purple_blist_node_is_transient">
        <doc xml:space="preserve">Gets whether the node should be saved with the buddy list or not</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the node should NOT be saved, FALSE if node should be saved</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next"
              c:identifier="purple_blist_node_next"
              introspectable="0">
        <doc xml:space="preserve">Returns the next node of a given node. This function is to be used to iterate
over the tree returned by purple_blist_get_buddy_list.

See purple_blist_node_get_parent(), purple_blist_node_get_first_child(),
  purple_blist_node_get_sibling_next(), purple_blist_node_get_sibling_prev().</doc>
        <return-value>
          <doc xml:space="preserve">The next node</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="offline" transfer-ownership="none">
            <doc xml:space="preserve">Whether to include nodes for offline accounts</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_setting"
              c:identifier="purple_blist_node_remove_setting">
        <doc xml:space="preserve">Removes a named setting from a blist node</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node from which to remove the setting</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The name of the setting</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bool" c:identifier="purple_blist_node_set_bool">
        <doc xml:space="preserve">Associates a boolean with a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to associate the data with</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier for the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="purple_blist_node_set_int">
        <doc xml:space="preserve">Associates an integer with a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to associate the data with</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier for the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="purple_blist_node_set_string">
        <doc xml:space="preserve">Associates a string with a node in the buddy list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node to associate the data with</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The identifier for the data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient"
              c:identifier="purple_blist_node_set_transient">
        <doc xml:space="preserve">Sets whether the node should be saved with the buddy list or not</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="transient" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if the node should NOT be saved, FALSE if node should
                 be saved</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_blist_node_set_ui_data">
        <doc xml:space="preserve">Sets the UI data of a given node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">The UI data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="transient" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="prev">
        <doc xml:space="preserve">The sibling before this buddy.</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </field>
      <field name="next">
        <doc xml:space="preserve">The sibling after this buddy.</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </field>
      <field name="parent">
        <doc xml:space="preserve">The parent of this node.</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </field>
      <field name="child">
        <doc xml:space="preserve">The child of this node.</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this node. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="BlistNodeClass"
            c:type="PurpleBlistNodeClass"
            glib:is-gtype-struct-for="BlistNode">
      <doc xml:space="preserve">The base class for all #PurpleBlistNode's.</doc>
      <field name="gparent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="BlistUiOps"
            c:type="PurpleBlistUiOps"
            glib:type-name="PurpleBlistUiOps"
            glib:get-type="purple_blist_ui_ops_get_type"
            c:symbol-prefix="blist_ui_ops">
      <doc xml:space="preserve">Buddy list UI operations.

Any UI representing a buddy list must assign a filled-out PurpleBlistUiOps
structure to the buddy list core.</doc>
      <field name="new_list">
        <callback name="new_list">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_node">
        <callback name="new_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="node" transfer-ownership="none">
              <type name="BlistNode" c:type="PurpleBlistNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="BlistNode" c:type="PurpleBlistNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="BlistNode" c:type="PurpleBlistNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_visible">
        <callback name="set_visible">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="BuddyList" c:type="PurpleBuddyList*"/>
            </parameter>
            <parameter name="show" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_add_buddy">
        <callback name="request_add_buddy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
            <parameter name="username" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="alias" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_add_chat">
        <callback name="request_add_chat">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="Group" c:type="PurpleGroup*"/>
            </parameter>
            <parameter name="alias" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_add_group">
        <callback name="request_add_group">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="save_node">
        <callback name="save_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="node" transfer-ownership="none">
              <type name="BlistNode" c:type="PurpleBlistNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_node">
        <callback name="remove_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="node" transfer-ownership="none">
              <type name="BlistNode" c:type="PurpleBlistNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_account">
        <callback name="save_account">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Buddy"
           c:symbol-prefix="buddy"
           c:type="PurpleBuddy"
           parent="BlistNode"
           glib:type-name="PurpleBuddy"
           glib:get-type="purple_buddy_get_type"
           glib:type-struct="BuddyClass">
      <doc xml:space="preserve">A buddy on the buddy list.</doc>
      <constructor name="new" c:identifier="purple_buddy_new">
        <doc xml:space="preserve">Creates a new buddy.

This function only creates the #PurpleBuddy. Use purple_blist_add_buddy()
to add the buddy to the list and purple_account_add_buddy() to sync up
with the server.

See purple_account_add_buddy(), purple_blist_add_buddy().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated buddy</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account this buddy will get added to</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the new buddy</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The alias of the new buddy (or NULL if unaliased)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="icons_find" c:identifier="purple_buddy_icons_find">
        <doc xml:space="preserve">Returns the buddy icon information for a user.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The icon (with a reference for the caller) if found, or %NULL if
        not found.</doc>
          <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account the user is on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_find_account_icon"
                c:identifier="purple_buddy_icons_find_account_icon"
                introspectable="0">
        <doc xml:space="preserve">Returns the buddy icon image for an account.

The caller owns a reference to the image, and must dereference
the image with g_object_unref() for it to be freed.

This function deals with loading the icon from the cache, if
needed, so it should be called in any case where you want the
appropriate icon.</doc>
        <return-value>
          <doc xml:space="preserve">The account's buddy icon image.</doc>
          <type c:type="PurpleImage*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_get_account_icon_timestamp"
                c:identifier="purple_buddy_icons_get_account_icon_timestamp">
        <doc xml:space="preserve">Returns the timestamp of when the icon was set.

This is intended for use in protocols that require a timestamp for
buddy icon update reasons.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The time the icon was set, or 0 if an error occurred.</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_get_cache_dir"
                c:identifier="purple_buddy_icons_get_cache_dir">
        <doc xml:space="preserve">Returns the directory used to store buddy icon cache files.

The default directory is PURPLEDIR/icons, unless otherwise specified
by purple_buddy_icons_set_cache_dir().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The directory to store buddy icon cache files to.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
      </function>
      <function name="icons_get_handle"
                c:identifier="purple_buddy_icons_get_handle"
                introspectable="0">
        <doc xml:space="preserve">Returns the buddy icon subsystem handle.</doc>
        <return-value>
          <doc xml:space="preserve">The subsystem handle.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="icons_init" c:identifier="purple_buddy_icons_init">
        <doc xml:space="preserve">Initializes the buddy icon subsystem.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="icons_is_caching"
                c:identifier="purple_buddy_icons_is_caching">
        <doc xml:space="preserve">Returns whether or not buddy icon caching should be enabled.

The default is TRUE, unless otherwise specified by
purple_buddy_icons_set_caching().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if buddy icon caching is enabled, or FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="icons_node_find_custom_icon"
                c:identifier="purple_buddy_icons_node_find_custom_icon"
                introspectable="0">
        <doc xml:space="preserve">Returns the custom buddy icon image for a blist node.

The caller owns a reference to the image, and must dereference
the image with g_object_unref() for it to be freed.

This function deals with loading the icon from the cache, if
needed, so it should be called in any case where you want the
appropriate icon.</doc>
        <return-value>
          <doc xml:space="preserve">The custom buddy icon.</doc>
          <type c:type="PurpleImage*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_node_has_custom_icon"
                c:identifier="purple_buddy_icons_node_has_custom_icon">
        <doc xml:space="preserve">Returns a boolean indicating if a given blist node has a custom buddy icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A boolean indicating if @node has a custom buddy icon.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The blist node.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_node_set_custom_icon"
                c:identifier="purple_buddy_icons_node_set_custom_icon"
                introspectable="0">
        <doc xml:space="preserve">Sets a custom buddy icon for a blist node.

This function will deal with saving a record of the icon, caching the data,
etc.</doc>
        <return-value>
          <doc xml:space="preserve">The icon that was set. The caller does NOT own a reference to this,
        and must call g_object_ref() if it wants one.</doc>
          <type c:type="PurpleImage*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The blist node for which to set a custom icon.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
          <parameter name="icon_data" transfer-ownership="none">
            <doc xml:space="preserve">The image data of the icon, which the buddy icon code will
                 free. Use NULL to unset the icon.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="icon_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data in @icon_data.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_node_set_custom_icon_from_file"
                c:identifier="purple_buddy_icons_node_set_custom_icon_from_file"
                introspectable="0">
        <doc xml:space="preserve">Sets a custom buddy icon for a blist node.

Convenience wrapper around purple_buddy_icons_node_set_custom_icon.
See purple_buddy_icons_node_set_custom_icon().</doc>
        <return-value>
          <doc xml:space="preserve">The icon that was set. The caller does NOT own a reference to this,
        and must call g_object_ref() if it wants one.</doc>
          <type c:type="PurpleImage*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The blist node for which to set a custom icon.</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The path to the icon to set for the blist node. Use NULL
                 to unset the custom icon.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_set_account_icon"
                c:identifier="purple_buddy_icons_set_account_icon"
                introspectable="0">
        <doc xml:space="preserve">Sets a buddy icon for an account.

This function will deal with saving a record of the icon,
caching the data, etc.</doc>
        <return-value>
          <doc xml:space="preserve">The icon that was set.  The caller does NOT own
        a reference to this, and must call g_object_ref()
        if it wants one.</doc>
          <type c:type="PurpleImage*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account for which to set a custom icon.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="icon_data" transfer-ownership="none">
            <doc xml:space="preserve">The image data of the icon, which the
                 buddy icon code will free.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="icon_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data in @icon_data.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_set_cache_dir"
                c:identifier="purple_buddy_icons_set_cache_dir">
        <doc xml:space="preserve">Sets the directory used to store buddy icon cache files.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cache_dir" transfer-ownership="none">
            <doc xml:space="preserve">The directory to store buddy icon cache files to.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_set_caching"
                c:identifier="purple_buddy_icons_set_caching">
        <doc xml:space="preserve">Sets whether or not buddy icon caching is enabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="caching" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if buddy icon caching should be enabled, or
               FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_set_for_user"
                c:identifier="purple_buddy_icons_set_for_user">
        <doc xml:space="preserve">Sets a buddy icon for a user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account the user is on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username of the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon_data" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon data, which the buddy icon code
                 takes ownership of and will free.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="icon_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the icon data.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve">A protocol checksum from the protocol or %NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="icons_uninit" c:identifier="purple_buddy_icons_uninit">
        <doc xml:space="preserve">Uninitializes the buddy icon subsystem.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="get_account"
              c:identifier="purple_buddy_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns a buddy's account.</doc>
        <return-value>
          <doc xml:space="preserve">The account</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alias" c:identifier="purple_buddy_get_alias">
        <doc xml:space="preserve">Returns the correct name to display for a buddy. In order of precedence:
the buddy's local alias; the buddy's server alias; the buddy's contact alias;
the buddy's user name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The appropriate name or alias, or NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose alias will be returned.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alias_only" c:identifier="purple_buddy_get_alias_only">
        <doc xml:space="preserve">Returns the alias of a buddy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The alias (if set), server alias (if set),
               or NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose alias will be returned.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact"
              c:identifier="purple_buddy_get_contact"
              introspectable="0">
        <doc xml:space="preserve">Returns a buddy's contact.</doc>
        <return-value>
          <doc xml:space="preserve">The buddy's contact.</doc>
          <type name="Contact" c:type="PurpleContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_alias"
              c:identifier="purple_buddy_get_contact_alias">
        <doc xml:space="preserve">Returns the correct name to display for a buddy, taking the contact alias
into account. In order of precedence: the buddy's alias; the buddy's
contact alias; the buddy's server alias; the buddy's user name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The appropriate name or alias, or NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose alias will be returned</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="purple_buddy_get_group"
              introspectable="0">
        <doc xml:space="preserve">Returns the group of which the buddy is a member.</doc>
        <return-value>
          <doc xml:space="preserve">The group or NULL if the buddy is not in a group</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="purple_buddy_get_icon">
        <doc xml:space="preserve">Returns a buddy's icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The buddy icon.</doc>
          <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_alias"
              c:identifier="purple_buddy_get_local_alias">
        <doc xml:space="preserve">Returns the local alias for the buddy, or %NULL if none exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The local alias for the buddy</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_caps" c:identifier="purple_buddy_get_media_caps">
        <doc xml:space="preserve">Gets the media caps from a buddy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The media caps.</doc>
          <type name="MediaCaps" c:type="PurpleMediaCaps"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_buddy_get_name">
        <doc xml:space="preserve">Returns a buddy's name</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presence"
              c:identifier="purple_buddy_get_presence"
              introspectable="0">
        <doc xml:space="preserve">Returns a buddy's presence.</doc>
        <return-value>
          <doc xml:space="preserve">The buddy's presence.</doc>
          <type c:type="PurplePresence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_buddy_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Returns a buddy's protocol-specific data.

This should only be called from the associated protocol.

See purple_buddy_set_protocol_data().</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server_alias"
              c:identifier="purple_buddy_get_server_alias">
        <doc xml:space="preserve">Gets the server alias for a buddy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The server alias, or NULL if it is not set.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose server alias will be returned</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="icons_get_checksum_for_user"
              c:identifier="purple_buddy_icons_get_checksum_for_user">
        <doc xml:space="preserve">Returns the checksum for the buddy icon of a specified buddy.

This avoids loading the icon image data from the cache if it's
not already loaded for some other reason.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The checksum.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="purple_buddy_set_icon">
        <doc xml:space="preserve">Sets a buddy's icon.

This should only be called from within Purple. You probably want to
call purple_buddy_icon_set_data().

See purple_buddy_icon_set_data().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_alias"
              c:identifier="purple_buddy_set_local_alias">
        <doc xml:space="preserve">Sets the local alias for the buddy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The local alias for the buddy</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_caps" c:identifier="purple_buddy_set_media_caps">
        <doc xml:space="preserve">Sets the media caps for a buddy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleBuddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="media_caps" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleMediaCaps.</doc>
            <type name="MediaCaps" c:type="PurpleMediaCaps"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="purple_buddy_set_name">
        <doc xml:space="preserve">Sets a buddy's name</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_buddy_set_protocol_data">
        <doc xml:space="preserve">Sets a buddy's protocol-specific data.

This should only be called from the associated protocol.

See purple_buddy_get_protocol_data().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_server_alias"
              c:identifier="purple_buddy_set_server_alias">
        <doc xml:space="preserve">Sets the server alias for a buddy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The server alias to be set.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_status"
              c:identifier="purple_buddy_update_status"
              introspectable="0">
        <doc xml:space="preserve">Updates a buddy's status.

This should only be called from within Purple.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose status has changed.</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </instance-parameter>
          <parameter name="old_status" transfer-ownership="none">
            <doc xml:space="preserve">The status from which we are changing.</doc>
            <type c:type="PurpleStatus*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="icon" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="local-alias"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-caps" writable="1" transfer-ownership="none">
        <type name="MediaCaps"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="presence" introspectable="0" transfer-ownership="none">
        <type/>
      </property>
      <property name="server-alias" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="node">
        <type name="BlistNode" c:type="PurpleBlistNode"/>
      </field>
    </class>
    <record name="BuddyClass"
            c:type="PurpleBuddyClass"
            glib:is-gtype-struct-for="Buddy">
      <doc xml:space="preserve">The base class for all #PurpleBuddy's.</doc>
      <field name="node_class">
        <type name="BlistNodeClass" c:type="PurpleBlistNodeClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="BuddyIcon"
            c:type="PurpleBuddyIcon"
            glib:type-name="PurpleBuddyIcon"
            glib:get-type="purple_buddy_icon_get_type"
            c:symbol-prefix="buddy_icon">
      <doc xml:space="preserve">An opaque structure representing a buddy icon for a particular user on a
particular #PurpleAccount.  Instances are reference-counted; use
purple_buddy_icon_ref() and purple_buddy_icon_unref() to take and release
references.</doc>
      <constructor name="new" c:identifier="purple_buddy_icon_new">
        <doc xml:space="preserve">Creates a new buddy icon structure and populates it.

If an icon for this account+username already exists, you'll get a reference
to that structure, which will have been updated with the data supplied.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The buddy icon structure, with a reference for the caller.</doc>
          <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account the user is on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username the icon belongs to.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon_data" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon data.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="icon_len" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon length.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve">A protocol checksum from the protocol or %NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_account"
              c:identifier="purple_buddy_icon_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns the buddy icon's account.</doc>
        <return-value>
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="const PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_checksum"
              c:identifier="purple_buddy_icon_get_checksum">
        <doc xml:space="preserve">Returns the buddy icon's checksum.

This function is really only for protocol use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The checksum.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="const PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="purple_buddy_icon_get_data"
              introspectable="0">
        <doc xml:space="preserve">Returns the buddy icon's data.</doc>
        <return-value>
          <doc xml:space="preserve">A pointer to the icon data.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="const PurpleBuddyIcon*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">If not %NULL, the length of the icon data returned will be
            set in the location pointed to by this.</doc>
            <type name="gulong" c:type="size_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extension"
              c:identifier="purple_buddy_icon_get_extension">
        <doc xml:space="preserve">Returns an extension corresponding to the buddy icon's file type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The icon's extension, "icon" if unknown, or %NULL if
        the image data has disappeared.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="const PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_path"
              c:identifier="purple_buddy_icon_get_full_path">
        <doc xml:space="preserve">Returns a full path to an icon.

If the icon has data and the file exists in the cache, this will return
a full path to the cache file.

In general, it is not appropriate to be poking in the icon cache
directly.  If you find yourself wanting to use this function, think
very long and hard about it, and then don't.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A full path to the file, or %NULL under various conditions.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="purple_buddy_icon_get_username">
        <doc xml:space="preserve">Returns the buddy icon's username.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The username.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="const PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="purple_buddy_icon_ref">
        <doc xml:space="preserve">Increments the reference count on a buddy icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@icon.</doc>
          <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="purple_buddy_icon_set_data">
        <doc xml:space="preserve">Sets the buddy icon's data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon data, which the buddy icon code
            takes ownership of and will free.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data in @a data.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve">A protocol checksum from the protocol or %NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="purple_buddy_icon_unref">
        <doc xml:space="preserve">Decrements the reference count on a buddy icon.

If the reference count reaches 0, the icon will be destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="purple_buddy_icon_update">
        <doc xml:space="preserve">Updates every instance of this icon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">The buddy icon.</doc>
            <type name="BuddyIcon" c:type="PurpleBuddyIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="BuddyIconSpec"
            c:type="PurpleBuddyIconSpec"
            glib:type-name="PurpleBuddyIconSpec"
            glib:get-type="purple_buddy_icon_spec_get_type"
            c:symbol-prefix="buddy_icon_spec">
      <doc xml:space="preserve">A description of a Buddy Icon specification.  This tells Purple what kind of
image file it should give a protocol, and what kind of image file it should
expect back. Dimensions less than 1 should be ignored and the image not
scaled.</doc>
      <field name="format" writable="1">
        <doc xml:space="preserve">This is a comma-delimited list of image formats or %NULL if icons
         are not supported.  Neither the core nor the protocol will actually
         check to see if the data it's given matches this; it's entirely up
         to the UI to do what it wants</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="min_width" writable="1">
        <doc xml:space="preserve">Minimum width of this icon</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="min_height" writable="1">
        <doc xml:space="preserve">Minimum height of this icon</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="max_width" writable="1">
        <doc xml:space="preserve">Maximum width of this icon</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="max_height" writable="1">
        <doc xml:space="preserve">Maximum height of this icon</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="max_filesize" writable="1">
        <doc xml:space="preserve">Maximum size in bytes</doc>
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="scale_rules" writable="1">
        <doc xml:space="preserve">How to stretch this icon</doc>
        <type name="IconScaleRules" c:type="PurpleIconScaleRules"/>
      </field>
      <constructor name="new" c:identifier="purple_buddy_icon_spec_new">
        <doc xml:space="preserve">Creates a new #PurpleBuddyIconSpec instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new buddy icon spec.</doc>
          <type name="BuddyIconSpec" c:type="PurpleBuddyIconSpec*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">A comma-delimited list of image formats or %NULL if
                icons are not supported</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="min_width" transfer-ownership="none">
            <doc xml:space="preserve">Minimum width of an icon</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="min_height" transfer-ownership="none">
            <doc xml:space="preserve">Minimum height of an icon</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <doc xml:space="preserve">Maximum width of an icon</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <doc xml:space="preserve">Maximum height of an icon</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="max_filesize" transfer-ownership="none">
            <doc xml:space="preserve">Maximum file size in bytes</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="scale_rules" transfer-ownership="none">
            <doc xml:space="preserve">How to stretch this icon</doc>
            <type name="IconScaleRules" c:type="PurpleIconScaleRules"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_scaled_size"
              c:identifier="purple_buddy_icon_spec_get_scaled_size">
        <doc xml:space="preserve">Gets display size for a buddy icon</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="spec" transfer-ownership="none">
            <type name="BuddyIconSpec" c:type="PurpleBuddyIconSpec*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="BuddyList"
           c:symbol-prefix="buddy_list"
           c:type="PurpleBuddyList"
           parent="GObject.Object"
           glib:type-name="PurpleBuddyList"
           glib:get-type="purple_buddy_list_get_type"
           glib:type-struct="BuddyListClass">
      <doc xml:space="preserve">The Buddy List</doc>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="root">
        <doc xml:space="preserve">The first node in the buddy list</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this buddy list. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="BuddyListClass"
            c:type="PurpleBuddyListClass"
            glib:is-gtype-struct-for="BuddyList">
      <doc xml:space="preserve">The base class for all #PurpleBuddyList's.</doc>
      <field name="gparent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Chat"
           c:symbol-prefix="chat"
           c:type="PurpleChat"
           parent="BlistNode"
           glib:type-name="PurpleChat"
           glib:get-type="purple_chat_get_type"
           glib:type-struct="ChatClass">
      <doc xml:space="preserve">A chat on the buddy list.</doc>
      <constructor name="new" c:identifier="purple_chat_new">
        <doc xml:space="preserve">Creates a new chat for the buddy list</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated chat</doc>
          <type name="Chat" c:type="PurpleChat*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account this chat will get added to</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The alias of the new chat</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="components" transfer-ownership="none">
            <doc xml:space="preserve">The info the protocol needs to join the chat.  The
                  hash function should be g_str_hash() and the
                  equal function should be g_str_equal().</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_account"
              c:identifier="purple_chat_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns the account the chat belongs to.</doc>
        <return-value>
          <doc xml:space="preserve">The account the chat belongs to.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat.</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_components" c:identifier="purple_chat_get_components">
        <doc xml:space="preserve">Get a hashtable containing information about a chat.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The hashtable.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat.</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="purple_chat_get_group"
              introspectable="0">
        <doc xml:space="preserve">Returns the group of which the chat is a member.</doc>
        <return-value>
          <doc xml:space="preserve">The parent group, or %NULL if the chat is not in a group.</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat.</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_chat_get_name">
        <doc xml:space="preserve">Returns the correct name to display for a blist chat.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The alias (if set), or first component value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat whose name will be returned.</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name_only" c:identifier="purple_chat_get_name_only">
        <doc xml:space="preserve">Returns the name of the chat</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The first component value.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat whose name will be returned.</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alias" c:identifier="purple_chat_set_alias">
        <doc xml:space="preserve">Sets the alias for a blist chat.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chat" transfer-ownership="none">
            <doc xml:space="preserve">The chat</doc>
            <type name="Chat" c:type="PurpleChat*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The alias</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="alias"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="components"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="node">
        <type name="BlistNode" c:type="PurpleBlistNode"/>
      </field>
    </class>
    <record name="ChatClass"
            c:type="PurpleChatClass"
            glib:is-gtype-struct-for="Chat">
      <doc xml:space="preserve">The base class for all #PurpleChat's.</doc>
      <field name="node_class">
        <type name="BlistNodeClass" c:type="PurpleBlistNodeClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="ChatUserFlags"
              glib:type-name="PurpleChatUserFlags"
              glib:get-type="purple_chat_user_flags_get_type"
              c:type="PurpleChatUserFlags">
      <member name="none"
              value="0"
              c:identifier="PURPLE_CHAT_USER_NONE"
              glib:nick="none">
      </member>
      <member name="voice"
              value="1"
              c:identifier="PURPLE_CHAT_USER_VOICE"
              glib:nick="voice">
      </member>
      <member name="halfop"
              value="2"
              c:identifier="PURPLE_CHAT_USER_HALFOP"
              glib:nick="halfop">
      </member>
      <member name="op"
              value="4"
              c:identifier="PURPLE_CHAT_USER_OP"
              glib:nick="op">
      </member>
      <member name="founder"
              value="8"
              c:identifier="PURPLE_CHAT_USER_FOUNDER"
              glib:nick="founder">
      </member>
      <member name="typing"
              value="16"
              c:identifier="PURPLE_CHAT_USER_TYPING"
              glib:nick="typing">
      </member>
      <member name="away"
              value="32"
              c:identifier="PURPLE_CHAT_USER_AWAY"
              glib:nick="away">
      </member>
    </bitfield>
    <class name="Cipher"
           c:symbol-prefix="cipher"
           c:type="PurpleCipher"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleCipher"
           glib:get-type="purple_cipher_get_type"
           glib:type-struct="CipherClass">
      <doc xml:space="preserve">Purple Cipher is an opaque data structure and should not be used directly.</doc>
      <virtual-method name="append" invoker="append">
        <doc xml:space="preserve">Appends data to the cipher context</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to append</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decrypt" invoker="decrypt">
        <doc xml:space="preserve">Decrypts data using the cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
          <type name="glong" c:type="ssize_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">The data to encrypt</doc>
            <type name="guint8" c:type="const guchar"/>
          </parameter>
          <parameter name="in_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the returned value</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">The output buffer</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="out_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the output buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="digest" invoker="digest">
        <doc xml:space="preserve">Digests a cipher context</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="digest" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the digest</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="encrypt" invoker="encrypt">
        <doc xml:space="preserve">Encrypts data using the cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
          <type name="glong" c:type="ssize_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">The data to encrypt</doc>
            <type name="guint8" c:type="const guchar"/>
          </parameter>
          <parameter name="in_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">The output buffer</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="out_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the output buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_batch_mode" invoker="get_batch_mode">
        <doc xml:space="preserve">Gets the batch mode of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The batch mode under which the cipher is operating</doc>
          <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose batch mode to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_block_size" invoker="get_block_size">
        <doc xml:space="preserve">Gets the block size of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The block size of the cipher</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose block size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_digest_size" invoker="get_digest_size">
        <doc xml:space="preserve">Gets the digest size of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The digest size of the cipher</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose digest size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_key_size" invoker="get_key_size">
        <doc xml:space="preserve">Gets the size of the key if the cipher supports it</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The size of the key</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose key size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset" invoker="reset">
        <doc xml:space="preserve">Resets a cipher to it's default value
Note: If you have set an IV you will have to set it after resetting</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset_state" invoker="reset_state">
        <doc xml:space="preserve">Resets a cipher state to it's default value, but doesn't touch stateless
configuration.

That means, IV and digest will be wiped out, but keys, ops or salt
will remain untouched.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_batch_mode" invoker="set_batch_mode">
        <doc xml:space="preserve">Sets the batch mode of a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose batch mode to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">The batch mode under which the cipher should operate</doc>
            <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_iv" invoker="set_iv">
        <doc xml:space="preserve">Sets the initialization vector for a cipher
Note: This should only be called right after a cipher is created or reset</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="iv" transfer-ownership="none">
            <doc xml:space="preserve">The initialization vector to set</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The len of the IV</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_key" invoker="set_key">
        <doc xml:space="preserve">Sets the key on a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose key to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The size of the key</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_salt" invoker="set_salt">
        <doc xml:space="preserve">Sets the salt on a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose salt to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="salt" transfer-ownership="none">
            <doc xml:space="preserve">The salt</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the salt</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append" c:identifier="purple_cipher_append">
        <doc xml:space="preserve">Appends data to the cipher context</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to append</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt" c:identifier="purple_cipher_decrypt">
        <doc xml:space="preserve">Decrypts data using the cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
          <type name="glong" c:type="ssize_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">The data to encrypt</doc>
            <type name="guint8" c:type="const guchar"/>
          </parameter>
          <parameter name="in_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the returned value</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">The output buffer</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="out_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the output buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="digest" c:identifier="purple_cipher_digest">
        <doc xml:space="preserve">Digests a cipher context</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="digest" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the digest</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="digest_to_str" c:identifier="purple_cipher_digest_to_str">
        <doc xml:space="preserve">Converts a guchar digest into a hex string</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="digest_s" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the string digest</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt" c:identifier="purple_cipher_encrypt">
        <doc xml:space="preserve">Encrypts data using the cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
          <type name="glong" c:type="ssize_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">The data to encrypt</doc>
            <type name="guint8" c:type="const guchar"/>
          </parameter>
          <parameter name="in_len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">The output buffer</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="out_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the output buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_batch_mode"
              c:identifier="purple_cipher_get_batch_mode">
        <doc xml:space="preserve">Gets the batch mode of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The batch mode under which the cipher is operating</doc>
          <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose batch mode to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_size"
              c:identifier="purple_cipher_get_block_size">
        <doc xml:space="preserve">Gets the block size of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The block size of the cipher</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose block size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_digest_size"
              c:identifier="purple_cipher_get_digest_size">
        <doc xml:space="preserve">Gets the digest size of a cipher</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The digest size of the cipher</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose digest size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key_size" c:identifier="purple_cipher_get_key_size">
        <doc xml:space="preserve">Gets the size of the key if the cipher supports it</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The size of the key</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose key size to get</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="purple_cipher_reset">
        <doc xml:space="preserve">Resets a cipher to it's default value
Note: If you have set an IV you will have to set it after resetting</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_state" c:identifier="purple_cipher_reset_state">
        <doc xml:space="preserve">Resets a cipher state to it's default value, but doesn't touch stateless
configuration.

That means, IV and digest will be wiped out, but keys, ops or salt
will remain untouched.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_batch_mode"
              c:identifier="purple_cipher_set_batch_mode">
        <doc xml:space="preserve">Sets the batch mode of a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose batch mode to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">The batch mode under which the cipher should operate</doc>
            <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iv" c:identifier="purple_cipher_set_iv">
        <doc xml:space="preserve">Sets the initialization vector for a cipher
Note: This should only be called right after a cipher is created or reset</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="iv" transfer-ownership="none">
            <doc xml:space="preserve">The initialization vector to set</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The len of the IV</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="purple_cipher_set_key">
        <doc xml:space="preserve">Sets the key on a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose key to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The size of the key</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_salt" c:identifier="purple_cipher_set_salt">
        <doc xml:space="preserve">Sets the salt on a cipher</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher whose salt to set</doc>
            <type name="Cipher" c:type="PurpleCipher*"/>
          </instance-parameter>
          <parameter name="salt" transfer-ownership="none">
            <doc xml:space="preserve">The salt</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the salt</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <enumeration name="CipherBatchMode"
                 glib:type-name="PurpleCipherBatchMode"
                 glib:get-type="purple_cipher_batch_mode_get_type"
                 c:type="PurpleCipherBatchMode">
      <doc xml:space="preserve">Modes for batch encrypters</doc>
      <member name="ecb"
              value="0"
              c:identifier="PURPLE_CIPHER_BATCH_MODE_ECB"
              glib:nick="ecb">
        <doc xml:space="preserve">Electronic Codebook Mode</doc>
      </member>
      <member name="cbc"
              value="1"
              c:identifier="PURPLE_CIPHER_BATCH_MODE_CBC"
              glib:nick="cbc">
        <doc xml:space="preserve">Cipher Block Chaining Mode</doc>
      </member>
    </enumeration>
    <record name="CipherClass"
            c:type="PurpleCipherClass"
            glib:is-gtype-struct-for="Cipher">
      <doc xml:space="preserve">The base class for all #PurpleCipher's.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset_state">
        <callback name="reset_state">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_iv">
        <callback name="set_iv">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="iv" transfer-ownership="none">
              <doc xml:space="preserve">The initialization vector to set</doc>
              <type name="guint8" c:type="guchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The len of the IV</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="append">
        <callback name="append">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">The data to append</doc>
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the data</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="digest">
        <callback name="digest">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="digest" transfer-ownership="none">
              <doc xml:space="preserve">The return buffer for the digest</doc>
              <type name="guint8" c:type="guchar"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the buffer</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_digest_size">
        <callback name="get_digest_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The digest size of the cipher</doc>
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose digest size to get</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="encrypt">
        <callback name="encrypt">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
            <type name="glong" c:type="ssize_t"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <doc xml:space="preserve">The data to encrypt</doc>
              <type name="guint8" c:type="const guchar"/>
            </parameter>
            <parameter name="in_len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the data</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <doc xml:space="preserve">The output buffer</doc>
              <type name="guint8" c:type="guchar"/>
            </parameter>
            <parameter name="out_size" transfer-ownership="none">
              <doc xml:space="preserve">The size of the output buffer</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decrypt">
        <callback name="decrypt">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A length of data that was outputed or -1, if failed</doc>
            <type name="glong" c:type="ssize_t"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <doc xml:space="preserve">The data to encrypt</doc>
              <type name="guint8" c:type="const guchar"/>
            </parameter>
            <parameter name="in_len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the returned value</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <doc xml:space="preserve">The output buffer</doc>
              <type name="guint8" c:type="guchar"/>
            </parameter>
            <parameter name="out_size" transfer-ownership="none">
              <doc xml:space="preserve">The size of the output buffer</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_salt">
        <callback name="set_salt">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose salt to set</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="salt" transfer-ownership="none">
              <doc xml:space="preserve">The salt</doc>
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the salt</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_key">
        <callback name="set_key">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose key to set</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">The key</doc>
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The size of the key</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_key_size">
        <callback name="get_key_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The size of the key</doc>
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose key size to get</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_batch_mode">
        <callback name="set_batch_mode">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose batch mode to set</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <doc xml:space="preserve">The batch mode under which the cipher should operate</doc>
              <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_batch_mode">
        <callback name="get_batch_mode">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The batch mode under which the cipher is operating</doc>
            <type name="CipherBatchMode" c:type="PurpleCipherBatchMode"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose batch mode to get</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_block_size">
        <callback name="get_block_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The block size of the cipher</doc>
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher whose block size to get</doc>
              <type name="Cipher" c:type="PurpleCipher*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CircularBuffer"
           c:symbol-prefix="circular_buffer"
           c:type="PurpleCircularBuffer"
           parent="GObject.Object"
           glib:type-name="PurpleCircularBuffer"
           glib:get-type="purple_circular_buffer_get_type"
           glib:type-struct="CircularBufferClass">
      <constructor name="new" c:identifier="purple_circular_buffer_new">
        <doc xml:space="preserve">Creates a new circular buffer.  This will not allocate any memory for the
actual buffer until data is appended to it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new PurpleCircularBuffer.</doc>
          <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="growsize" transfer-ownership="none">
            <doc xml:space="preserve">The amount that the buffer should grow the first time data
                is appended and every time more space is needed.  Pass in
                "0" to use the default of 256 bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="append" invoker="append">
        <doc xml:space="preserve">Append data to the PurpleCircularBuffer.  This will grow the internal
buffer to fit the added data, if needed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the data to copy into the buffer</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">number of bytes to copy into the buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="grow" invoker="grow">
        <doc xml:space="preserve">Increases the buffer size by a multiple of grow size, so that it can hold at
least 'len' bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer to grow.</doc>
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes the buffer should be able to hold.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mark_read" invoker="mark_read">
        <doc xml:space="preserve">Mark the number of bytes that have been read from the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if we successfully marked the bytes as having been read, FALSE
        otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes to mark as read</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="max_read_size">
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <type name="CircularBuffer" c:type="const PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="append" c:identifier="purple_circular_buffer_append">
        <doc xml:space="preserve">Append data to the PurpleCircularBuffer.  This will grow the internal
buffer to fit the added data, if needed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer to which to append the data</doc>
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the data to copy into the buffer</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">number of bytes to copy into the buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_grow_size"
              c:identifier="purple_circular_buffer_get_grow_size">
        <doc xml:space="preserve">Returns the number of bytes by which the buffer grows when more space is
needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The grow size of the buffer.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer from which to get grow size.</doc>
            <type name="CircularBuffer" c:type="const PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_read"
              c:identifier="purple_circular_buffer_get_max_read">
        <doc xml:space="preserve">Determine the maximum number of contiguous bytes that can be read from the
PurpleCircularBuffer.
Note: This may not be the total number of bytes that are buffered - a
subsequent call after calling purple_circular_buffer_mark_read() may indicate
more data is available to read.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of bytes that can be read from the PurpleCircularBuffer</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">the PurpleCircularBuffer for which to determine the maximum
           contiguous bytes that can be read.</doc>
            <type name="CircularBuffer" c:type="const PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output"
              c:identifier="purple_circular_buffer_get_output">
        <doc xml:space="preserve">Returns the output pointer of the buffer, where unread data is available.
Use purple_circular_buffer_get_max_read() to determine the number of
contiguous bytes that can be read from this output. After reading the data,
call purple_circular_buffer_mark_read() to mark the retrieved data as read.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The output pointer for the buffer.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer from which to get the output pointer.</doc>
            <type name="CircularBuffer" c:type="const PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used" c:identifier="purple_circular_buffer_get_used">
        <doc xml:space="preserve">Returns the number of bytes of this buffer that contain unread data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of bytes that contain unread data.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer from which to get used count.</doc>
            <type name="CircularBuffer" c:type="const PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grow" c:identifier="purple_circular_buffer_grow">
        <doc xml:space="preserve">Increases the buffer size by a multiple of grow size, so that it can hold at
least 'len' bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer to grow.</doc>
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes the buffer should be able to hold.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="mark_read" c:identifier="purple_circular_buffer_mark_read">
        <doc xml:space="preserve">Mark the number of bytes that have been read from the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if we successfully marked the bytes as having been read, FALSE
        otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer to mark bytes read from</doc>
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes to mark as read</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="purple_circular_buffer_reset">
        <doc xml:space="preserve">Resets the buffer contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleCircularBuffer to reset.</doc>
            <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer-used" transfer-ownership="none">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="grow-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="input" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="output" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="CircularBufferClass"
            c:type="PurpleCircularBufferClass"
            glib:is-gtype-struct-for="CircularBuffer">
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="grow">
        <callback name="grow">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve">The PurpleCircularBuffer to grow.</doc>
              <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The number of bytes the buffer should be able to hold.</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="append">
        <callback name="append">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <doc xml:space="preserve">pointer to the data to copy into the buffer</doc>
              <type name="gpointer" c:type="gconstpointer"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">number of bytes to copy into the buffer</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="max_read_size">
        <callback name="max_read_size">
          <return-value transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="CircularBuffer"
                    c:type="const PurpleCircularBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mark_read">
        <callback name="mark_read">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">TRUE if we successfully marked the bytes as having been read, FALSE
        otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="CircularBuffer" c:type="PurpleCircularBuffer*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The number of bytes to mark as read</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="CmdFlag" c:type="PurpleCmdFlag">
      <doc xml:space="preserve">Flags used to set various properties of commands.  Every command should
have at least one of #PURPLE_CMD_FLAG_IM and #PURPLE_CMD_FLAG_CHAT set in
order to be even slighly useful.

See purple_cmd_register().</doc>
      <member name="im" value="1" c:identifier="PURPLE_CMD_FLAG_IM">
        <doc xml:space="preserve">Command is usable in IMs.</doc>
      </member>
      <member name="chat" value="2" c:identifier="PURPLE_CMD_FLAG_CHAT">
        <doc xml:space="preserve">Command is usable in multi-user chats.</doc>
      </member>
      <member name="protocol_only"
              value="4"
              c:identifier="PURPLE_CMD_FLAG_PROTOCOL_ONLY">
        <doc xml:space="preserve">Command is usable only for a particular
                                protocol.</doc>
      </member>
      <member name="allow_wrong_args"
              value="8"
              c:identifier="PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS">
        <doc xml:space="preserve">Incorrect arguments to this command
                                   should be accepted anyway.</doc>
      </member>
    </enumeration>
    <callback name="CmdFunc" c:type="PurpleCmdFunc" introspectable="0">
      <doc xml:space="preserve">A function implementing a command, as passed to purple_cmd_register().</doc>
      <return-value transfer-ownership="none">
        <type name="CmdRet" c:type="PurpleCmdRet"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type c:type="PurpleConversation*"/>
        </parameter>
        <parameter name="cmd" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="CmdPriority" c:type="PurpleCmdPriority">
      <member name="very_low"
              value="-1000"
              c:identifier="PURPLE_CMD_P_VERY_LOW">
      </member>
      <member name="low" value="0" c:identifier="PURPLE_CMD_P_LOW">
      </member>
      <member name="default" value="1000" c:identifier="PURPLE_CMD_P_DEFAULT">
      </member>
      <member name="protocol"
              value="2000"
              c:identifier="PURPLE_CMD_P_PROTOCOL">
      </member>
      <member name="plugin" value="3000" c:identifier="PURPLE_CMD_P_PLUGIN">
      </member>
      <member name="alias" value="4000" c:identifier="PURPLE_CMD_P_ALIAS">
      </member>
      <member name="high" value="5000" c:identifier="PURPLE_CMD_P_HIGH">
      </member>
      <member name="very_high"
              value="6000"
              c:identifier="PURPLE_CMD_P_VERY_HIGH">
      </member>
    </enumeration>
    <enumeration name="CmdRet" c:type="PurpleCmdRet">
      <doc xml:space="preserve">Commands registered with the core return one of these values when run.
Normally, a command will want to return one of the first two; in some
unusual cases, you might want to have several functions called for a
particular command; in this case, they should return
#PURPLE_CMD_RET_CONTINUE to cause the core to fall through to other
commands with the same name.</doc>
      <member name="ok" value="0" c:identifier="PURPLE_CMD_RET_OK">
        <doc xml:space="preserve">Everything's okay; Don't look for another command
                          to call.</doc>
      </member>
      <member name="failed" value="1" c:identifier="PURPLE_CMD_RET_FAILED">
        <doc xml:space="preserve">The command failed, but stop looking.</doc>
      </member>
      <member name="continue" value="2" c:identifier="PURPLE_CMD_RET_CONTINUE">
        <doc xml:space="preserve">Continue, looking for other commands with the same
                          name to call.</doc>
      </member>
    </enumeration>
    <enumeration name="CmdStatus" c:type="PurpleCmdStatus">
      <doc xml:space="preserve">The possible results of running a command with purple_cmd_do_command().</doc>
      <member name="ok" value="0" c:identifier="PURPLE_CMD_STATUS_OK">
      </member>
      <member name="failed" value="1" c:identifier="PURPLE_CMD_STATUS_FAILED">
      </member>
      <member name="not_found"
              value="2"
              c:identifier="PURPLE_CMD_STATUS_NOT_FOUND">
      </member>
      <member name="wrong_args"
              value="3"
              c:identifier="PURPLE_CMD_STATUS_WRONG_ARGS">
      </member>
      <member name="wrong_protocol"
              value="4"
              c:identifier="PURPLE_CMD_STATUS_WRONG_PROTOCOL">
      </member>
      <member name="wrong_type"
              value="5"
              c:identifier="PURPLE_CMD_STATUS_WRONG_TYPE">
      </member>
    </enumeration>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="PurpleConnection"
           parent="GObject.Object"
           glib:type-name="PurpleConnection"
           glib:get-type="purple_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:space="preserve">Represents an active connection on an account.</doc>
      <method name="error" c:identifier="purple_connection_error">
        <doc xml:space="preserve">Closes a connection with an error and a human-readable description of the
error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">the connection which is closing.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve">why the connection is closing.</doc>
            <type name="ConnectionError" c:type="PurpleConnectionError"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">a localized description of the error (not %NULL ).</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="purple_connection_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns the connection's account.</doc>
        <return-value>
          <doc xml:space="preserve">The connection's account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_chats"
              c:identifier="purple_connection_get_active_chats"
              introspectable="0">
        <doc xml:space="preserve">Returns a list of active chat conversations on a connection.</doc>
        <return-value>
          <doc xml:space="preserve">The active chats on the connection.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="purple_connection_get_display_name">
        <doc xml:space="preserve">Returns the connection's displayed name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The connection's displayed name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error_info"
              c:identifier="purple_connection_get_error_info">
        <doc xml:space="preserve">Returns the #PurpleConnectionErrorInfo instance of a connection if an
error exists.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #PurpleConnectionErrorInfo instance of the connection if an
        error exists, %NULL otherwise.</doc>
          <type name="ConnectionErrorInfo"
                c:type="PurpleConnectionErrorInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="purple_connection_get_flags">
        <doc xml:space="preserve">Returns the connection flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The connection flags.</doc>
          <type name="ConnectionFlags" c:type="PurpleConnectionFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="purple_connection_get_password">
        <doc xml:space="preserve">Returns the connection's password.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The connection's password.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="purple_connection_get_protocol"
              introspectable="0">
        <doc xml:space="preserve">Returns the protocol managing a connection.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol.</doc>
          <type name="Protocol" c:type="PurpleProtocol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_connection_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Gets the protocol data from a connection.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data for the connection.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleConnection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="purple_connection_get_state">
        <doc xml:space="preserve">Returns the connection state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The connection state.</doc>
          <type name="ConnectionState" c:type="PurpleConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disconnecting"
              c:identifier="purple_connection_is_disconnecting">
        <doc xml:space="preserve">@param gc The connection.
Checks, if connection is in disconnecting state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if the account is disconnecting.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="const PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notice" c:identifier="purple_connection_notice">
        <doc xml:space="preserve">Displays a connection-specific notice.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">The notice text.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="purple_connection_set_display_name">
        <doc xml:space="preserve">Sets the connection's displayed name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The displayed name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="purple_connection_set_flags">
        <doc xml:space="preserve">Sets the connection flags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">The flags.</doc>
            <type name="ConnectionFlags" c:type="PurpleConnectionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_connection_set_protocol_data">
        <doc xml:space="preserve">Sets the protocol data for a connection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleConnection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="proto_data" transfer-ownership="none">
            <doc xml:space="preserve">The protocol data to set for the connection.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="purple_connection_set_state">
        <doc xml:space="preserve">Sets the connection state.  Protocols should call this and pass in
the state #PURPLE_CONNECTION_CONNECTED when the account is completely
signed on.  What does it mean to be completely signed on?  If
the core can call protocol's set_status, and it successfully changes
your status, then the account is online.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">The connection state.</doc>
            <type name="ConnectionState" c:type="PurpleConnectionState"/>
          </parameter>
        </parameters>
      </method>
      <method name="ssl_error" c:identifier="purple_connection_ssl_error">
        <doc xml:space="preserve">Closes a connection due to an SSL error; this is basically a shortcut to
turning the #PurpleSslErrorType into a #PurpleConnectionError and a
human-readable string and then calling purple_connection_error().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="ssl_error" transfer-ownership="none">
            <type name="SslErrorType" c:type="PurpleSslErrorType"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_last_received"
              c:identifier="purple_connection_update_last_received">
        <doc xml:space="preserve">Indicate that a packet was received on the connection.
Set by the protocol to avoid sending unneeded keepalives.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_progress"
              c:identifier="purple_connection_update_progress">
        <doc xml:space="preserve">Updates the connection progress.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">Information on the current step.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:space="preserve">The current step.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve">The total number of steps.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="display-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="ConnectionFlags"/>
      </property>
      <property name="password"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Protocol"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <type name="ConnectionState"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ConnectionClass"
            c:type="PurpleConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <doc xml:space="preserve">Base class for all #PurpleConnection's</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ConnectionError"
                 glib:type-name="PurpleConnectionError"
                 glib:get-type="purple_connection_error_get_type"
                 c:type="PurpleConnectionError">
      <doc xml:space="preserve">Possible errors that can cause a connection to be closed.</doc>
      <member name="network_error"
              value="0"
              c:identifier="PURPLE_CONNECTION_ERROR_NETWORK_ERROR"
              glib:nick="network-error">
        <doc xml:space="preserve">There was an error sending or
        receiving on the network socket, or there was some protocol error
        (such as the server sending malformed data).</doc>
      </member>
      <member name="invalid_username"
              value="1"
              c:identifier="PURPLE_CONNECTION_ERROR_INVALID_USERNAME"
              glib:nick="invalid-username">
        <doc xml:space="preserve">The username supplied was not
        valid.</doc>
      </member>
      <member name="authentication_failed"
              value="2"
              c:identifier="PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED"
              glib:nick="authentication-failed">
        <doc xml:space="preserve">The username, password or
        some other credential was incorrect.  Use
        #PURPLE_CONNECTION_ERROR_INVALID_USERNAME instead if the username
        is known to be invalid.</doc>
      </member>
      <member name="authentication_impossible"
              value="3"
              c:identifier="PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE"
              glib:nick="authentication-impossible">
        <doc xml:space="preserve">libpurple doesn't speak
        any of the authentication methods the server offered.</doc>
      </member>
      <member name="no_ssl_support"
              value="4"
              c:identifier="PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT"
              glib:nick="no-ssl-support">
        <doc xml:space="preserve">libpurple was built without SSL
        support, and the connection needs SSL.</doc>
      </member>
      <member name="encryption_error"
              value="5"
              c:identifier="PURPLE_CONNECTION_ERROR_ENCRYPTION_ERROR"
              glib:nick="encryption-error">
        <doc xml:space="preserve">There was an error negotiating
        SSL on this connection, or the server does not support encryption
        but an account option was set to require it.</doc>
      </member>
      <member name="name_in_use"
              value="6"
              c:identifier="PURPLE_CONNECTION_ERROR_NAME_IN_USE"
              glib:nick="name-in-use">
        <doc xml:space="preserve">Someone is already connected to the
        server using the name you are trying to connect with.</doc>
      </member>
      <member name="invalid_settings"
              value="7"
              c:identifier="PURPLE_CONNECTION_ERROR_INVALID_SETTINGS"
              glib:nick="invalid-settings">
        <doc xml:space="preserve">The username/server/other
        preference for the account isn't valid.  For instance, on IRC the
        username cannot contain white space.  This reason should not be used
        for incorrect passwords etc: use
        #PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED for that.</doc>
      </member>
      <member name="cert_not_provided"
              value="8"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_NOT_PROVIDED"
              glib:nick="cert-not-provided">
        <doc xml:space="preserve">The server did not provide a
        SSL certificate.</doc>
      </member>
      <member name="cert_untrusted"
              value="9"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_UNTRUSTED"
              glib:nick="cert-untrusted">
        <doc xml:space="preserve">The server's SSL certificate could
        not be trusted.</doc>
      </member>
      <member name="cert_expired"
              value="10"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_EXPIRED"
              glib:nick="cert-expired">
        <doc xml:space="preserve">The server's SSL certificate has
        expired.</doc>
      </member>
      <member name="cert_not_activated"
              value="11"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_NOT_ACTIVATED"
              glib:nick="cert-not-activated">
        <doc xml:space="preserve">The server's SSL certificate is
        not yet valid.</doc>
      </member>
      <member name="cert_hostname_mismatch"
              value="12"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_HOSTNAME_MISMATCH"
              glib:nick="cert-hostname-mismatch">
        <doc xml:space="preserve">The server's SSL
        certificate did not match its hostname.</doc>
      </member>
      <member name="cert_fingerprint_mismatch"
              value="13"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_FINGERPRINT_MISMATCH"
              glib:nick="cert-fingerprint-mismatch">
        <doc xml:space="preserve">The server's SSL
        certificate does not have the expected fingerprint.</doc>
      </member>
      <member name="cert_self_signed"
              value="14"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_SELF_SIGNED"
              glib:nick="cert-self-signed">
        <doc xml:space="preserve">The server's SSL certificate is
        self-signed.</doc>
      </member>
      <member name="cert_other_error"
              value="15"
              c:identifier="PURPLE_CONNECTION_ERROR_CERT_OTHER_ERROR"
              glib:nick="cert-other-error">
        <doc xml:space="preserve">There was some other error
        validating the server's SSL certificate.</doc>
      </member>
      <member name="other_error"
              value="16"
              c:identifier="PURPLE_CONNECTION_ERROR_OTHER_ERROR"
              glib:nick="other-error">
        <doc xml:space="preserve">Some other error occurred which fits
        into none of the other categories.</doc>
      </member>
      <function name="is_fatal"
                c:identifier="purple_connection_error_is_fatal">
        <doc xml:space="preserve">Reports whether a disconnection reason is fatal (in which case the account
should probably not be automatically reconnected) or transient (so
auto-reconnection is a good idea).
For instance, #PURPLE_CONNECTION_ERROR_NETWORK_ERROR is a temporary error,
which might be caused by losing the network connection, so &lt;literal&gt;
purple_connection_error_is_fatal (PURPLE_CONNECTION_ERROR_NETWORK_ERROR)&lt;/literal&gt;
is %FALSE.  On the other hand,
#PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED probably indicates a
misconfiguration of the account which needs the user to go fix it up, so
&lt;literal&gt; purple_connection_error_is_fatal
(PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED)&lt;/literal&gt; is %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the account should not be automatically reconnected, and
        %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="reason" transfer-ownership="none">
            <type name="ConnectionError" c:type="PurpleConnectionError"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ConnectionErrorInfo"
            c:type="PurpleConnectionErrorInfo"
            glib:type-name="PurpleConnectionErrorInfo"
            glib:get-type="purple_connection_error_info_get_type"
            c:symbol-prefix="connection_error_info">
      <doc xml:space="preserve">Holds the type of an error along with its description.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">The type of error.</doc>
        <type name="ConnectionError" c:type="PurpleConnectionError"/>
      </field>
      <field name="description" writable="1">
        <doc xml:space="preserve">A localised, human-readable description of the error.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <bitfield name="ConnectionFlags"
              glib:type-name="PurpleConnectionFlags"
              glib:get-type="purple_connection_flags_get_type"
              c:type="PurpleConnectionFlags">
      <doc xml:space="preserve">Flags to change behavior of the client for a given connection.</doc>
      <member name="html"
              value="1"
              c:identifier="PURPLE_CONNECTION_FLAG_HTML"
              glib:nick="html">
        <doc xml:space="preserve">Connection sends/receives in 'HTML'</doc>
      </member>
      <member name="no_bgcolor"
              value="2"
              c:identifier="PURPLE_CONNECTION_FLAG_NO_BGCOLOR"
              glib:nick="no-bgcolor">
        <doc xml:space="preserve">Connection does not send/receive
                                    background colors</doc>
      </member>
      <member name="auto_resp"
              value="4"
              c:identifier="PURPLE_CONNECTION_FLAG_AUTO_RESP"
              glib:nick="auto-resp">
        <doc xml:space="preserve">Send auto responses when away</doc>
      </member>
      <member name="formatting_wbfo"
              value="8"
              c:identifier="PURPLE_CONNECTION_FLAG_FORMATTING_WBFO"
              glib:nick="formatting-wbfo">
        <doc xml:space="preserve">The text buffer must be formatted
                                         as a whole</doc>
      </member>
      <member name="no_newlines"
              value="16"
              c:identifier="PURPLE_CONNECTION_FLAG_NO_NEWLINES"
              glib:nick="no-newlines">
        <doc xml:space="preserve">No new lines are allowed in outgoing
                                     messages</doc>
      </member>
      <member name="no_fontsize"
              value="32"
              c:identifier="PURPLE_CONNECTION_FLAG_NO_FONTSIZE"
              glib:nick="no-fontsize">
        <doc xml:space="preserve">Connection does not send/receive font
                                     sizes</doc>
      </member>
      <member name="no_urldesc"
              value="64"
              c:identifier="PURPLE_CONNECTION_FLAG_NO_URLDESC"
              glib:nick="no-urldesc">
        <doc xml:space="preserve">Connection does not support descriptions
                                    with links</doc>
      </member>
      <member name="no_images"
              value="128"
              c:identifier="PURPLE_CONNECTION_FLAG_NO_IMAGES"
              glib:nick="no-images">
        <doc xml:space="preserve">Connection does not support sending of
                                   images</doc>
      </member>
      <member name="allow_custom_smiley"
              value="256"
              c:identifier="PURPLE_CONNECTION_FLAG_ALLOW_CUSTOM_SMILEY"
              glib:nick="allow-custom-smiley">
        <doc xml:space="preserve">Connection supports sending
                                             and receiving custom smileys</doc>
      </member>
      <member name="support_moods"
              value="512"
              c:identifier="PURPLE_CONNECTION_FLAG_SUPPORT_MOODS"
              glib:nick="support-moods">
        <doc xml:space="preserve">Connection supports setting moods</doc>
      </member>
      <member name="support_mood_messages"
              value="1024"
              c:identifier="PURPLE_CONNECTION_FLAG_SUPPORT_MOOD_MESSAGES"
              glib:nick="support-mood-messages">
        <doc xml:space="preserve">Connection supports setting
                                               a message on moods</doc>
      </member>
    </bitfield>
    <enumeration name="ConnectionState"
                 glib:type-name="PurpleConnectionState"
                 glib:get-type="purple_connection_state_get_type"
                 c:type="PurpleConnectionState">
      <member name="disconnected"
              value="0"
              c:identifier="PURPLE_CONNECTION_DISCONNECTED"
              glib:nick="disconnected">
        <doc xml:space="preserve">Disconnected.</doc>
      </member>
      <member name="connected"
              value="1"
              c:identifier="PURPLE_CONNECTION_CONNECTED"
              glib:nick="connected">
        <doc xml:space="preserve">Connected.</doc>
      </member>
      <member name="connecting"
              value="2"
              c:identifier="PURPLE_CONNECTION_CONNECTING"
              glib:nick="connecting">
        <doc xml:space="preserve">Connecting.</doc>
      </member>
    </enumeration>
    <record name="ConnectionUiOps"
            c:type="PurpleConnectionUiOps"
            glib:type-name="PurpleConnectionUiOps"
            glib:get-type="purple_connection_ui_ops_get_type"
            c:symbol-prefix="connection_ui_ops">
      <doc xml:space="preserve">Connection UI operations.  Used to notify the user of changes to
connections, such as being disconnected, and to respond to the
underlying network connection appearing and disappearing.  UIs should
call #purple_connections_set_ui_ops() with an instance of this struct.

See &lt;link linkend="chapter-ui-ops"&gt;List of &lt;literal&gt;UiOps&lt;/literal&gt; Structures&lt;/link&gt;</doc>
      <field name="connect_progress">
        <callback name="connect_progress">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gc" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
            <parameter name="step_count" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connected">
        <callback name="connected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gc" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gc" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notice">
        <callback name="notice">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gc" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="network_connected">
        <callback name="network_connected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="network_disconnected">
        <callback name="network_disconnected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="report_disconnect">
        <callback name="report_disconnect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gc" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="ConnectionError" c:type="PurpleConnectionError"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Contact"
           c:symbol-prefix="contact"
           c:type="PurpleContact"
           parent="CountingNode"
           glib:type-name="PurpleContact"
           glib:get-type="purple_contact_get_type"
           glib:type-struct="ContactClass">
      <doc xml:space="preserve">A contact on the buddy list.

A contact is a counting node, which means it keeps track of the counts of
the buddies under this contact.</doc>
      <constructor name="new" c:identifier="purple_contact_new">
        <doc xml:space="preserve">Creates a new contact</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new contact struct</doc>
          <type name="Contact" c:type="PurpleContact*"/>
        </return-value>
      </constructor>
      <method name="get_alias" c:identifier="purple_contact_get_alias">
        <doc xml:space="preserve">Gets the alias for a contact.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The alias, or NULL if it is not set.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="purple_contact_get_group"
              introspectable="0">
        <doc xml:space="preserve">Gets the PurpleGroup from a PurpleContact</doc>
        <return-value>
          <doc xml:space="preserve">The group</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact</doc>
            <type name="Contact" c:type="const PurpleContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority_buddy"
              c:identifier="purple_contact_get_priority_buddy"
              introspectable="0">
        <doc xml:space="preserve">Returns the highest priority buddy for a given contact.</doc>
        <return-value>
          <doc xml:space="preserve">The highest priority buddy</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_priority_buddy"
              c:identifier="purple_contact_invalidate_priority_buddy">
        <doc xml:space="preserve">Invalidates the priority buddy so that the next call to
purple_contact_get_priority_buddy recomputes it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="purple_contact_merge">
        <doc xml:space="preserve">Merges two contacts

All of the buddies from source will be moved to target</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">The contact to merge</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">The place to merge to (a buddy or contact)</doc>
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="on_account" c:identifier="purple_contact_on_account">
        <doc xml:space="preserve">Determines whether an account owns any buddies in a given contact</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if there are any buddies from account in the contact, or FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact to search through.</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias" c:identifier="purple_contact_set_alias">
        <doc xml:space="preserve">Sets the alias for a contact.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">The contact</doc>
            <type name="Contact" c:type="PurpleContact*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">The alias</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="alias" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority-buddy" transfer-ownership="none">
        <type name="Buddy"/>
      </property>
      <field name="counting">
        <type name="CountingNode" c:type="PurpleCountingNode"/>
      </field>
    </class>
    <record name="ContactClass"
            c:type="PurpleContactClass"
            glib:is-gtype-struct-for="Contact">
      <doc xml:space="preserve">The base class for all #PurpleContact's.</doc>
      <field name="counting_class">
        <type name="CountingNodeClass" c:type="PurpleCountingNodeClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ConversationUpdateType"
                 glib:type-name="PurpleConversationUpdateType"
                 glib:get-type="purple_conversation_update_type_get_type"
                 c:type="PurpleConversationUpdateType">
      <member name="update_add"
              value="0"
              c:identifier="PURPLE_CONVERSATION_UPDATE_ADD"
              glib:nick="update-add">
      </member>
      <member name="update_remove"
              value="1"
              c:identifier="PURPLE_CONVERSATION_UPDATE_REMOVE"
              glib:nick="update-remove">
      </member>
      <member name="update_account"
              value="2"
              c:identifier="PURPLE_CONVERSATION_UPDATE_ACCOUNT"
              glib:nick="update-account">
      </member>
      <member name="update_typing"
              value="3"
              c:identifier="PURPLE_CONVERSATION_UPDATE_TYPING"
              glib:nick="update-typing">
      </member>
      <member name="update_unseen"
              value="4"
              c:identifier="PURPLE_CONVERSATION_UPDATE_UNSEEN"
              glib:nick="update-unseen">
      </member>
      <member name="update_logging"
              value="5"
              c:identifier="PURPLE_CONVERSATION_UPDATE_LOGGING"
              glib:nick="update-logging">
      </member>
      <member name="update_topic"
              value="6"
              c:identifier="PURPLE_CONVERSATION_UPDATE_TOPIC"
              glib:nick="update-topic">
      </member>
      <member name="update_e2ee"
              value="7"
              c:identifier="PURPLE_CONVERSATION_UPDATE_E2EE"
              glib:nick="update-e2ee">
      </member>
      <member name="account_online"
              value="8"
              c:identifier="PURPLE_CONVERSATION_ACCOUNT_ONLINE"
              glib:nick="account-online">
      </member>
      <member name="account_offline"
              value="9"
              c:identifier="PURPLE_CONVERSATION_ACCOUNT_OFFLINE"
              glib:nick="account-offline">
      </member>
      <member name="update_away"
              value="10"
              c:identifier="PURPLE_CONVERSATION_UPDATE_AWAY"
              glib:nick="update-away">
      </member>
      <member name="update_icon"
              value="11"
              c:identifier="PURPLE_CONVERSATION_UPDATE_ICON"
              glib:nick="update-icon">
      </member>
      <member name="update_name"
              value="12"
              c:identifier="PURPLE_CONVERSATION_UPDATE_NAME"
              glib:nick="update-name">
      </member>
      <member name="update_title"
              value="13"
              c:identifier="PURPLE_CONVERSATION_UPDATE_TITLE"
              glib:nick="update-title">
      </member>
      <member name="update_chatleft"
              value="14"
              c:identifier="PURPLE_CONVERSATION_UPDATE_CHATLEFT"
              glib:nick="update-chatleft">
      </member>
      <member name="update_features"
              value="15"
              c:identifier="PURPLE_CONVERSATION_UPDATE_FEATURES"
              glib:nick="update-features">
      </member>
    </enumeration>
    <record name="Core" c:type="PurpleCore" disguised="1">
      <function name="ensure_single_instance"
                c:identifier="purple_core_ensure_single_instance">
        <doc xml:space="preserve">Ensures that only one instance is running.  If libpurple is built with D-Bus
support, this checks if another process owns the libpurple bus name and if
so whether that process is using the same configuration directory as this
process.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this is the first instance of libpurple running;
         %FALSE if there is another instance running.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="get_ui" c:identifier="purple_core_get_ui">
        <doc xml:space="preserve">Returns the ID of the UI that is using the core, as passed to
purple_core_init().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The ID of the UI that is currently using the core.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
      </function>
      <function name="get_ui_info"
                c:identifier="purple_core_get_ui_info"
                introspectable="0">
        <doc xml:space="preserve">Returns a hash table containing various information about the UI.  The
following well-known entries may be in the table (along with any others the
UI might choose to include):

&lt;informaltable frame='none'&gt;
  &lt;tgroup cols='2'&gt;&lt;tbody&gt;
  &lt;row&gt;
    &lt;entry&gt;&lt;literal&gt;name&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;the user-readable name for the UI.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;entry&gt;&lt;literal&gt;version&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;a user-readable description of the current version of the UI.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;entry&gt;&lt;literal&gt;website&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;the UI's website, such as https://pidgin.im.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;entry&gt;&lt;literal&gt;dev_website&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;the UI's development/support website, such as
      https://developer.pidgin.im.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;
    &lt;entry&gt;&lt;literal&gt;client_type&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;the type of UI. Possible values include 'pc', 'console', 'phone',
      'handheld', 'web', and 'bot'. These values are compared
      programmatically and should not be localized.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;/tbody&gt;&lt;/tgroup&gt;
&lt;/informaltable&gt;</doc>
        <return-value>
          <doc xml:space="preserve">A GHashTable with strings for keys and values.  This
hash table must not be freed and should not be modified.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </function>
      <function name="get_ui_ops" c:identifier="purple_core_get_ui_ops">
        <doc xml:space="preserve">Returns the UI ops for the core.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The core's UI ops structure.</doc>
          <type name="CoreUiOps" c:type="PurpleCoreUiOps*"/>
        </return-value>
      </function>
      <function name="get_version" c:identifier="purple_core_get_version">
        <doc xml:space="preserve">Returns the version of the core library.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The version of the core library.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
      </function>
      <function name="init" c:identifier="purple_core_init">
        <doc xml:space="preserve">Initializes the core of purple.

This will setup preferences for all the core subsystems.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ui" transfer-ownership="none">
            <doc xml:space="preserve">The ID of the UI using the core. This should be a
          unique ID, registered with the purple team.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="quit" c:identifier="purple_core_quit">
        <doc xml:space="preserve">Quits the core of purple, which, depending on the UI, may quit the
application using the purple core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="quit_cb" c:identifier="purple_core_quit_cb">
        <doc xml:space="preserve">Calls purple_core_quit().  This can be used as the function
passed to purple_timeout_add() when you want to shutdown Purple
in a specified amount of time.  When shutting down Purple
from a plugin, you must use this instead of purple_core_quit();
for an immediate exit, use a timeout value of 0:

&lt;programlisting&gt;
purple_timeout_add(0, purple_core_quitcb, NULL)
&lt;/programlisting&gt;

This is ensures that code from your plugin is not being
executed when purple_core_quit() is called.  If the plugin
called purple_core_quit() directly, you would get a core dump
after purple_core_quit() executes and control returns to your
plugin because purple_core_quit() frees all plugins.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="unused" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_ui_ops" c:identifier="purple_core_set_ui_ops">
        <doc xml:space="preserve">Sets the UI ops for the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ops" transfer-ownership="none">
            <doc xml:space="preserve">A UI ops structure for the core.</doc>
            <type name="CoreUiOps" c:type="PurpleCoreUiOps*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="CoreUiOps"
            c:type="PurpleCoreUiOps"
            glib:type-name="PurpleCoreUiOps"
            glib:get-type="purple_core_ui_ops_get_type"
            c:symbol-prefix="core_ui_ops">
      <doc xml:space="preserve">Callbacks that fire at different points of the initialization and teardown
of libpurple, along with a hook to return descriptive information about the
UI.</doc>
      <field name="ui_prefs_init">
        <callback name="ui_prefs_init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="debug_ui_init">
        <callback name="debug_ui_init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="ui_init">
        <callback name="ui_init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="quit">
        <callback name="quit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="get_ui_info" introspectable="0">
        <callback name="get_ui_info" introspectable="0">
          <return-value>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CountingNode"
           c:symbol-prefix="counting_node"
           c:type="PurpleCountingNode"
           parent="BlistNode"
           abstract="1"
           glib:type-name="PurpleCountingNode"
           glib:get-type="purple_counting_node_get_type"
           glib:type-struct="CountingNodeClass">
      <doc xml:space="preserve">A node that keeps count of the number of children that it has. It tracks the
total number of children, the number of children corresponding to online
accounts, and the number of online children.

The two types of counting nodes are:
&lt;orderedlist&gt;
 &lt;listitem&gt;Contact: Keeps track of the number of buddies under it.&lt;/listitem&gt;
 &lt;listitem&gt;Group: Keeps track of the number of chats and contacts under it.
                                                                  &lt;/listitem&gt;
&lt;/orderedlist&gt;

See #PurpleContact, #PurpleGroup</doc>
      <method name="change_current_size"
              c:identifier="purple_counting_node_change_current_size">
        <doc xml:space="preserve">Changes the number of children of the counting node corresponding to online
accounts. The provided delta value is added to the count, or if it's
negative, the count is decreased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve">The value to change the current size by</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_online_count"
              c:identifier="purple_counting_node_change_online_count">
        <doc xml:space="preserve">Changes the number of children of the counting node that are online. The
provided delta value is added to the count, or if it's negative, the count is
decreased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve">The value to change the online count by</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_total_size"
              c:identifier="purple_counting_node_change_total_size">
        <doc xml:space="preserve">Changes the total number of children of the counting node. The provided
delta value is added to the count, or if it's negative, the count is
decreased.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve">The value to change the total size by</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_size"
              c:identifier="purple_counting_node_get_current_size">
        <doc xml:space="preserve">Returns the number of children of the counting node corresponding to online
accounts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of children with online accounts</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_online_count"
              c:identifier="purple_counting_node_get_online_count">
        <doc xml:space="preserve">Returns the number of children of the counting node that are online.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The total number of online children</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_size"
              c:identifier="purple_counting_node_get_total_size">
        <doc xml:space="preserve">Returns the total number of children of the counting node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The total number of children of the node</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_current_size"
              c:identifier="purple_counting_node_set_current_size">
        <doc xml:space="preserve">Sets the number of children of the counting node corresponding to online
accounts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="currentsize" transfer-ownership="none">
            <doc xml:space="preserve">The number of children with online accounts</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_online_count"
              c:identifier="purple_counting_node_set_online_count">
        <doc xml:space="preserve">Sets the number of children of the counting node that are online.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="onlinecount" transfer-ownership="none">
            <doc xml:space="preserve">The total number of online children</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_total_size"
              c:identifier="purple_counting_node_set_total_size">
        <doc xml:space="preserve">Sets the total number of children of the counting node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="counter" transfer-ownership="none">
            <doc xml:space="preserve">The node</doc>
            <type name="CountingNode" c:type="PurpleCountingNode*"/>
          </instance-parameter>
          <parameter name="totalsize" transfer-ownership="none">
            <doc xml:space="preserve">The total number of children of the node</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-size" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="online-count" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="total-size" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="node">
        <type name="BlistNode" c:type="PurpleBlistNode"/>
      </field>
    </class>
    <record name="CountingNodeClass"
            c:type="PurpleCountingNodeClass"
            glib:is-gtype-struct-for="CountingNode">
      <doc xml:space="preserve">The base class for all #PurpleCountingNode's.</doc>
      <field name="node_class">
        <type name="BlistNodeClass" c:type="PurpleBlistNodeClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="DEFAULT_ACTION_NONE"
              value="-1"
              c:type="PURPLE_DEFAULT_ACTION_NONE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DEFAULT_KEYRING"
              value="keyring-internal"
              c:type="PURPLE_DEFAULT_KEYRING">
      <doc xml:space="preserve">Default keyring ID.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="DES3Cipher"
           c:symbol-prefix="des3_cipher"
           c:type="PurpleDES3Cipher"
           parent="Cipher"
           glib:type-name="PurpleDES3Cipher"
           glib:get-type="purple_des3_cipher_get_type"
           glib:type-struct="DES3CipherClass">
      <constructor name="new" c:identifier="purple_des3_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
      </constructor>
      <property name="batch-mode" writable="1" transfer-ownership="none">
        <type name="CipherBatchMode"/>
      </property>
      <property name="iv" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="DES3CipherClass"
            c:type="PurpleDES3CipherClass"
            glib:is-gtype-struct-for="DES3Cipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="DESCipher"
           c:symbol-prefix="des_cipher"
           c:type="PurpleDESCipher"
           parent="Cipher"
           glib:type-name="PurpleDESCipher"
           glib:get-type="purple_des_cipher_get_type"
           glib:type-struct="DESCipherClass">
      <constructor name="new" c:identifier="purple_des_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
      </constructor>
      <method name="ecb_crypt" c:identifier="purple_des_cipher_ecb_crypt">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="des_cipher" transfer-ownership="none">
            <type name="DESCipher" c:type="PurpleDESCipher*"/>
          </instance-parameter>
          <parameter name="from" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="key" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="DESCipherClass"
            c:type="PurpleDESCipherClass"
            glib:is-gtype-struct-for="DESCipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="DESKTOP_ITEM_ACTIONS"
              value="Actions"
              c:type="PURPLE_DESKTOP_ITEM_ACTIONS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_COMMENT"
              value="Comment"
              c:type="PURPLE_DESKTOP_ITEM_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DEFAULT_APP"
              value="DefaultApp"
              c:type="PURPLE_DESKTOP_ITEM_DEFAULT_APP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DEV"
              value="Dev"
              c:type="PURPLE_DESKTOP_ITEM_DEV">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DOC_PATH"
              value="X-GNOME-DocPath"
              c:type="PURPLE_DESKTOP_ITEM_DOC_PATH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_ENCODING"
              value="Encoding"
              c:type="PURPLE_DESKTOP_ITEM_ENCODING">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_EXEC"
              value="Exec"
              c:type="PURPLE_DESKTOP_ITEM_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_FILE_PATTERN"
              value="FilePattern"
              c:type="PURPLE_DESKTOP_ITEM_FILE_PATTERN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_FS_TYPE"
              value="FSType"
              c:type="PURPLE_DESKTOP_ITEM_FS_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_GENERIC_NAME"
              value="GenericName"
              c:type="PURPLE_DESKTOP_ITEM_GENERIC_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_HIDDEN"
              value="Hidden"
              c:type="PURPLE_DESKTOP_ITEM_HIDDEN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_ICON"
              value="Icon"
              c:type="PURPLE_DESKTOP_ITEM_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MIME_TYPE"
              value="MimeType"
              c:type="PURPLE_DESKTOP_ITEM_MIME_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MINI_ICON"
              value="MiniIcon"
              c:type="PURPLE_DESKTOP_ITEM_MINI_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MOUNT_POINT"
              value="MountPoint"
              c:type="PURPLE_DESKTOP_ITEM_MOUNT_POINT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_NAME"
              value="Name"
              c:type="PURPLE_DESKTOP_ITEM_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_NO_DISPLAY"
              value="NoDisplay"
              c:type="PURPLE_DESKTOP_ITEM_NO_DISPLAY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_PATH"
              value="Path"
              c:type="PURPLE_DESKTOP_ITEM_PATH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_PATTERNS"
              value="Patterns"
              c:type="PURPLE_DESKTOP_ITEM_PATTERNS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_READ_ONLY"
              value="ReadOnly"
              c:type="PURPLE_DESKTOP_ITEM_READ_ONLY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SORT_ORDER"
              value="SortOrder"
              c:type="PURPLE_DESKTOP_ITEM_SORT_ORDER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SWALLOW_EXEC"
              value="SwallowExec"
              c:type="PURPLE_DESKTOP_ITEM_SWALLOW_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SWALLOW_TITLE"
              value="SwallowTitle"
              c:type="PURPLE_DESKTOP_ITEM_SWALLOW_TITLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TERMINAL"
              value="Terminal"
              c:type="PURPLE_DESKTOP_ITEM_TERMINAL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TERMINAL_OPTIONS"
              value="TerminalOptions"
              c:type="PURPLE_DESKTOP_ITEM_TERMINAL_OPTIONS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TRY_EXEC"
              value="TryExec"
              c:type="PURPLE_DESKTOP_ITEM_TRY_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TYPE"
              value="Type"
              c:type="PURPLE_DESKTOP_ITEM_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_UNMOUNT_ICON"
              value="UnmountIcon"
              c:type="PURPLE_DESKTOP_ITEM_UNMOUNT_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_URL"
              value="URL"
              c:type="PURPLE_DESKTOP_ITEM_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_VERSION"
              value="Version"
              c:type="PURPLE_DESKTOP_ITEM_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="DebugLevel" c:type="PurpleDebugLevel">
      <doc xml:space="preserve">Debug levels.</doc>
      <member name="all" value="0" c:identifier="PURPLE_DEBUG_ALL">
        <doc xml:space="preserve">All debug levels.</doc>
      </member>
      <member name="misc" value="1" c:identifier="PURPLE_DEBUG_MISC">
        <doc xml:space="preserve">General chatter.</doc>
      </member>
      <member name="info" value="2" c:identifier="PURPLE_DEBUG_INFO">
        <doc xml:space="preserve">General operation Information.</doc>
      </member>
      <member name="warning" value="3" c:identifier="PURPLE_DEBUG_WARNING">
        <doc xml:space="preserve">Warnings.</doc>
      </member>
      <member name="error" value="4" c:identifier="PURPLE_DEBUG_ERROR">
        <doc xml:space="preserve">Errors.</doc>
      </member>
      <member name="fatal" value="5" c:identifier="PURPLE_DEBUG_FATAL">
        <doc xml:space="preserve">Fatal errors.</doc>
      </member>
    </enumeration>
    <record name="DebugUiOps"
            c:type="PurpleDebugUiOps"
            glib:type-name="PurpleDebugUiOps"
            glib:get-type="purple_debug_ui_ops_get_type"
            c:symbol-prefix="debug_ui_ops">
      <doc xml:space="preserve">Debug UI operations.</doc>
      <field name="print">
        <callback name="print">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="level" transfer-ownership="none">
              <type name="DebugLevel" c:type="PurpleDebugLevel"/>
            </parameter>
            <parameter name="category" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="arg_s" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_enabled">
        <callback name="is_enabled">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="level" transfer-ownership="none">
              <type name="DebugLevel" c:type="PurpleDebugLevel"/>
            </parameter>
            <parameter name="category" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="DesktopItem"
            c:type="PurpleDesktopItem"
            glib:type-name="PurpleDesktopItem"
            glib:get-type="purple_desktop_item_get_type"
            c:symbol-prefix="desktop_item">
      <constructor name="new_from_file"
                   c:identifier="purple_desktop_item_new_from_file">
        <doc xml:space="preserve">This function loads 'filename' and turns it into a PurpleDesktopItem.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The newly loaded item, or NULL on error.</doc>
          <type name="DesktopItem" c:type="PurpleDesktopItem*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The filename or directory path to load the PurpleDesktopItem from</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="purple_desktop_item_copy">
        <doc xml:space="preserve">Creates a copy of a PurpleDesktopItem.  The new copy has a refcount of 1.
Note: Section stack is NOT copied.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new copy</doc>
          <type name="DesktopItem" c:type="PurpleDesktopItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">The item to be copied</doc>
            <type name="DesktopItem" c:type="const PurpleDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entry_type"
              c:identifier="purple_desktop_item_get_entry_type">
        <doc xml:space="preserve">Gets the type attribute (the 'Type' field) of the item.  This should
usually be 'Application' for an application, but it can be 'Directory'
for a directory description.  There are other types available as well.
The type usually indicates how the desktop item should be handeled and
how the 'Exec' field should be handeled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of the specified 'item'. The returned memory
remains owned by the PurpleDesktopItem and should not be freed.</doc>
          <type name="DesktopItemType" c:type="PurpleDesktopItemType"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A desktop item</doc>
            <type name="DesktopItem" c:type="const PurpleDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="purple_desktop_item_get_string">
        <doc xml:space="preserve">Gets the value of an attribute of the item, as a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the specified item attribute.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A desktop item</doc>
            <type name="DesktopItem" c:type="const PurpleDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">The attribute to look for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="purple_desktop_item_unref">
        <doc xml:space="preserve">Decreases the reference count of the specified item, and destroys
the item if there are no more references left.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A desktop item</doc>
            <type name="DesktopItem" c:type="PurpleDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DesktopItemType" c:type="PurpleDesktopItemType">
      <member name="null"
              value="0"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_NULL">
      </member>
      <member name="other"
              value="1"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_OTHER">
      </member>
      <member name="application"
              value="2"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_APPLICATION">
      </member>
      <member name="link"
              value="3"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_LINK">
      </member>
      <member name="fsdevice"
              value="4"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_FSDEVICE">
      </member>
      <member name="mime_type"
              value="5"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_MIME_TYPE">
      </member>
      <member name="directory"
              value="6"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_DIRECTORY">
      </member>
      <member name="service"
              value="7"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_SERVICE">
      </member>
      <member name="service_type"
              value="8"
              c:identifier="PURPLE_DESKTOP_ITEM_TYPE_SERVICE_TYPE">
      </member>
    </enumeration>
    <callback name="DnsQueryConnectFunction"
              c:type="PurpleDnsQueryConnectFunction"
              introspectable="0">
      <doc xml:space="preserve">The "hosts" parameter is a linked list containing pairs of
one size_t addrlen and one struct sockaddr *addr.  It should
be free'd by the callback function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hosts" transfer-ownership="none">
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error_message" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DnsQueryData" c:type="PurpleDnsQueryData" disguised="1">
      <doc xml:space="preserve">An opaque structure representing a DNS query.  The hostname and port
associated with the query can be retrieved using
purple_dnsquery_get_host() and purple_dnsquery_get_port().</doc>
    </record>
    <callback name="DnsQueryFailedCallback"
              c:type="PurpleDnsQueryFailedCallback">
      <doc xml:space="preserve">DNS query failed callback used by the UI if it handles resolving DNS</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
        </parameter>
        <parameter name="error_message" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="DnsQueryResolvedCallback"
              c:type="PurpleDnsQueryResolvedCallback"
              introspectable="0">
      <doc xml:space="preserve">DNS query resolved callback used by the UI if it handles resolving DNS</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
        </parameter>
        <parameter name="hosts" transfer-ownership="none">
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </callback>
    <record name="DnsQueryUiOps"
            c:type="PurpleDnsQueryUiOps"
            glib:type-name="PurpleDnsQueryUiOps"
            glib:get-type="purple_dnsquery_ui_ops_get_type"
            c:symbol-prefix="dnsquery_ui_ops">
      <doc xml:space="preserve">DNS Request UI operations;  UIs should implement this if they want to do DNS
lookups themselves, rather than relying on the core.

See &lt;link linkend="chapter-ui-ops"&gt;List of &lt;literal&gt;UiOps&lt;/literal&gt;
    Structures&lt;/link&gt;</doc>
      <field name="resolve_host" introspectable="0">
        <callback name="resolve_host" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="query_data" transfer-ownership="none">
              <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
            </parameter>
            <parameter name="resolved_cb" transfer-ownership="none">
              <type name="DnsQueryResolvedCallback"
                    c:type="PurpleDnsQueryResolvedCallback"/>
            </parameter>
            <parameter name="failed_cb" transfer-ownership="none">
              <type name="DnsQueryFailedCallback"
                    c:type="PurpleDnsQueryFailedCallback"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="query_data" transfer-ownership="none">
              <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="EventLoopUiOps"
            c:type="PurpleEventLoopUiOps"
            glib:type-name="PurpleEventLoopUiOps"
            glib:get-type="purple_eventloop_ui_ops_get_type"
            c:symbol-prefix="eventloop_ui_ops">
      <doc xml:space="preserve">An abstraction of an application's mainloop; libpurple will use this to
watch file descriptors and schedule timed callbacks.  If your application
uses the glib mainloop, there is an implementation of this struct in
&lt;filename&gt;libpurple/example/nullclient.c&lt;/filename&gt; which you can use
verbatim.</doc>
      <field name="timeout_add" introspectable="0">
        <callback name="timeout_add" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="interval" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="function" transfer-ownership="none" closure="2">
              <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timeout_remove">
        <callback name="timeout_remove">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="handle" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="input_add" introspectable="0">
        <callback name="input_add" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="fd" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="cond" transfer-ownership="none">
              <type name="InputCondition" c:type="PurpleInputCondition"/>
            </parameter>
            <parameter name="func" transfer-ownership="none" closure="3">
              <type name="InputFunction" c:type="PurpleInputFunction"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="input_remove">
        <callback name="input_remove">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="handle" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="input_get_error">
        <callback name="input_get_error">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="fd" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timeout_add_seconds" introspectable="0">
        <callback name="timeout_add_seconds" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="interval" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="function" transfer-ownership="none" closure="2">
              <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="FilterAccountFunc" c:type="PurpleFilterAccountFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="GetPublicAliasFailureCallback"
              c:type="PurpleGetPublicAliasFailureCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="GetPublicAliasSuccessCallback"
              c:type="PurpleGetPublicAliasSuccessCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="alias" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Group"
           c:symbol-prefix="group"
           c:type="PurpleGroup"
           parent="CountingNode"
           glib:type-name="PurpleGroup"
           glib:get-type="purple_group_get_type"
           glib:type-struct="GroupClass">
      <doc xml:space="preserve">A group on the buddy list.

A group is a counting node, which means it keeps track of the counts of the
chats and contacts under this group.</doc>
      <constructor name="new" c:identifier="purple_group_new">
        <doc xml:space="preserve">Creates a new group

You can't have more than one group with the same name.  Sorry.  If you pass
this the name of a group that already exists, it will return that group.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new group struct</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the new group</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_accounts"
              c:identifier="purple_group_get_accounts"
              introspectable="0">
        <doc xml:space="preserve">Returns a list of accounts that have buddies in this group</doc>
        <return-value>
          <doc xml:space="preserve">A GSList of accounts (which must be freed), or NULL if the group
        has no accounts.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="g" transfer-ownership="none">
            <doc xml:space="preserve">The group</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_group_get_name">
        <doc xml:space="preserve">Returns the name of a group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the group.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">The group.</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="on_account" c:identifier="purple_group_on_account">
        <doc xml:space="preserve">Determines whether an account owns any buddies in a given group</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if there are any buddies in the group, or FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="g" transfer-ownership="none">
            <doc xml:space="preserve">The group to search through.</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="purple_group_set_name">
        <doc xml:space="preserve">Sets the name of a group.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">The group.</doc>
            <type name="Group" c:type="PurpleGroup*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the group.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="counting">
        <type name="CountingNode" c:type="PurpleCountingNode"/>
      </field>
    </class>
    <record name="GroupClass"
            c:type="PurpleGroupClass"
            glib:is-gtype-struct-for="Group">
      <doc xml:space="preserve">The base class for all #PurpleGroup's.</doc>
      <field name="counting_class">
        <type name="CountingNodeClass" c:type="PurpleCountingNodeClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="HMACCipher"
           c:symbol-prefix="hmac_cipher"
           c:type="PurpleHMACCipher"
           parent="Cipher"
           glib:type-name="PurpleHMACCipher"
           glib:get-type="purple_hmac_cipher_get_type"
           glib:type-struct="HMACCipherClass">
      <constructor name="new" c:identifier="purple_hmac_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
        <parameters>
          <parameter name="hash" transfer-ownership="none">
            <type name="Hash" c:type="PurpleHash*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_hash"
              c:identifier="purple_hmac_cipher_get_hash"
              introspectable="0">
        <return-value>
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <type name="HMACCipher" c:type="const PurpleHMACCipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hash"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Hash"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="HMACCipherClass"
            c:type="PurpleHMACCipherClass"
            glib:is-gtype-struct-for="HMACCipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Hash"
           c:symbol-prefix="hash"
           c:type="PurpleHash"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleHash"
           glib:get-type="purple_hash_get_type"
           glib:type-struct="HashClass">
      <doc xml:space="preserve">Purple Hash is an opaque data structure and should not be used directly.</doc>
      <virtual-method name="append" invoker="append">
        <doc xml:space="preserve">Appends data to the hash context</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to append</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="digest" invoker="digest">
        <doc xml:space="preserve">Digests a hash context</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
          <parameter name="digest" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the digest</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_block_size" invoker="get_block_size">
        <doc xml:space="preserve">Gets the block size of a hash</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The block size of the hash</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash whose block size to get</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_digest_size" invoker="get_digest_size">
        <doc xml:space="preserve">Gets the digest size of a hash</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The digest size of the hash</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash whose digest size to get</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset" invoker="reset">
        <doc xml:space="preserve">Resets a hash to it's default value
Note: If you have set an IV you will have to set it after resetting</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset_state" invoker="reset_state">
        <doc xml:space="preserve">Resets a hash state to it's default value, but doesn't touch stateless
configuration.

That means, IV and digest will be wiped out, but keys, ops or salt
will remain untouched.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="append" c:identifier="purple_hash_append">
        <doc xml:space="preserve">Appends data to the hash context</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to append</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the data</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="digest" c:identifier="purple_hash_digest">
        <doc xml:space="preserve">Digests a hash context</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
          <parameter name="digest" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the digest</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="digest_to_str" c:identifier="purple_hash_digest_to_str">
        <doc xml:space="preserve">Converts a guchar digest into a hex string</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
          <parameter name="digest_s" transfer-ownership="none">
            <doc xml:space="preserve">The return buffer for the string digest</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_size" c:identifier="purple_hash_get_block_size">
        <doc xml:space="preserve">Gets the block size of a hash</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The block size of the hash</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash whose block size to get</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_digest_size"
              c:identifier="purple_hash_get_digest_size">
        <doc xml:space="preserve">Gets the digest size of a hash</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The digest size of the hash</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash whose digest size to get</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="purple_hash_reset">
        <doc xml:space="preserve">Resets a hash to it's default value
Note: If you have set an IV you will have to set it after resetting</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_state" c:identifier="purple_hash_reset_state">
        <doc xml:space="preserve">Resets a hash state to it's default value, but doesn't touch stateless
configuration.

That means, IV and digest will be wiped out, but keys, ops or salt
will remain untouched.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve">The hash</doc>
            <type name="Hash" c:type="PurpleHash*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="HashClass"
            c:type="PurpleHashClass"
            glib:is-gtype-struct-for="Hash">
      <doc xml:space="preserve">The base class for all #PurpleHash's.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset_state">
        <callback name="reset_state">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="append">
        <callback name="append">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">The data to append</doc>
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the data</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="digest">
        <callback name="digest">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
            <parameter name="digest" transfer-ownership="none">
              <doc xml:space="preserve">The return buffer for the digest</doc>
              <type name="guint8" c:type="guchar"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <doc xml:space="preserve">The length of the buffer</doc>
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_digest_size">
        <callback name="get_digest_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The digest size of the hash</doc>
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash whose digest size to get</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_block_size">
        <callback name="get_block_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The block size of the hash</doc>
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="hash" transfer-ownership="none">
              <doc xml:space="preserve">The hash whose block size to get</doc>
              <type name="Hash" c:type="PurpleHash*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="HttpCallback" c:type="PurpleHttpCallback">
      <doc xml:space="preserve">An callback called after performing (successfully or not) HTTP request.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="response" transfer-ownership="none">
          <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HttpConnection" c:type="PurpleHttpConnection" disguised="1">
      <doc xml:space="preserve">A representation of actually running HTTP request. Can be used to cancel the
request.</doc>
    </record>
    <record name="HttpConnectionSet"
            c:type="PurpleHttpConnectionSet"
            disguised="1">
      <doc xml:space="preserve">A set of running HTTP requests. Can be used to cancel all of them at once.</doc>
      <method name="add" c:identifier="purple_http_connection_set_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <type name="HttpConnectionSet" c:type="PurpleHttpConnectionSet*"/>
          </instance-parameter>
          <parameter name="http_conn" transfer-ownership="none">
            <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_http_connection_set_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <type name="HttpConnectionSet" c:type="PurpleHttpConnectionSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_http_connection_set_new"
                introspectable="0">
        <return-value>
          <type name="HttpConnectionSet" c:type="PurpleHttpConnectionSet*"/>
        </return-value>
      </function>
    </record>
    <callback name="HttpContentReader"
              c:type="PurpleHttpContentReader"
              introspectable="0">
      <doc xml:space="preserve">An callback for getting large request contents (ie. from file stored on
disk).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">Connection, which requests data.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve">Buffer to store data to (with offset ignored).</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve">Position, from where to read data.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve">Length of data to read.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="4">
          <doc xml:space="preserve">The user data passed with callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none">
          <doc xml:space="preserve">The function to call after storing data to buffer.</doc>
          <type name="HttpContentReaderCb" c:type="PurpleHttpContentReaderCb"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HttpContentReaderCb" c:type="PurpleHttpContentReaderCb">
      <doc xml:space="preserve">An callback called after storing data requested by PurpleHttpContentReader.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="eof" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="stored" transfer-ownership="none">
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HttpContentWriter" c:type="PurpleHttpContentWriter">
      <doc xml:space="preserve">An callback for writting large response contents.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE, if succeeded, FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">Connection, which requests data.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="response" transfer-ownership="none">
          <doc xml:space="preserve">Response at point got so far (may change later).</doc>
          <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve">Buffer to read data from (with offset ignored).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve">Position of data got (its value is offset + length of
                 previous call), can be safely ignored.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve">Length of data read.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="5">
          <doc xml:space="preserve">The user data passed with callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HttpCookieJar" c:type="PurpleHttpCookieJar" disguised="1">
      <doc xml:space="preserve">An collection of cookies, got from HTTP response or provided for HTTP
request.</doc>
      <method name="get" c:identifier="purple_http_cookie_jar_get">
        <doc xml:space="preserve">Gets the cookie.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Cookie contents, or NULL, if cookie doesn't exists.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Cookie name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="purple_http_cookie_jar_is_empty">
        <doc xml:space="preserve">Checks, if the cookie jar contains any cookies.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE, if cookie jar contains any cookie, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="purple_http_cookie_jar_ref">
        <doc xml:space="preserve">Increment the reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="purple_http_cookie_jar_set">
        <doc xml:space="preserve">Sets the cookie.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Cookie name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Cookie contents.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="purple_http_cookie_jar_unref"
              introspectable="0">
        <doc xml:space="preserve">Decrement the reference count.

If the reference count reaches zero, the cookie jar will be freed.</doc>
        <return-value>
          <doc xml:space="preserve">@cookie_jar or %NULL if the reference count reached zero.</doc>
          <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_http_cookie_jar_new"
                introspectable="0">
        <doc xml:space="preserve">Creates new cookie jar,</doc>
        <return-value>
          <doc xml:space="preserve">empty cookie jar.</doc>
          <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
        </return-value>
      </function>
    </record>
    <record name="HttpKeepalivePool"
            c:type="PurpleHttpKeepalivePool"
            disguised="1">
      <doc xml:space="preserve">A pool of TCP connections for HTTP Keep-Alive session.</doc>
      <method name="get_limit_per_host"
              c:identifier="purple_http_keepalive_pool_get_limit_per_host">
        <doc xml:space="preserve">Gets maximum allowed number of connections to specific host-triple (is_ssl +
hostname + port).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The limit.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">The HTTP Keep-Alive pool.</doc>
            <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="purple_http_keepalive_pool_ref">
        <doc xml:space="preserve">Increment the reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">The HTTP Keep-Alive pool.</doc>
            <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_limit_per_host"
              c:identifier="purple_http_keepalive_pool_set_limit_per_host">
        <doc xml:space="preserve">Sets maximum allowed number of connections to specific host-triple (is_ssl +
hostname + port).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">The HTTP Keep-Alive pool.</doc>
            <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">The new limit, 0 for unlimited.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="purple_http_keepalive_pool_unref"
              introspectable="0">
        <doc xml:space="preserve">Decrement the reference count.

If the reference count reaches zero, the pool will be freed and all
connections will be closed.</doc>
        <return-value>
          <doc xml:space="preserve">@pool or %NULL if the reference count reached zero.</doc>
          <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">The HTTP Keep-Alive pool.</doc>
            <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_http_keepalive_pool_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a new HTTP Keep-Alive pool.</doc>
        <return-value>
          <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
        </return-value>
      </function>
    </record>
    <callback name="HttpProgressWatcher" c:type="PurpleHttpProgressWatcher">
      <doc xml:space="preserve">An callback for watching HTTP connection progress.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP Connection.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="reading_state" transfer-ownership="none">
          <doc xml:space="preserve">FALSE, is we are sending the request, TRUE, when reading
                     the response.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="processed" transfer-ownership="none">
          <doc xml:space="preserve">The amount of data already processed.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="total" transfer-ownership="none">
          <doc xml:space="preserve">Total amount of data (in current state).</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="4">
          <doc xml:space="preserve">The user data passed with callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HttpRequest" c:type="PurpleHttpRequest" disguised="1">
      <doc xml:space="preserve">A structure containing all data required to generate a single HTTP request.</doc>
      <method name="get_cookie_jar"
              c:identifier="purple_http_request_get_cookie_jar"
              introspectable="0">
        <doc xml:space="preserve">Gets cookie jar used for the request.</doc>
        <return-value>
          <doc xml:space="preserve">The cookie jar.</doc>
          <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keepalive_pool"
              c:identifier="purple_http_request_get_keepalive_pool"
              introspectable="0">
        <doc xml:space="preserve">Gets HTTP KeepAlive connections pool associated with the request.

It doesn't affect pool's reference count.</doc>
        <return-value>
          <doc xml:space="preserve">The KeepAlive pool, used for the request.</doc>
          <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_len"
              c:identifier="purple_http_request_get_max_len">
        <doc xml:space="preserve">Gets maximum length of response content to read.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Maximum length of response to read, or -1 if unlimited.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_redirects"
              c:identifier="purple_http_request_get_max_redirects">
        <doc xml:space="preserve">Gets maximum amount of redirects.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Current maximum amount of redirects (-1 for unlimited).</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="purple_http_request_get_method">
        <doc xml:space="preserve">Gets HTTP method set for the request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The method.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="purple_http_request_get_timeout">
        <doc xml:space="preserve">Get maximum amount of time, that request is allowed to run.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Timeout currently set (-1 for infinite).</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url" c:identifier="purple_http_request_get_url">
        <doc xml:space="preserve">Gets URL set for the HTTP request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">URL set for this request.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="header_add" c:identifier="purple_http_request_header_add">
        <doc xml:space="preserve">Adds (without replacing, if exists) an HTTP request header.

See purple_http_request_header_set().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A header to be set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="header_set" c:identifier="purple_http_request_header_set">
        <doc xml:space="preserve">Sets (replaces, if exists) specified HTTP request header with provided value.

See purple_http_request_header_add().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A header to be set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A value to set, or NULL to remove specified header.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="header_set_printf"
              c:identifier="purple_http_request_header_set_printf"
              introspectable="0">
        <doc xml:space="preserve">Constructs and sets (replaces, if exists) specified HTTP request header.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">A header to be set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">The format string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="is_http11" c:identifier="purple_http_request_is_http11">
        <doc xml:space="preserve">Gets used HTTP version.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE, if we use HTTP/1.1, FALSE for HTTP/1.0.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="purple_http_request_ref">
        <doc xml:space="preserve">Increment the reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_contents"
              c:identifier="purple_http_request_set_contents">
        <doc xml:space="preserve">Sets contents of HTTP request (for example, POST data).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="contents" transfer-ownership="none">
            <doc xml:space="preserve">The contents.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">The length of contents (-1 if it's a NULL-terminated string)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contents_reader"
              c:identifier="purple_http_request_set_contents_reader"
              introspectable="0">
        <doc xml:space="preserve">Sets contents reader for HTTP request, used mainly for possible large
uploads.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="reader"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">The reader callback.</doc>
            <type name="HttpContentReader" c:type="PurpleHttpContentReader"/>
          </parameter>
          <parameter name="contents_length" transfer-ownership="none">
            <doc xml:space="preserve">The size of all contents.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">The user data to pass to the callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cookie_jar"
              c:identifier="purple_http_request_set_cookie_jar">
        <doc xml:space="preserve">Sets cookie jar used for the request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="cookie_jar" transfer-ownership="none">
            <doc xml:space="preserve">The cookie jar.</doc>
            <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http11" c:identifier="purple_http_request_set_http11">
        <doc xml:space="preserve">Sets HTTP version to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="http11" transfer-ownership="none">
            <doc xml:space="preserve">TRUE for HTTP/1.1, FALSE for HTTP/1.0.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keepalive_pool"
              c:identifier="purple_http_request_set_keepalive_pool">
        <doc xml:space="preserve">Sets HTTP KeepAlive connections pool for the request.

It increases pool's reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">The new KeepAlive pool, or NULL to reset.</doc>
            <type name="HttpKeepalivePool" c:type="PurpleHttpKeepalivePool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_len"
              c:identifier="purple_http_request_set_max_len">
        <doc xml:space="preserve">Sets maximum length of response content to read.

Headers length doesn't count here.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none">
            <doc xml:space="preserve">Maximum length of response to read (-1 for the maximum
               supported amount).</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_redirects"
              c:identifier="purple_http_request_set_max_redirects">
        <doc xml:space="preserve">Sets maximum amount of redirects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="max_redirects" transfer-ownership="none">
            <doc xml:space="preserve">Maximum amount of redirects, or -1 for unlimited.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_method" c:identifier="purple_http_request_set_method">
        <doc xml:space="preserve">Sets custom HTTP method used for the request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">The method, or NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_writer"
              c:identifier="purple_http_request_set_response_writer">
        <doc xml:space="preserve">Set contents writer for HTTP response.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="writer"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The writer callback, or %NULL to remove existing.</doc>
            <type name="HttpContentWriter" c:type="PurpleHttpContentWriter"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">The user data to pass to the callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="purple_http_request_set_timeout">
        <doc xml:space="preserve">Set maximum amount of time, that request is allowed to run.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve">Time (in seconds) after that timeout will be cancelled,
               -1 for infinite time.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url" c:identifier="purple_http_request_set_url">
        <doc xml:space="preserve">Sets URL for HTTP request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">The url.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_printf"
              c:identifier="purple_http_request_set_url_printf"
              introspectable="0">
        <doc xml:space="preserve">Constructs and sets an URL for HTTP request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">The format string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="purple_http_request_unref"
              introspectable="0">
        <doc xml:space="preserve">Decrement the reference count.

If the reference count reaches zero, the http request struct will be freed.</doc>
        <return-value>
          <doc xml:space="preserve">@request or %NULL if the reference count reached zero.</doc>
          <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request.</doc>
            <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_http_request_new"
                introspectable="0">
        <doc xml:space="preserve">Creates the new instance of HTTP request configuration.</doc>
        <return-value>
          <doc xml:space="preserve">The new instance of HTTP request struct.</doc>
          <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">The URL to request for, or NULL to leave empty (to be set with
           purple_http_request_set_url).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="HttpResponse" c:type="PurpleHttpResponse" disguised="1">
      <doc xml:space="preserve">All information got with response for HTTP request.</doc>
      <method name="get_all_headers"
              c:identifier="purple_http_response_get_all_headers"
              introspectable="0">
        <doc xml:space="preserve">Gets all headers got with response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GList of PurpleKeyValuePair, which keys are header field
                names (gchar*) and values are its contents (gchar*).</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_code" c:identifier="purple_http_response_get_code">
        <doc xml:space="preserve">Gets HTTP response code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">HTTP response code.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="purple_http_response_get_data">
        <doc xml:space="preserve">Gets HTTP response data.

Response data is not written, if writer callback was set for request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The data.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Return address for the size of the data.  Can be NULL.</doc>
            <type name="gulong" c:type="size_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_len"
              c:identifier="purple_http_response_get_data_len">
        <doc xml:space="preserve">Gets HTTP response data length.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data length;</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error" c:identifier="purple_http_response_get_error">
        <doc xml:space="preserve">Gets error description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Localized error description or NULL, if there was no error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header" c:identifier="purple_http_response_get_header">
        <doc xml:space="preserve">Gets one header contents with specified name got with response.

To get all headers with the same name, use
purple_http_response_get_headers_by_name instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Header field contents or NULL, if there is no such one.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of header field.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headers_by_name"
              c:identifier="purple_http_response_get_headers_by_name"
              introspectable="0">
        <doc xml:space="preserve">Gets all headers with specified name got with response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GList of header field records contents (gchar*).</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of header field.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_successful"
              c:identifier="purple_http_response_is_successful">
        <doc xml:space="preserve">Checks, if HTTP request was performed successfully.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE, if request was performed successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The response.</doc>
            <type name="HttpResponse" c:type="PurpleHttpResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="HttpURL" c:type="PurpleHttpURL" disguised="1">
      <doc xml:space="preserve">Parsed representation for the URL.</doc>
      <method name="free" c:identifier="purple_http_url_free">
        <doc xml:space="preserve">Frees the parsed URL struct.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The parsed URL struct, or NULL.</doc>
            <type name="HttpURL" c:type="PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fragment" c:identifier="purple_http_url_get_fragment">
        <doc xml:space="preserve">Gets the fragment part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The fragment.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="purple_http_url_get_host">
        <doc xml:space="preserve">Gets the hostname part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The hostname.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="purple_http_url_get_password">
        <doc xml:space="preserve">Gets the password part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The password.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="purple_http_url_get_path">
        <doc xml:space="preserve">Gets the path part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="purple_http_url_get_port">
        <doc xml:space="preserve">Gets the port part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The port number.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol" c:identifier="purple_http_url_get_protocol">
        <doc xml:space="preserve">Gets the protocol part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The protocol.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="purple_http_url_get_username">
        <doc xml:space="preserve">Gets the username part of URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="const PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="purple_http_url_print">
        <doc xml:space="preserve">Converts the URL struct to the printable form. The result may not be a valid
URL (in cases, when the struct doesn't have all fields filled properly).

The result must be g_free'd.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The printable form of the URL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parsed_url" transfer-ownership="none">
            <doc xml:space="preserve">The URL struct.</doc>
            <type name="HttpURL" c:type="PurpleHttpURL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="relative" c:identifier="purple_http_url_relative">
        <doc xml:space="preserve">Converts the base URL to the absolute form of the provided relative URL.

Example: "https://example.com/path/to/file.html" + "subdir/other-file.html" =
         "https://example.com/path/to/subdir/another-file.html"</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="base_url" transfer-ownership="none">
            <doc xml:space="preserve">The base URL. The result is stored here.</doc>
            <type name="HttpURL" c:type="PurpleHttpURL*"/>
          </instance-parameter>
          <parameter name="relative_url" transfer-ownership="none">
            <doc xml:space="preserve">The relative URL.</doc>
            <type name="HttpURL" c:type="PurpleHttpURL*"/>
          </parameter>
        </parameters>
      </method>
      <function name="parse"
                c:identifier="purple_http_url_parse"
                introspectable="0">
        <doc xml:space="preserve">Parses a URL.

The returned data must be freed with purple_http_url_free.</doc>
        <return-value>
          <doc xml:space="preserve">The parsed url or NULL, if the URL is invalid.</doc>
          <type name="HttpURL" c:type="PurpleHttpURL*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">The URL to parse.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="IMAGE_STORE_PROTOCOL"
              value="purple-image:"
              c:type="PURPLE_IMAGE_STORE_PROTOCOL">
      <doc xml:space="preserve">A global URI prefix for images stored in this subsystem.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IMAGE_STORE_STOCK_PROTOCOL"
              value="purple-stock-image:"
              c:type="PURPLE_IMAGE_STORE_STOCK_PROTOCOL">
      <doc xml:space="preserve">A global URI prefix for stock images, with names defined by libpurple and
contents defined by the UI.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="IMTypingState"
                 glib:type-name="PurpleIMTypingState"
                 glib:get-type="purple_im_typing_state_get_type"
                 c:type="PurpleIMTypingState">
      <member name="not_typing"
              value="0"
              c:identifier="PURPLE_IM_NOT_TYPING"
              glib:nick="not-typing">
      </member>
      <member name="typing"
              value="1"
              c:identifier="PURPLE_IM_TYPING"
              glib:nick="typing">
      </member>
      <member name="typed"
              value="2"
              c:identifier="PURPLE_IM_TYPED"
              glib:nick="typed">
      </member>
    </enumeration>
    <bitfield name="IconScaleRules"
              glib:type-name="PurpleIconScaleRules"
              glib:get-type="purple_icon_scale_rules_get_type"
              c:type="PurpleIconScaleRules">
      <member name="display"
              value="1"
              c:identifier="PURPLE_ICON_SCALE_DISPLAY"
              glib:nick="display">
      </member>
      <member name="send"
              value="2"
              c:identifier="PURPLE_ICON_SCALE_SEND"
              glib:nick="send">
      </member>
    </bitfield>
    <record name="IdleUiOps"
            c:type="PurpleIdleUiOps"
            glib:type-name="PurpleIdleUiOps"
            glib:get-type="purple_idle_ui_ops_get_type"
            c:symbol-prefix="idle_ui_ops">
      <doc xml:space="preserve">Idle UI operations.</doc>
      <field name="get_time_idle">
        <callback name="get_time_idle">
          <return-value transfer-ownership="none">
            <type name="glong" c:type="time_t"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="InputCondition" c:type="PurpleInputCondition">
      <doc xml:space="preserve">An input condition.</doc>
      <member name="read" value="1" c:identifier="PURPLE_INPUT_READ">
        <doc xml:space="preserve">A read condition.</doc>
      </member>
      <member name="write" value="2" c:identifier="PURPLE_INPUT_WRITE">
        <doc xml:space="preserve">A write condition.</doc>
      </member>
    </bitfield>
    <callback name="InputFunction" c:type="PurpleInputFunction">
      <doc xml:space="preserve">The type of callbacks to handle events on file descriptors, as passed to
purple_input_add().  The callback will receive the @user_data passed to
purple_input_add(), the file descriptor on which the event occurred, and the
condition that was satisfied to cause the callback to be invoked.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="InputCondition" c:type="PurpleInputCondition"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Keyring"
            c:type="PurpleKeyring"
            glib:type-name="PurpleKeyring"
            glib:get-type="purple_keyring_get_type"
            c:symbol-prefix="keyring">
      <constructor name="new" c:identifier="purple_keyring_new">
        <doc xml:space="preserve">Creates a new keyring wrapper.</doc>
        <return-value transfer-ownership="full">
          <type name="Keyring" c:type="PurpleKeyring*"/>
        </return-value>
      </constructor>
      <method name="free" c:identifier="purple_keyring_free">
        <doc xml:space="preserve">Frees all data allocated with purple_keyring_new.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">Keyring wrapper struct.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apply_settings"
              c:identifier="purple_keyring_get_apply_settings"
              introspectable="0">
        <return-value>
          <type name="KeyringApplySettings"
                c:type="PurpleKeyringApplySettings"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancel_requests"
              c:identifier="purple_keyring_get_cancel_requests"
              introspectable="0">
        <return-value>
          <type name="KeyringCancelRequests"
                c:type="PurpleKeyringCancelRequests"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_close_keyring"
              c:identifier="purple_keyring_get_close_keyring"
              introspectable="0">
        <return-value>
          <type name="KeyringClose" c:type="PurpleKeyringClose"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_export_password"
              c:identifier="purple_keyring_get_export_password"
              introspectable="0">
        <return-value>
          <type name="KeyringExportPassword"
                c:type="PurpleKeyringExportPassword"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="purple_keyring_get_id">
        <doc xml:space="preserve">Gets keyring ID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Keyring ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_import_password"
              c:identifier="purple_keyring_get_import_password"
              introspectable="0">
        <return-value>
          <type name="KeyringImportPassword"
                c:type="PurpleKeyringImportPassword"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_keyring_get_name">
        <doc xml:space="preserve">Gets friendly user name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Friendly user name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_password"
              c:identifier="purple_keyring_get_read_password"
              introspectable="0">
        <return-value>
          <type name="KeyringRead" c:type="PurpleKeyringRead"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_settings"
              c:identifier="purple_keyring_get_read_settings"
              introspectable="0">
        <return-value>
          <type name="KeyringReadSettings" c:type="PurpleKeyringReadSettings"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_save_password"
              c:identifier="purple_keyring_get_save_password"
              introspectable="0">
        <return-value>
          <type name="KeyringSave" c:type="PurpleKeyringSave"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <type name="Keyring" c:type="const PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="purple_keyring_register">
        <doc xml:space="preserve">Register a keyring plugin.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring to register.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_apply_settings"
              c:identifier="purple_keyring_set_apply_settings"
              introspectable="0">
        <doc xml:space="preserve">Sets apply settings method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="apply_settings"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve">Apply settings method.</doc>
            <type name="KeyringApplySettings"
                  c:type="PurpleKeyringApplySettings"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancel_requests"
              c:identifier="purple_keyring_set_cancel_requests">
        <doc xml:space="preserve">Sets cancel requests method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="cancel_requests"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve">Cancel requests method.</doc>
            <type name="KeyringCancelRequests"
                  c:type="PurpleKeyringCancelRequests"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_close_keyring"
              c:identifier="purple_keyring_set_close_keyring">
        <doc xml:space="preserve">Sets close keyring method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="close_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">Close keyring method.</doc>
            <type name="KeyringClose" c:type="PurpleKeyringClose"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_export_password"
              c:identifier="purple_keyring_set_export_password">
        <doc xml:space="preserve">Sets export password method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="export_password"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve">Export password method.</doc>
            <type name="KeyringExportPassword"
                  c:type="PurpleKeyringExportPassword"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="purple_keyring_set_id">
        <doc xml:space="preserve">Sets keyring ID.

This field is required.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">Keyring ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_import_password"
              c:identifier="purple_keyring_set_import_password">
        <doc xml:space="preserve">Sets import password method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="import_password"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve">Import password method.</doc>
            <type name="KeyringImportPassword"
                  c:type="PurpleKeyringImportPassword"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inuse" c:identifier="purple_keyring_set_inuse">
        <doc xml:space="preserve">Set the keyring to use. This function will move all passwords from
the old keyring to the new one.

If it fails, it will cancel all changes, close the new keyring, and notify
the callback. If it succeeds, it will remove all passwords from the old safe
and close that safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="newkeyring" transfer-ownership="none">
            <doc xml:space="preserve">The new keyring to use.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve">%FALSE if the change can be cancelled. If this is %TRUE
                   and an error occurs, data might be lost.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A callback for once the change is complete.</doc>
            <type name="KeyringSetInUseCallback"
                  c:type="PurpleKeyringSetInUseCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="purple_keyring_set_name">
        <doc xml:space="preserve">Sets friendly user name.

This field is required.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Friendly user name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_password"
              c:identifier="purple_keyring_set_read_password"
              introspectable="0">
        <doc xml:space="preserve">Sets read password method.

This field is required.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="read_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">Read password method.</doc>
            <type name="KeyringRead" c:type="PurpleKeyringRead"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_settings"
              c:identifier="purple_keyring_set_read_settings"
              introspectable="0">
        <doc xml:space="preserve">Sets read settings method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="read_settings"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve">Read settings method.</doc>
            <type name="KeyringReadSettings"
                  c:type="PurpleKeyringReadSettings"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_save_password"
              c:identifier="purple_keyring_set_save_password"
              introspectable="0">
        <doc xml:space="preserve">Sets save password method.

This field is required.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
          <parameter name="save_cb" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">Save password method.</doc>
            <type name="KeyringSave" c:type="PurpleKeyringSave"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="purple_keyring_unregister">
        <doc xml:space="preserve">Unregister a keyring plugin.

In case the keyring is in use, passwords will be moved to a fallback safe,
and the keyring to unregister will be properly closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="keyring" transfer-ownership="none">
            <doc xml:space="preserve">The keyring to unregister.</doc>
            <type name="Keyring" c:type="PurpleKeyring*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="apply_settings"
                c:identifier="purple_keyring_apply_settings"
                introspectable="0">
        <doc xml:space="preserve">Applies modified settings to current keyring.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE, if succeeded, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="notify_handle" transfer-ownership="none">
            <doc xml:space="preserve">A handle that can be passed to purple_notify_message.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="fields" transfer-ownership="none">
            <doc xml:space="preserve">Modified settings (originally taken from
                     PurpleKeyringReadSettings).</doc>
            <type c:type="PurpleRequestFields*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_domain" c:identifier="purple_keyring_error_domain">
        <doc xml:space="preserve">Gets keyring subsystem error domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">keyring subsystem error domain.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="export_password"
                c:identifier="purple_keyring_export_password">
        <doc xml:space="preserve">Export serialized (and maybe encrypted) password out of current keyring.

It's used by account.c while syncing accounts to xml.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the info was exported successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account for which we want the info.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="keyring_id" transfer-ownership="none">
            <doc xml:space="preserve">The plugin id to be stored in the XML node. This will be
                  NULL or a string that can be considered static.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">An option field that can be used by the plugin. This will
                  be NULL or a string that can be considered static.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to be stored in the XML node. This string must be
                  freed using destroy() once not needed anymore if it is not
                  NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">Will be set if a problem occured.</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">A function to be called, if non NULL, to free data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
        </parameters>
      </function>
      <function name="find_keyring_by_id"
                c:identifier="purple_keyring_find_keyring_by_id">
        <doc xml:space="preserve">Find a keyring by an id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The keyring, or NULL if not found.</doc>
          <type name="Keyring" c:type="PurpleKeyring*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The id for the keyring.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_handle"
                c:identifier="purple_keyring_get_handle"
                introspectable="0">
        <doc xml:space="preserve">Returns the keyring subsystem handle.</doc>
        <return-value>
          <doc xml:space="preserve">The keyring subsystem handle.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
      </function>
      <function name="get_inuse" c:identifier="purple_keyring_get_inuse">
        <doc xml:space="preserve">Get the keyring being used.</doc>
        <return-value transfer-ownership="full">
          <type name="Keyring" c:type="PurpleKeyring*"/>
        </return-value>
      </function>
      <function name="get_options"
                c:identifier="purple_keyring_get_options"
                introspectable="0">
        <doc xml:space="preserve">Returns a GList containing the IDs and names of the registered
keyrings.</doc>
        <return-value>
          <doc xml:space="preserve">The list of IDs and names.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </function>
      <function name="get_password" c:identifier="purple_keyring_get_password">
        <doc xml:space="preserve">Read a password from the current keyring.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A callback for once the password is read.</doc>
            <type name="KeyringReadCallback"
                  c:type="PurpleKeyringReadCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Data passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="import_password"
                c:identifier="purple_keyring_import_password"
                throws="1">
        <doc xml:space="preserve">Import serialized (and maybe encrypted) password into current keyring.

It's used by account.c while reading a password from xml.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the input was accepted, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="keyring_id" transfer-ownership="none">
            <doc xml:space="preserve">The plugin ID that was stored in the xml file. Can be NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">A keyring specific option that was stored. Can be NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Data that was stored, can be NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="init" c:identifier="purple_keyring_init">
        <doc xml:space="preserve">Initializes the keyring subsystem.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="read_settings"
                c:identifier="purple_keyring_read_settings"
                introspectable="0">
        <doc xml:space="preserve">Reads settings from current keyring.</doc>
        <return-value>
          <doc xml:space="preserve">New copy of current settings (must be free'd with
        purple_request_fields_destroy).</doc>
          <type c:type="PurpleRequestFields*"/>
        </return-value>
      </function>
      <function name="set_password" c:identifier="purple_keyring_set_password">
        <doc xml:space="preserve">Save a password to the current keyring.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">The password to save.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">A callback for once the password is saved.</doc>
            <type name="KeyringSaveCallback"
                  c:type="PurpleKeyringSaveCallback"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="uninit" c:identifier="purple_keyring_uninit">
        <doc xml:space="preserve">Uninitializes the keyring subsystem.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
    </record>
    <callback name="KeyringApplySettings"
              c:type="PurpleKeyringApplySettings"
              introspectable="0">
      <doc xml:space="preserve">Applies modified keyring settings.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE, if succeeded, FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="notify_handle" transfer-ownership="none">
          <doc xml:space="preserve">A handle that can be passed to purple_notify_message.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="fields" transfer-ownership="none">
          <doc xml:space="preserve">Modified settings (originally taken from
                     PurpleKeyringReadSettings).</doc>
          <type c:type="PurpleRequestFields*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringCancelRequests"
              c:type="PurpleKeyringCancelRequests">
      <doc xml:space="preserve">Cancel all running requests.

After calling that, all queued requests should run their callbacks (most
probably, with failure result).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </callback>
    <callback name="KeyringChangeMasterCallback"
              c:type="PurpleKeyringChangeMasterCallback">
      <doc xml:space="preserve">Callback for once the master password for a keyring has been changed.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Error that has occurred.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringClose" c:type="PurpleKeyringClose">
      <doc xml:space="preserve">Close the keyring.

This will be called so the keyring can do any cleanup it needs.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </callback>
    <callback name="KeyringExportPassword"
              c:type="PurpleKeyringExportPassword">
      <doc xml:space="preserve">Export serialized (and maybe encrypted) password.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">An option field that can be used by the plugin. This is
               expected to be a static string.</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">The data to be stored in the XML node. This string will be
               freed using destroy() once not needed anymore.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Will be set if a problem occured.</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">A function to be called, if non NULL, to free data.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringImportPassword"
              c:type="PurpleKeyringImportPassword"
              throws="1">
      <doc xml:space="preserve">Import serialized (and maybe encrypted) password.

This is not async because it is not meant to prompt for a master password and
decrypt passwords.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">A keyring specific option that was stored. Can be NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data that was stored. Can be NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringRead" c:type="PurpleKeyringRead" introspectable="0">
      <doc xml:space="preserve">Read the password for an account.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">A callback for once the password is found.</doc>
          <type name="KeyringReadCallback" c:type="PurpleKeyringReadCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data to be passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringReadCallback" c:type="PurpleKeyringReadCallback">
      <doc xml:space="preserve">Callback for once a password is read.

If there was a problem, the password will be NULL, and the error set.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve">The password.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Error that may have occurred.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringReadSettings"
              c:type="PurpleKeyringReadSettings"
              introspectable="0">
      <doc xml:space="preserve">Read keyring settings.</doc>
      <return-value>
        <doc xml:space="preserve">New copy of current settings (must be free'd with
        purple_request_fields_destroy).</doc>
        <type c:type="PurpleRequestFields*"/>
      </return-value>
    </callback>
    <callback name="KeyringSave" c:type="PurpleKeyringSave" introspectable="0">
      <doc xml:space="preserve">Store a password in the keyring.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve">The password to be stored. If the password is NULL, this
                means that the keyring should forget about that password.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="3">
          <doc xml:space="preserve">A callback for once the password is saved.</doc>
          <type name="KeyringSaveCallback" c:type="PurpleKeyringSaveCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data to be passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringSaveCallback" c:type="PurpleKeyringSaveCallback">
      <doc xml:space="preserve">Callback for once a password has been stored.

If there was a problem, the error will be set.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Error that may have occurred.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="KeyringSetInUseCallback"
              c:type="PurpleKeyringSetInUseCallback">
      <doc xml:space="preserve">Callback for when we change the keyring.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">An error that might have occurred.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">A pointer to user supplied data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="MAJOR_VERSION" value="3" c:type="PURPLE_MAJOR_VERSION">
      <doc xml:space="preserve">The major version of the running libpurple.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="MD4Hash"
           c:symbol-prefix="md4_hash"
           c:type="PurpleMD4Hash"
           parent="Hash"
           glib:type-name="PurpleMD4Hash"
           glib:get-type="purple_md4_hash_get_type"
           glib:type-struct="MD4HashClass">
      <constructor name="new" c:identifier="purple_md4_hash_new">
        <return-value transfer-ownership="full">
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Hash" c:type="PurpleHash"/>
      </field>
    </class>
    <record name="MD4HashClass"
            c:type="PurpleMD4HashClass"
            glib:is-gtype-struct-for="MD4Hash">
      <field name="parent">
        <type name="HashClass" c:type="PurpleHashClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="MD5Hash"
           c:symbol-prefix="md5_hash"
           c:type="PurpleMD5Hash"
           parent="Hash"
           glib:type-name="PurpleMD5Hash"
           glib:get-type="purple_md5_hash_get_type"
           glib:type-struct="MD5HashClass">
      <constructor name="new" c:identifier="purple_md5_hash_new">
        <return-value transfer-ownership="full">
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
      </constructor>
      <field name="gparent">
        <type name="Hash" c:type="PurpleHash"/>
      </field>
    </class>
    <record name="MD5HashClass"
            c:type="PurpleMD5HashClass"
            glib:is-gtype-struct-for="MD5Hash">
      <field name="gparent">
        <type name="HashClass" c:type="PurpleHashClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="MICRO_VERSION" value="0" c:type="PURPLE_MICRO_VERSION">
      <doc xml:space="preserve">The micro version of the running libpurple.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="0" c:type="PURPLE_MINOR_VERSION">
      <doc xml:space="preserve">The minor version of the running libpurple.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MOOD_COMMENT"
              value="moodtext"
              c:type="PURPLE_MOOD_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MOOD_NAME" value="mood" c:type="PURPLE_MOOD_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Media"
           c:symbol-prefix="media"
           c:type="PurpleMedia"
           parent="GObject.Object"
           glib:type-name="PurpleMedia"
           glib:get-type="purple_media_get_type">
      <method name="accepted" c:identifier="purple_media_accepted">
        <doc xml:space="preserve">Gets whether a streams selected have been accepted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE The selected streams have been accepted, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_remote_candidates"
              c:identifier="purple_media_add_remote_candidates"
              introspectable="0">
        <doc xml:space="preserve">Adds remote candidates to the stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to add the candidates for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="remote_candidates" transfer-ownership="none">
            <doc xml:space="preserve">The remote candidates to add.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="add_stream" c:identifier="purple_media_add_stream">
        <doc xml:space="preserve">Adds a stream to a session.

It only adds a stream to one audio session or video session as
the @sess_id must be unique between sessions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE The stream was added successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to add the stream to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to add the stream for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of stream to create.</doc>
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
          <parameter name="initiator" transfer-ownership="none">
            <doc xml:space="preserve">Whether or not the local user initiated the stream.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="transmitter" transfer-ownership="none">
            <doc xml:space="preserve">The transmitter to use for the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters to pass to Farstream.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">The parameters to pass to Farstream.</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="candidates_prepared"
              c:identifier="purple_media_candidates_prepared">
        <doc xml:space="preserve">Returns whether or not the candidates for set of streams are prepared</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE All streams for the given session_id/participant combination have candidates prepared, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the remote user in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The remote user to check for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="codecs_ready" c:identifier="purple_media_codecs_ready">
        <doc xml:space="preserve">Gets whether a session's codecs are ready to be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE The codecs are ready, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end" c:identifier="purple_media_end">
        <doc xml:space="preserve">Ends all streams that match the given parameters</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object with which to end streams.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to end streams on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to end streams with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="error"
              c:identifier="purple_media_error"
              introspectable="0">
        <doc xml:space="preserve">Signals an error in the media session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to set the state on.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">The format of the error message to send in the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">The arguments to plug into the format.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="purple_media_get_account"
              introspectable="0">
        <doc xml:space="preserve">Gets the PurpleAccount this media session is on.</doc>
        <return-value>
          <doc xml:space="preserve">The account retrieved.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media session to retrieve the account from.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_local_candidates"
              c:identifier="purple_media_get_active_local_candidates"
              introspectable="0">
        <doc xml:space="preserve">Gets the active local candidates for the stream.</doc>
        <return-value>
          <doc xml:space="preserve">The active candidates retrieved.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to get the active candidate
                   from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_remote_candidates"
              c:identifier="purple_media_get_active_remote_candidates"
              introspectable="0">
        <doc xml:space="preserve">Gets the active remote candidates for the stream.</doc>
        <return-value>
          <doc xml:space="preserve">The remote candidates retrieved.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to get the remote candidate
                   from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_available_params"
              c:identifier="purple_media_get_available_params"
              introspectable="0">
        <doc xml:space="preserve">Gets the list of optional parameters supported by the media backend.

The list is owned by the #PurpleMedia internals and should NOT be freed.</doc>
        <return-value>
          <doc xml:space="preserve">NULL-terminated array of names of supported parameters.</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_codecs"
              c:identifier="purple_media_get_codecs"
              introspectable="0">
        <doc xml:space="preserve">Gets the codecs from a session.</doc>
        <return-value>
          <doc xml:space="preserve">The retreieved codecs.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to get the codecs from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_local_candidates"
              c:identifier="purple_media_get_local_candidates"
              introspectable="0">
        <doc xml:space="preserve">Gets the local candidates from a stream.</doc>
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to get the candidates from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="purple_media_get_manager"
              introspectable="0">
        <doc xml:space="preserve">Gets the PurpleMediaManager this media session is a part of.</doc>
        <return-value>
          <doc xml:space="preserve">The PurpleMediaManager instance retrieved.</doc>
          <type name="gpointer" c:type="_PurpleMediaManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to get the manager instance from.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_media_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Gets the protocol data from the media session.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data retrieved.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media session to retrieve the protocol data from.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_ids"
              c:identifier="purple_media_get_session_ids"
              introspectable="0">
        <doc xml:space="preserve">Gets a list of session IDs.</doc>
        <return-value>
          <doc xml:space="preserve">GList of session IDs. The caller must free the list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media session from which to retrieve session IDs.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_type"
              c:identifier="purple_media_get_session_type">
        <doc xml:space="preserve">Gets the session type from a session</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The retreived session type.</doc>
          <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to get the type from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_src"
              c:identifier="purple_media_get_src"
              introspectable="0">
        <doc xml:space="preserve">Gets the source from a session</doc>
        <return-value>
          <doc xml:space="preserve">The source retrieved.</doc>
          <type c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object the session is in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to get the source from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tee"
              c:identifier="purple_media_get_tee"
              introspectable="0">
        <doc xml:space="preserve">Gets the tee from a given session/stream.</doc>
        <return-value>
          <doc xml:space="preserve">The GstTee element from the chosen session/stream.</doc>
          <type c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The instance to get the tee from.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The id of the session to get the tee from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">Optionally, the participant of the stream to get the tee from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_initiator" c:identifier="purple_media_is_initiator">
        <doc xml:space="preserve">Gets whether the local user is the conference/session/stream's initiator.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the local user is the stream's initator, else FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant of the stream to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_is_supported"
              c:identifier="purple_media_param_is_supported">
        <doc xml:space="preserve">Checks if given optional parameter is supported by the media backend.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if backend recognizes the parameter, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">name of parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_output_windows"
              c:identifier="purple_media_remove_output_windows">
        <doc xml:space="preserve">Removes all output windows from a given media session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The instance to remove all output windows from.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_dtmf" c:identifier="purple_media_send_dtmf">
        <doc xml:space="preserve">Sends a DTMF signal out-of-band.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE DTMF sent successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to send a DTMF signal to.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dtmf" transfer-ownership="none">
            <doc xml:space="preserve">The character representing the DTMF in the range [0-9#*A-D].</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <doc xml:space="preserve">The power level expressed in dBm0 after dropping the sign in the
         range of 0 to 63.  A larger value represents a lower volume.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve">The duration of the tone in milliseconds.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decryption_parameters"
              c:identifier="purple_media_set_decryption_parameters">
        <doc xml:space="preserve">Sets the decryption parameters for a session participant's media.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to decrypt media coming from this session's
         participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use for authentication of the media coming from
       the session's participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The decryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the decryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encryption_parameters"
              c:identifier="purple_media_set_encryption_parameters">
        <doc xml:space="preserve">Sets the encryption parameters of our media in the session.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to encrypt our media in the session.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use to compute authentication codes for our media
       frames.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The encryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the encryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_input_volume"
              c:identifier="purple_media_set_input_volume">
        <doc xml:space="preserve">Sets the input volume of all the selected sessions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object the sessions are in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to select (if any).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The level to set the volume to.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_volume"
              c:identifier="purple_media_set_output_volume">
        <doc xml:space="preserve">Sets the output volume of all the selected streams.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object the streams are in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to limit the streams to (if any).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to limit the streams to (if any).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">The level to set the volume to.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_window"
              c:identifier="purple_media_set_output_window">
        <doc xml:space="preserve">Sets a video output window for the given session/stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An id to reference the output window.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to set the output window on.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to set the output window on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">Optionally, the participant to set the output window on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="window_id" transfer-ownership="none">
            <doc xml:space="preserve">The window id use for embedding the video in.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_params" c:identifier="purple_media_set_params">
        <doc xml:space="preserve">Sets various optional parameters of the media call.

Currently supported are:
  - "sdes-cname"    : The CNAME for the RTP sessions
  - "sdes-name"     : Real name used to describe the source in SDES messages
  - "sdes-tool"     : The TOOL to put in SDES messages
  - "sdes-email"    : Email address to put in SDES messages
  - "sdes-location" : The LOCATION to put in SDES messages
  - "sdes-note"     : The NOTE to put in SDES messages
  - "sdes-phone"    : The PHONE to put in SDES messages</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to set the parameters on.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters to pass</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">Array of @c GParameter to pass</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_media_set_protocol_data">
        <doc xml:space="preserve">Sets the protocol data on the media session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media session to set the protocol data on.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="protocol_data" transfer-ownership="none">
            <doc xml:space="preserve">The data to set on the media session.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_codecs"
              c:identifier="purple_media_set_remote_codecs"
              introspectable="0">
        <doc xml:space="preserve">Sets remote codecs from the stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE The codecs were set successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to set the codecs for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codecs" transfer-ownership="none">
            <doc xml:space="preserve">The list of remote codecs to set.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_codec" c:identifier="purple_media_set_send_codec">
        <doc xml:space="preserve">Sets the send codec for the a session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE The codec was successfully changed, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set the codec for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to set the session to stream.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_rtcp_mux"
              c:identifier="purple_media_set_send_rtcp_mux">
        <doc xml:space="preserve">Sets the rtcp-mux option for the stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE RTCP-Mux was set successfully, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media object to find the session in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session find the stream in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user to set the rtcp-mux for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="send_rtcp_mux" transfer-ownership="none">
            <doc xml:space="preserve">Whether to enable the rtcp-mux option</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="stream_info" c:identifier="purple_media_stream_info">
        <doc xml:space="preserve">Signals different information about the given stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to containing the stream to signal.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of info being signaled.</doc>
            <type name="MediaInfoType" c:type="PurpleMediaInfoType"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The id of the session of the stream being signaled.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant of the stream being signaled.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="local" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if the info originated locally, FALSE if on the remote end.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="backend" transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <property name="conference-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initiator"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MediaManager"/>
      </property>
      <property name="protocol-data" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <glib:signal name="candidate-pair-established" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="candidates-prepared" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="codecs-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="error" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="level" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-candidate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="MediaState"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="stream-info" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="MediaInfoType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MediaAppDataCallbacks" c:type="PurpleMediaAppDataCallbacks">
      <doc xml:space="preserve">A set of callbacks that can be installed on an Application data session with
purple_media_manager_set_application_data_callbacks()

Once installed the @readable callback will get called as long as data is
available to read, so the data must be read completely.
The @writable callback will only be called when the writable state of the
stream changes. The @writable argument defines whether the stream has
become writable or stopped being writable.</doc>
      <field name="readable">
        <callback name="readable">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="MediaManager" c:type="PurpleMediaManager*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="Media" c:type="PurpleMedia*"/>
            </parameter>
            <parameter name="session_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="writable">
        <callback name="writable">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="MediaManager" c:type="PurpleMediaManager*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="Media" c:type="PurpleMedia*"/>
            </parameter>
            <parameter name="session_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="writable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="user_data" transfer-ownership="none" closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="MediaBackend"
               c:symbol-prefix="media_backend"
               c:type="PurpleMediaBackend"
               glib:type-name="PurpleMediaBackend"
               glib:get-type="purple_media_backend_get_type"
               glib:type-struct="MediaBackendIface">
      <doc xml:space="preserve">A placeholder to represent any media backend</doc>
      <virtual-method name="add_remote_candidates"
                      invoker="add_remote_candidates"
                      introspectable="0">
        <doc xml:space="preserve">Add remote candidates to a stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="remote_candidates" transfer-ownership="none">
            <doc xml:space="preserve">The list of remote candidates to add.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_stream" invoker="add_stream">
        <doc xml:space="preserve">Creates and adds a stream to the media backend.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the stream was successfully created, othewise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The backend to add the stream to.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the stream to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The remote participant of the stream to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The media type and direction of the stream to add.</doc>
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
          <parameter name="initiator" transfer-ownership="none">
            <doc xml:space="preserve">True if the local user initiated the stream.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="transmitter" transfer-ownership="none">
            <doc xml:space="preserve">The string id of the tranmsitter to use.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters in the param parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">The additional parameters to pass when creating the stream.</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="codecs_ready" invoker="codecs_ready">
        <doc xml:space="preserve">Get whether or not a session's codecs are ready.

A codec is ready if all of the attributes and additional
parameters have been collected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the codecs are ready, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_codecs"
                      invoker="get_codecs"
                      introspectable="0">
        <doc xml:space="preserve">Gets the codec intersection list for a session.

The intersection list consists of all codecs that are compatible
between the local and remote software.</doc>
        <return-value>
          <doc xml:space="preserve">The codec intersection list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to use.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_local_candidates"
                      invoker="get_local_candidates"
                      introspectable="0">
        <doc xml:space="preserve">Gets the list of local candidates for a stream.</doc>
        <return-value>
          <doc xml:space="preserve">The list of local candidates.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_dtmf">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dtmf" transfer-ownership="none">
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_decryption_parameters"
                      invoker="set_decryption_parameters">
        <doc xml:space="preserve">Sets the decryption parameters for a session participant's media.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to decrypt media coming from this session's
         participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use for authentication of the media coming from
       the session's participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The decryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the decryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_encryption_parameters"
                      invoker="set_encryption_parameters">
        <doc xml:space="preserve">Sets the encryption parameters of our media in the session.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to encrypt our media in the session.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use to compute authentication codes for our media
       frames.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The encryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the encryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_params" invoker="set_params">
        <doc xml:space="preserve">Sets various optional parameters of the media backend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend to set the parameters on.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters to pass to backend</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">Array of @c GParameter to pass to backend</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_remote_codecs"
                      invoker="set_remote_codecs"
                      introspectable="0">
        <doc xml:space="preserve">Sets the remote codecs on a stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the remote codecs were set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codecs" transfer-ownership="none">
            <doc xml:space="preserve">The list of remote codecs to set.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_send_codec" invoker="set_send_codec">
        <doc xml:space="preserve">Sets which codec format to send media content in for a session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set the codec for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to set.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_send_rtcp_mux" invoker="set_send_rtcp_mux">
        <doc xml:space="preserve">Controls whether or not the RTCP should be muxed with the RTP</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set the rtcp-mux option to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="send_rtcp_mux" transfer-ownership="none">
            <doc xml:space="preserve">Whether or not to enable rtcp-mux</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_remote_candidates"
              c:identifier="purple_media_backend_add_remote_candidates"
              introspectable="0">
        <doc xml:space="preserve">Add remote candidates to a stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="remote_candidates" transfer-ownership="none">
            <doc xml:space="preserve">The list of remote candidates to add.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="add_stream" c:identifier="purple_media_backend_add_stream">
        <doc xml:space="preserve">Creates and adds a stream to the media backend.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the stream was successfully created, othewise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The backend to add the stream to.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the stream to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The remote participant of the stream to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The media type and direction of the stream to add.</doc>
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
          <parameter name="initiator" transfer-ownership="none">
            <doc xml:space="preserve">True if the local user initiated the stream.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="transmitter" transfer-ownership="none">
            <doc xml:space="preserve">The string id of the tranmsitter to use.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters in the param parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">The additional parameters to pass when creating the stream.</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="codecs_ready"
              c:identifier="purple_media_backend_codecs_ready">
        <doc xml:space="preserve">Get whether or not a session's codecs are ready.

A codec is ready if all of the attributes and additional
parameters have been collected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the codecs are ready, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to check.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_available_params"
              c:identifier="purple_media_backend_get_available_params"
              introspectable="0">
        <doc xml:space="preserve">Gets the list of optional parameters supported by the media backend.
The list should NOT be freed.</doc>
        <return-value>
          <doc xml:space="preserve">NULL-terminated array of names of supported parameters.</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_codecs"
              c:identifier="purple_media_backend_get_codecs"
              introspectable="0">
        <doc xml:space="preserve">Gets the codec intersection list for a session.

The intersection list consists of all codecs that are compatible
between the local and remote software.</doc>
        <return-value>
          <doc xml:space="preserve">The codec intersection list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to use.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_local_candidates"
              c:identifier="purple_media_backend_get_local_candidates"
              introspectable="0">
        <doc xml:space="preserve">Gets the list of local candidates for a stream.</doc>
        <return-value>
          <doc xml:space="preserve">The list of local candidates.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant associated with the stream.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decryption_parameters"
              c:identifier="purple_media_backend_set_decryption_parameters">
        <doc xml:space="preserve">Sets the decryption parameters for a session participant's media.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to decrypt media coming from this session's
         participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use for authentication of the media coming from
       the session's participant.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The decryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the decryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encryption_parameters"
              c:identifier="purple_media_backend_set_encryption_parameters">
        <doc xml:space="preserve">Sets the encryption parameters of our media in the session.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <doc xml:space="preserve">The cipher to use to encrypt our media in the session.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve">The algorithm to use to compute authentication codes for our media
       frames.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The encryption key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_len" transfer-ownership="none">
            <doc xml:space="preserve">Byte length of the encryption key.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_params" c:identifier="purple_media_backend_set_params">
        <doc xml:space="preserve">Sets various optional parameters of the media backend.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend to set the parameters on.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="num_params" transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters to pass to backend</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">Array of @c GParameter to pass to backend</doc>
            <type name="GObject.Parameter" c:type="GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_codecs"
              c:identifier="purple_media_backend_set_remote_codecs"
              introspectable="0">
        <doc xml:space="preserve">Sets the remote codecs on a stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if the remote codecs were set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the stream is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codecs" transfer-ownership="none">
            <doc xml:space="preserve">The list of remote codecs to set.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_codec"
              c:identifier="purple_media_backend_set_send_codec">
        <doc xml:space="preserve">Sets which codec format to send media content in for a session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set the codec for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to set.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_rtcp_mux"
              c:identifier="purple_media_backend_set_send_rtcp_mux">
        <doc xml:space="preserve">Controls whether or not the RTCP should be muxed with the RTP</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The media backend the session is in.</doc>
            <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
          </instance-parameter>
          <parameter name="sess_id" transfer-ownership="none">
            <doc xml:space="preserve">The session id of the session to set the rtcp-mux option to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="send_rtcp_mux" transfer-ownership="none">
            <doc xml:space="preserve">Whether or not to enable rtcp-mux</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="conference-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Media"/>
      </property>
      <glib:signal name="active-candidate-pair" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="candidates-prepared" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="codecs-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="error" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-candidate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="MediaCandidate"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MediaBackendIface"
            c:type="PurpleMediaBackendIface"
            glib:is-gtype-struct-for="MediaBackend">
      <doc xml:space="preserve">A structure to derive media backends from.</doc>
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="add_stream">
        <callback name="add_stream">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">True if the stream was successfully created, othewise False.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The backend to add the stream to.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the stream to add.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="who" transfer-ownership="none">
              <doc xml:space="preserve">The remote participant of the stream to add.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve">The media type and direction of the stream to add.</doc>
              <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
            </parameter>
            <parameter name="initiator" transfer-ownership="none">
              <doc xml:space="preserve">True if the local user initiated the stream.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="transmitter" transfer-ownership="none">
              <doc xml:space="preserve">The string id of the tranmsitter to use.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="num_params" transfer-ownership="none">
              <doc xml:space="preserve">The number of parameters in the param parameter.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <doc xml:space="preserve">The additional parameters to pass when creating the stream.</doc>
              <type name="GObject.Parameter" c:type="GParameter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_remote_candidates" introspectable="0">
        <callback name="add_remote_candidates" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The backend the stream is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id associated with the stream.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <doc xml:space="preserve">The participant associated with the stream.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="remote_candidates" transfer-ownership="none">
              <doc xml:space="preserve">The list of remote candidates to add.</doc>
              <type name="GLib.List" c:type="GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="codecs_ready">
        <callback name="codecs_ready">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">True if the codecs are ready, otherwise False.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to check.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_codecs" introspectable="0">
        <callback name="get_codecs" introspectable="0">
          <return-value>
            <doc xml:space="preserve">The codec intersection list.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to use.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_local_candidates" introspectable="0">
        <callback name="get_local_candidates" introspectable="0">
          <return-value>
            <doc xml:space="preserve">The list of local candidates.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the stream is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id associated with the stream.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <doc xml:space="preserve">The participant associated with the stream.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_remote_codecs" introspectable="0">
        <callback name="set_remote_codecs" introspectable="0">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">True if the remote codecs were set successfully, otherwise False.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the stream is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id the stream is associated with.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <doc xml:space="preserve">The participant the stream is associated with.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="codecs" transfer-ownership="none">
              <doc xml:space="preserve">The list of remote codecs to set.</doc>
              <type name="GLib.List" c:type="GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_send_codec">
        <callback name="set_send_codec">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to set the codec for.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="codec" transfer-ownership="none">
              <doc xml:space="preserve">The codec to set.</doc>
              <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_encryption_parameters">
        <callback name="set_encryption_parameters">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher to use to encrypt our media in the session.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve">The algorithm to use to compute authentication codes for our media
       frames.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">The encryption key.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key_len" transfer-ownership="none">
              <doc xml:space="preserve">Byte length of the encryption key.</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_decryption_parameters">
        <callback name="set_decryption_parameters">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to set parameters of.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <doc xml:space="preserve">The participant of the session to set parameters of.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cipher" transfer-ownership="none">
              <doc xml:space="preserve">The cipher to use to decrypt media coming from this session's
         participant.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve">The algorithm to use for authentication of the media coming from
       the session's participant.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">The decryption key.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key_len" transfer-ownership="none">
              <doc xml:space="preserve">Byte length of the decryption key.</doc>
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_params">
        <callback name="set_params">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend to set the parameters on.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="num_params" transfer-ownership="none">
              <doc xml:space="preserve">The number of parameters to pass to backend</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <doc xml:space="preserve">Array of @c GParameter to pass to backend</doc>
              <type name="GObject.Parameter" c:type="GParameter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_available_params" introspectable="0">
        <callback name="get_available_params" introspectable="0">
          <return-value>
            <array c:type="const gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
        </callback>
      </field>
      <field name="send_dtmf">
        <callback name="send_dtmf">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="dtmf" transfer-ownership="none">
              <type name="gchar" c:type="gchar"/>
            </parameter>
            <parameter name="volume" transfer-ownership="none">
              <type name="guint8" c:type="guint8"/>
            </parameter>
            <parameter name="duration" transfer-ownership="none">
              <type name="guint16" c:type="guint16"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_send_rtcp_mux">
        <callback name="set_send_rtcp_mux">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">True if set successfully, otherwise False.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">The media backend the session is in.</doc>
              <type name="MediaBackend" c:type="PurpleMediaBackend*"/>
            </parameter>
            <parameter name="sess_id" transfer-ownership="none">
              <doc xml:space="preserve">The session id of the session to set the rtcp-mux option to</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="participant" transfer-ownership="none">
              <doc xml:space="preserve">The participant the stream is associated with.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="send_rtcp_mux" transfer-ownership="none">
              <doc xml:space="preserve">Whether or not to enable rtcp-mux</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MediaCandidate"
           c:symbol-prefix="media_candidate"
           c:type="PurpleMediaCandidate"
           parent="GObject.Object"
           glib:type-name="PurpleMediaCandidate"
           glib:get-type="purple_media_candidate_get_type">
      <doc xml:space="preserve">An opaque structure representing a network candidate (IP Address and port
pair).</doc>
      <constructor name="new" c:identifier="purple_media_candidate_new">
        <doc xml:space="preserve">Creates a PurpleMediaCandidate instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The newly created PurpleMediaCandidate instance.</doc>
          <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
        </return-value>
        <parameters>
          <parameter name="foundation" transfer-ownership="none">
            <doc xml:space="preserve">The foundation of the candidate.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve">The component this candidate is for.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of candidate.</doc>
            <type name="MediaCandidateType" c:type="PurpleMediaCandidateType"/>
          </parameter>
          <parameter name="proto" transfer-ownership="none">
            <doc xml:space="preserve">The protocol this component is for.</doc>
            <type name="MediaNetworkProtocol"
                  c:type="PurpleMediaNetworkProtocol"/>
          </parameter>
          <parameter name="ip" transfer-ownership="none">
            <doc xml:space="preserve">The IP address of this component.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">The network port.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="list_copy"
                c:identifier="purple_media_candidate_list_copy"
                introspectable="0">
        <doc xml:space="preserve">Copies a GList of PurpleMediaCandidate and its contents.</doc>
        <return-value>
          <doc xml:space="preserve">The copy of the GList.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="candidates" transfer-ownership="none">
            <doc xml:space="preserve">The list of candidates to be copied.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="list_free"
                c:identifier="purple_media_candidate_list_free"
                introspectable="0">
        <doc xml:space="preserve">Frees a GList of PurpleMediaCandidate and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="candidates" transfer-ownership="none">
            <doc xml:space="preserve">The list of candidates to be freed.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="copy"
              c:identifier="purple_media_candidate_copy"
              introspectable="0">
        <doc xml:space="preserve">Copies a PurpleMediaCandidate.</doc>
        <return-value>
          <doc xml:space="preserve">The copy of the PurpleMediaCandidate.</doc>
          <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to copy.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_ip"
              c:identifier="purple_media_candidate_get_base_ip">
        <doc xml:space="preserve">Gets the base (internal) IP address.
This can be NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The base IP address.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the base IP address from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_port"
              c:identifier="purple_media_candidate_get_base_port">
        <doc xml:space="preserve">Gets the base (internal) port.
Invalid if the base IP is NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The base port.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the base port.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_candidate_type"
              c:identifier="purple_media_candidate_get_candidate_type">
        <doc xml:space="preserve">Gets the candidate type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The candidate type.</doc>
          <type name="MediaCandidateType" c:type="PurpleMediaCandidateType"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the candidate type from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_component_id"
              c:identifier="purple_media_candidate_get_component_id">
        <doc xml:space="preserve">Gets the component id (rtp or rtcp)</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The component id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the compnent id from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_foundation"
              c:identifier="purple_media_candidate_get_foundation">
        <doc xml:space="preserve">Gets the foundation (identifier) from the candidate.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The foundation.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the foundation from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip" c:identifier="purple_media_candidate_get_ip">
        <doc xml:space="preserve">Gets the IP address.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The IP address.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the IP address from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="purple_media_candidate_get_password">
        <doc xml:space="preserve">Gets the password.

This can be NULL. It depends on the transmission type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The password.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the password from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="purple_media_candidate_get_port">
        <doc xml:space="preserve">Gets the port.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The port.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the port from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="purple_media_candidate_get_priority">
        <doc xml:space="preserve">Gets the priority.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The priority.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the priority from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="purple_media_candidate_get_protocol">
        <doc xml:space="preserve">Gets the protocol (TCP or UDP).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The protocol.</doc>
          <type name="MediaNetworkProtocol"
                c:type="PurpleMediaNetworkProtocol"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the protocol from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ttl" c:identifier="purple_media_candidate_get_ttl">
        <doc xml:space="preserve">Gets the TTL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The TTL.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the TTL from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="purple_media_candidate_get_username">
        <doc xml:space="preserve">Gets the username.
This can be NULL. It depends on the transmission type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The username.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve">The candidate to get the username from.</doc>
            <type name="MediaCandidate" c:type="PurpleMediaCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="base-ip" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="base-port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="component-id" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="foundation" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="priority" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="protocol" writable="1" transfer-ownership="none">
        <type name="MediaNetworkProtocol"/>
      </property>
      <property name="ttl" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="MediaCandidateType"/>
      </property>
      <property name="username" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <enumeration name="MediaCandidateType"
                 glib:type-name="PurpleMediaCandidateType"
                 glib:get-type="purple_media_candidate_type_get_type"
                 c:type="PurpleMediaCandidateType">
      <doc xml:space="preserve">Media candidate types</doc>
      <member name="host"
              value="0"
              c:identifier="PURPLE_MEDIA_CANDIDATE_TYPE_HOST"
              glib:nick="host">
      </member>
      <member name="srflx"
              value="1"
              c:identifier="PURPLE_MEDIA_CANDIDATE_TYPE_SRFLX"
              glib:nick="srflx">
      </member>
      <member name="prflx"
              value="2"
              c:identifier="PURPLE_MEDIA_CANDIDATE_TYPE_PRFLX"
              glib:nick="prflx">
      </member>
      <member name="relay"
              value="3"
              c:identifier="PURPLE_MEDIA_CANDIDATE_TYPE_RELAY"
              glib:nick="relay">
      </member>
      <member name="multicast"
              value="4"
              c:identifier="PURPLE_MEDIA_CANDIDATE_TYPE_MULTICAST"
              glib:nick="multicast">
      </member>
    </enumeration>
    <enumeration name="MediaCaps"
                 glib:type-name="PurpleMediaCaps"
                 glib:get-type="purple_media_caps_get_type"
                 c:type="PurpleMediaCaps">
      <doc xml:space="preserve">Media caps</doc>
      <member name="none"
              value="0"
              c:identifier="PURPLE_MEDIA_CAPS_NONE"
              glib:nick="none">
      </member>
      <member name="audio"
              value="1"
              c:identifier="PURPLE_MEDIA_CAPS_AUDIO"
              glib:nick="audio">
      </member>
      <member name="audio_single_direction"
              value="2"
              c:identifier="PURPLE_MEDIA_CAPS_AUDIO_SINGLE_DIRECTION"
              glib:nick="audio-single-direction">
      </member>
      <member name="video"
              value="4"
              c:identifier="PURPLE_MEDIA_CAPS_VIDEO"
              glib:nick="video">
      </member>
      <member name="video_single_direction"
              value="8"
              c:identifier="PURPLE_MEDIA_CAPS_VIDEO_SINGLE_DIRECTION"
              glib:nick="video-single-direction">
      </member>
      <member name="audio_video"
              value="16"
              c:identifier="PURPLE_MEDIA_CAPS_AUDIO_VIDEO"
              glib:nick="audio-video">
      </member>
      <member name="modify_session"
              value="32"
              c:identifier="PURPLE_MEDIA_CAPS_MODIFY_SESSION"
              glib:nick="modify-session">
      </member>
      <member name="change_direction"
              value="64"
              c:identifier="PURPLE_MEDIA_CAPS_CHANGE_DIRECTION"
              glib:nick="change-direction">
      </member>
    </enumeration>
    <class name="MediaCodec"
           c:symbol-prefix="media_codec"
           c:type="PurpleMediaCodec"
           parent="GObject.Object"
           glib:type-name="PurpleMediaCodec"
           glib:get-type="purple_media_codec_get_type">
      <doc xml:space="preserve">An opaque structure representing an audio or video codec.</doc>
      <constructor name="new" c:identifier="purple_media_codec_new">
        <doc xml:space="preserve">Creates a new PurpleMediaCodec instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The newly created PurpleMediaCodec.</doc>
          <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">Codec identifier.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="encoding_name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the media type this encodes.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="media_type" transfer-ownership="none">
            <doc xml:space="preserve">PurpleMediaSessionType of this codec.</doc>
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
          <parameter name="clock_rate" transfer-ownership="none">
            <doc xml:space="preserve">The clock rate this codec encodes at, if applicable.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="list_copy"
                c:identifier="purple_media_codec_list_copy"
                introspectable="0">
        <doc xml:space="preserve">Copies a GList of PurpleMediaCodec and its contents.</doc>
        <return-value>
          <doc xml:space="preserve">The copy of the GList.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="codecs" transfer-ownership="none">
            <doc xml:space="preserve">The list of codecs to be copied.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="list_free"
                c:identifier="purple_media_codec_list_free"
                introspectable="0">
        <doc xml:space="preserve">Frees a GList of PurpleMediaCodec and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="codecs" transfer-ownership="none">
            <doc xml:space="preserve">The list of codecs to be freed.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="add_optional_parameter"
              c:identifier="purple_media_codec_add_optional_parameter">
        <doc xml:space="preserve">Adds an optional parameter to the codec.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to add the parameter to.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the parameter to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value of the parameter to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="purple_media_codec_copy"
              introspectable="0">
        <doc xml:space="preserve">Copies a PurpleMediaCodec object.</doc>
        <return-value>
          <doc xml:space="preserve">The copy of the codec.</doc>
          <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to copy.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channels"
              c:identifier="purple_media_codec_get_channels">
        <doc xml:space="preserve">Gets the number of channels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of channels.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to get the number of channels from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clock_rate"
              c:identifier="purple_media_codec_get_clock_rate">
        <doc xml:space="preserve">Gets the clock rate.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The clock rate.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to get the clock rate from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding_name"
              c:identifier="purple_media_codec_get_encoding_name">
        <doc xml:space="preserve">Gets the encoding name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The encoding name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to get the encoding name from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="purple_media_codec_get_id">
        <doc xml:space="preserve">Gets the codec id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The codec id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to get the id from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optional_parameter"
              c:identifier="purple_media_codec_get_optional_parameter"
              introspectable="0">
        <doc xml:space="preserve">Gets an optional parameter based on the values given.</doc>
        <return-value>
          <doc xml:space="preserve">The value found or NULL.</doc>
          <type c:type="PurpleKeyValuePair*"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to find the parameter in.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the parameter to search for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to search for or NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_optional_parameters"
              c:identifier="purple_media_codec_get_optional_parameters"
              introspectable="0">
        <doc xml:space="preserve">Gets a list of the optional parameters.

The list consists of PurpleKeyValuePair's.</doc>
        <return-value>
          <doc xml:space="preserve">The list of optional parameters. The list is owned by the codec and
        should not be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to get the optional parameters from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_optional_parameter"
              c:identifier="purple_media_codec_remove_optional_parameter"
              introspectable="0">
        <doc xml:space="preserve">Removes an optional parameter from the codec.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to remove the parameter from.</doc>
            <type name="MediaCodec" c:type="PurpleMediaCodec*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to the parameter to remove.</doc>
            <type c:type="PurpleKeyValuePair*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="purple_media_codec_to_string">
        <doc xml:space="preserve">Creates a string representation of the codec.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new string representation.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="codec" transfer-ownership="none">
            <doc xml:space="preserve">The codec to create the string of.</doc>
            <type name="MediaCodec" c:type="const PurpleMediaCodec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channels" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="clock-rate" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="encoding-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="media-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MediaSessionType"/>
      </property>
      <property name="optional-params" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
    </class>
    <enumeration name="MediaComponentType" c:type="PurpleMediaComponentType">
      <doc xml:space="preserve">Media component types</doc>
      <member name="none" value="0" c:identifier="PURPLE_MEDIA_COMPONENT_NONE">
      </member>
      <member name="rtp" value="1" c:identifier="PURPLE_MEDIA_COMPONENT_RTP">
      </member>
      <member name="rtcp" value="2" c:identifier="PURPLE_MEDIA_COMPONENT_RTCP">
      </member>
    </enumeration>
    <callback name="MediaElementCreateCallback"
              c:type="PurpleMediaElementCreateCallback"
              introspectable="0">
      <return-value>
        <type c:type="GstElement*"/>
      </return-value>
      <parameters>
        <parameter name="media" transfer-ownership="none">
          <type name="Media" c:type="PurpleMedia*"/>
        </parameter>
        <parameter name="session_id" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="participant" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="MediaElementInfo"
           c:symbol-prefix="media_element_info"
           c:type="PurpleMediaElementInfo"
           parent="GObject.Object"
           glib:type-name="PurpleMediaElementInfo"
           glib:get-type="purple_media_element_info_get_type"
           glib:type-struct="MediaElementInfoClass">
      <doc xml:space="preserve">An opaque structure representing an audio/video source/sink.</doc>
      <method name="call_create"
              c:identifier="purple_media_element_info_call_create"
              introspectable="0">
        <return-value>
          <type c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_element_type"
              c:identifier="purple_media_element_info_get_element_type">
        <return-value transfer-ownership="none">
          <type name="MediaElementType" c:type="PurpleMediaElementType"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="purple_media_element_info_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="purple_media_element_info_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="create-cb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MediaElementType"/>
      </property>
    </class>
    <record name="MediaElementInfoClass"
            c:type="PurpleMediaElementInfoClass"
            disguised="1"
            glib:is-gtype-struct-for="MediaElementInfo">
    </record>
    <bitfield name="MediaElementType"
              glib:type-name="PurpleMediaElementType"
              glib:get-type="purple_media_element_type_get_type"
              c:type="PurpleMediaElementType">
      <member name="none"
              value="0"
              c:identifier="PURPLE_MEDIA_ELEMENT_NONE"
              glib:nick="none">
        <doc xml:space="preserve">empty element</doc>
      </member>
      <member name="audio"
              value="1"
              c:identifier="PURPLE_MEDIA_ELEMENT_AUDIO"
              glib:nick="audio">
        <doc xml:space="preserve">supports audio</doc>
      </member>
      <member name="video"
              value="2"
              c:identifier="PURPLE_MEDIA_ELEMENT_VIDEO"
              glib:nick="video">
        <doc xml:space="preserve">supports video</doc>
      </member>
      <member name="audio_video"
              value="3"
              c:identifier="PURPLE_MEDIA_ELEMENT_AUDIO_VIDEO"
              glib:nick="audio-video">
        <doc xml:space="preserve">supports audio and video</doc>
      </member>
      <member name="no_srcs"
              value="0"
              c:identifier="PURPLE_MEDIA_ELEMENT_NO_SRCS"
              glib:nick="no-srcs">
        <doc xml:space="preserve">has no src pads</doc>
      </member>
      <member name="one_src"
              value="4"
              c:identifier="PURPLE_MEDIA_ELEMENT_ONE_SRC"
              glib:nick="one-src">
        <doc xml:space="preserve">has one src pad</doc>
      </member>
      <member name="multi_src"
              value="8"
              c:identifier="PURPLE_MEDIA_ELEMENT_MULTI_SRC"
              glib:nick="multi-src">
        <doc xml:space="preserve">has multiple src pads</doc>
      </member>
      <member name="request_src"
              value="16"
              c:identifier="PURPLE_MEDIA_ELEMENT_REQUEST_SRC"
              glib:nick="request-src">
        <doc xml:space="preserve">src pads must be requested</doc>
      </member>
      <member name="no_sinks"
              value="0"
              c:identifier="PURPLE_MEDIA_ELEMENT_NO_SINKS"
              glib:nick="no-sinks">
        <doc xml:space="preserve">has no sink pads</doc>
      </member>
      <member name="one_sink"
              value="32"
              c:identifier="PURPLE_MEDIA_ELEMENT_ONE_SINK"
              glib:nick="one-sink">
        <doc xml:space="preserve">has one sink pad</doc>
      </member>
      <member name="multi_sink"
              value="64"
              c:identifier="PURPLE_MEDIA_ELEMENT_MULTI_SINK"
              glib:nick="multi-sink">
        <doc xml:space="preserve">has multiple sink pads</doc>
      </member>
      <member name="request_sink"
              value="128"
              c:identifier="PURPLE_MEDIA_ELEMENT_REQUEST_SINK"
              glib:nick="request-sink">
        <doc xml:space="preserve">sink pads must be requested</doc>
      </member>
      <member name="unique"
              value="256"
              c:identifier="PURPLE_MEDIA_ELEMENT_UNIQUE"
              glib:nick="unique">
        <doc xml:space="preserve">This element is unique and only one
                                    instance of it should be created at a
                                    time</doc>
      </member>
      <member name="src"
              value="512"
              c:identifier="PURPLE_MEDIA_ELEMENT_SRC"
              glib:nick="src">
        <doc xml:space="preserve">can be set as an active src</doc>
      </member>
      <member name="sink"
              value="1024"
              c:identifier="PURPLE_MEDIA_ELEMENT_SINK"
              glib:nick="sink">
        <doc xml:space="preserve">can be set as an active sink</doc>
      </member>
      <member name="application"
              value="2048"
              c:identifier="PURPLE_MEDIA_ELEMENT_APPLICATION"
              glib:nick="application">
        <doc xml:space="preserve">supports application data</doc>
      </member>
    </bitfield>
    <enumeration name="MediaInfoType"
                 glib:type-name="PurpleMediaInfoType"
                 glib:get-type="purple_media_info_type_get_type"
                 c:type="PurpleMediaInfoType">
      <doc xml:space="preserve">Media info types</doc>
      <member name="hangup"
              value="0"
              c:identifier="PURPLE_MEDIA_INFO_HANGUP"
              glib:nick="hangup">
      </member>
      <member name="accept"
              value="1"
              c:identifier="PURPLE_MEDIA_INFO_ACCEPT"
              glib:nick="accept">
      </member>
      <member name="reject"
              value="2"
              c:identifier="PURPLE_MEDIA_INFO_REJECT"
              glib:nick="reject">
      </member>
      <member name="mute"
              value="3"
              c:identifier="PURPLE_MEDIA_INFO_MUTE"
              glib:nick="mute">
      </member>
      <member name="unmute"
              value="4"
              c:identifier="PURPLE_MEDIA_INFO_UNMUTE"
              glib:nick="unmute">
      </member>
      <member name="pause"
              value="5"
              c:identifier="PURPLE_MEDIA_INFO_PAUSE"
              glib:nick="pause">
      </member>
      <member name="unpause"
              value="6"
              c:identifier="PURPLE_MEDIA_INFO_UNPAUSE"
              glib:nick="unpause">
      </member>
      <member name="hold"
              value="7"
              c:identifier="PURPLE_MEDIA_INFO_HOLD"
              glib:nick="hold">
      </member>
      <member name="unhold"
              value="8"
              c:identifier="PURPLE_MEDIA_INFO_HOLD"
              glib:nick="unhold">
      </member>
    </enumeration>
    <class name="MediaManager"
           c:symbol-prefix="media_manager"
           c:type="PurpleMediaManager"
           parent="GObject.Object"
           glib:type-name="PurpleMediaManager"
           glib:get-type="purple_media_manager_get_type"
           glib:type-struct="MediaManagerClass">
      <doc xml:space="preserve">The media manager's data.</doc>
      <function name="get"
                c:identifier="purple_media_manager_get"
                introspectable="0">
        <doc xml:space="preserve">Gets the "global" media manager object. It's created if it doesn't already exist.</doc>
        <return-value>
          <doc xml:space="preserve">The "global" instance of the media manager object.</doc>
          <type name="MediaManager" c:type="PurpleMediaManager*"/>
        </return-value>
      </function>
      <method name="create_media"
              c:identifier="purple_media_manager_create_media"
              introspectable="0">
        <doc xml:space="preserve">Creates a media session.</doc>
        <return-value>
          <doc xml:space="preserve">A newly created media session.</doc>
          <type name="Media" c:type="PurpleMedia*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to create the session under.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to create the session on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="conference_type" transfer-ownership="none">
            <doc xml:space="preserve">The conference type to feed into Farstream.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="remote_user" transfer-ownership="none">
            <doc xml:space="preserve">The remote user to initiate the session with.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="initiator" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if the local user is the initiator of this media call, FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_output_window"
              c:identifier="purple_media_manager_create_output_window">
        <doc xml:space="preserve">Signals that output windows should be created for the chosen stream.

This shouldn't be called outside of mediamanager.c and media.c</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if it succeeded, FALSE if it failed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">Manager the output windows are registered with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">Media session the output windows are registered for.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session the output windows are registered with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the output windows are registered with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_private_media"
              c:identifier="purple_media_manager_create_private_media"
              introspectable="0">
        <doc xml:space="preserve">Creates a private media session.
A private media session is a media session which is private to the caller. It is
meant to be used by plugins to create a media session that the front-end does not
get notified about. It is useful especially for sessions with a type of
PURPLE_MEDIA_APPLICATION which the front-end wouldn't know how to handle.</doc>
        <return-value>
          <doc xml:space="preserve">A newly created media session.</doc>
          <type name="Media" c:type="PurpleMedia*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to create the session under.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to create the session on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="conference_type" transfer-ownership="none">
            <doc xml:space="preserve">The conference type to feed into Farstream.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="remote_user" transfer-ownership="none">
            <doc xml:space="preserve">The remote user to initiate the session with.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="initiator" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if the local user is the initiator of this media call, FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_element"
              c:identifier="purple_media_manager_get_active_element"
              introspectable="0">
        <return-value>
          <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="MediaElementType" c:type="PurpleMediaElementType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_backend_type"
              c:identifier="purple_media_manager_get_backend_type">
        <doc xml:space="preserve">Gets which media backend type media objects will use.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of media backend type media objects will use.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to get the media backend type from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_element"
              c:identifier="purple_media_manager_get_element"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">A GStreamer source or sink for audio or video.</doc>
          <type c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to use to obtain the source/sink.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of source/sink to get.</doc>
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media call this element is requested for.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The id of the session this element is requested for or NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The remote user this element is requested for or NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_element_info"
              c:identifier="purple_media_manager_get_element_info"
              introspectable="0">
        <return-value>
          <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="purple_media_manager_get_media"
              introspectable="0">
        <doc xml:space="preserve">Gets all of the media sessions.</doc>
        <return-value>
          <doc xml:space="preserve">A list of all the media sessions.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get all of the sessions from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_by_account"
              c:identifier="purple_media_manager_get_media_by_account"
              introspectable="0">
        <doc xml:space="preserve">Gets all of the media sessions for a given account.</doc>
        <return-value>
          <doc xml:space="preserve">A list of the media sessions on the given account.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get the sessions from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account the sessions are on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pipeline"
              c:identifier="purple_media_manager_get_pipeline"
              introspectable="0">
        <doc xml:space="preserve">Gets the pipeline from the media manager.</doc>
        <return-value>
          <doc xml:space="preserve">The pipeline.</doc>
          <type c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get the pipeline from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_media"
              c:identifier="purple_media_manager_get_private_media"
              introspectable="0">
        <doc xml:space="preserve">Gets all of the private media sessions.</doc>
        <return-value>
          <doc xml:space="preserve">A list of all the private media sessions.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get all of the sessions from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_media_by_account"
              c:identifier="purple_media_manager_get_private_media_by_account"
              introspectable="0">
        <doc xml:space="preserve">Gets all of the private media sessions for a given account.</doc>
        <return-value>
          <doc xml:space="preserve">A list of the private media sessions on the given account.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get the sessions from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account the sessions are on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_caps"
              c:identifier="purple_media_manager_get_ui_caps">
        <doc xml:space="preserve">Gets which media caps the UI supports.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">caps The caps retrieved.</doc>
          <type name="MediaCaps" c:type="PurpleMediaCaps"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to get caps from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_video_caps"
              c:identifier="purple_media_manager_get_video_caps"
              introspectable="0">
        <doc xml:space="preserve">Returns current set of media formats limiting the output from video source.</doc>
        <return-value>
          <doc xml:space="preserve">#GstCaps limiting the video source's formats.</doc>
          <type c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to get the media formats from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="receive_application_data"
              c:identifier="purple_media_manager_receive_application_data">
        <doc xml:space="preserve">Receive a buffer of data from a #PURPLE_MEDIA_APPLICATION session.
If @blocking is set, unless an error occured, the function will not return
until @max_size bytes are read.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of bytes received or -1 in case of error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to receive data with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to which the session belongs.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to receive data from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to receive data from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to receive data into.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="max_size" transfer-ownership="none">
            <doc xml:space="preserve">The max_size of @buffer</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="blocking" transfer-ownership="none">
            <doc xml:space="preserve">Whether to block until the buffer is entirely filled or return
with currently available data.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_element"
              c:identifier="purple_media_manager_register_element">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_media"
              c:identifier="purple_media_manager_remove_media">
        <doc xml:space="preserve">Removes a media session from the media manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to remove the media session from.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media session to remove.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_output_window"
              c:identifier="purple_media_manager_remove_output_window">
        <doc xml:space="preserve">Remove a previously registerd output window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if it found the output window and was successful, else FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager the output window was registered with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="output_window_id" transfer-ownership="none">
            <doc xml:space="preserve">The ID of the output window.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_output_windows"
              c:identifier="purple_media_manager_remove_output_windows">
        <doc xml:space="preserve">Remove all output windows for a given conference/session/participant/stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager the output windows were registered with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance the output windows were registered for.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session the output windows were registered for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the output windows were registered for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_application_data"
              c:identifier="purple_media_manager_send_application_data">
        <doc xml:space="preserve">Sends a buffer of data to a #PURPLE_MEDIA_APPLICATION session.
If @blocking is set, unless an error occured, the function will not return
until the data has been flushed into the network.
If the stream is not writable, the data will be queued. It is the
responsability of the user to stop sending data when the stream isn't
writable anymore. It is also the responsability of the user to only start
sending data after the stream has been configured correctly (encryption
parameters for example).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of bytes sent or -1 in case of error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to send data with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to which the session belongs.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to send data to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to send data to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer of data to send.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of @buffer</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="blocking" transfer-ownership="none">
            <doc xml:space="preserve">Whether to block until the data was send or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_element"
              c:identifier="purple_media_manager_set_active_element">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="MediaElementInfo" c:type="PurpleMediaElementInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_application_data_callbacks"
              c:identifier="purple_media_manager_set_application_data_callbacks">
        <doc xml:space="preserve">Set callbacks on a session to be called when the stream becomes writable
or readable for media sessions of type #PURPLE_MEDIA_APPLICATION</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to register the callbacks with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to register the callbacks with.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session to register the callbacks with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant to register the callbacks with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callbacks" transfer-ownership="none">
            <doc xml:space="preserve">The callbacks to be set on the session.</doc>
            <type name="MediaAppDataCallbacks"
                  c:type="PurpleMediaAppDataCallbacks*"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">a user_data argument for the callbacks.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">a destroy notify function.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backend_type"
              c:identifier="purple_media_manager_set_backend_type">
        <doc xml:space="preserve">Sets which media backend type media objects will use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to set the caps on.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="backend_type" transfer-ownership="none">
            <doc xml:space="preserve">The media backend type to use.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_window"
              c:identifier="purple_media_manager_set_output_window">
        <doc xml:space="preserve">Registers a video output window to be created for a given stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A unique ID to the registered output window, 0 if it failed.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to register the output window with.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve">The media instance to find the stream in.</doc>
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve">The session the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="participant" transfer-ownership="none">
            <doc xml:space="preserve">The participant the stream is associated with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="window_id" transfer-ownership="none">
            <doc xml:space="preserve">The window ID to embed the video in.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_caps"
              c:identifier="purple_media_manager_set_ui_caps">
        <doc xml:space="preserve">Sets which media caps the UI supports.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The manager to set the caps on.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:space="preserve">The caps to set.</doc>
            <type name="MediaCaps" c:type="PurpleMediaCaps"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_video_caps"
              c:identifier="purple_media_manager_set_video_caps"
              introspectable="0">
        <doc xml:space="preserve">Reduces media formats supported by the video source to given set.

Useful to force negotiation of smaller picture resolution more suitable for
use with particular codec and communication protocol without rescaling.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">The media manager to set the media formats.</doc>
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:space="preserve">Set of allowed media formats.</doc>
            <type c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_element"
              c:identifier="purple_media_manager_unregister_element">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="MediaManager" c:type="PurpleMediaManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MediaManagerPrivate" c:type="PurpleMediaManagerPrivate*"/>
      </field>
      <glib:signal name="init-media" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Media"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="init-private-media" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Media"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ui-caps-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="MediaCaps"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="MediaCaps"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MediaManagerClass"
            c:type="PurpleMediaManagerClass"
            glib:is-gtype-struct-for="MediaManager">
      <doc xml:space="preserve">The media manager class.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MediaManagerPrivate"
            c:type="PurpleMediaManagerPrivate"
            disguised="1">
    </record>
    <enumeration name="MediaNetworkProtocol"
                 glib:type-name="PurpleMediaNetworkProtocol"
                 glib:get-type="purple_media_network_protocol_get_type"
                 c:type="PurpleMediaNetworkProtocol">
      <doc xml:space="preserve">Media network protocols</doc>
      <member name="udp"
              value="0"
              c:identifier="PURPLE_MEDIA_NETWORK_PROTOCOL_UDP"
              glib:nick="udp">
      </member>
      <member name="tcp_passive"
              value="1"
              c:identifier="PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_PASSIVE"
              glib:nick="tcp-passive">
      </member>
      <member name="tcp_active"
              value="2"
              c:identifier="PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_ACTIVE"
              glib:nick="tcp-active">
      </member>
      <member name="tcp_so"
              value="3"
              c:identifier="PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_SO"
              glib:nick="tcp-so">
      </member>
    </enumeration>
    <bitfield name="MediaSessionType"
              glib:type-name="PurpleMediaSessionType"
              glib:get-type="purple_media_session_type_get_type"
              c:type="PurpleMediaSessionType">
      <doc xml:space="preserve">Media session types</doc>
      <member name="none"
              value="0"
              c:identifier="PURPLE_MEDIA_NONE"
              glib:nick="none">
      </member>
      <member name="recv_audio"
              value="1"
              c:identifier="PURPLE_MEDIA_RECV_AUDIO"
              glib:nick="recv-audio">
      </member>
      <member name="send_audio"
              value="2"
              c:identifier="PURPLE_MEDIA_SEND_AUDIO"
              glib:nick="send-audio">
      </member>
      <member name="recv_video"
              value="4"
              c:identifier="PURPLE_MEDIA_RECV_VIDEO"
              glib:nick="recv-video">
      </member>
      <member name="send_video"
              value="8"
              c:identifier="PURPLE_MEDIA_SEND_VIDEO"
              glib:nick="send-video">
      </member>
      <member name="recv_application"
              value="16"
              c:identifier="PURPLE_MEDIA_RECV_APPLICATION"
              glib:nick="recv-application">
      </member>
      <member name="send_application"
              value="32"
              c:identifier="PURPLE_MEDIA_SEND_APPLICATION"
              glib:nick="send-application">
      </member>
      <member name="audio"
              value="3"
              c:identifier="PURPLE_MEDIA_AUDIO"
              glib:nick="audio">
      </member>
      <member name="video"
              value="12"
              c:identifier="PURPLE_MEDIA_VIDEO"
              glib:nick="video">
      </member>
      <member name="application"
              value="48"
              c:identifier="PURPLE_MEDIA_APPLICATION"
              glib:nick="application">
      </member>
    </bitfield>
    <enumeration name="MediaState"
                 glib:type-name="PurpleMediaState"
                 glib:get-type="purple_media_state_changed_get_type"
                 c:type="PurpleMediaState">
      <doc xml:space="preserve">Media state-changed types</doc>
      <member name="new"
              value="0"
              c:identifier="PURPLE_MEDIA_STATE_NEW"
              glib:nick="new">
      </member>
      <member name="connected"
              value="1"
              c:identifier="PURPLE_MEDIA_STATE_CONNECTED"
              glib:nick="connected">
      </member>
      <member name="end"
              value="2"
              c:identifier="PURPLE_MEDIA_STATE_END"
              glib:nick="end">
      </member>
    </enumeration>
    <class name="MemoryPool"
           c:symbol-prefix="memory_pool"
           c:type="PurpleMemoryPool"
           parent="GObject.Object"
           glib:type-name="PurpleMemoryPool"
           glib:get-type="purple_memory_pool_get_type"
           glib:type-struct="MemoryPoolClass">
      <doc xml:space="preserve">The memory pool object instance.</doc>
      <constructor name="new" c:identifier="purple_memory_pool_new">
        <doc xml:space="preserve">Creates a new memory pool.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #PurpleMemoryPool.</doc>
          <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
        </return-value>
      </constructor>
      <virtual-method name="cleanup" invoker="cleanup">
        <doc xml:space="preserve">Marks all memory allocated within a memory pool as not used. It may free
resources, but don't have to.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="palloc" introspectable="0">
        <return-value>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="alignment" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pfree" introspectable="0">
        <return-value>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="mem" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="alloc"
              c:identifier="purple_memory_pool_alloc"
              introspectable="0">
        <doc xml:space="preserve">Allocates an aligned memory block within a pool.</doc>
        <return-value>
          <doc xml:space="preserve">the pointer to a memory block. This should be freed with
         a call to #purple_memory_pool_free.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">the size of memory to be allocated.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve">the alignment of memory block (should be a power of two).</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="alloc0"
              c:identifier="purple_memory_pool_alloc0"
              introspectable="0">
        <doc xml:space="preserve">Allocates an aligned memory block within a pool and sets its contents to
zeros.</doc>
        <return-value>
          <doc xml:space="preserve">the pointer to a memory block. This should be freed with
         a call to #purple_memory_pool_free.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">the size of memory to be allocated.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve">the alignment of memory block (should be a power of two).</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="cleanup" c:identifier="purple_memory_pool_cleanup">
        <doc xml:space="preserve">Marks all memory allocated within a memory pool as not used. It may free
resources, but don't have to.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="purple_memory_pool_free">
        <doc xml:space="preserve">Frees a memory allocated within a memory pool. This can be a no-op in certain
implementations. Thus, it don't need to be called in every case. Thus, the
freed memory is wasted until you call #purple_memory_pool_cleanup
or destroy the @pool.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve">the pointer to a memory block.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_size"
              c:identifier="purple_memory_pool_set_block_size">
        <doc xml:space="preserve">Sets new default block size for a memory pool. You might want to call this
before any allocation, to have it applied to the every created block.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="block_size" transfer-ownership="none">
            <doc xml:space="preserve">the new default block size.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="strdup" c:identifier="purple_memory_pool_strdup">
        <doc xml:space="preserve">Duplicates a string using a memory allocated within a memory pool. If @str is
%NULL, it returns %NULL. The returned string should be freed with g_free()
when no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly-allocated copy of @str.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve">the memory pool.</doc>
            <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string to duplicate.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="block-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gulong" c:type="gulong"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MemoryPoolClass"
            c:type="PurpleMemoryPoolClass"
            glib:is-gtype-struct-for="MemoryPool">
      <doc xml:space="preserve">Base class for #PurpleMemoryPool objects.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="palloc" introspectable="0">
        <callback name="palloc" introspectable="0">
          <return-value>
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
          <parameters>
            <parameter name="pool" transfer-ownership="none">
              <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="alignment" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pfree" introspectable="0">
        <callback name="pfree" introspectable="0">
          <return-value>
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
          <parameters>
            <parameter name="pool" transfer-ownership="none">
              <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
            </parameter>
            <parameter name="mem" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cleanup">
        <callback name="cleanup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pool" transfer-ownership="none">
              <doc xml:space="preserve">the memory pool.</doc>
              <type name="MemoryPool" c:type="PurpleMemoryPool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="MessageFlags"
              glib:type-name="PurpleMessageFlags"
              glib:get-type="purple_message_flags_get_type"
              c:type="PurpleMessageFlags">
      <member name="send"
              value="1"
              c:identifier="PURPLE_MESSAGE_SEND"
              glib:nick="send">
      </member>
      <member name="recv"
              value="2"
              c:identifier="PURPLE_MESSAGE_RECV"
              glib:nick="recv">
      </member>
      <member name="system"
              value="4"
              c:identifier="PURPLE_MESSAGE_SYSTEM"
              glib:nick="system">
      </member>
      <member name="auto_resp"
              value="8"
              c:identifier="PURPLE_MESSAGE_AUTO_RESP"
              glib:nick="auto-resp">
      </member>
      <member name="active_only"
              value="16"
              c:identifier="PURPLE_MESSAGE_ACTIVE_ONLY"
              glib:nick="active-only">
      </member>
      <member name="nick"
              value="32"
              c:identifier="PURPLE_MESSAGE_NICK"
              glib:nick="nick">
      </member>
      <member name="no_log"
              value="64"
              c:identifier="PURPLE_MESSAGE_NO_LOG"
              glib:nick="no-log">
      </member>
      <member name="error"
              value="512"
              c:identifier="PURPLE_MESSAGE_ERROR"
              glib:nick="error">
      </member>
      <member name="delayed"
              value="1024"
              c:identifier="PURPLE_MESSAGE_DELAYED"
              glib:nick="delayed">
      </member>
      <member name="raw"
              value="2048"
              c:identifier="PURPLE_MESSAGE_RAW"
              glib:nick="raw">
      </member>
      <member name="images"
              value="4096"
              c:identifier="PURPLE_MESSAGE_IMAGES"
              glib:nick="images">
      </member>
      <member name="notify"
              value="8192"
              c:identifier="PURPLE_MESSAGE_NOTIFY"
              glib:nick="notify">
      </member>
      <member name="no_linkify"
              value="16384"
              c:identifier="PURPLE_MESSAGE_NO_LINKIFY"
              glib:nick="no-linkify">
      </member>
      <member name="invisible"
              value="32768"
              c:identifier="PURPLE_MESSAGE_INVISIBLE"
              glib:nick="invisible">
      </member>
    </bitfield>
    <record name="MimeDocument" c:type="PurpleMimeDocument" disguised="1">
      <doc xml:space="preserve">A MIME document.</doc>
      <method name="free" c:identifier="purple_mime_document_free">
        <doc xml:space="preserve">Frees memory used in a MIME document and all of its parts and fields</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document to free.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_field" c:identifier="purple_mime_document_get_field">
        <doc xml:space="preserve">Get the value of a specific field in the header of a document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value associated with the indicated header field, or
             NULL if the field doesn't exist.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Case-insensitive field name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="purple_mime_document_get_fields"
              introspectable="0">
        <doc xml:space="preserve">The list of fields in the header of a document</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of strings indicating the fields (but not
         the values of the fields) in the header of doc.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parts"
              c:identifier="purple_mime_document_get_parts"
              introspectable="0">
        <doc xml:space="preserve">The list of parts in a multipart document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">List of PurpleMimePart contained within doc.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_field" c:identifier="purple_mime_document_set_field">
        <doc xml:space="preserve">Set or replace the value of a specific field in the header of a
document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Case-insensitive field name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to associate with the indicated header field,
             of NULL to remove the field.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="purple_mime_document_write">
        <doc xml:space="preserve">Write (append) a MIME document onto a GString.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <type name="GLib.String" c:type="GString*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_mime_document_new"
                introspectable="0">
        <doc xml:space="preserve">Allocate an empty MIME document.</doc>
        <return-value>
          <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
        </return-value>
      </function>
      <function name="parse"
                c:identifier="purple_mime_document_parse"
                introspectable="0">
        <doc xml:space="preserve">Parse a MIME document from a NUL-terminated string.</doc>
        <return-value>
          <doc xml:space="preserve">A MIME document.</doc>
          <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The NULL-terminated string containing the MIME-encoded data.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="parsen"
                c:identifier="purple_mime_document_parsen"
                introspectable="0">
        <doc xml:space="preserve">Parse a MIME document from a string</doc>
        <return-value>
          <doc xml:space="preserve">A MIME document.</doc>
          <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The string containing the MIME-encoded data.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Length of buf.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="MimePart" c:type="PurpleMimePart" disguised="1">
      <doc xml:space="preserve">A part of a multipart MIME document.</doc>
      <method name="get_data" c:identifier="purple_mime_part_get_data">
        <doc xml:space="preserve">Get the (possibly encoded) data portion of a MIME document part.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">NULL-terminated data found in the document part</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document part.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data_decoded"
              c:identifier="purple_mime_part_get_data_decoded">
        <doc xml:space="preserve">Get the data portion of a MIME document part, after attempting to
decode it according to the content-transfer-encoding field. If the
specified encoding method is not supported, this function will
return NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The MIME documemt part.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Buffer for the data.</doc>
            <type name="guint8" c:type="guchar**"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of the buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_field" c:identifier="purple_mime_part_get_field">
        <doc xml:space="preserve">Get the value of a specific field in the header of a document part.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value of the specified header field, or NULL if the
             field doesn't exist.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document part.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Case-insensitive name of the header field.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_field_decoded"
              c:identifier="purple_mime_part_get_field_decoded">
        <doc xml:space="preserve">Get the decoded value of a specific field in the header of a
document part.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="purple_mime_part_get_fields"
              introspectable="0">
        <doc xml:space="preserve">The list of fields in the header of a document part.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">List of strings indicating the fields (but not the
         values of the fields) in the header of part.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document part.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="purple_mime_part_get_length">
        <doc xml:space="preserve">Get the length of the data portion of a MIME document part.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Length of the data in the document part.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The MIME document part.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="purple_mime_part_set_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_field" c:identifier="purple_mime_part_set_field">
        <doc xml:space="preserve">Set or replace the value of a specific field in the header of a
document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve">The part of the MIME document.</doc>
            <type name="MimePart" c:type="PurpleMimePart*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Case-insensitive field name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to associate with the indicated header field,
             of NULL to remove the field.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_mime_part_new"
                introspectable="0">
        <doc xml:space="preserve">Create and insert a new part into a MIME document.</doc>
        <return-value>
          <type name="MimePart" c:type="PurpleMimePart*"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">The new part's parent MIME document.</doc>
            <type name="MimeDocument" c:type="PurpleMimeDocument*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="NO_TZ_OFF" value="-500000" c:type="PURPLE_NO_TZ_OFF">
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="NetworkListenCallback"
              c:type="PurpleNetworkListenCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="listenfd" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="NetworkListenData"
            c:type="PurpleNetworkListenData"
            disguised="1">
    </record>
    <class name="PBKDF2Cipher"
           c:symbol-prefix="pbkdf2_cipher"
           c:type="PurplePBKDF2Cipher"
           parent="Cipher"
           glib:type-name="PurplePBKDF2Cipher"
           glib:get-type="purple_pbkdf2_cipher_get_type"
           glib:type-struct="PBKDF2CipherClass">
      <constructor name="new" c:identifier="purple_pbkdf2_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
        <parameters>
          <parameter name="hash" transfer-ownership="none">
            <type name="Hash" c:type="PurpleHash*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_hash"
              c:identifier="purple_pbkdf2_cipher_get_hash"
              introspectable="0">
        <return-value>
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cipher" transfer-ownership="none">
            <type name="PBKDF2Cipher" c:type="const PurplePBKDF2Cipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hash"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Hash"/>
      </property>
      <property name="iter-count" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="out-len" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="PBKDF2CipherClass"
            c:type="PurplePBKDF2CipherClass"
            glib:is-gtype-struct-for="PBKDF2Cipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="PLUGINS" value="1" c:type="PURPLE_PLUGINS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PMP_LIFETIME" value="3600" c:type="PURPLE_PMP_LIFETIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="PluginAction"
            c:type="PurplePluginAction"
            glib:type-name="PurplePluginAction"
            glib:get-type="purple_plugin_action_get_type"
            c:symbol-prefix="plugin_action">
      <doc xml:space="preserve">Represents an action that the plugin can perform. This shows up in the Tools
menu, under a submenu with the name of the plugin.</doc>
      <field name="label" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="callback" writable="1">
        <type name="PluginActionCb" c:type="PurplePluginActionCb"/>
      </field>
      <field name="plugin" writable="1">
        <type name="Plugin" c:type="PurplePlugin*"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <constructor name="new" c:identifier="purple_plugin_action_new">
        <doc xml:space="preserve">Allocates and returns a new PurplePluginAction. Use this to add actions in a
list in the "actions-cb" callback for your plugin.</doc>
        <return-value transfer-ownership="full">
          <type name="PluginAction" c:type="PurplePluginAction*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The description of the action to show to the user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">The callback to call when the user selects this
           action.</doc>
            <type name="PluginActionCb" c:type="PurplePluginActionCb"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="purple_plugin_action_free">
        <doc xml:space="preserve">Frees a PurplePluginAction</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The PurplePluginAction to free.</doc>
            <type name="PluginAction" c:type="PurplePluginAction*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="PluginActionCb" c:type="PurplePluginActionCb">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="PluginAction" c:type="PurplePluginAction*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PluginActionsCb"
              c:type="PurplePluginActionsCb"
              introspectable="0">
      <return-value>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PluginExtraCb" c:type="PurplePluginExtraCb">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PluginInfo"
           c:symbol-prefix="plugin_info"
           c:type="PurplePluginInfo"
           parent="GObject.Object"
           glib:type-name="PurplePluginInfo"
           glib:get-type="purple_plugin_info_get_type"
           glib:type-struct="PluginInfoClass">
      <doc xml:space="preserve">Holds information about a plugin.</doc>
      <constructor name="new"
                   c:identifier="purple_plugin_info_new"
                   introspectable="0">
        <doc xml:space="preserve">Creates a new #PurplePluginInfo instance to be returned from
#plugin_query of a plugin, using the provided name/value pairs.

All properties except &lt;literal&gt;"id"&lt;/literal&gt; and
&lt;literal&gt;"purple-abi"&lt;/literal&gt; are optional.

Valid property names are:
&lt;informaltable frame='none'&gt;
  &lt;tgroup cols='2'&gt;&lt;tbody&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"id"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) The ID of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"abi-version"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(&lt;type&gt;guint32&lt;/type&gt;) The ABI version required by the
      plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"name"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) The translated name of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"version"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Version of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"category"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Primary category of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"summary"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Brief summary of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"description"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Full description of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"authors"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(&lt;type&gt;const gchar * const *&lt;/type&gt;) A %NULL-terminated list of
      plugin authors. format: First Last &amp;lt;user\@domain.com&amp;gt;&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"website"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Website of the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"icon"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Path to a plugin's icon.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"license-id"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) Short name of the plugin's license. This should
      either be an identifier of the license from
      &lt;ulink url="http://dep.debian.net/deps/dep5/#license-specification"&gt;
      DEP5&lt;/ulink&gt; or "Other" for custom licenses.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"license-text"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) The text of the plugin's license, if unlisted on
      DEP5.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"license-url"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(string) The plugin's license URL, if unlisted on DEP5.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"dependencies"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(&lt;type&gt;const gchar * const *&lt;/type&gt;) A %NULL-terminated list of
      plugin IDs required by the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"actions-cb"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(#PurplePluginActionsCb) Callback that returns a list of
      actions the plugin can perform.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"extra-cb"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(#PurplePluginExtraCb) Callback that returns a newly
      allocated string denoting extra information about a plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"pref-frame-cb"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(#PurplePluginPrefFrameCb) Callback that returns a
      preferences frame for the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"pref-request-cb"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(#PurplePluginPrefRequestCb) Callback that returns a
      preferences request handle for the plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;row&gt;&lt;entry&gt;&lt;literal&gt;"flags"&lt;/literal&gt;&lt;/entry&gt;
    &lt;entry&gt;(#PurplePluginInfoFlags) The flags for a plugin.&lt;/entry&gt;
  &lt;/row&gt;
  &lt;/tbody&gt;&lt;/tgroup&gt;
&lt;/informaltable&gt;

See #PURPLE_PLUGIN_ABI_VERSION,
    &lt;link linkend="chapter-plugin-ids"&gt;Plugin IDs&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #PurplePluginInfo instance.</doc>
          <type name="PluginInfo" c:type="PurplePluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="first_property" transfer-ownership="none">
            <doc xml:space="preserve">The first property name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">The value of the first property, followed optionally by more
            name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_abi_version"
              c:identifier="purple_plugin_info_get_abi_version">
        <doc xml:space="preserve">Returns the required purple ABI version for a plugin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The required purple ABI version for the plugin.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_actions_cb"
              c:identifier="purple_plugin_info_get_actions_cb"
              introspectable="0">
        <doc xml:space="preserve">Returns the callback that retrieves the list of actions a plugin can perform
at that moment.</doc>
        <return-value>
          <doc xml:space="preserve">The callback that returns a list of #PurplePluginAction
         instances corresponding to the actions a plugin can perform.</doc>
          <type name="PluginActionsCb" c:type="PurplePluginActionsCb"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin info to get the callback from.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authors" c:identifier="purple_plugin_info_get_authors">
        <doc xml:space="preserve">Returns a NULL-terminated list of the plugin's authors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The authors of the plugin, or %NULL.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category"
              c:identifier="purple_plugin_info_get_category">
        <doc xml:space="preserve">Returns a plugin's primary category.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The primary category of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dependencies"
              c:identifier="purple_plugin_info_get_dependencies">
        <doc xml:space="preserve">Returns a NULL-terminated list of IDs of plugins required by a plugin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The dependencies of the plugin, or %NULL.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="purple_plugin_info_get_description">
        <doc xml:space="preserve">Returns a plugin's description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The description of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error" c:identifier="purple_plugin_info_get_error">
        <doc xml:space="preserve">Returns an error in the plugin info that would prevent the plugin from being
loaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The plugin info error, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin info.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_cb"
              c:identifier="purple_plugin_info_get_extra_cb"
              introspectable="0">
        <doc xml:space="preserve">Returns a callback that gives extra information about a plugin. You must
free the string returned by this callback.</doc>
        <return-value>
          <doc xml:space="preserve">The callback that returns extra information about a plugin.</doc>
          <type name="PluginExtraCb" c:type="PurplePluginExtraCb"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin info to get extra information from.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="purple_plugin_info_get_flags">
        <doc xml:space="preserve">Returns the plugin's flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The flags of the plugin.</doc>
          <type name="PluginInfoFlags" c:type="PurplePluginInfoFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="purple_plugin_info_get_icon">
        <doc xml:space="preserve">Returns the path to a plugin's icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The path to the plugin's icon, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="purple_plugin_info_get_id">
        <doc xml:space="preserve">Returns a plugin's ID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The plugin's ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_id"
              c:identifier="purple_plugin_info_get_license_id">
        <doc xml:space="preserve">Returns a short name of the plugin's license.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The license name of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_text"
              c:identifier="purple_plugin_info_get_license_text">
        <doc xml:space="preserve">Returns the text of a plugin's license.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The license text of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_url"
              c:identifier="purple_plugin_info_get_license_url">
        <doc xml:space="preserve">Returns the URL of a plugin's license.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The license URL of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_plugin_info_get_name">
        <doc xml:space="preserve">Returns a plugin's translated name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pref_frame_cb"
              c:identifier="purple_plugin_info_get_pref_frame_cb"
              introspectable="0">
        <doc xml:space="preserve">Returns the callback that retrieves the preferences frame for a plugin, set
via the "pref-frame-cb" property of the plugin info.</doc>
        <return-value>
          <doc xml:space="preserve">The callback that returns the preferences frame.</doc>
          <type name="PluginPrefFrameCb" c:type="PurplePluginPrefFrameCb"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin info to get the callback from.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pref_request_cb"
              c:identifier="purple_plugin_info_get_pref_request_cb"
              introspectable="0">
        <doc xml:space="preserve">Returns the callback that retrieves the preferences request handle for a
plugin, set via the "pref-request-cb" property of the plugin info.</doc>
        <return-value>
          <doc xml:space="preserve">The callback that returns the preferences request handle.</doc>
          <type name="PluginPrefRequestCb" c:type="PurplePluginPrefRequestCb"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin info to get the callback from.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary" c:identifier="purple_plugin_info_get_summary">
        <doc xml:space="preserve">Returns a plugin's summary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The summary of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_plugin_info_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Returns the UI data associated with a plugin.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data associated with this plugin.  This is a
         convenience field provided to the UIs--it is not
         used by the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="purple_plugin_info_get_version">
        <doc xml:space="preserve">Returns a plugin's version.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The version of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_website" c:identifier="purple_plugin_info_get_website">
        <doc xml:space="preserve">Returns a plugin's website.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The website of the plugin, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="const PurplePluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_plugin_info_set_ui_data">
        <doc xml:space="preserve">Set the UI data associated with a plugin.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The plugin's info instance.</doc>
            <type name="PluginInfo" c:type="PurplePluginInfo*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this object.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="actions-cb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="extra-cb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="PluginInfoFlags"/>
      </property>
      <property name="pref-frame-cb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="pref-request-cb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="ui-requirement"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with the plugin. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="PluginInfoClass"
            c:type="PurplePluginInfoClass"
            glib:is-gtype-struct-for="PluginInfo">
      <doc xml:space="preserve">The base class for all #PurplePluginInfo's.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="PluginInfoFlags"
              glib:type-name="PurplePluginInfoFlags"
              glib:get-type="purple_plugin_info_flags_get_type"
              c:type="PurplePluginInfoFlags">
      <doc xml:space="preserve">Flags that can be used to treat plugins differently.</doc>
      <member name="internal"
              value="2"
              c:identifier="PURPLE_PLUGIN_INFO_FLAGS_INTERNAL"
              glib:nick="internal">
        <doc xml:space="preserve">Plugin is not shown in UI lists</doc>
      </member>
      <member name="auto_load"
              value="4"
              c:identifier="PURPLE_PLUGIN_INFO_FLAGS_AUTO_LOAD"
              glib:nick="auto-load">
        <doc xml:space="preserve">Auto-load the plugin</doc>
      </member>
    </bitfield>
    <record name="PluginPref" c:type="PurplePluginPref" disguised="1">
      <method name="add_choice" c:identifier="purple_plugin_pref_add_choice">
        <doc xml:space="preserve">Set the choices for a choices plugin pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label for the choice</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="choice" transfer-ownership="none">
            <doc xml:space="preserve">A gpointer of the choice</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_plugin_pref_destroy">
        <doc xml:space="preserve">Destroy a plugin preference</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The preference to destroy</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="purple_plugin_pref_get_bounds">
        <doc xml:space="preserve">Get the bounds for an integer pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve">The min value</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve">The max value</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_choices"
              c:identifier="purple_plugin_pref_get_choices"
              introspectable="0">
        <doc xml:space="preserve">Get the choices for a choices plugin pref</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GList of the choices</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format_type"
              c:identifier="purple_plugin_pref_get_format_type">
        <doc xml:space="preserve">Gets the format type of the formattable-string plugin pref.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The format of the pref</doc>
          <type name="StringFormatType" c:type="PurpleStringFormatType"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="purple_plugin_pref_get_label">
        <doc xml:space="preserve">Get a plugin pref label</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The label for the plugin pref</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_masked" c:identifier="purple_plugin_pref_get_masked">
        <doc xml:space="preserve">Gets the masking of a string plugin pref</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The masking</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_length"
              c:identifier="purple_plugin_pref_get_max_length">
        <doc xml:space="preserve">Get the max length for a string plugin pref</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the max length</doc>
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_plugin_pref_get_name">
        <doc xml:space="preserve">Get a plugin pref name</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pref_type"
              c:identifier="purple_plugin_pref_get_pref_type">
        <doc xml:space="preserve">Get the type of a plugin pref</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type</doc>
          <type name="PluginPrefType" c:type="PurplePluginPrefType"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bounds" c:identifier="purple_plugin_pref_set_bounds">
        <doc xml:space="preserve">Set the bounds for an integer pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve">The min value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve">The max value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format_type"
              c:identifier="purple_plugin_pref_set_format_type">
        <doc xml:space="preserve">Sets the format type for a formattable-string plugin pref. You need to set the
pref type to PURPLE_PLUGIN_PREF_STRING_FORMAT first before setting the format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">The format of the string</doc>
            <type name="StringFormatType" c:type="PurpleStringFormatType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="purple_plugin_pref_set_label">
        <doc xml:space="preserve">Set a plugin pref label</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label for the plugin pref</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_masked" c:identifier="purple_plugin_pref_set_masked">
        <doc xml:space="preserve">Sets the masking of a string plugin pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve">The value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_length"
              c:identifier="purple_plugin_pref_set_max_length">
        <doc xml:space="preserve">Set the max length for a string plugin pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:space="preserve">The max length of the string</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="purple_plugin_pref_set_name">
        <doc xml:space="preserve">Set a plugin pref name</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the pref</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pref_type"
              c:identifier="purple_plugin_pref_set_pref_type">
        <doc xml:space="preserve">Set the type of a plugin pref</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The plugin pref</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type</doc>
            <type name="PluginPrefType" c:type="PurplePluginPrefType"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_plugin_pref_new"
                introspectable="0">
        <doc xml:space="preserve">Create a new plugin preference</doc>
        <return-value>
          <doc xml:space="preserve">a new PurplePluginPref</doc>
          <type name="PluginPref" c:type="PurplePluginPref*"/>
        </return-value>
      </function>
      <function name="new_with_label"
                c:identifier="purple_plugin_pref_new_with_label"
                introspectable="0">
        <doc xml:space="preserve">Create a new plugin preference with label</doc>
        <return-value>
          <doc xml:space="preserve">a new PurplePluginPref</doc>
          <type name="PluginPref" c:type="PurplePluginPref*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label to be displayed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_name"
                c:identifier="purple_plugin_pref_new_with_name"
                introspectable="0">
        <doc xml:space="preserve">Create a new plugin preference with name</doc>
        <return-value>
          <doc xml:space="preserve">a new PurplePluginPref</doc>
          <type name="PluginPref" c:type="PurplePluginPref*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the pref</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_name_and_label"
                c:identifier="purple_plugin_pref_new_with_name_and_label"
                introspectable="0">
        <doc xml:space="preserve">Create a new plugin preference with name and label</doc>
        <return-value>
          <doc xml:space="preserve">a new PurplePluginPref</doc>
          <type name="PluginPref" c:type="PurplePluginPref*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the pref</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The label to be displayed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PluginPrefFrame"
            c:type="PurplePluginPrefFrame"
            disguised="1">
      <method name="add" c:identifier="purple_plugin_pref_frame_add">
        <doc xml:space="preserve">Adds a plugin preference to a plugin preference frame</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve">The plugin frame to add the preference to</doc>
            <type name="PluginPrefFrame" c:type="PurplePluginPrefFrame*"/>
          </instance-parameter>
          <parameter name="pref" transfer-ownership="none">
            <doc xml:space="preserve">The preference to add to the frame</doc>
            <type name="PluginPref" c:type="PurplePluginPref*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_plugin_pref_frame_destroy">
        <doc xml:space="preserve">Destroy a plugin preference frame</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve">The plugin frame to destroy</doc>
            <type name="PluginPrefFrame" c:type="PurplePluginPrefFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefs"
              c:identifier="purple_plugin_pref_frame_get_prefs"
              introspectable="0">
        <doc xml:space="preserve">Get the plugin preferences from a plugin preference frame</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a GList of plugin preferences</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve">The plugin frame to get the plugin preferences from</doc>
            <type name="PluginPrefFrame" c:type="PurplePluginPrefFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_plugin_pref_frame_new"
                introspectable="0">
        <doc xml:space="preserve">Create a new plugin preference frame</doc>
        <return-value>
          <doc xml:space="preserve">a new PurplePluginPrefFrame</doc>
          <type name="PluginPrefFrame" c:type="PurplePluginPrefFrame*"/>
        </return-value>
      </function>
    </record>
    <callback name="PluginPrefFrameCb"
              c:type="PurplePluginPrefFrameCb"
              introspectable="0">
      <return-value>
        <type name="PluginPrefFrame" c:type="PurplePluginPrefFrame*"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PluginPrefRequestCb"
              c:type="PurplePluginPrefRequestCb"
              introspectable="0">
      <return-value>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PluginPrefType" c:type="PurplePluginPrefType">
      <member name="none" value="0" c:identifier="PURPLE_PLUGIN_PREF_NONE">
      </member>
      <member name="choice" value="1" c:identifier="PURPLE_PLUGIN_PREF_CHOICE">
      </member>
      <member name="info" value="2" c:identifier="PURPLE_PLUGIN_PREF_INFO">
        <doc xml:space="preserve">no-value label</doc>
      </member>
      <member name="string_format"
              value="3"
              c:identifier="PURPLE_PLUGIN_PREF_STRING_FORMAT">
        <doc xml:space="preserve">The preference has a string value.</doc>
      </member>
    </enumeration>
    <enumeration name="PmpType" c:type="PurplePmpType">
      <member name="udp" value="0" c:identifier="PURPLE_PMP_TYPE_UDP">
      </member>
      <member name="tcp" value="1" c:identifier="PURPLE_PMP_TYPE_TCP">
      </member>
    </enumeration>
    <record name="Pounce" c:type="PurplePounce" disguised="1">
      <method name="action_get_attribute"
              c:identifier="purple_pounce_action_get_attribute">
        <doc xml:space="preserve">Returns the value for an attribute in an action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The attribute value, if it exists, or %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The action name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">The attribute name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_is_enabled"
              c:identifier="purple_pounce_action_is_enabled">
        <doc xml:space="preserve">Returns whether or not an action is enabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the action is enabled, or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The action name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_register"
              c:identifier="purple_pounce_action_register">
        <doc xml:space="preserve">Registers an action type for the pounce.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The action name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_set_attribute"
              c:identifier="purple_pounce_action_set_attribute">
        <doc xml:space="preserve">Sets a value for an attribute in an action.

If @value is %NULL, the value will be unset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The action name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">The attribute name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="action_set_enabled"
              c:identifier="purple_pounce_action_set_enabled">
        <doc xml:space="preserve">Enables or disables an action for a pounce.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">The name of the action.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve">The enabled state.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_pounce_destroy">
        <doc xml:space="preserve">Destroys a buddy pounce.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="purple_pounce_get_data"
              introspectable="0">
        <doc xml:space="preserve">Returns the pounce-specific data.</doc>
        <return-value>
          <doc xml:space="preserve">The data specific to a buddy pounce.</doc>
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_events" c:identifier="purple_pounce_get_events">
        <doc xml:space="preserve">Returns the events a pounce should watch for.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The events the pounce is watching for.</doc>
          <type name="PounceEvent" c:type="PurplePounceEvent"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="purple_pounce_get_options">
        <doc xml:space="preserve">Returns the options for a pounce.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The options for the pounce.</doc>
          <type name="PounceOption" c:type="PurplePounceOption"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pouncee" c:identifier="purple_pounce_get_pouncee">
        <doc xml:space="preserve">Returns the buddy a pounce should pounce on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The buddy to pounce on.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pouncer"
              c:identifier="purple_pounce_get_pouncer"
              introspectable="0">
        <doc xml:space="preserve">Returns the account that will do the pouncing.</doc>
        <return-value>
          <doc xml:space="preserve">The account that will pounce.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_save" c:identifier="purple_pounce_get_save">
        <doc xml:space="preserve">Returns whether or not the pounce should save after execution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the pounce should be saved after execution, or
        %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="const PurplePounce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="purple_pounce_set_data">
        <doc xml:space="preserve">Sets the pounce-specific data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Data specific to the pounce.</doc>
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_events" c:identifier="purple_pounce_set_events">
        <doc xml:space="preserve">Sets the events a pounce should watch for.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve">The events to watch for.</doc>
            <type name="PounceEvent" c:type="PurplePounceEvent"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options" c:identifier="purple_pounce_set_options">
        <doc xml:space="preserve">Sets the options for a pounce.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve">The options for the pounce.</doc>
            <type name="PounceOption" c:type="PurplePounceOption"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pouncee" c:identifier="purple_pounce_set_pouncee">
        <doc xml:space="preserve">Sets the buddy a pounce should pounce on.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="pouncee" transfer-ownership="none">
            <doc xml:space="preserve">The buddy to pounce on.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pouncer" c:identifier="purple_pounce_set_pouncer">
        <doc xml:space="preserve">Sets the account that will do the pouncing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="pouncer" transfer-ownership="none">
            <doc xml:space="preserve">The account that will pounce.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_save" c:identifier="purple_pounce_set_save">
        <doc xml:space="preserve">Sets whether or not the pounce should be saved after execution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pounce" transfer-ownership="none">
            <doc xml:space="preserve">The buddy pounce.</doc>
            <type name="Pounce" c:type="PurplePounce*"/>
          </instance-parameter>
          <parameter name="save" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the pounce should be saved, or %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <function name="destroy_all_by_account"
                c:identifier="purple_pounce_destroy_all_by_account">
        <doc xml:space="preserve">Destroys all buddy pounces for the account</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to remove all pounces from.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </function>
      <function name="destroy_all_by_buddy"
                c:identifier="purple_pounce_destroy_all_by_buddy">
        <doc xml:space="preserve">Destroys all buddy pounces for a buddy</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buddy" transfer-ownership="none">
            <doc xml:space="preserve">The buddy whose pounces are to be removed</doc>
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </function>
      <function name="execute" c:identifier="purple_pounce_execute">
        <doc xml:space="preserve">Executes a pounce with the specified pouncer, pouncee, and event type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pouncer" transfer-ownership="none">
            <doc xml:space="preserve">The account that will do the pouncing.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
          <parameter name="pouncee" transfer-ownership="none">
            <doc xml:space="preserve">The buddy that is being pounced.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve">The events that triggered the pounce.</doc>
            <type name="PounceEvent" c:type="PurplePounceEvent"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="purple_pounce_new" introspectable="0">
        <doc xml:space="preserve">Creates a new buddy pounce.</doc>
        <return-value>
          <doc xml:space="preserve">The new buddy pounce structure.</doc>
          <type name="Pounce" c:type="PurplePounce*"/>
        </return-value>
        <parameters>
          <parameter name="ui_type" transfer-ownership="none">
            <doc xml:space="preserve">The type of UI the pounce is for.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pouncer" transfer-ownership="none">
            <doc xml:space="preserve">The account that will pounce.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="pouncee" transfer-ownership="none">
            <doc xml:space="preserve">The buddy to pounce on.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The event(s) to pounce on.</doc>
            <type name="PounceEvent" c:type="PurplePounceEvent"/>
          </parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve">Pounce options.</doc>
            <type name="PounceOption" c:type="PurplePounceOption"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="PounceCb" c:type="PurplePounceCb">
      <doc xml:space="preserve">A pounce callback.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Pounce" c:type="PurplePounce*"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="PounceEvent" c:type="PurplePounceEvent"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PounceEvent" c:type="PurplePounceEvent">
      <doc xml:space="preserve">Events that trigger buddy pounces.</doc>
      <member name="none" value="0" c:identifier="PURPLE_POUNCE_NONE">
        <doc xml:space="preserve">No events.</doc>
      </member>
      <member name="signon" value="1" c:identifier="PURPLE_POUNCE_SIGNON">
        <doc xml:space="preserve">The buddy signed on.</doc>
      </member>
      <member name="signoff" value="2" c:identifier="PURPLE_POUNCE_SIGNOFF">
        <doc xml:space="preserve">The buddy signed off.</doc>
      </member>
      <member name="away" value="4" c:identifier="PURPLE_POUNCE_AWAY">
        <doc xml:space="preserve">The buddy went away.</doc>
      </member>
      <member name="away_return"
              value="8"
              c:identifier="PURPLE_POUNCE_AWAY_RETURN">
        <doc xml:space="preserve">The buddy returned from away.</doc>
      </member>
      <member name="idle" value="16" c:identifier="PURPLE_POUNCE_IDLE">
        <doc xml:space="preserve">The buddy became idle.</doc>
      </member>
      <member name="idle_return"
              value="32"
              c:identifier="PURPLE_POUNCE_IDLE_RETURN">
        <doc xml:space="preserve">The buddy is no longer idle.</doc>
      </member>
      <member name="typing" value="64" c:identifier="PURPLE_POUNCE_TYPING">
        <doc xml:space="preserve">The buddy started typing.</doc>
      </member>
      <member name="typed" value="128" c:identifier="PURPLE_POUNCE_TYPED">
        <doc xml:space="preserve">The buddy has entered text.</doc>
      </member>
      <member name="typing_stopped"
              value="256"
              c:identifier="PURPLE_POUNCE_TYPING_STOPPED">
        <doc xml:space="preserve">The buddy stopped typing.</doc>
      </member>
      <member name="message_received"
              value="512"
              c:identifier="PURPLE_POUNCE_MESSAGE_RECEIVED">
        <doc xml:space="preserve">The buddy sent a message.</doc>
      </member>
    </enumeration>
    <enumeration name="PounceOption" c:type="PurplePounceOption">
      <member name="none" value="0" c:identifier="PURPLE_POUNCE_OPTION_NONE">
        <doc xml:space="preserve">No Option</doc>
      </member>
      <member name="away" value="1" c:identifier="PURPLE_POUNCE_OPTION_AWAY">
        <doc xml:space="preserve">Pounce only when away</doc>
      </member>
    </enumeration>
    <callback name="PrefCallback" c:type="PurplePrefCallback">
      <doc xml:space="preserve">The type of callbacks for preference changes.

See purple_prefs_connect_callback().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">the name of the preference which has changed.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">the type of the preferenced named @name</doc>
          <type name="PrefType" c:type="PurplePrefType"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">the new value of the preferencs; should be cast to the correct
            type.  For instance, to recover the value of a #PURPLE_PREF_INT
            preference, use &lt;literal&gt;GPOINTER_TO_INT(val)&lt;/literal&gt;.
            Alternatively, just call purple_prefs_get_int(),
            purple_prefs_get_string_list() etc.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Arbitrary data specified when the callback was connected with
            purple_prefs_connect_callback().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PrefType" c:type="PurplePrefType">
      <doc xml:space="preserve">Preference data types.</doc>
      <member name="none" value="0" c:identifier="PURPLE_PREF_NONE">
        <doc xml:space="preserve">No type.</doc>
      </member>
      <member name="boolean" value="1" c:identifier="PURPLE_PREF_BOOLEAN">
        <doc xml:space="preserve">Boolean.</doc>
      </member>
      <member name="int" value="2" c:identifier="PURPLE_PREF_INT">
        <doc xml:space="preserve">Integer.</doc>
      </member>
      <member name="string" value="3" c:identifier="PURPLE_PREF_STRING">
        <doc xml:space="preserve">String.</doc>
      </member>
      <member name="string_list"
              value="4"
              c:identifier="PURPLE_PREF_STRING_LIST">
        <doc xml:space="preserve">List of strings.</doc>
      </member>
      <member name="path" value="5" c:identifier="PURPLE_PREF_PATH">
        <doc xml:space="preserve">Path.</doc>
      </member>
      <member name="path_list" value="6" c:identifier="PURPLE_PREF_PATH_LIST">
        <doc xml:space="preserve">List of paths.</doc>
      </member>
    </enumeration>
    <class name="Protocol"
           c:symbol-prefix="protocol"
           c:type="PurpleProtocol"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleProtocol"
           glib:get-type="purple_protocol_get_type"
           glib:type-struct="ProtocolClass">
      <doc xml:space="preserve">Represents an instance of a protocol registered with the protocols
subsystem. Protocols must initialize the members to appropriate values.</doc>
      <method name="attention_iface_get_types"
              c:identifier="purple_protocol_attention_iface_get_types"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="acct" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attention_iface_send"
              c:identifier="purple_protocol_attention_iface_send">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_get_name"
              c:identifier="purple_protocol_chat_iface_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="components" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_get_user_real_name"
              c:identifier="purple_protocol_chat_iface_get_user_real_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_info"
              c:identifier="purple_protocol_chat_iface_info"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_info_defaults"
              c:identifier="purple_protocol_chat_iface_info_defaults"
              introspectable="0">
        <return-value>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="chat_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_invite"
              c:identifier="purple_protocol_chat_iface_invite">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_join"
              c:identifier="purple_protocol_chat_iface_join">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="components" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_leave"
              c:identifier="purple_protocol_chat_iface_leave">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_reject"
              c:identifier="purple_protocol_chat_iface_reject">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="components" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_send"
              c:identifier="purple_protocol_chat_iface_send"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type c:type="PurpleMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chat_iface_set_topic"
              c:identifier="purple_protocol_chat_iface_set_topic">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="topic" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="class_close" c:identifier="purple_protocol_class_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="class_list_icon"
              c:identifier="purple_protocol_class_list_icon">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="class_login" c:identifier="purple_protocol_class_login">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="class_status_types"
              c:identifier="purple_protocol_class_status_types"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_blist_node_menu"
              c:identifier="purple_protocol_client_iface_blist_node_menu"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="BlistNode" c:type="PurpleBlistNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_buddy_free"
              c:identifier="purple_protocol_client_iface_buddy_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_convo_closed"
              c:identifier="purple_protocol_client_iface_convo_closed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_find_blist_chat"
              c:identifier="purple_protocol_client_iface_find_blist_chat"
              introspectable="0">
        <return-value>
          <type name="Chat" c:type="PurpleChat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_get_account_text_table"
              c:identifier="purple_protocol_client_iface_get_account_text_table"
              introspectable="0">
        <return-value>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_get_actions"
              c:identifier="purple_protocol_client_iface_get_actions"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_get_max_message_size"
              c:identifier="purple_protocol_client_iface_get_max_message_size"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="conv" transfer-ownership="none">
            <type c:type="PurpleConversation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_get_moods"
              c:identifier="purple_protocol_client_iface_get_moods"
              introspectable="0">
        <return-value>
          <type c:type="PurpleMood*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_list_emblem"
              c:identifier="purple_protocol_client_iface_list_emblem">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_normalize"
              c:identifier="purple_protocol_client_iface_normalize">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_offline_message"
              c:identifier="purple_protocol_client_iface_offline_message">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="const PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_status_text"
              c:identifier="purple_protocol_client_iface_status_text">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="client_iface_tooltip_text"
              c:identifier="purple_protocol_client_iface_tooltip_text"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
          <parameter name="user_info" transfer-ownership="none">
            <type c:type="PurpleNotifyUserInfo*"/>
          </parameter>
          <parameter name="full" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_iface_connection_new"
              c:identifier="purple_protocol_factory_iface_connection_new"
              introspectable="0">
        <return-value>
          <type name="Connection" c:type="PurpleConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_iface_roomlist_new"
              c:identifier="purple_protocol_factory_iface_roomlist_new"
              introspectable="0">
        <return-value>
          <type name="Roomlist" c:type="PurpleRoomlist*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_iface_whiteboard_new"
              c:identifier="purple_protocol_factory_iface_whiteboard_new"
              introspectable="0">
        <return-value>
          <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_iface_xfer_new"
              c:identifier="purple_protocol_factory_iface_xfer_new"
              introspectable="0">
        <return-value>
          <type name="Xfer" c:type="PurpleXfer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="XferType" c:type="PurpleXferType"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account_options"
              c:identifier="purple_protocol_get_account_options"
              introspectable="0">
        <doc xml:space="preserve">Returns the account options for a protocol.</doc>
        <return-value>
          <doc xml:space="preserve">The account options for the protocol.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_spec"
              c:identifier="purple_protocol_get_icon_spec">
        <doc xml:space="preserve">Returns the icon spec of a protocol.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The icon spec of the protocol.</doc>
          <type name="BuddyIconSpec" c:type="PurpleBuddyIconSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="purple_protocol_get_id">
        <doc xml:space="preserve">Returns the ID of a protocol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The ID of the protocol.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_protocol_get_name">
        <doc xml:space="preserve">Returns the translated name of a protocol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The translated name of the protocol.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="purple_protocol_get_options">
        <doc xml:space="preserve">Returns the options of a protocol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The options of the protocol.</doc>
          <type name="ProtocolOptions" c:type="PurpleProtocolOptions"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_splits"
              c:identifier="purple_protocol_get_user_splits"
              introspectable="0">
        <doc xml:space="preserve">Returns the user splits of a protocol.</doc>
        <return-value>
          <doc xml:space="preserve">The user splits of the protocol.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_whiteboard_ops"
              c:identifier="purple_protocol_get_whiteboard_ops"
              introspectable="0">
        <doc xml:space="preserve">Returns the whiteboard ops of a protocol.</doc>
        <return-value>
          <doc xml:space="preserve">The whiteboard ops of the protocol.</doc>
          <type name="WhiteboardOps" c:type="PurpleWhiteboardOps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol.</doc>
            <type name="Protocol" c:type="const PurpleProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="im_iface_send"
              c:identifier="purple_protocol_im_iface_send"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type c:type="PurpleMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="im_iface_send_typing"
              c:identifier="purple_protocol_im_iface_send_typing">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="IMTypingState" c:type="PurpleIMTypingState"/>
          </parameter>
        </parameters>
      </method>
      <method name="media_iface_get_caps"
              c:identifier="purple_protocol_media_iface_get_caps">
        <return-value transfer-ownership="none">
          <type name="MediaCaps" c:type="PurpleMediaCaps"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="media_iface_initiate_session"
              c:identifier="purple_protocol_media_iface_initiate_session">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="MediaSessionType" c:type="PurpleMediaSessionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="media_iface_send_dtmf"
              c:identifier="purple_protocol_media_iface_send_dtmf">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <type name="Media" c:type="PurpleMedia*"/>
          </parameter>
          <parameter name="dtmf" transfer-ownership="none">
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="override" c:identifier="purple_protocol_override">
        <doc xml:space="preserve">Lets derived protocol types override the base type's instance data, such as
protocol options, user splits, icon spec, etc.
This function is called in the *_init() function of your derived protocol,
to delete the parent type's data so you can define your own.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve">The protocol instance.</doc>
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">What instance data to delete.</doc>
            <type name="ProtocolOverrideFlags"
                  c:type="PurpleProtocolOverrideFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_iface_add_deny"
              c:identifier="purple_protocol_privacy_iface_add_deny">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_iface_add_permit"
              c:identifier="purple_protocol_privacy_iface_add_permit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_iface_rem_deny"
              c:identifier="purple_protocol_privacy_iface_rem_deny">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_iface_rem_permit"
              c:identifier="purple_protocol_privacy_iface_rem_permit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="privacy_iface_set_permit_deny"
              c:identifier="purple_protocol_privacy_iface_set_permit_deny">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="roomlist_iface_cancel"
              c:identifier="purple_protocol_roomlist_iface_cancel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </parameter>
        </parameters>
      </method>
      <method name="roomlist_iface_expand_category"
              c:identifier="purple_protocol_roomlist_iface_expand_category">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </method>
      <method name="roomlist_iface_get_list"
              c:identifier="purple_protocol_roomlist_iface_get_list"
              introspectable="0">
        <return-value>
          <type name="Roomlist" c:type="PurpleRoomlist*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="roomlist_iface_room_serialize"
              c:identifier="purple_protocol_roomlist_iface_room_serialize">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="room" transfer-ownership="none">
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_add_buddies"
              c:identifier="purple_protocol_server_iface_add_buddies"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="pc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="buddies" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="groups" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_add_buddy"
              c:identifier="purple_protocol_server_iface_add_buddy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="pc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_alias_buddy"
              c:identifier="purple_protocol_server_iface_alias_buddy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_change_passwd"
              c:identifier="purple_protocol_server_iface_change_passwd">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="old_pass" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="new_pass" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_get_info"
              c:identifier="purple_protocol_server_iface_get_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_get_public_alias"
              c:identifier="purple_protocol_server_iface_get_public_alias">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="success_cb" transfer-ownership="none" scope="call">
            <type name="GetPublicAliasSuccessCallback"
                  c:type="PurpleGetPublicAliasSuccessCallback"/>
          </parameter>
          <parameter name="failure_cb" transfer-ownership="none" scope="call">
            <type name="GetPublicAliasFailureCallback"
                  c:type="PurpleGetPublicAliasFailureCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_group_buddy"
              c:identifier="purple_protocol_server_iface_group_buddy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="old_group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="new_group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_keepalive"
              c:identifier="purple_protocol_server_iface_keepalive">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_register_user"
              c:identifier="purple_protocol_server_iface_register_user">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_remove_buddies"
              c:identifier="purple_protocol_server_iface_remove_buddies"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="buddies" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="groups" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_remove_buddy"
              c:identifier="purple_protocol_server_iface_remove_buddy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="buddy" transfer-ownership="none">
            <type name="Buddy" c:type="PurpleBuddy*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_remove_group"
              c:identifier="purple_protocol_server_iface_remove_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_rename_group"
              c:identifier="purple_protocol_server_iface_rename_group"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="old_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="PurpleGroup*"/>
          </parameter>
          <parameter name="moved_buddies" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_send_raw"
              c:identifier="purple_protocol_server_iface_send_raw">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_set_buddy_icon"
              c:identifier="purple_protocol_server_iface_set_buddy_icon"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="img" transfer-ownership="none">
            <type c:type="PurpleImage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_set_idle"
              c:identifier="purple_protocol_server_iface_set_idle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="idletime" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_set_info"
              c:identifier="purple_protocol_server_iface_set_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_set_public_alias"
              c:identifier="purple_protocol_server_iface_set_public_alias">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="gc" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="success_cb" transfer-ownership="none" scope="call">
            <type name="SetPublicAliasSuccessCallback"
                  c:type="PurpleSetPublicAliasSuccessCallback"/>
          </parameter>
          <parameter name="failure_cb" transfer-ownership="none" scope="call">
            <type name="SetPublicAliasFailureCallback"
                  c:type="PurpleSetPublicAliasFailureCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_set_status"
              c:identifier="purple_protocol_server_iface_set_status"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <type c:type="PurpleStatus*"/>
          </parameter>
        </parameters>
      </method>
      <method name="server_iface_unregister_user"
              c:identifier="purple_protocol_server_iface_unregister_user">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <type name="AccountUnregistrationCb"
                  c:type="PurpleAccountUnregistrationCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfer_iface_can_receive"
              c:identifier="purple_protocol_xfer_iface_can_receive">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfer_iface_new_xfer"
              c:identifier="purple_protocol_xfer_iface_new_xfer"
              introspectable="0">
        <return-value>
          <type name="Xfer" c:type="PurpleXfer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfer_iface_send"
              c:identifier="purple_protocol_xfer_iface_send">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="arg0" transfer-ownership="none">
            <type name="Protocol" c:type="PurpleProtocol*"/>
          </instance-parameter>
          <parameter name="arg1" transfer-ownership="none">
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="id">
        <doc xml:space="preserve">Protocol ID</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="name">
        <doc xml:space="preserve">Translated name of the protocol</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="options">
        <doc xml:space="preserve">Protocol options</doc>
        <type name="ProtocolOptions" c:type="PurpleProtocolOptions"/>
      </field>
      <field name="user_splits">
        <doc xml:space="preserve">A GList of PurpleAccountUserSplit</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="account_options">
        <doc xml:space="preserve">A GList of PurpleAccountOption</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="icon_spec">
        <doc xml:space="preserve">The icon spec.</doc>
        <type name="BuddyIconSpec" c:type="PurpleBuddyIconSpec*"/>
      </field>
      <field name="whiteboard_ops">
        <doc xml:space="preserve">Whiteboard operations</doc>
        <type name="WhiteboardOps" c:type="PurpleWhiteboardOps*"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </class>
    <interface name="ProtocolAttentionIface"
               c:symbol-prefix="protocol_attention_iface"
               c:type="PurpleProtocolAttentionIface"
               glib:type-name="PurpleProtocolAttentionIface"
               glib:get-type="purple_protocol_attention_iface_get_type">
      <doc xml:space="preserve">The protocol attention interface.

This interface provides attention API for sending and receiving
zaps/nudges/buzzes etc.</doc>
    </interface>
    <interface name="ProtocolChatIface"
               c:symbol-prefix="protocol_chat_iface"
               c:type="PurpleProtocolChatIface"
               glib:type-name="PurpleProtocolChatIface"
               glib:get-type="purple_protocol_chat_iface_get_type">
      <doc xml:space="preserve">The protocol chat interface.

This interface provides callbacks needed by protocols that implement chats.</doc>
    </interface>
    <record name="ProtocolClass"
            c:type="PurpleProtocolClass"
            glib:is-gtype-struct-for="Protocol">
      <doc xml:space="preserve">The base class for all protocols.

All protocol types must implement the methods in this class.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="login">
        <callback name="login">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="Connection" c:type="PurpleConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="status_types" introspectable="0">
        <callback name="status_types" introspectable="0">
          <return-value>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_icon">
        <callback name="list_icon">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
            <parameter name="buddy" transfer-ownership="none">
              <type name="Buddy" c:type="PurpleBuddy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="ProtocolClientIface"
               c:symbol-prefix="protocol_client_iface"
               c:type="PurpleProtocolClientIface"
               glib:type-name="PurpleProtocolClientIface"
               glib:get-type="purple_protocol_client_iface_get_type">
      <doc xml:space="preserve">The protocol client interface.

This interface provides a gateway between purple and the protocol.</doc>
    </interface>
    <interface name="ProtocolFactoryIface"
               c:symbol-prefix="protocol_factory_iface"
               c:type="PurpleProtocolFactoryIface"
               glib:type-name="PurpleProtocolFactoryIface"
               glib:get-type="purple_protocol_factory_iface_get_type">
      <doc xml:space="preserve">The protocol factory interface.

This interface provides callbacks for construction of protocol-specific
subclasses of some purple objects.</doc>
    </interface>
    <interface name="ProtocolIMIface"
               c:symbol-prefix="protocol_im_iface"
               c:type="PurpleProtocolIMIface"
               glib:type-name="PurpleProtocolIMIface"
               glib:get-type="purple_protocol_im_iface_get_type">
      <doc xml:space="preserve">The protocol IM interface.

This interface provides callbacks needed by protocols that implement IMs.</doc>
    </interface>
    <interface name="ProtocolMediaIface"
               c:symbol-prefix="protocol_media_iface"
               c:type="PurpleProtocolMediaIface"
               glib:type-name="PurpleProtocolMediaIface"
               glib:get-type="purple_protocol_media_iface_get_type">
      <doc xml:space="preserve">The protocol media interface.

This interface provides callbacks for media sessions on the protocol.</doc>
    </interface>
    <bitfield name="ProtocolOptions"
              glib:type-name="PurpleProtocolOptions"
              glib:get-type="purple_protocol_options_get_type"
              c:type="PurpleProtocolOptions">
      <member name="unique_chatname"
              value="4"
              c:identifier="OPT_PROTO_UNIQUE_CHATNAME"
              glib:nick="unique-chatname">
      </member>
      <member name="chat_topic"
              value="8"
              c:identifier="OPT_PROTO_CHAT_TOPIC"
              glib:nick="chat-topic">
      </member>
      <member name="no_password"
              value="16"
              c:identifier="OPT_PROTO_NO_PASSWORD"
              glib:nick="no-password">
      </member>
      <member name="mail_check"
              value="32"
              c:identifier="OPT_PROTO_MAIL_CHECK"
              glib:nick="mail-check">
      </member>
      <member name="password_optional"
              value="128"
              c:identifier="OPT_PROTO_PASSWORD_OPTIONAL"
              glib:nick="password-optional">
      </member>
      <member name="use_pointsize"
              value="256"
              c:identifier="OPT_PROTO_USE_POINTSIZE"
              glib:nick="use-pointsize">
      </member>
      <member name="register_noscreenname"
              value="512"
              c:identifier="OPT_PROTO_REGISTER_NOSCREENNAME"
              glib:nick="register-noscreenname">
      </member>
      <member name="slash_commands_native"
              value="1024"
              c:identifier="OPT_PROTO_SLASH_COMMANDS_NATIVE"
              glib:nick="slash-commands-native">
      </member>
      <member name="invite_message"
              value="2048"
              c:identifier="OPT_PROTO_INVITE_MESSAGE"
              glib:nick="invite-message">
      </member>
      <member name="authorization_granted_message"
              value="4096"
              c:identifier="OPT_PROTO_AUTHORIZATION_GRANTED_MESSAGE"
              glib:nick="authorization-granted-message">
      </member>
      <member name="authorization_denied_message"
              value="8192"
              c:identifier="OPT_PROTO_AUTHORIZATION_DENIED_MESSAGE"
              glib:nick="authorization-denied-message">
      </member>
    </bitfield>
    <bitfield name="ProtocolOverrideFlags"
              glib:type-name="PurpleProtocolOverrideFlags"
              glib:get-type="purple_protocol_override_flags_get_type"
              c:type="PurpleProtocolOverrideFlags">
      <doc xml:space="preserve">Flags to indicate what base protocol's data a derived protocol wants to
override.

See purple_protocol_override().</doc>
      <member name="user_splits"
              value="2"
              c:identifier="PURPLE_PROTOCOL_OVERRIDE_USER_SPLITS"
              glib:nick="user-splits">
      </member>
      <member name="protocol_options"
              value="4"
              c:identifier="PURPLE_PROTOCOL_OVERRIDE_PROTOCOL_OPTIONS"
              glib:nick="protocol-options">
      </member>
      <member name="icon_spec"
              value="8"
              c:identifier="PURPLE_PROTOCOL_OVERRIDE_ICON_SPEC"
              glib:nick="icon-spec">
      </member>
    </bitfield>
    <interface name="ProtocolPrivacyIface"
               c:symbol-prefix="protocol_privacy_iface"
               c:type="PurpleProtocolPrivacyIface"
               glib:type-name="PurpleProtocolPrivacyIface"
               glib:get-type="purple_protocol_privacy_iface_get_type">
      <doc xml:space="preserve">The protocol privacy interface.

This interface provides privacy callbacks such as to permit/deny users.</doc>
    </interface>
    <interface name="ProtocolRoomlistIface"
               c:symbol-prefix="protocol_roomlist_iface"
               c:type="PurpleProtocolRoomlistIface"
               glib:type-name="PurpleProtocolRoomlistIface"
               glib:get-type="purple_protocol_roomlist_iface_get_type">
      <doc xml:space="preserve">The protocol roomlist interface.

This interface provides callbacks for room listing.</doc>
    </interface>
    <interface name="ProtocolServerIface"
               c:symbol-prefix="protocol_server_iface"
               c:type="PurpleProtocolServerIface"
               glib:type-name="PurpleProtocolServerIface"
               glib:get-type="purple_protocol_server_iface_get_type">
      <doc xml:space="preserve">The protocol server interface.

This interface provides a gateway between purple and the protocol's server.</doc>
    </interface>
    <interface name="ProtocolXferIface"
               c:symbol-prefix="protocol_xfer_iface"
               c:type="PurpleProtocolXferIface"
               glib:type-name="PurpleProtocolXferIface"
               glib:get-type="purple_protocol_xfer_iface_get_type">
      <doc xml:space="preserve">The protocol file transfer interface.

This interface provides file transfer callbacks for the protocol.</doc>
    </interface>
    <record name="ProxyConnectData"
            c:type="PurpleProxyConnectData"
            disguised="1">
    </record>
    <callback name="ProxyConnectFunction" c:type="PurpleProxyConnectFunction">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="error_message" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProxyInfo" c:type="PurpleProxyInfo" disguised="1">
      <doc xml:space="preserve">Information on proxy settings.</doc>
      <method name="destroy" c:identifier="purple_proxy_info_destroy">
        <doc xml:space="preserve">Destroys a proxy information structure.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information structure to destroy.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="purple_proxy_info_get_host">
        <doc xml:space="preserve">Returns the proxy's host.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The host.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="const PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="purple_proxy_info_get_password">
        <doc xml:space="preserve">Returns the proxy's password.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The password.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="const PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="purple_proxy_info_get_port">
        <doc xml:space="preserve">Returns the proxy's port.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The port.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="const PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proxy_type"
              c:identifier="purple_proxy_info_get_proxy_type">
        <doc xml:space="preserve">Returns the proxy's type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type.</doc>
          <type name="ProxyType" c:type="PurpleProxyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="const PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="purple_proxy_info_get_username">
        <doc xml:space="preserve">Returns the proxy's username.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The username.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="const PurpleProxyInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="purple_proxy_info_set_host">
        <doc xml:space="preserve">Sets the proxy host.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve">The host.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="purple_proxy_info_set_password">
        <doc xml:space="preserve">Sets the proxy password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">The password.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="purple_proxy_info_set_port">
        <doc xml:space="preserve">Sets the proxy port.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">The port.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_type"
              c:identifier="purple_proxy_info_set_proxy_type">
        <doc xml:space="preserve">Sets the type of proxy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The proxy type.</doc>
            <type name="ProxyType" c:type="PurpleProxyType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="purple_proxy_info_set_username">
        <doc xml:space="preserve">Sets the proxy username.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">The proxy information.</doc>
            <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">The username.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_proxy_info_new"
                introspectable="0">
        <doc xml:space="preserve">Creates a proxy information structure.</doc>
        <return-value>
          <doc xml:space="preserve">The proxy information structure.</doc>
          <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
        </return-value>
      </function>
    </record>
    <enumeration name="ProxyType" c:type="PurpleProxyType">
      <doc xml:space="preserve">A type of proxy connection.</doc>
      <member name="use_global"
              value="-1"
              c:identifier="PURPLE_PROXY_USE_GLOBAL">
        <doc xml:space="preserve">Use the global proxy information.</doc>
      </member>
      <member name="none" value="0" c:identifier="PURPLE_PROXY_NONE">
        <doc xml:space="preserve">No proxy.</doc>
      </member>
      <member name="http" value="1" c:identifier="PURPLE_PROXY_HTTP">
        <doc xml:space="preserve">HTTP proxy.</doc>
      </member>
      <member name="socks4" value="2" c:identifier="PURPLE_PROXY_SOCKS4">
        <doc xml:space="preserve">SOCKS 4 proxy.</doc>
      </member>
      <member name="socks5" value="3" c:identifier="PURPLE_PROXY_SOCKS5">
        <doc xml:space="preserve">SOCKS 5 proxy.</doc>
      </member>
      <member name="use_envvar"
              value="4"
              c:identifier="PURPLE_PROXY_USE_ENVVAR">
        <doc xml:space="preserve">Use environmental settings.</doc>
      </member>
      <member name="tor" value="5" c:identifier="PURPLE_PROXY_TOR">
        <doc xml:space="preserve">Use a Tor proxy (SOCKS 5 really).</doc>
      </member>
    </enumeration>
    <class name="RC4Cipher"
           c:symbol-prefix="rc4_cipher"
           c:type="PurpleRC4Cipher"
           parent="Cipher"
           glib:type-name="PurpleRC4Cipher"
           glib:get-type="purple_rc4_cipher_get_type"
           glib:type-struct="RC4CipherClass">
      <constructor name="new" c:identifier="purple_rc4_cipher_new">
        <return-value transfer-ownership="full">
          <type name="Cipher" c:type="PurpleCipher*"/>
        </return-value>
      </constructor>
      <method name="get_key_len" c:identifier="purple_rc4_cipher_get_key_len">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="rc4_cipher" transfer-ownership="none">
            <type name="RC4Cipher" c:type="PurpleRC4Cipher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key_len" c:identifier="purple_rc4_cipher_set_key_len">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rc4_cipher" transfer-ownership="none">
            <type name="RC4Cipher" c:type="PurpleRC4Cipher*"/>
          </instance-parameter>
          <parameter name="key_len" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="key" readable="0" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="key-len" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="gparent">
        <type name="Cipher" c:type="PurpleCipher"/>
      </field>
    </class>
    <record name="RC4CipherClass"
            c:type="PurpleRC4CipherClass"
            glib:is-gtype-struct-for="RC4Cipher">
      <field name="gparent">
        <type name="CipherClass" c:type="PurpleCipherClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Roomlist"
           c:symbol-prefix="roomlist"
           c:type="PurpleRoomlist"
           parent="GObject.Object"
           glib:type-name="PurpleRoomlist"
           glib:get-type="purple_roomlist_get_type"
           glib:type-struct="RoomlistClass">
      <doc xml:space="preserve">Represents a list of rooms for a given connection on a given protocol.</doc>
      <constructor name="new" c:identifier="purple_roomlist_new">
        <doc xml:space="preserve">Returns a newly created room list object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new room list handle.</doc>
          <type name="Roomlist" c:type="PurpleRoomlist*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account that's listing rooms.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_list"
                c:identifier="purple_roomlist_get_list"
                introspectable="0">
        <doc xml:space="preserve">Returns a PurpleRoomlist structure from the protocol, and
instructs the protocol to start fetching the list.</doc>
        <return-value>
          <doc xml:space="preserve">A PurpleRoomlist* or %NULL if the protocol
        doesn't support that.</doc>
          <type name="Roomlist" c:type="PurpleRoomlist*"/>
        </return-value>
        <parameters>
          <parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleConnection to have get a list.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_ui_ops" c:identifier="purple_roomlist_get_ui_ops">
        <doc xml:space="preserve">Returns the purple window UI operations structure to be used in
new windows.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A filled-out PurpleRoomlistUiOps structure.</doc>
          <type name="RoomlistUiOps" c:type="PurpleRoomlistUiOps*"/>
        </return-value>
      </function>
      <function name="set_ui_ops" c:identifier="purple_roomlist_set_ui_ops">
        <doc xml:space="preserve">Sets the UI operations structure to be used in all purple room lists.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ops" transfer-ownership="none">
            <doc xml:space="preserve">The UI operations structure.</doc>
            <type name="RoomlistUiOps" c:type="PurpleRoomlistUiOps*"/>
          </parameter>
        </parameters>
      </function>
      <function name="show_with_account"
                c:identifier="purple_roomlist_show_with_account">
        <doc xml:space="preserve">This is used to get the room list on an account, asking the UI
to pop up a dialog with the specified account already selected,
and pretend the user clicked the get list button.
While we're pretending, predend I didn't say anything about dialogs
or buttons, since this is the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account to get the list on.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </function>
      <method name="cancel_get_list"
              c:identifier="purple_roomlist_cancel_get_list">
        <doc xml:space="preserve">Tells the protocol to stop fetching the list.
If this is possible and done, the protocol will
call set_in_progress with %FALSE and possibly
unref the list if it took a reference.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list to cancel a get_list on.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="expand_category"
              c:identifier="purple_roomlist_expand_category">
        <doc xml:space="preserve">Tells the protocol that a category was expanded.

On some protocols, the rooms in the category
won't be fetched until this is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve">The category that was expanded. The expression
                (category-&gt;type &amp; PURPLE_ROOMLIST_ROOMTYPE_CATEGORY)
                must be true.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="purple_roomlist_get_account"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the PurpleAccount that was given when the room list was
created.</doc>
        <return-value>
          <doc xml:space="preserve">The PurpleAccount tied to this room list.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="purple_roomlist_get_fields"
              introspectable="0">
        <doc xml:space="preserve">Get the list of fields for a roomlist.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of fields</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="roomlist" transfer-ownership="none">
            <doc xml:space="preserve">The roomlist, which must not be %NULL.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_in_progress"
              c:identifier="purple_roomlist_get_in_progress">
        <doc xml:space="preserve">Gets the "in progress" state of the room list.

The UI is encouraged to somehow hint to the user
whether or not we're busy downloading a room list or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if we're downloading it, or false if we're not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_roomlist_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Get the protocol data associated with this room list.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data associated with this room list.  This is a
        convenience field provided to the protocol -- it is not
        used the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The roomlist, which must not be %NULL.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_roomlist_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Get the UI data associated with this room list.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data associated with this room list.  This is a
        convenience field provided to the UIs--it is not
        used by the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The roomlist, which must not be %NULL.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="room_add" c:identifier="purple_roomlist_room_add">
        <doc xml:space="preserve">Adds a room to the list of them.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room to add to the list. The GList of fields must be in the same
               order as was given in purple_roomlist_set_fields().</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </method>
      <method name="room_add_field"
              c:identifier="purple_roomlist_room_add_field">
        <doc xml:space="preserve">Adds a field to a room.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list the room belongs to.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">The field to append. Strings get g_strdup'd internally.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="room_join" c:identifier="purple_roomlist_room_join">
        <doc xml:space="preserve">Join a room, given a PurpleRoomlistRoom and it's associated PurpleRoomlist.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list the room belongs to.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room to join.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fields"
              c:identifier="purple_roomlist_set_fields"
              introspectable="0">
        <doc xml:space="preserve">Set the different field types and their names for this protocol.

This must be called before purple_roomlist_room_add().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="fields" transfer-ownership="none">
            <doc xml:space="preserve">A GList of PurpleRoomlistField's. UI's are encouraged
              to default to displaying them in the order given.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_in_progress"
              c:identifier="purple_roomlist_set_in_progress">
        <doc xml:space="preserve">Set the "in progress" state of the room list.

The UI is encouraged to somehow hint to the user
whether or not we're busy downloading a room list or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The room list.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="in_progress" transfer-ownership="none">
            <doc xml:space="preserve">We're downloading it, or we're not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_roomlist_set_protocol_data">
        <doc xml:space="preserve">Set the protocol data associated with this room list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The roomlist, which must not be %NULL.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="proto_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this room list.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_roomlist_set_ui_data">
        <doc xml:space="preserve">Set the UI data associated with this room list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">The roomlist, which must not be %NULL.</doc>
            <type name="Roomlist" c:type="PurpleRoomlist*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this room list.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="fields" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="in-progress" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this room list. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="RoomlistClass"
            c:type="PurpleRoomlistClass"
            glib:is-gtype-struct-for="Roomlist">
      <doc xml:space="preserve">Base class for all #PurpleRoomlist's</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RoomlistField"
            c:type="PurpleRoomlistField"
            glib:type-name="PurpleRoomlistField"
            glib:get-type="purple_roomlist_field_get_type"
            c:symbol-prefix="roomlist_field">
      <constructor name="new" c:identifier="purple_roomlist_field_new">
        <doc xml:space="preserve">Creates a new field.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new PurpleRoomlistField, ready to be added to a GList and passed to
        purple_roomlist_set_fields().</doc>
          <type name="RoomlistField" c:type="PurpleRoomlistField*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of the field.</doc>
            <type name="RoomlistFieldType" c:type="PurpleRoomlistFieldType"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">The i18n'ed, user displayable name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The internal name of the field.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hidden" transfer-ownership="none">
            <doc xml:space="preserve">Hide the field.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_field_type"
              c:identifier="purple_roomlist_field_get_field_type">
        <doc xml:space="preserve">Get the type of a field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of the field.</doc>
          <type name="RoomlistFieldType" c:type="PurpleRoomlistFieldType"/>
        </return-value>
        <parameters>
          <instance-parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">A PurpleRoomlistField, which must not be %NULL.</doc>
            <type name="RoomlistField" c:type="PurpleRoomlistField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hidden"
              c:identifier="purple_roomlist_field_get_hidden">
        <doc xml:space="preserve">Check whether a roomlist-field is hidden.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the field is hidden, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">A PurpleRoomlistField, which must not be %NULL.</doc>
            <type name="RoomlistField" c:type="PurpleRoomlistField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="purple_roomlist_field_get_label">
        <doc xml:space="preserve">Get the label of a field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The label of the field.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">A PurpleRoomlistField, which must not be %NULL.</doc>
            <type name="RoomlistField" c:type="PurpleRoomlistField*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RoomlistFieldType"
                 glib:type-name="PurpleRoomlistFieldType"
                 glib:get-type="purple_roomlist_field_type_get_type"
                 c:type="PurpleRoomlistFieldType">
      <doc xml:space="preserve">The types of fields.</doc>
      <member name="bool"
              value="0"
              c:identifier="PURPLE_ROOMLIST_FIELD_BOOL"
              glib:nick="bool">
      </member>
      <member name="int"
              value="1"
              c:identifier="PURPLE_ROOMLIST_FIELD_INT"
              glib:nick="int">
      </member>
      <member name="string"
              value="2"
              c:identifier="PURPLE_ROOMLIST_FIELD_STRING"
              glib:nick="string">
        <doc xml:space="preserve">We do a g_strdup on the passed value if it's
                               this type.</doc>
      </member>
    </enumeration>
    <record name="RoomlistRoom"
            c:type="PurpleRoomlistRoom"
            glib:type-name="PurpleRoomlistRoom"
            glib:get-type="purple_roomlist_room_get_type"
            c:symbol-prefix="roomlist_room">
      <constructor name="new" c:identifier="purple_roomlist_room_new">
        <doc xml:space="preserve">Creates a new room, to be added to the list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new room.</doc>
          <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of room.</doc>
            <type name="RoomlistRoomType" c:type="PurpleRoomlistRoomType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the room.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">The room's parent, if any.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_expanded_once"
              c:identifier="purple_roomlist_room_get_expanded_once">
        <doc xml:space="preserve">Get the value of the expanded_once flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the expanded_once flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="purple_roomlist_room_get_fields"
              introspectable="0">
        <doc xml:space="preserve">Get the list of fields for a room.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of fields</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_roomlist_room_get_name">
        <doc xml:space="preserve">Get the name of a room.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the room.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="purple_roomlist_room_get_parent">
        <doc xml:space="preserve">Get the parent of a room.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent of the room, which can be %NULL.</doc>
          <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_room_type"
              c:identifier="purple_roomlist_room_get_room_type">
        <doc xml:space="preserve">Get the type of a room.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of the room.</doc>
          <type name="RoomlistRoomType" c:type="PurpleRoomlistRoomType"/>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_expanded_once"
              c:identifier="purple_roomlist_room_set_expanded_once">
        <doc xml:space="preserve">Set the expanded_once flag.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve">The room, which must not be %NULL.</doc>
            <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
          </instance-parameter>
          <parameter name="expanded_once" transfer-ownership="none">
            <doc xml:space="preserve">The new value of the expanded_once flag.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RoomlistRoomType"
                 glib:type-name="PurpleRoomlistRoomType"
                 glib:get-type="purple_roomlist_room_type_get_type"
                 c:type="PurpleRoomlistRoomType">
      <doc xml:space="preserve">The types of rooms.

These are ORable flags.</doc>
      <member name="category"
              value="1"
              c:identifier="PURPLE_ROOMLIST_ROOMTYPE_CATEGORY"
              glib:nick="category">
        <doc xml:space="preserve">It's a category, but not a room you can
                                    join.</doc>
      </member>
      <member name="room"
              value="2"
              c:identifier="PURPLE_ROOMLIST_ROOMTYPE_ROOM"
              glib:nick="room">
        <doc xml:space="preserve">It's a room, like the kind you can join.</doc>
      </member>
    </enumeration>
    <record name="RoomlistUiOps"
            c:type="PurpleRoomlistUiOps"
            glib:type-name="PurpleRoomlistUiOps"
            glib:get-type="purple_roomlist_ui_ops_get_type"
            c:symbol-prefix="roomlist_ui_ops">
      <doc xml:space="preserve">The room list ops to be filled out by the UI.</doc>
      <field name="show_with_account">
        <callback name="show_with_account">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="account" transfer-ownership="none">
              <type name="Account" c:type="PurpleAccount*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create">
        <callback name="create">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="Roomlist" c:type="PurpleRoomlist*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_fields" introspectable="0">
        <callback name="set_fields" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="Roomlist" c:type="PurpleRoomlist*"/>
            </parameter>
            <parameter name="fields" transfer-ownership="none">
              <type name="GLib.List" c:type="GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_room">
        <callback name="add_room">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="Roomlist" c:type="PurpleRoomlist*"/>
            </parameter>
            <parameter name="room" transfer-ownership="none">
              <type name="RoomlistRoom" c:type="PurpleRoomlistRoom*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="in_progress">
        <callback name="in_progress">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="Roomlist" c:type="PurpleRoomlist*"/>
            </parameter>
            <parameter name="flag" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="list" transfer-ownership="none">
              <type name="Roomlist" c:type="PurpleRoomlist*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="SHA1Hash"
           c:symbol-prefix="sha1_hash"
           c:type="PurpleSHA1Hash"
           parent="Hash"
           glib:type-name="PurpleSHA1Hash"
           glib:get-type="purple_sha1_hash_get_type"
           glib:type-struct="SHA1HashClass">
      <constructor name="new" c:identifier="purple_sha1_hash_new">
        <return-value transfer-ownership="full">
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
      </constructor>
      <field name="gparent">
        <type name="Hash" c:type="PurpleHash"/>
      </field>
    </class>
    <record name="SHA1HashClass"
            c:type="PurpleSHA1HashClass"
            glib:is-gtype-struct-for="SHA1Hash">
      <field name="gparent">
        <type name="HashClass" c:type="PurpleHashClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="SHA256Hash"
           c:symbol-prefix="sha256_hash"
           c:type="PurpleSHA256Hash"
           parent="Hash"
           glib:type-name="PurpleSHA256Hash"
           glib:get-type="purple_sha256_hash_get_type"
           glib:type-struct="SHA256HashClass">
      <constructor name="new" c:identifier="purple_sha256_hash_new">
        <return-value transfer-ownership="full">
          <type name="Hash" c:type="PurpleHash*"/>
        </return-value>
      </constructor>
      <field name="gparent">
        <type name="Hash" c:type="PurpleHash"/>
      </field>
    </class>
    <record name="SHA256HashClass"
            c:type="PurpleSHA256HashClass"
            glib:is-gtype-struct-for="SHA256Hash">
      <field name="gparent">
        <type name="HashClass" c:type="PurpleHashClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="SIGNAL_PRIORITY_DEFAULT"
              value="0"
              c:type="PURPLE_SIGNAL_PRIORITY_DEFAULT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SIGNAL_PRIORITY_HIGHEST"
              value="9999"
              c:type="PURPLE_SIGNAL_PRIORITY_HIGHEST">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SIGNAL_PRIORITY_LOWEST"
              value="-9999"
              c:type="PURPLE_SIGNAL_PRIORITY_LOWEST">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SSL_DEFAULT_PORT"
              value="443"
              c:type="PURPLE_SSL_DEFAULT_PORT">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="SavedStatus"
            c:type="PurpleSavedStatus"
            glib:type-name="PurpleSavedStatus"
            glib:get-type="purple_savedstatus_get_type"
            c:symbol-prefix="savedstatus">
      <doc xml:space="preserve">Saved statuses don't really interact much with the rest of Purple.  It
could really be a plugin.  It's just a list of away states.  When
a user chooses one of the saved states, their Purple accounts are set
to the settings of that state.

In the savedstatus API, there is the concept of a 'transient'
saved status.  A transient saved status is one that is not
permanent.  Purple will removed it automatically if it isn't
used for a period of time.  Transient saved statuses don't
have titles and they don't show up in the list of saved
statuses.  In fact, if a saved status does not have a title
then it is transient.  If it does have a title, then it is not
transient.

What good is a transient status, you ask?  They can be used to
keep track of the user's 5 most recently used statuses, for
example.  Basically if they just set a message on the fly,
we'll cache it for them in case they want to use it again.  If
they don't use it again, we'll just delete it.</doc>
      <constructor name="new" c:identifier="purple_savedstatus_new">
        <doc xml:space="preserve">Create a new saved status.  This will add the saved status to the
list of saved statuses and writes the revised list to status.xml.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The newly created saved status, or NULL if the title you
        used was already taken.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">The title of the saved status.  This must be
                 unique.  Or, if you want to create a transient
                 saved status, then pass in NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of saved status.</doc>
            <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="activate" c:identifier="purple_savedstatus_activate">
        <doc xml:space="preserve">Sets the statuses for all your accounts to those specified
by the given saved_status.  This function calls
purple_savedstatus_activate_for_account() for all your accounts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The status you want to set your accounts to.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="activate_for_account"
              c:identifier="purple_savedstatus_activate_for_account">
        <doc xml:space="preserve">Sets the statuses for a given account to those specified
by the given saved_status.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The status you want to set your accounts to.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account whose statuses you want to change.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_by_status"
              c:identifier="purple_savedstatus_delete_by_status">
        <doc xml:space="preserve">Delete a saved status.  This removes the saved status from the list
of saved statuses, and writes the revised list to status.xml.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">the status to delete, the pointer is invalid after
       the call</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_creation_time"
              c:identifier="purple_savedstatus_get_creation_time">
        <doc xml:space="preserve">Return the time in seconds-since-the-epoch when this
saved status was created.  Note: For any status created
by Purple 1.5.0 or older this value will be invalid and
very small (close to 0).  This is because Purple 1.5.0
and older did not record the timestamp when the status
was created.

However, this value is guaranteed to be a unique
identifier for the given saved status.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The timestamp when this saved status was created.</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message" c:identifier="purple_savedstatus_get_message">
        <doc xml:space="preserve">Return the default message of a given saved status.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The message.  This will return NULL if the saved
        status does not have a message.  This will
        contain the normal markup that is created by
        Purple's IMHTML (basically HTML markup).</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primitive_type"
              c:identifier="purple_savedstatus_get_primitive_type">
        <doc xml:space="preserve">Return the type of a given saved status.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The primitive type.</doc>
          <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_substatus"
              c:identifier="purple_savedstatus_get_substatus"
              introspectable="0">
        <doc xml:space="preserve">Get the substatus for an account in a saved status.</doc>
        <return-value>
          <doc xml:space="preserve">The PurpleSavedStatusSub for the account, or NULL if
        the given account does not have a substatus that
        differs from the default status of this PurpleSavedStatus.</doc>
          <type name="SavedStatusSub" c:type="PurpleSavedStatusSub*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="purple_savedstatus_get_title">
        <doc xml:space="preserve">Return the name of a given saved status.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The title.  This value may be a static buffer which may
        be overwritten on subsequent calls to this function.  If
        you need a reference to the title for prolonged use then
        you should make a copy of it.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_substatuses"
              c:identifier="purple_savedstatus_has_substatuses">
        <doc xml:space="preserve">Determine if a given saved status has "substatuses,"
or if it is a simple status (the same for all
accounts).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the saved_status has substatuses.
        FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_transient"
              c:identifier="purple_savedstatus_is_transient">
        <doc xml:space="preserve">Determines if a given saved status is "transient."
A transient saved status is one that was not
explicitly added by the user.  Transient statuses
are automatically removed if they are not used
for a period of time.

A transient saved statuses is automatically
created by the status box when the user sets himself
to one of the generic primitive statuses.  The reason
we need to save this status information is so we can
restore it when Purple restarts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the saved status is transient.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="const PurpleSavedStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_message" c:identifier="purple_savedstatus_set_message">
        <doc xml:space="preserve">Set the message for the given saved status.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The message, or NULL if you want to unset the
               message for this status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primitive_type"
              c:identifier="purple_savedstatus_set_primitive_type">
        <doc xml:space="preserve">Set the type for the given saved status.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of saved status.</doc>
            <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_substatus"
              c:identifier="purple_savedstatus_set_substatus"
              introspectable="0">
        <doc xml:space="preserve">Set a substatus for an account in a saved status.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The status type for the account in the saved
                 status.</doc>
            <type c:type="const PurpleStatusType*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The message for the account in the substatus.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="purple_savedstatus_set_title">
        <doc xml:space="preserve">Set the title for the given saved status.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">The title of the saved status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_substatus"
              c:identifier="purple_savedstatus_unset_substatus">
        <doc xml:space="preserve">Unset a substatus for an account in a saved status.  This clears
the previosly set substatus for the PurpleSavedStatus.  If this
saved status is activated then this account will use the default
status type and message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saved_status" transfer-ownership="none">
            <doc xml:space="preserve">The saved status.</doc>
            <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
        </parameters>
      </method>
      <function name="delete" c:identifier="purple_savedstatus_delete">
        <doc xml:space="preserve">Delete a saved status.  This removes the saved status from the list
of saved statuses, and writes the revised list to status.xml.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the status was successfully deleted.  FALSE if the
        status could not be deleted because no saved status exists
        with the given title.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">The title of the saved status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="find" c:identifier="purple_savedstatus_find">
        <doc xml:space="preserve">Finds a saved status with the specified title.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The saved status if found, or NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">The name of the saved status.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="find_by_creation_time"
                c:identifier="purple_savedstatus_find_by_creation_time">
        <doc xml:space="preserve">Finds a saved status with the specified creation time.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The saved status if found, or NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
        <parameters>
          <parameter name="creation_time" transfer-ownership="none">
            <doc xml:space="preserve">The timestamp when the saved
       status was created.</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </function>
      <function name="find_transient_by_type_and_message"
                c:identifier="purple_savedstatus_find_transient_by_type_and_message">
        <doc xml:space="preserve">Finds a saved status with the specified primitive and message.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The saved status if found, or NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleStatusPrimitive for the status you're trying
       to find.</doc>
            <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The message for the status you're trying
       to find.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_current"
                c:identifier="purple_savedstatus_get_current">
        <doc xml:space="preserve">Returns the currently selected saved status.  If we are idle
then this returns purple_savedstatus_get_idleaway().  Otherwise
it returns purple_savedstatus_get_default().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the in-use PurpleSavedStatus.
        This function never returns NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
      </function>
      <function name="get_default"
                c:identifier="purple_savedstatus_get_default">
        <doc xml:space="preserve">Returns the default saved status that is used when our
accounts are not idle-away.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the in-use PurpleSavedStatus.
        This function never returns NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
      </function>
      <function name="get_idleaway"
                c:identifier="purple_savedstatus_get_idleaway">
        <doc xml:space="preserve">Returns the saved status that is used when your
accounts become idle-away.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the idle-away PurpleSavedStatus.
        This function never returns NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
      </function>
      <function name="get_startup"
                c:identifier="purple_savedstatus_get_startup">
        <doc xml:space="preserve">Returns the status to be used when purple is starting up</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the startup PurpleSavedStatus.
        This function never returns NULL.</doc>
          <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
        </return-value>
      </function>
      <function name="is_idleaway"
                c:identifier="purple_savedstatus_is_idleaway">
        <doc xml:space="preserve">Return TRUE if we are currently idle-away.  Otherwise
returns FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if our accounts have been set to idle-away.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="set_idleaway"
                c:identifier="purple_savedstatus_set_idleaway">
        <doc xml:space="preserve">Set whether accounts in Purple are idle-away or not.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="idleaway" transfer-ownership="none">
            <doc xml:space="preserve">TRUE if accounts should be switched to use the
                idle-away saved status.  FALSE if they should
                be switched to use the default status.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="substatus_get_message"
                c:identifier="purple_savedstatus_substatus_get_message">
        <doc xml:space="preserve">Get the message of a given substatus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The message of the substatus, or NULL if this substatus does
        not have a message.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="substatus" transfer-ownership="none">
            <doc xml:space="preserve">The substatus.</doc>
            <type name="SavedStatusSub" c:type="const PurpleSavedStatusSub*"/>
          </parameter>
        </parameters>
      </function>
      <function name="substatus_get_status_type"
                c:identifier="purple_savedstatus_substatus_get_status_type"
                introspectable="0">
        <doc xml:space="preserve">Get the status type of a given substatus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The status type.</doc>
          <type c:type="const PurpleStatusType*"/>
        </return-value>
        <parameters>
          <parameter name="substatus" transfer-ownership="none">
            <doc xml:space="preserve">The substatus.</doc>
            <type name="SavedStatusSub" c:type="const PurpleSavedStatusSub*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="SavedStatusSub" c:type="PurpleSavedStatusSub" disguised="1">
    </record>
    <callback name="SetPublicAliasFailureCallback"
              c:type="PurpleSetPublicAliasFailureCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SetPublicAliasSuccessCallback"
              c:type="PurpleSetPublicAliasSuccessCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="new_alias" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SmileyParseCb"
              c:type="PurpleSmileyParseCb"
              introspectable="0">
      <doc xml:space="preserve">A replace callback for the found @smiley. It should append a HTML tag
representing the @smiley to the @out string. It must not modify the
@out string in other way than appending to its end.

If callback decides not to replace a smiley, it must not modify
@out in any way.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the smiley was inserted.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">the message buffer.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="smiley" transfer-ownership="none">
          <doc xml:space="preserve">found smiley.</doc>
          <type c:type="PurpleSmiley*"/>
        </parameter>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">the conversation of a message (or %NULL, if not passed).</doc>
          <type c:type="PurpleConversation*"/>
        </parameter>
        <parameter name="ui_data" transfer-ownership="none">
          <doc xml:space="preserve">the data being passed to #purple_smiley_parse.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="SmileyTheme"
           c:symbol-prefix="smiley_theme"
           c:type="PurpleSmileyTheme"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleSmileyTheme"
           glib:get-type="purple_smiley_theme_get_type"
           glib:type-struct="SmileyThemeClass">
      <doc xml:space="preserve">An abstract class for smiley theme.</doc>
      <function name="get_current"
                c:identifier="purple_smiley_theme_get_current"
                introspectable="0">
        <doc xml:space="preserve">Returns the currently used smiley theme.</doc>
        <return-value>
          <doc xml:space="preserve">the #PurpleSmileyTheme or %NULL, if none is set.</doc>
          <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
        </return-value>
      </function>
      <virtual-method name="activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smileys"
                      invoker="get_smileys"
                      introspectable="0">
        <doc xml:space="preserve">Retrieves a smiley category based on UI-provided criteria.

You might want to use &lt;link linkend="libpurple-smiley-parser"&gt;smiley
parser&lt;/link&gt; instead. It's mostly for the UI, prpls shouldn't use it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #PurpleSmileyList with standard smileys to use.</doc>
          <type c:type="PurpleSmileyList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">the smiley theme.</doc>
            <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">the UI-passed criteria to choose a smiley set.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_smileys"
              c:identifier="purple_smiley_theme_get_smileys"
              introspectable="0">
        <doc xml:space="preserve">Retrieves a smiley category based on UI-provided criteria.

You might want to use &lt;link linkend="libpurple-smiley-parser"&gt;smiley
parser&lt;/link&gt; instead. It's mostly for the UI, prpls shouldn't use it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #PurpleSmileyList with standard smileys to use.</doc>
          <type c:type="PurpleSmileyList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">the smiley theme.</doc>
            <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">the UI-passed criteria to choose a smiley set.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current"
              c:identifier="purple_smiley_theme_set_current">
        <doc xml:space="preserve">Sets the new smiley theme to be used for displaying messages.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">the smiley theme to be set as currently used. May be %NULL.</doc>
            <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SmileyThemeClass"
            c:type="PurpleSmileyThemeClass"
            glib:is-gtype-struct-for="SmileyTheme">
      <doc xml:space="preserve">Base class for #PurpleSmileyTheme objects.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_smileys" introspectable="0">
        <callback name="get_smileys" introspectable="0">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">a #PurpleSmileyList with standard smileys to use.</doc>
            <type c:type="PurpleSmileyList*"/>
          </return-value>
          <parameters>
            <parameter name="theme" transfer-ownership="none">
              <doc xml:space="preserve">the smiley theme.</doc>
              <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
            </parameter>
            <parameter name="ui_data" transfer-ownership="none">
              <doc xml:space="preserve">the UI-passed criteria to choose a smiley set.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="theme" transfer-ownership="none">
              <type name="SmileyTheme" c:type="PurpleSmileyTheme*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="Socket" c:type="PurpleSocket" disguised="1">
      <doc xml:space="preserve">A structure holding all resources needed for the TCP connection.</doc>
      <method name="connect"
              c:identifier="purple_socket_connect"
              introspectable="0">
        <doc xml:space="preserve">Establishes a connection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE on success (this doesn't mean it's connected yet), FALSE
        otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="cb" transfer-ownership="none" closure="1">
            <doc xml:space="preserve">The function to call after establishing a connection, or on
                 error.</doc>
            <type name="SocketConnectCb" c:type="PurpleSocketConnectCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">The user data to be passed to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="purple_socket_destroy">
        <doc xml:space="preserve">Destroys the socket, closes connection and frees all resources.

If file descriptor for the socket was extracted with purple_socket_get_fd and
added to event loop, it have to be removed prior this.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="purple_socket_get_connection"
              introspectable="0">
        <doc xml:space="preserve">Gets PurpleConnection tied with specified socket.</doc>
        <return-value>
          <doc xml:space="preserve">The PurpleConnection object.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="purple_socket_get_data"
              introspectable="0">
        <doc xml:space="preserve">Returns extra data in a socket.</doc>
        <return-value>
          <doc xml:space="preserve">The data associated with the key.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The unqiue key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fd" c:identifier="purple_socket_get_fd">
        <doc xml:space="preserve">Gets underlying file descriptor for socket.

It's not meant to read/write data (use purple_socket_read/
purple_socket_write), rather for watching for changes with select().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The file descriptor, or -1 on error.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="purple_socket_read">
        <doc xml:space="preserve">Reads incoming data from socket.

This function deals with TLS, if the socket is configured to do it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Amount of data written, or -1 on error (errno will be also be set).</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to write data to.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The buffer size.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="purple_socket_set_data">
        <doc xml:space="preserve">Sets extra data for a socket.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The unique key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The data to assign, or NULL to remove.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="purple_socket_set_host">
        <doc xml:space="preserve">Sets connection host.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve">The connection host.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="purple_socket_set_port">
        <doc xml:space="preserve">Sets connection port.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">The connection port.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tls" c:identifier="purple_socket_set_tls">
        <doc xml:space="preserve">Determines, if socket should handle TLS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="is_tls" transfer-ownership="none">
            <doc xml:space="preserve">TRUE, if TLS should be handled transparently, FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="watch"
              c:identifier="purple_socket_watch"
              introspectable="0">
        <doc xml:space="preserve">Adds an input handler for the socket.

If the specified socket had input handler already registered, it will be
removed. To remove any input handlers, pass an NULL handler function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve">The condition type.</doc>
            <type name="InputCondition" c:type="PurpleInputCondition"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" closure="2">
            <doc xml:space="preserve">The callback function for data, or NULL to remove any
                 existing callbacks.</doc>
            <type name="InputFunction" c:type="PurpleInputFunction"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">The user data to be passed to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="purple_socket_write">
        <doc xml:space="preserve">Sends data through socket.

This function deals with TLS, if the socket is configured to do it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Amount of data sent, or -1 on error (errno will albo be set).</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">The socket.</doc>
            <type name="Socket" c:type="PurpleSocket*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to read data from.</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The amount of data to read and send.</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="purple_socket_new" introspectable="0">
        <doc xml:space="preserve">Creates new, disconnected socket.

Passing a PurpleConnection allows for proper proxy handling.</doc>
        <return-value>
          <doc xml:space="preserve">The new socket struct.</doc>
          <type name="Socket" c:type="PurpleSocket*"/>
        </return-value>
        <parameters>
          <parameter name="gc" transfer-ownership="none">
            <doc xml:space="preserve">The connection for which the socket is needed, or NULL.</doc>
            <type name="Connection" c:type="PurpleConnection*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="SocketConnectCb" c:type="PurpleSocketConnectCb">
      <doc xml:space="preserve">A callback fired after (successfully or not) establishing a connection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ps" transfer-ownership="none">
          <doc xml:space="preserve">The socket.</doc>
          <type name="Socket" c:type="PurpleSocket*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Error message, or NULL if connection was successful.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">The user data passed with callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SoundEventID" c:type="PurpleSoundEventID">
      <doc xml:space="preserve">A type of sound.</doc>
      <member name="sound_buddy_arrive"
              value="0"
              c:identifier="PURPLE_SOUND_BUDDY_ARRIVE">
        <doc xml:space="preserve">Buddy signs on.</doc>
      </member>
      <member name="sound_buddy_leave"
              value="1"
              c:identifier="PURPLE_SOUND_BUDDY_LEAVE">
        <doc xml:space="preserve">Buddy signs off.</doc>
      </member>
      <member name="sound_receive"
              value="2"
              c:identifier="PURPLE_SOUND_RECEIVE">
        <doc xml:space="preserve">Receive an IM.</doc>
      </member>
      <member name="sound_first_receive"
              value="3"
              c:identifier="PURPLE_SOUND_FIRST_RECEIVE">
        <doc xml:space="preserve">Receive an IM that starts a conv.</doc>
      </member>
      <member name="sound_send" value="4" c:identifier="PURPLE_SOUND_SEND">
        <doc xml:space="preserve">Send an IM.</doc>
      </member>
      <member name="sound_chat_join"
              value="5"
              c:identifier="PURPLE_SOUND_CHAT_JOIN">
        <doc xml:space="preserve">Someone joins a chat.</doc>
      </member>
      <member name="sound_chat_leave"
              value="6"
              c:identifier="PURPLE_SOUND_CHAT_LEAVE">
        <doc xml:space="preserve">Someone leaves a chat.</doc>
      </member>
      <member name="sound_chat_you_say"
              value="7"
              c:identifier="PURPLE_SOUND_CHAT_YOU_SAY">
        <doc xml:space="preserve">You say something in a chat.</doc>
      </member>
      <member name="sound_chat_say"
              value="8"
              c:identifier="PURPLE_SOUND_CHAT_SAY">
        <doc xml:space="preserve">Someone else says somthing in a chat.</doc>
      </member>
      <member name="sound_pounce_default"
              value="9"
              c:identifier="PURPLE_SOUND_POUNCE_DEFAULT">
        <doc xml:space="preserve">Default sound for a buddy pounce.</doc>
      </member>
      <member name="sound_chat_nick"
              value="10"
              c:identifier="PURPLE_SOUND_CHAT_NICK">
        <doc xml:space="preserve">Someone says your name in a chat.</doc>
      </member>
      <member name="sound_got_attention"
              value="11"
              c:identifier="PURPLE_SOUND_GOT_ATTENTION">
        <doc xml:space="preserve">Got an attention.</doc>
      </member>
      <member name="num_sounds" value="12" c:identifier="PURPLE_NUM_SOUNDS">
        <doc xml:space="preserve">Total number of sounds.</doc>
      </member>
    </enumeration>
    <class name="SoundTheme"
           c:symbol-prefix="sound_theme"
           c:type="PurpleSoundTheme"
           parent="Theme"
           glib:type-name="PurpleSoundTheme"
           glib:get-type="purple_sound_theme_get_type"
           glib:type-struct="SoundThemeClass">
      <doc xml:space="preserve">A purple sound theme.
This is an object for Purple to represent a sound theme.</doc>
      <method name="get_file" c:identifier="purple_sound_theme_get_file">
        <doc xml:space="preserve">Returns a copy of the filename for the sound event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The filename of the sound event.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The theme.</doc>
            <type name="SoundTheme" c:type="PurpleSoundTheme*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The purple sound event to look up.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file_full"
              c:identifier="purple_sound_theme_get_file_full">
        <doc xml:space="preserve">Returns a copy of the directory and filename for the sound event</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The directory + '/' + filename of the sound event.  This is
         a newly allocated string that should be freed with g_free.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The theme.</doc>
            <type name="SoundTheme" c:type="PurpleSoundTheme*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The purple sound event to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file" c:identifier="purple_sound_theme_set_file">
        <doc xml:space="preserve">Sets the filename for a given sound event</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The theme.</doc>
            <type name="SoundTheme" c:type="PurpleSoundTheme*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">the purple sound event to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">the name of the file to be used for the event</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="Theme" c:type="PurpleTheme"/>
      </field>
    </class>
    <record name="SoundThemeClass"
            c:type="PurpleSoundThemeClass"
            glib:is-gtype-struct-for="SoundTheme">
      <field name="parent_class" readable="0" private="1">
        <type name="ThemeClass" c:type="PurpleThemeClass"/>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="SoundThemeLoader"
           c:symbol-prefix="sound_theme_loader"
           c:type="PurpleSoundThemeLoader"
           parent="ThemeLoader"
           glib:type-name="PurpleSoundThemeLoader"
           glib:get-type="purple_sound_theme_loader_get_type"
           glib:type-struct="SoundThemeLoaderClass">
      <doc xml:space="preserve">A purple sound theme loader. extends PurpleThemeLoader (theme-loader.h)
This is a class designed to build sound themes</doc>
      <field name="parent">
        <type name="ThemeLoader" c:type="PurpleThemeLoader"/>
      </field>
    </class>
    <record name="SoundThemeLoaderClass"
            c:type="PurpleSoundThemeLoaderClass"
            glib:is-gtype-struct-for="SoundThemeLoader">
      <field name="parent_class">
        <type name="ThemeLoaderClass" c:type="PurpleThemeLoaderClass"/>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SoundUiOps"
            c:type="PurpleSoundUiOps"
            glib:type-name="PurpleSoundUiOps"
            glib:get-type="purple_sound_ui_ops_get_type"
            c:symbol-prefix="sound_ui_ops">
      <doc xml:space="preserve">Operations used by the core to request that particular sound files, or the
sound associated with a particular event, should be played.</doc>
      <field name="init">
        <callback name="init">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="uninit">
        <callback name="uninit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="play_file">
        <callback name="play_file">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="filename" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="play_event">
        <callback name="play_event">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="event" transfer-ownership="none">
              <type name="SoundEventID" c:type="PurpleSoundEventID"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="SrvCallback" c:type="PurpleSrvCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="resp" transfer-ownership="none">
          <doc xml:space="preserve">An array of PurpleSrvResponse of size results.  The array
       is sorted based on the order described in the DNS SRV RFC.
       Users of this API should try each record in resp in order,
       starting at the beginning.</doc>
          <type name="SrvResponse" c:type="PurpleSrvResponse*"/>
        </parameter>
        <parameter name="results" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SrvResponse" c:type="PurpleSrvResponse">
      <field name="hostname" writable="1">
        <array zero-terminated="0" c:type="char" fixed-size="256">
          <type name="gchar" c:type="char"/>
        </array>
      </field>
      <field name="port" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="weight" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="pref" writable="1">
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="SrvTxtQueryData"
            c:type="PurpleSrvTxtQueryData"
            disguised="1">
    </record>
    <callback name="SrvTxtQueryFailedCallback"
              c:type="PurpleSrvTxtQueryFailedCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
        </parameter>
        <parameter name="error_message" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SrvTxtQueryResolvedCallback"
              c:type="PurpleSrvTxtQueryResolvedCallback"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
        </parameter>
        <parameter name="records" transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </callback>
    <record name="SrvTxtQueryUiOps"
            c:type="PurpleSrvTxtQueryUiOps"
            glib:type-name="PurpleSrvTxtQueryUiOps"
            glib:get-type="purple_srv_txt_query_ui_ops_get_type"
            c:symbol-prefix="srv_txt_query_ui_ops">
      <doc xml:space="preserve">SRV Request UI operations;  UIs should implement this if they want to do SRV
lookups themselves, rather than relying on the core.

See &lt;link linkend="chapter-ui-ops"&gt;List of &lt;literal&gt;UiOps&lt;/literal&gt; Structures&lt;/link&gt;</doc>
      <field name="resolve" introspectable="0">
        <callback name="resolve" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="query_data" transfer-ownership="none">
              <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
            </parameter>
            <parameter name="resolved_cb" transfer-ownership="none">
              <type name="SrvTxtQueryResolvedCallback"
                    c:type="PurpleSrvTxtQueryResolvedCallback"/>
            </parameter>
            <parameter name="failed_cb" transfer-ownership="none">
              <type name="SrvTxtQueryFailedCallback"
                    c:type="PurpleSrvTxtQueryFailedCallback"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="query_data" transfer-ownership="none">
              <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SslConnection" c:type="PurpleSslConnection">
      <field name="host" writable="1">
        <doc xml:space="preserve">Hostname to which the SSL connection will be made</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="port" writable="1">
        <doc xml:space="preserve">Port to connect to</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="connect_cb_data" writable="1">
        <doc xml:space="preserve">Data to pass to @connect_cb</doc>
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="connect_cb" writable="1">
        <doc xml:space="preserve">Callback triggered once the SSL handshake is complete</doc>
        <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
      </field>
      <field name="error_cb" writable="1">
        <doc xml:space="preserve">Callback triggered if there is an error during connection</doc>
        <type name="SslErrorFunction" c:type="PurpleSslErrorFunction"/>
      </field>
      <field name="recv_cb_data" writable="1">
        <doc xml:space="preserve">Data passed to @recv_cb</doc>
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="recv_cb" writable="1">
        <doc xml:space="preserve">User-defined callback executed when the SSL connection
                  receives data</doc>
        <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
      </field>
      <field name="fd" writable="1">
        <doc xml:space="preserve">File descriptor used to refer to the socket</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="inpa" writable="1">
        <doc xml:space="preserve">Glib event source ID; used to refer to the received data
                  callback in the glib eventloop</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="connect_data" writable="1">
        <doc xml:space="preserve">Data related to the underlying TCP connection</doc>
        <type name="ProxyConnectData" c:type="PurpleProxyConnectData*"/>
      </field>
      <field name="private_data" writable="1">
        <doc xml:space="preserve">Internal connection data managed by the SSL backend
                  (GnuTLS/LibNSS/whatever)</doc>
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="verifier" introspectable="0" writable="1">
        <doc xml:space="preserve">Verifier to use in authenticating the peer</doc>
        <type c:type="PurpleCertificateVerifier*"/>
      </field>
    </record>
    <callback name="SslErrorFunction" c:type="PurpleSslErrorFunction">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="SslErrorType" c:type="PurpleSslErrorType"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SslErrorType" c:type="PurpleSslErrorType">
      <doc xml:space="preserve">Possible SSL errors.</doc>
      <member name="handshake_failed"
              value="1"
              c:identifier="PURPLE_SSL_HANDSHAKE_FAILED">
      </member>
      <member name="connect_failed"
              value="2"
              c:identifier="PURPLE_SSL_CONNECT_FAILED">
      </member>
      <member name="certificate_invalid"
              value="3"
              c:identifier="PURPLE_SSL_CERTIFICATE_INVALID">
      </member>
    </enumeration>
    <callback name="SslInputFunction" c:type="PurpleSslInputFunction">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="InputCondition" c:type="PurpleInputCondition"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SslOps" c:type="PurpleSslOps">
      <doc xml:space="preserve">SSL implementation operations structure.

Every SSL implementation must provide all of these and register it via
purple_ssl_set_ops().
These should not be called directly! Instead, use the purple_ssl_* functions.</doc>
      <field name="init">
        <callback name="init">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
        </callback>
      </field>
      <field name="uninit">
        <callback name="uninit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="connectfunc">
        <callback name="connectfunc">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gsc" transfer-ownership="none">
              <type name="SslConnection" c:type="PurpleSslConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gsc" transfer-ownership="none">
              <type name="SslConnection" c:type="PurpleSslConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="read">
        <callback name="read">
          <return-value transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="gsc" transfer-ownership="none">
              <type name="SslConnection" c:type="PurpleSslConnection*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="void*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write">
        <callback name="write">
          <return-value transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </return-value>
          <parameters>
            <parameter name="gsc" transfer-ownership="none">
              <type name="SslConnection" c:type="PurpleSslConnection*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="void*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_peer_certificates" introspectable="0">
        <callback name="get_peer_certificates" introspectable="0">
          <return-value>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="gsc" transfer-ownership="none">
              <type name="SslConnection" c:type="PurpleSslConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="StatusPrimitive"
                 glib:type-name="PurpleStatusPrimitive"
                 glib:get-type="purple_status_primitive_get_type"
                 c:type="PurpleStatusPrimitive">
      <member name="unset"
              value="0"
              c:identifier="PURPLE_STATUS_UNSET"
              glib:nick="unset">
      </member>
      <member name="offline"
              value="1"
              c:identifier="PURPLE_STATUS_OFFLINE"
              glib:nick="offline">
      </member>
      <member name="available"
              value="2"
              c:identifier="PURPLE_STATUS_AVAILABLE"
              glib:nick="available">
      </member>
      <member name="unavailable"
              value="3"
              c:identifier="PURPLE_STATUS_UNAVAILABLE"
              glib:nick="unavailable">
      </member>
      <member name="invisible"
              value="4"
              c:identifier="PURPLE_STATUS_INVISIBLE"
              glib:nick="invisible">
      </member>
      <member name="away"
              value="5"
              c:identifier="PURPLE_STATUS_AWAY"
              glib:nick="away">
      </member>
      <member name="extended_away"
              value="6"
              c:identifier="PURPLE_STATUS_EXTENDED_AWAY"
              glib:nick="extended-away">
      </member>
      <member name="mobile"
              value="7"
              c:identifier="PURPLE_STATUS_MOBILE"
              glib:nick="mobile">
      </member>
      <member name="tune"
              value="8"
              c:identifier="PURPLE_STATUS_TUNE"
              glib:nick="tune">
      </member>
      <member name="mood"
              value="9"
              c:identifier="PURPLE_STATUS_MOOD"
              glib:nick="mood">
      </member>
      <member name="num_primitives"
              value="10"
              c:identifier="PURPLE_STATUS_NUM_PRIMITIVES"
              glib:nick="num-primitives">
      </member>
    </enumeration>
    <bitfield name="StringFormatType" c:type="PurpleStringFormatType">
      <doc xml:space="preserve">String format for preferences.</doc>
      <member name="none"
              value="0"
              c:identifier="PURPLE_STRING_FORMAT_TYPE_NONE">
        <doc xml:space="preserve">The string is plain text.</doc>
      </member>
      <member name="multiline"
              value="1"
              c:identifier="PURPLE_STRING_FORMAT_TYPE_MULTILINE">
        <doc xml:space="preserve">The string can have newlines.</doc>
      </member>
      <member name="html"
              value="2"
              c:identifier="PURPLE_STRING_FORMAT_TYPE_HTML">
        <doc xml:space="preserve">The string can be in HTML.</doc>
      </member>
    </bitfield>
    <record name="Stringref" c:type="PurpleStringref" disguised="1">
      <method name="cmp" c:identifier="purple_stringref_cmp">
        <doc xml:space="preserve">Compare two stringrefs for string equality.  This returns the same
value as strcmp would, where &lt;0 indicates that s1 is "less than" s2
in the ASCII lexicography, 0 indicates equality, etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An ordering indication on s1 and s2.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="s1" transfer-ownership="none">
            <doc xml:space="preserve">The reference string.</doc>
            <type name="Stringref" c:type="const PurpleStringref*"/>
          </instance-parameter>
          <parameter name="s2" transfer-ownership="none">
            <doc xml:space="preserve">The string to compare against the reference.</doc>
            <type name="Stringref" c:type="const PurpleStringref*"/>
          </parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="purple_stringref_len">
        <doc xml:space="preserve">Find the length of the string inside a stringref.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The length of the string in stringref</doc>
          <type name="gulong" c:type="size_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="stringref" transfer-ownership="none">
            <doc xml:space="preserve">The string in whose length we are interested.</doc>
            <type name="Stringref" c:type="const PurpleStringref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="purple_stringref_ref"
              introspectable="0">
        <doc xml:space="preserve">Increase the reference count of the given stringref.</doc>
        <return-value>
          <doc xml:space="preserve">A pointer to the referenced string.</doc>
          <type name="Stringref" c:type="PurpleStringref*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stringref" transfer-ownership="none">
            <doc xml:space="preserve">String to be referenced.</doc>
            <type name="Stringref" c:type="PurpleStringref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="purple_stringref_unref">
        <doc xml:space="preserve">Decrease the reference count of the given stringref.  If this
reference count reaches zero, the stringref will be freed; thus
you MUST NOT use this string after dereferencing it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stringref" transfer-ownership="none">
            <doc xml:space="preserve">String to be dereferenced.</doc>
            <type name="Stringref" c:type="PurpleStringref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="value" c:identifier="purple_stringref_value">
        <doc xml:space="preserve">Retrieve the value of a stringref.

Note: This value should not be cached or stored in a local variable.
      While there is nothing inherently incorrect about doing so, it
      is easy to forget that the cached value is in fact a
      reference-counted object and accidentally use it after
      dereferencing.  This is more problematic for a reference-
      counted object than a heap-allocated object, as it may seem to
      be valid or invalid nondeterministically based on how many
      other references to it exist.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The contents of the string reference.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stringref" transfer-ownership="none">
            <doc xml:space="preserve">String reference from which to retrieve the value.</doc>
            <type name="Stringref" c:type="const PurpleStringref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="purple_stringref_new"
                introspectable="0">
        <doc xml:space="preserve">Creates an immutable reference-counted string object.  The newly
created object will have a reference count of 1.</doc>
        <return-value>
          <doc xml:space="preserve">A newly allocated string reference object with a refcount
        of 1.</doc>
          <type name="Stringref" c:type="PurpleStringref*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">This will be the value of the string; it will be
             duplicated.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_noref"
                c:identifier="purple_stringref_new_noref"
                introspectable="0">
        <doc xml:space="preserve">Creates an immutable reference-counted string object.  The newly
created object will have a reference count of zero, and if it is
not referenced before the next iteration of the mainloop it will
be freed at that time.</doc>
        <return-value>
          <doc xml:space="preserve">A newly allocated string reference object with a refcount
        of zero.</doc>
          <type name="Stringref" c:type="PurpleStringref*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">This will be the value of the string; it will be
             duplicated.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="printf"
                c:identifier="purple_stringref_printf"
                introspectable="0">
        <doc xml:space="preserve">Creates an immutable reference-counted string object from a printf
format specification and arguments.  The created object will have a
reference count of 1.</doc>
        <return-value>
          <doc xml:space="preserve">A newly allocated string reference object with a refcount
        of 1.</doc>
          <type name="Stringref" c:type="PurpleStringref*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">A printf-style format specification.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="StunCallback" c:type="PurpleStunCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="StunNatDiscovery" c:type="PurpleStunNatDiscovery*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="StunNatDiscovery" c:type="PurpleStunNatDiscovery">
      <field name="status" writable="1">
        <type name="StunStatus" c:type="PurpleStunStatus"/>
      </field>
      <field name="type" writable="1">
        <type name="StunNatType" c:type="PurpleStunNatType"/>
      </field>
      <field name="publicip" writable="1">
        <array zero-terminated="0" c:type="char" fixed-size="16">
          <type name="gchar" c:type="char"/>
        </array>
      </field>
      <field name="servername" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="lookup_time" writable="1">
        <type name="glong" c:type="time_t"/>
      </field>
    </record>
    <enumeration name="StunNatType" c:type="PurpleStunNatType">
      <member name="public_ip"
              value="0"
              c:identifier="PURPLE_STUN_NAT_TYPE_PUBLIC_IP">
      </member>
      <member name="unknown_nat"
              value="1"
              c:identifier="PURPLE_STUN_NAT_TYPE_UNKNOWN_NAT">
      </member>
      <member name="full_cone"
              value="2"
              c:identifier="PURPLE_STUN_NAT_TYPE_FULL_CONE">
      </member>
      <member name="restricted_cone"
              value="3"
              c:identifier="PURPLE_STUN_NAT_TYPE_RESTRICTED_CONE">
      </member>
      <member name="port_restricted_cone"
              value="4"
              c:identifier="PURPLE_STUN_NAT_TYPE_PORT_RESTRICTED_CONE">
      </member>
      <member name="symmetric"
              value="5"
              c:identifier="PURPLE_STUN_NAT_TYPE_SYMMETRIC">
      </member>
    </enumeration>
    <enumeration name="StunStatus" c:type="PurpleStunStatus">
      <member name="undiscovered"
              value="-1"
              c:identifier="PURPLE_STUN_STATUS_UNDISCOVERED">
      </member>
      <member name="unknown"
              value="0"
              c:identifier="PURPLE_STUN_STATUS_UNKNOWN">
        <doc xml:space="preserve">no STUN server reachable</doc>
      </member>
      <member name="discovering"
              value="1"
              c:identifier="PURPLE_STUN_STATUS_DISCOVERING">
      </member>
      <member name="discovered"
              value="2"
              c:identifier="PURPLE_STUN_STATUS_DISCOVERED">
      </member>
    </enumeration>
    <constant name="TUNE_ALBUM" value="tune_album" c:type="PURPLE_TUNE_ALBUM">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_ARTIST"
              value="tune_artist"
              c:type="PURPLE_TUNE_ARTIST">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_COMMENT"
              value="tune_comment"
              c:type="PURPLE_TUNE_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_FULL" value="tune_full" c:type="PURPLE_TUNE_FULL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_GENRE" value="tune_genre" c:type="PURPLE_TUNE_GENRE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_TIME" value="tune_time" c:type="PURPLE_TUNE_TIME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_TITLE" value="tune_title" c:type="PURPLE_TUNE_TITLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_TRACK" value="tune_track" c:type="PURPLE_TUNE_TRACK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_URL" value="tune_url" c:type="PURPLE_TUNE_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TUNE_YEAR" value="tune_year" c:type="PURPLE_TUNE_YEAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Theme"
           c:symbol-prefix="theme"
           c:type="PurpleTheme"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleTheme"
           glib:get-type="purple_theme_get_type"
           glib:type-struct="ThemeClass">
      <doc xml:space="preserve">A purple theme.
This is an abstract class for Purple to use with the Purple theme manager.</doc>
      <method name="get_author" c:identifier="purple_theme_get_author">
        <doc xml:space="preserve">Returns the author of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The author of the theme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="purple_theme_get_description">
        <doc xml:space="preserve">Returns the description of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A short description of the theme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dir" c:identifier="purple_theme_get_dir">
        <doc xml:space="preserve">Returns the directory of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representing the theme directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image" c:identifier="purple_theme_get_image">
        <doc xml:space="preserve">Returns the image preview of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The image preview of the PurpleTheme object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_full" c:identifier="purple_theme_get_image_full">
        <doc xml:space="preserve">Returns the image preview and directory of the PurpleTheme object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The image preview of the PurpleTheme object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="purple_theme_get_name">
        <doc xml:space="preserve">Returns the name of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representing the name of the theme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_string"
              c:identifier="purple_theme_get_type_string">
        <doc xml:space="preserve">Returns the type (string) of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representing the type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="manager_add_theme"
              c:identifier="purple_theme_manager_add_theme">
        <doc xml:space="preserve">Adds a PurpleTheme to the theme manager.  If the theme already exists
then this function does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleTheme to add to the manager.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="manager_remove_theme"
              c:identifier="purple_theme_manager_remove_theme">
        <doc xml:space="preserve">Removes a PurpleTheme from the theme manager and frees the theme.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleTheme to remove from the manager.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_author" c:identifier="purple_theme_set_author">
        <doc xml:space="preserve">Sets the author of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
          <parameter name="author" transfer-ownership="none">
            <doc xml:space="preserve">The author of the PurpleTheme object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="purple_theme_set_description">
        <doc xml:space="preserve">Sets the description of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">The description of the PurpleTheme object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dir" c:identifier="purple_theme_set_dir">
        <doc xml:space="preserve">Sets the directory of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">The directory of the PurpleTheme object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image" c:identifier="purple_theme_set_image">
        <doc xml:space="preserve">Sets the directory of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
          <parameter name="img" transfer-ownership="none">
            <doc xml:space="preserve">The image preview of the PurpleTheme object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="purple_theme_set_name">
        <doc xml:space="preserve">Sets the name of the PurpleTheme object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="theme" transfer-ownership="none">
            <doc xml:space="preserve">The purple theme.</doc>
            <type name="Theme" c:type="PurpleTheme*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the PurpleTheme object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="author"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="directory"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="image" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ThemeClass"
            c:type="PurpleThemeClass"
            glib:is-gtype-struct-for="Theme">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="ThemeFunc" c:type="PurpleThemeFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="Theme" c:type="PurpleTheme*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ThemeLoader"
           c:symbol-prefix="theme_loader"
           c:type="PurpleThemeLoader"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PurpleThemeLoader"
           glib:get-type="purple_theme_loader_get_type"
           glib:type-struct="ThemeLoaderClass">
      <doc xml:space="preserve">A purple theme loader.
This is an abstract class for Purple to use with the Purple theme manager.
The loader is responsible for building each type of theme</doc>
      <method name="build"
              c:identifier="purple_theme_loader_build"
              introspectable="0">
        <doc xml:space="preserve">Creates a new PurpleTheme</doc>
        <return-value>
          <doc xml:space="preserve">A PurpleTheme containing the information from the directory</doc>
          <type name="Theme" c:type="PurpleTheme*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">The theme loader</doc>
            <type name="ThemeLoader" c:type="PurpleThemeLoader*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">The directory containing the theme</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_type_string"
              c:identifier="purple_theme_loader_get_type_string">
        <doc xml:space="preserve">Returns the string representing the type of the theme loader</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representing this type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">The theme loader</doc>
            <type name="ThemeLoader" c:type="PurpleThemeLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="probe" c:identifier="purple_theme_loader_probe">
        <doc xml:space="preserve">Probes a directory to see if it might possibly contain a theme

This function might only check for obvious files or directory structure.
Loading of a theme may fail for other reasons.
The default prober checks for $dir/purple/$type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the directory appears to contain a theme, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">The theme loader</doc>
            <type name="ThemeLoader" c:type="PurpleThemeLoader*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">The directory that may contain the theme</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ThemeLoaderClass"
            c:type="PurpleThemeLoaderClass"
            glib:is-gtype-struct-for="ThemeLoader">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="purple_theme_loader_build" introspectable="0">
        <callback name="purple_theme_loader_build" introspectable="0">
          <return-value>
            <type name="Theme" c:type="PurpleTheme*"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="probe_directory">
        <callback name="probe_directory">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ThemeManager"
           c:symbol-prefix="theme_manager"
           c:type="PurpleThemeManager"
           parent="GObject.Object"
           glib:type-name="PurpleThemeManager"
           glib:get-type="purple_theme_manager_get_type"
           glib:type-struct="ThemeManagerClass">
      <function name="find_theme"
                c:identifier="purple_theme_manager_find_theme"
                introspectable="0">
        <doc xml:space="preserve">Finds the PurpleTheme object stored by the theme manager.</doc>
        <return-value>
          <doc xml:space="preserve">The PurpleTheme, or NULL if it wasn't found.</doc>
          <type name="Theme" c:type="PurpleTheme*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the PurpleTheme.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of the PurpleTheme.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_each_theme"
                c:identifier="purple_theme_manager_for_each_theme"
                introspectable="0">
        <doc xml:space="preserve">Calls the given function on each purple theme.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleThemeFunc to be applied to each theme.</doc>
            <type name="ThemeFunc" c:type="PurpleThemeFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="init" c:identifier="purple_theme_manager_init">
        <doc xml:space="preserve">Initalizes the theme manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="load_theme"
                c:identifier="purple_theme_manager_load_theme"
                introspectable="0">
        <doc xml:space="preserve">Loads a theme of the given type without adding it to the manager</doc>
        <return-value>
          <type name="Theme" c:type="PurpleTheme*"/>
        </return-value>
        <parameters>
          <parameter name="theme_dir" transfer-ownership="none">
            <doc xml:space="preserve">the directory of the theme to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the type of theme to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="refresh" c:identifier="purple_theme_manager_refresh">
        <doc xml:space="preserve">Rebuilds all the themes in the theme manager.
(Removes all current themes but keeps the added loaders.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="register_type"
                c:identifier="purple_theme_manager_register_type">
        <doc xml:space="preserve">Adds a loader to the theme manager so it knows how to build themes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleThemeLoader to add.</doc>
            <type name="ThemeLoader" c:type="PurpleThemeLoader*"/>
          </parameter>
        </parameters>
      </function>
      <function name="uninit" c:identifier="purple_theme_manager_uninit">
        <doc xml:space="preserve">Uninitalizes the manager then frees all the themes and loaders it is
responsible for.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="unregister_type"
                c:identifier="purple_theme_manager_unregister_type">
        <doc xml:space="preserve">Removes the loader and all themes of the same type from the loader.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleThemeLoader to be removed.</doc>
            <type name="ThemeLoader" c:type="PurpleThemeLoader*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ThemeManagerClass"
            c:type="PurpleThemeManagerClass"
            glib:is-gtype-struct-for="ThemeManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="purple_reserved1">
        <callback name="purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved2">
        <callback name="purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved3">
        <callback name="purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="purple_reserved4">
        <callback name="purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="TxtCallback" c:type="PurpleTxtCallback" introspectable="0">
      <doc xml:space="preserve">Callback that returns the data retrieved from a DNS TXT lookup.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="responses" transfer-ownership="none">
          <doc xml:space="preserve">A GList of PurpleTxtResponse objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">The extra data passed to purple_txt_resolve.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TxtResponse" c:type="PurpleTxtResponse">
      <field name="content" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <method name="destroy" c:identifier="purple_txt_response_destroy">
        <doc xml:space="preserve">Destroy a TXT DNS response object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The PurpleTxtResponse to destroy.</doc>
            <type name="TxtResponse" c:type="PurpleTxtResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content"
              c:identifier="purple_txt_response_get_content">
        <doc xml:space="preserve">Get the value of the current TXT record.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the current TXT record.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">The TXT response record</doc>
            <type name="TxtResponse" c:type="PurpleTxtResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="UPnPCallback" c:type="PurpleUPnPCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="success" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="UPnPMappingAddRemove"
            c:type="PurpleUPnPMappingAddRemove"
            disguised="1">
    </record>
    <class name="Whiteboard"
           c:symbol-prefix="whiteboard"
           c:type="PurpleWhiteboard"
           parent="GObject.Object"
           glib:type-name="PurpleWhiteboard"
           glib:get-type="purple_whiteboard_get_type"
           glib:type-struct="WhiteboardClass">
      <doc xml:space="preserve">A Whiteboard</doc>
      <constructor name="new" c:identifier="purple_whiteboard_new">
        <doc xml:space="preserve">Creates a new whiteboard</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The new whiteboard</doc>
          <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">Who you're drawing with.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">The state.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="draw_list_destroy"
                c:identifier="purple_whiteboard_draw_list_destroy"
                introspectable="0">
        <doc xml:space="preserve">Destorys a drawing list for a whiteboard</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="draw_list" transfer-ownership="none">
            <doc xml:space="preserve">The drawing list.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="get_session"
                c:identifier="purple_whiteboard_get_session"
                introspectable="0">
        <doc xml:space="preserve">Finds a whiteboard from an account and user.</doc>
        <return-value>
          <doc xml:space="preserve">The whiteboard if found, otherwise %NULL.</doc>
          <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account.</doc>
            <type name="Account" c:type="const PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_ui_ops" c:identifier="purple_whiteboard_set_ui_ops">
        <doc xml:space="preserve">Sets the UI operations</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ops" transfer-ownership="none">
            <doc xml:space="preserve">The UI operations to set</doc>
            <type name="WhiteboardUiOps" c:type="PurpleWhiteboardUiOps*"/>
          </parameter>
        </parameters>
      </function>
      <method name="clear" c:identifier="purple_whiteboard_clear">
        <doc xml:space="preserve">Clears a whiteboard</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="draw_line" c:identifier="purple_whiteboard_draw_line">
        <doc xml:space="preserve">Draws a line on a whiteboard</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">The top-left x coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve">The top-left y coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve">The bottom-right x coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve">The bottom-right y coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color to use.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The brush size.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_point" c:identifier="purple_whiteboard_draw_point">
        <doc xml:space="preserve">Draws a point on a whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">The x coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">The y coordinate.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color to use.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The brush size.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="purple_whiteboard_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns the whiteboard's account.</doc>
        <return-value>
          <doc xml:space="preserve">The whiteboard's account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_brush" c:identifier="purple_whiteboard_get_brush">
        <doc xml:space="preserve">Gets the size and color of the brush.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the size and color were set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the brush</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color of the brush</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dimensions"
              c:identifier="purple_whiteboard_get_dimensions">
        <doc xml:space="preserve">Gets the dimension of a whiteboard.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the values of width and height were set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">The width to be set.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">The height to be set.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_draw_list"
              c:identifier="purple_whiteboard_get_draw_list"
              introspectable="0">
        <doc xml:space="preserve">Return the drawing list.</doc>
        <return-value>
          <doc xml:space="preserve">The drawing list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_whiteboard_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Gets the protocol data for a whiteboard.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data for the whiteboard.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="purple_whiteboard_get_state">
        <doc xml:space="preserve">Return the state of the whiteboard.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The state of the whiteboard.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_whiteboard_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Get the UI data associated with this whiteboard.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data associated with this whiteboard.  This is a
        convenience field provided to the UIs--it is not
        used by the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard..</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_who" c:identifier="purple_whiteboard_get_who">
        <doc xml:space="preserve">Return who you're drawing with.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Who you're drawing with.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_brush" c:identifier="purple_whiteboard_send_brush">
        <doc xml:space="preserve">Sends a request to change the size and color of the brush.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the brush</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color of the brush</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_clear" c:identifier="purple_whiteboard_send_clear">
        <doc xml:space="preserve">Sends a request to the buddy to clear the whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_draw_list"
              c:identifier="purple_whiteboard_send_draw_list"
              introspectable="0">
        <doc xml:space="preserve">Send a list of points to draw to the buddy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">A GList of points</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_brush" c:identifier="purple_whiteboard_set_brush">
        <doc xml:space="preserve">Sets the size and color of the brush.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the brush</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">The color of the brush</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dimensions"
              c:identifier="purple_whiteboard_set_dimensions">
        <doc xml:space="preserve">Sets the dimensions for a whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">The width.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">The height.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_draw_list"
              c:identifier="purple_whiteboard_set_draw_list"
              introspectable="0">
        <doc xml:space="preserve">Set the drawing list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="draw_list" transfer-ownership="none">
            <doc xml:space="preserve">The drawing list.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_whiteboard_set_protocol_data">
        <doc xml:space="preserve">Sets the protocol data for a whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="proto_data" transfer-ownership="none">
            <doc xml:space="preserve">The protocol data to set for the whiteboard.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_ops"
              c:identifier="purple_whiteboard_set_protocol_ops">
        <doc xml:space="preserve">Sets the protocol operations for a whiteboard</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard for which to set the protocol operations</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="ops" transfer-ownership="none">
            <doc xml:space="preserve">The protocol operations to set</doc>
            <type name="WhiteboardOps" c:type="PurpleWhiteboardOps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="purple_whiteboard_set_state">
        <doc xml:space="preserve">Set the state of the whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">The state</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_whiteboard_set_ui_data">
        <doc xml:space="preserve">Set the UI data associated with this whiteboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this whiteboard.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="purple_whiteboard_start">
        <doc xml:space="preserve">Starts a whiteboard</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wb" transfer-ownership="none">
            <doc xml:space="preserve">The whiteboard.</doc>
            <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="draw-list" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="state"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="who"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this whiteboard. This is a convenience
          field provided to the UIs -- it is not used by the libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="WhiteboardClass"
            c:type="PurpleWhiteboardClass"
            glib:is-gtype-struct-for="Whiteboard">
      <doc xml:space="preserve">Base class for all #PurpleWhiteboard's</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WhiteboardOps" c:type="PurpleWhiteboardOps">
      <doc xml:space="preserve">Whiteboard protocol operations</doc>
      <field name="start">
        <callback name="start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end">
        <callback name="end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_dimensions">
        <callback name="get_dimensions">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_dimensions">
        <callback name="set_dimensions">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_brush">
        <callback name="get_brush">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="const PurpleWhiteboard*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_brush">
        <callback name="set_brush">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_draw_list" introspectable="0">
        <callback name="send_draw_list" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="draw_list" transfer-ownership="none">
              <type name="GLib.List" c:type="GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear">
        <callback name="clear">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WhiteboardUiOps"
            c:type="PurpleWhiteboardUiOps"
            glib:type-name="PurpleWhiteboardUiOps"
            glib:get-type="purple_whiteboard_ui_ops_get_type"
            c:symbol-prefix="whiteboard_ui_ops">
      <doc xml:space="preserve">The PurpleWhiteboard UI Operations</doc>
      <field name="create">
        <callback name="create">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_dimensions">
        <callback name="set_dimensions">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_brush">
        <callback name="set_brush">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_point">
        <callback name="draw_point">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_line">
        <callback name="draw_line">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
            <parameter name="x1" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y1" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="x2" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y2" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear">
        <callback name="clear">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wb" transfer-ownership="none">
              <type name="Whiteboard" c:type="PurpleWhiteboard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Xfer"
           c:symbol-prefix="xfer"
           c:type="PurpleXfer"
           parent="GObject.Object"
           glib:type-name="PurpleXfer"
           glib:get-type="purple_xfer_get_type"
           glib:type-struct="XferClass">
      <doc xml:space="preserve">A core representation of a file transfer.</doc>
      <constructor name="new" c:identifier="purple_xfer_new">
        <doc xml:space="preserve">Creates a new file transfer handle.
This is called by protocols.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A file transfer handle.</doc>
          <type name="Xfer" c:type="PurpleXfer*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account sending or receiving the file.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of file transfer.</doc>
            <type name="XferType" c:type="PurpleXferType"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error" c:identifier="purple_xfer_error">
        <doc xml:space="preserve">Displays a file transfer-related error message.

This is a wrapper around purple_notify_error(), which automatically
specifies a title ("File transfer to &lt;literal&gt;user&lt;/literal&gt; failed" or
"File Transfer from &lt;literal&gt;user&lt;/literal&gt; failed").</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of file transfer.</doc>
            <type name="XferType" c:type="PurpleXferType"/>
          </parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve">The account sending or receiving the file.</doc>
            <type name="Account" c:type="PurpleAccount*"/>
          </parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The user on the other end of the transfer.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve">The message to display.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="purple_xfer_add">
        <doc xml:space="preserve">Adds a new file transfer to the list of file transfers. Call this only
if you are not using purple_xfer_start.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cancel_local" c:identifier="purple_xfer_cancel_local">
        <doc xml:space="preserve">Cancels a file transfer on the local end.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cancel_remote" c:identifier="purple_xfer_cancel_remote">
        <doc xml:space="preserve">Cancels a file transfer from the remote end.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="conversation_write"
              c:identifier="purple_xfer_conversation_write">
        <doc xml:space="preserve">Displays a file transfer-related message in the conversation window

This is a wrapper around purple_conversation_write_system_message</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to which this message relates.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The message to display.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="is_error" transfer-ownership="none">
            <doc xml:space="preserve">Is this an error message?.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="end" c:identifier="purple_xfer_end">
        <doc xml:space="preserve">Ends a file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="purple_xfer_get_account"
              introspectable="0">
        <doc xml:space="preserve">Returns the account the file transfer is using.</doc>
        <return-value>
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bytes_remaining"
              c:identifier="purple_xfer_get_bytes_remaining">
        <doc xml:space="preserve">Returns the number of bytes remaining to send or receive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of bytes remaining.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bytes_sent" c:identifier="purple_xfer_get_bytes_sent">
        <doc xml:space="preserve">Returns the number of bytes sent (or received) so far.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of bytes sent.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end_time" c:identifier="purple_xfer_get_end_time">
        <doc xml:space="preserve">Returns the time the transfer of a file ended.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The time when the transfer ended.</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fd" c:identifier="purple_xfer_get_fd">
        <doc xml:space="preserve">Returns the socket file descriptor.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The socket file descriptor.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename" c:identifier="purple_xfer_get_filename">
        <doc xml:space="preserve">Returns the name of the file being sent or received.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The filename.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_filename"
              c:identifier="purple_xfer_get_local_filename">
        <doc xml:space="preserve">Returns the file's destination filename,</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The destination filename.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_port" c:identifier="purple_xfer_get_local_port">
        <doc xml:space="preserve">Returns the local port number in the file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The port number on this end.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message" c:identifier="purple_xfer_get_message">
        <doc xml:space="preserve">Returns the message for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The message.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress" c:identifier="purple_xfer_get_progress">
        <doc xml:space="preserve">Returns the current percentage of progress of the transfer.

This is a number between 0 (0%) and 1 (100%).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The percentage complete.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_data"
              c:identifier="purple_xfer_get_protocol_data"
              introspectable="0">
        <doc xml:space="preserve">Gets the protocol data for a file transfer.</doc>
        <return-value>
          <doc xml:space="preserve">The protocol data for the file transfer.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_ip" c:identifier="purple_xfer_get_remote_ip">
        <doc xml:space="preserve">Returns the remote IP address in the file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The IP address on the other end.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_port"
              c:identifier="purple_xfer_get_remote_port">
        <doc xml:space="preserve">Returns the remote port number in the file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The port number on the other end.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_user"
              c:identifier="purple_xfer_get_remote_user">
        <doc xml:space="preserve">Returns the name of the remote user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the remote user.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="purple_xfer_get_size">
        <doc xml:space="preserve">Returns the size of the file being sent or received.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The total size of the file.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_time" c:identifier="purple_xfer_get_start_time">
        <doc xml:space="preserve">Returns the time the transfer of a file started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The time when the transfer started.</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="purple_xfer_get_status">
        <doc xml:space="preserve">Returns the status of the xfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The status.</doc>
          <type name="XferStatus" c:type="PurpleXferStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail"
              c:identifier="purple_xfer_get_thumbnail"
              introspectable="0">
        <doc xml:space="preserve">Gets the thumbnail data for a transfer</doc>
        <return-value>
          <doc xml:space="preserve">The thumbnail data, or NULL if there is no thumbnail</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to get the thumbnail for</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">If not %NULL, the length of the thumbnail data returned
            will be set in the location pointed to by this.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_mimetype"
              c:identifier="purple_xfer_get_thumbnail_mimetype">
        <doc xml:space="preserve">Gets the mimetype of the thumbnail preview for a transfer</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The mimetype of the thumbnail, or %NULL if not thumbnail is set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to get the mimetype for</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_data"
              c:identifier="purple_xfer_get_ui_data"
              introspectable="0">
        <doc xml:space="preserve">Get the UI data associated with this file transfer.</doc>
        <return-value>
          <doc xml:space="preserve">The UI data associated with this file transfer.  This is a
        convenience field provided to the UIs--it is not
        used by the libpurple core.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_ops" c:identifier="purple_xfer_get_ui_ops">
        <doc xml:space="preserve">Returns the UI operations structure for a file transfer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="XferUiOps" c:type="PurpleXferUiOps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_watcher" c:identifier="purple_xfer_get_watcher">
        <doc xml:space="preserve">Returns the Watcher for the transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The watcher.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xfer_type" c:identifier="purple_xfer_get_xfer_type">
        <doc xml:space="preserve">Returns the type of file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of the file transfer.</doc>
          <type name="XferType" c:type="PurpleXferType"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_cancelled" c:identifier="purple_xfer_is_cancelled">
        <doc xml:space="preserve">Returns true if the file transfer was cancelled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether or not the transfer was cancelled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_completed" c:identifier="purple_xfer_is_completed">
        <doc xml:space="preserve">Returns the completed state for a file transfer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The completed state.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="const PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_thumbnail"
              c:identifier="purple_xfer_prepare_thumbnail">
        <doc xml:space="preserve">Prepare a thumbnail for a transfer (if the UI supports it)
will be no-op in case the UI doesn't implement thumbnail creation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to create a thumbnail for</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="formats" transfer-ownership="none">
            <doc xml:space="preserve">A comma-separated list of mimetypes for image formats
 	  the protocols can use for thumbnails.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="protocol_ready" c:identifier="purple_xfer_protocol_ready">
        <doc xml:space="preserve">Allows the protocol to signal it's ready to send/receive data (depending on
the direction of the file transfer. Used when the protocol provides read/write
ops and cannot/does not provide a raw fd to the core.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer which is ready.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="purple_xfer_read">
        <doc xml:space="preserve">Reads in data from a file transfer stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of bytes read, or -1.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer that will be created to contain the data.</doc>
            <type name="guint8" c:type="guchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_file" c:identifier="purple_xfer_read_file">
        <doc xml:space="preserve">Writes chunk of file being sent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of bytes written (0 means, the device is busy), or -1 on
        failure.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to write the data to.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of buffer.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="request" c:identifier="purple_xfer_request">
        <doc xml:space="preserve">Requests confirmation for a file transfer from the user. If receiving
a file which is known at this point, this requests user to accept and
save the file. If the filename is unknown (not set) this only requests user
to accept the file transfer. In this case protocol must call this function
again once the filename is available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to request confirmation on.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_accepted"
              c:identifier="purple_xfer_request_accepted">
        <doc xml:space="preserve">Called if the user accepts the file transfer request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The filename.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_denied" c:identifier="purple_xfer_request_denied">
        <doc xml:space="preserve">Called if the user rejects the file transfer request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ack_fnc" c:identifier="purple_xfer_set_ack_fnc">
        <doc xml:space="preserve">Sets the acknowledge function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The acknowledge function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bytes_sent" c:identifier="purple_xfer_set_bytes_sent">
        <doc xml:space="preserve">Sets the current working position in the active file transfer.  This
can be used to jump backward in the file if the protocol detects
that some bit of data needs to be resent or has been sent twice.

It's used for pausing and resuming an oscar file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="bytes_sent" transfer-ownership="none">
            <doc xml:space="preserve">The new current position in the file.  If we're
                  sending a file then this is the next byte that we
                  will send.  If we're receiving a file, this is the
                  next byte that we expect to receive.</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancel_recv_fnc"
              c:identifier="purple_xfer_set_cancel_recv_fnc">
        <doc xml:space="preserve">Sets the cancel receive function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The cancel receive function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancel_send_fnc"
              c:identifier="purple_xfer_set_cancel_send_fnc">
        <doc xml:space="preserve">Sets the cancel send function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The cancel send function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_completed" c:identifier="purple_xfer_set_completed">
        <doc xml:space="preserve">Sets the completed state for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="completed" transfer-ownership="none">
            <doc xml:space="preserve">The completed state.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_end_fnc" c:identifier="purple_xfer_set_end_fnc">
        <doc xml:space="preserve">Sets the end transfer function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The end transfer function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fd" c:identifier="purple_xfer_set_fd">
        <doc xml:space="preserve">Sets the socket file descriptor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">The file descriptor.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="purple_xfer_set_filename">
        <doc xml:space="preserve">Sets the filename for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The filename.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_init_fnc" c:identifier="purple_xfer_set_init_fnc">
        <doc xml:space="preserve">Sets the transfer initialization function for the file transfer.

This function is required, and must call purple_xfer_start() with
the necessary parameters. This will be called if the file transfer
is accepted by the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The transfer initialization function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_filename"
              c:identifier="purple_xfer_set_local_filename">
        <doc xml:space="preserve">Sets the local filename for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">The filename</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_port" c:identifier="purple_xfer_set_local_port">
        <doc xml:space="preserve">Sets the local port of the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="local_port" transfer-ownership="none">
            <doc xml:space="preserve">The local port.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message" c:identifier="purple_xfer_set_message">
        <doc xml:space="preserve">Sets the message for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">The message.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol_data"
              c:identifier="purple_xfer_set_protocol_data">
        <doc xml:space="preserve">Sets the protocol data for a file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="proto_data" transfer-ownership="none">
            <doc xml:space="preserve">The protocol data to set for the file transfer.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_fnc" c:identifier="purple_xfer_set_read_fnc">
        <doc xml:space="preserve">Sets the read function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The read function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_user"
              c:identifier="purple_xfer_set_remote_user">
        <doc xml:space="preserve">Sets the name of the remote user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="who" transfer-ownership="none">
            <doc xml:space="preserve">The name of the remote user.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_denied_fnc"
              c:identifier="purple_xfer_set_request_denied_fnc">
        <doc xml:space="preserve">Sets the function to be called if the request is denied.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The request denied protocol callback.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="purple_xfer_set_size">
        <doc xml:space="preserve">Sets the size of the file in a file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size of the file.</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_fnc" c:identifier="purple_xfer_set_start_fnc">
        <doc xml:space="preserve">Sets the start transfer function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The start transfer function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status" c:identifier="purple_xfer_set_status">
        <doc xml:space="preserve">Sets the current status for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve">The current status.</doc>
            <type name="XferStatus" c:type="PurpleXferStatus"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail" c:identifier="purple_xfer_set_thumbnail">
        <doc xml:space="preserve">Sets the thumbnail data for a transfer</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer to set the data for</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to the thumbnail data, this will be copied</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The size in bytes of the passed in thumbnail data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="mimetype" transfer-ownership="none">
            <doc xml:space="preserve">The mimetype of the generated thumbnail</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_data" c:identifier="purple_xfer_set_ui_data">
        <doc xml:space="preserve">Set the UI data associated with this file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to associate with this file transfer.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_watcher" c:identifier="purple_xfer_set_watcher">
        <doc xml:space="preserve">Sets the watcher for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve">The watcher.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_fnc" c:identifier="purple_xfer_set_write_fnc">
        <doc xml:space="preserve">Sets the write function for the file transfer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fnc" transfer-ownership="none">
            <doc xml:space="preserve">The write function.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="purple_xfer_start">
        <doc xml:space="preserve">Starts a file transfer.

Either @fd must be specified &lt;emphasis&gt;or&lt;/emphasis&gt; @ip and @port on a
file receive transfer. On send, @fd must be specified, and
@ip and @port are ignored.

Passing @fd as '-1' is a special-case and indicates to the
protocol to facilitate the file transfer itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">The file descriptor for the socket.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="ip" transfer-ownership="none">
            <doc xml:space="preserve">The IP address to connect to.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">The port to connect to.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="ui_ready" c:identifier="purple_xfer_ui_ready">
        <doc xml:space="preserve">Allows the UI to signal it's ready to send/receive data (depending on
the direction of the file transfer. Used when the UI is providing
read/write/data_not_sent UI ops.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer which is ready.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_progress"
              c:identifier="purple_xfer_update_progress">
        <doc xml:space="preserve">Updates file transfer progress.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="purple_xfer_write">
        <doc xml:space="preserve">Writes data to a file transfer stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of bytes written, or -1.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to read the data from.</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes to write.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_file" c:identifier="purple_xfer_write_file">
        <doc xml:space="preserve">Writes chunk of received file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE on success, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfer" transfer-ownership="none">
            <doc xml:space="preserve">The file transfer.</doc>
            <type name="Xfer" c:type="PurpleXfer*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">The buffer to read the data from.</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The number of bytes to write.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Account"/>
      </property>
      <property name="bytes-sent" writable="1" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="end-time" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="fd" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="file-size" writable="1" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="filename" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local-filename" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local-port" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="message" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remote-ip" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remote-port" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="remote-user"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="start-time" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="status" writable="1" transfer-ownership="none">
        <type name="XferStatus"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="XferType"/>
      </property>
      <property name="watcher" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="gparent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ui_data">
        <doc xml:space="preserve">The UI data associated with this file transfer. This is a
          convenience field provided to the UIs -- it is not used by the
          libpurple core.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="XferClass"
            c:type="PurpleXferClass"
            glib:is-gtype-struct-for="Xfer">
      <doc xml:space="preserve">Base class for all #PurpleXfer's</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_purple_reserved1" introspectable="0">
        <callback name="_purple_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved2" introspectable="0">
        <callback name="_purple_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved3" introspectable="0">
        <callback name="_purple_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_purple_reserved4" introspectable="0">
        <callback name="_purple_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="XferStatus"
                 glib:type-name="PurpleXferStatus"
                 glib:get-type="purple_xfer_status_get_type"
                 c:type="PurpleXferStatus">
      <doc xml:space="preserve">The different states of the xfer.</doc>
      <member name="unknown"
              value="0"
              c:identifier="PURPLE_XFER_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">Unknown, the xfer may be null.</doc>
      </member>
      <member name="not_started"
              value="1"
              c:identifier="PURPLE_XFER_STATUS_NOT_STARTED"
              glib:nick="not-started">
        <doc xml:space="preserve">It hasn't started yet.</doc>
      </member>
      <member name="accepted"
              value="2"
              c:identifier="PURPLE_XFER_STATUS_ACCEPTED"
              glib:nick="accepted">
        <doc xml:space="preserve">Receive accepted, but destination file
                                   not selected yet</doc>
      </member>
      <member name="started"
              value="3"
              c:identifier="PURPLE_XFER_STATUS_STARTED"
              glib:nick="started">
        <doc xml:space="preserve">purple_xfer_start has been called.</doc>
      </member>
      <member name="done"
              value="4"
              c:identifier="PURPLE_XFER_STATUS_DONE"
              glib:nick="done">
        <doc xml:space="preserve">The xfer completed successfully.</doc>
      </member>
      <member name="cancel_local"
              value="5"
              c:identifier="PURPLE_XFER_STATUS_CANCEL_LOCAL"
              glib:nick="cancel-local">
        <doc xml:space="preserve">The xfer was cancelled by us.</doc>
      </member>
      <member name="cancel_remote"
              value="6"
              c:identifier="PURPLE_XFER_STATUS_CANCEL_REMOTE"
              glib:nick="cancel-remote">
        <doc xml:space="preserve">The xfer was cancelled by the other end,
                                   or we couldn't connect.</doc>
      </member>
    </enumeration>
    <enumeration name="XferType"
                 glib:type-name="PurpleXferType"
                 glib:get-type="purple_xfer_type_get_type"
                 c:type="PurpleXferType">
      <doc xml:space="preserve">Types of file transfers.</doc>
      <member name="unknown"
              value="0"
              c:identifier="PURPLE_XFER_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">Unknown file transfer type.</doc>
      </member>
      <member name="send"
              value="1"
              c:identifier="PURPLE_XFER_TYPE_SEND"
              glib:nick="send">
        <doc xml:space="preserve">File sending.</doc>
      </member>
      <member name="receive"
              value="2"
              c:identifier="PURPLE_XFER_TYPE_RECEIVE"
              glib:nick="receive">
        <doc xml:space="preserve">File receiving.</doc>
      </member>
    </enumeration>
    <record name="XferUiOps"
            c:type="PurpleXferUiOps"
            glib:type-name="PurpleXferUiOps"
            glib:get-type="purple_xfer_ui_ops_get_type"
            c:symbol-prefix="xfer_ui_ops">
      <doc xml:space="preserve">File transfer UI operations.

Any UI representing a file transfer must assign a filled-out
PurpleXferUiOps structure to the purple_xfer.</doc>
      <field name="new_xfer">
        <callback name="new_xfer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_xfer">
        <callback name="add_xfer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_progress">
        <callback name="update_progress">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
            <parameter name="percent" transfer-ownership="none">
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_local">
        <callback name="cancel_local">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_remote">
        <callback name="cancel_remote">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ui_write">
        <callback name="ui_write">
          <return-value transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gssize" c:type="gssize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ui_read">
        <callback name="ui_read">
          <return-value transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="guint8" c:type="guchar**"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gssize" c:type="gssize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="data_not_sent">
        <callback name="data_not_sent">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="guint8" c:type="const guchar*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="gsize" c:type="gsize"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_thumbnail">
        <callback name="add_thumbnail">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xfer" transfer-ownership="none">
              <type name="Xfer" c:type="PurpleXfer*"/>
            </parameter>
            <parameter name="formats" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="blist_add_account" c:identifier="purple_blist_add_account">
      <doc xml:space="preserve">Called when an account connects.  Tells the UI to update all the
buddies.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_add_buddy" c:identifier="purple_blist_add_buddy">
      <doc xml:space="preserve">Adds a new buddy to the buddy list.

The buddy will be inserted right after node or prepended to the
group if node is NULL.  If both are NULL, the buddy will be added to
the default group.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buddy" transfer-ownership="none">
          <doc xml:space="preserve">The new buddy who gets added</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </parameter>
        <parameter name="contact" transfer-ownership="none">
          <doc xml:space="preserve">The optional contact to place the buddy in.</doc>
          <type name="Contact" c:type="PurpleContact*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group to add the new buddy to.</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">The insertion point.  Pass in NULL to add the node as
               the first child in the given group.</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_add_chat" c:identifier="purple_blist_add_chat">
      <doc xml:space="preserve">Adds a new chat to the buddy list.

The chat will be inserted right after node or appended to the end
of group if node is NULL.  If both are NULL, the buddy will be added to
the "Chats" group.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chat" transfer-ownership="none">
          <doc xml:space="preserve">The new chat who gets added</doc>
          <type name="Chat" c:type="PurpleChat*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group to add the new chat to.</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">The insertion point</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_add_contact" c:identifier="purple_blist_add_contact">
      <doc xml:space="preserve">Adds a new contact to the buddy list.

The new contact will be inserted after insert or prepended to the list if
node is NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="contact" transfer-ownership="none">
          <doc xml:space="preserve">The contact</doc>
          <type name="Contact" c:type="PurpleContact*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group to add the contact to</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">The insertion point</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_add_group" c:identifier="purple_blist_add_group">
      <doc xml:space="preserve">Adds a new group to the buddy list.

The new group will be inserted after insert or prepended to the list if
node is NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve">The insertion point</doc>
          <type name="BlistNode" c:type="PurpleBlistNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_boot" c:identifier="purple_blist_boot">
      <doc xml:space="preserve">Loads the buddy list.

You shouldn't call this. purple_core_init() will do it for you.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_find_buddies"
              c:identifier="purple_blist_find_buddies"
              introspectable="0">
      <doc xml:space="preserve">Finds all PurpleBuddy structs given a name and an account</doc>
      <return-value>
        <doc xml:space="preserve">NULL if the buddy doesn't exist, or a GSList of
               PurpleBuddy structs.  You must free the GSList using
               g_slist_free.  Do not free the PurpleBuddy structs that
               the list points to.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account this buddy belongs to</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The buddy's name (or NULL to return all buddies for the account)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_find_buddy"
              c:identifier="purple_blist_find_buddy"
              introspectable="0">
      <doc xml:space="preserve">Finds the buddy struct given a name and an account</doc>
      <return-value>
        <doc xml:space="preserve">The buddy or NULL if the buddy does not exist</doc>
        <type name="Buddy" c:type="PurpleBuddy*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account this buddy belongs to</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The buddy's name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_find_buddy_in_group"
              c:identifier="purple_blist_find_buddy_in_group"
              introspectable="0">
      <doc xml:space="preserve">Finds the buddy struct given a name, an account, and a group</doc>
      <return-value>
        <doc xml:space="preserve">The buddy or NULL if the buddy does not exist in the group</doc>
        <type name="Buddy" c:type="PurpleBuddy*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account this buddy belongs to</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The buddy's name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group to look in</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_find_chat"
              c:identifier="purple_blist_find_chat"
              introspectable="0">
      <doc xml:space="preserve">Finds a chat by name.</doc>
      <return-value>
        <doc xml:space="preserve">The chat, or %NULL if the chat does not exist.</doc>
        <type name="Chat" c:type="PurpleChat*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The chat's account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The chat's name.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_find_group"
              c:identifier="purple_blist_find_group"
              introspectable="0">
      <doc xml:space="preserve">Finds a group by name</doc>
      <return-value>
        <doc xml:space="preserve">The group or NULL if the group does not exist</doc>
        <type name="Group" c:type="PurpleGroup*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The group's name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_get_buddies"
              c:identifier="purple_blist_get_buddies"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of every buddy in the list.  Use of this function is
discouraged if you do not actually need every buddy in the list.  Use
purple_blist_find_buddies instead.

See purple_blist_find_buddies().</doc>
      <return-value>
        <doc xml:space="preserve">A list of every buddy in the list. Caller is responsible for
         freeing the list.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="blist_get_buddy_list"
              c:identifier="purple_blist_get_buddy_list"
              introspectable="0">
      <doc xml:space="preserve">Returns the main buddy list.</doc>
      <return-value>
        <doc xml:space="preserve">The main buddy list.</doc>
        <type name="BuddyList" c:type="PurpleBuddyList*"/>
      </return-value>
    </function>
    <function name="blist_get_default_group"
              c:identifier="purple_blist_get_default_group"
              introspectable="0">
      <doc xml:space="preserve">Finds or creates default group.</doc>
      <return-value>
        <doc xml:space="preserve">The default group.</doc>
        <type name="Group" c:type="PurpleGroup*"/>
      </return-value>
    </function>
    <function name="blist_get_handle"
              c:identifier="purple_blist_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the handle for the buddy list subsystem.</doc>
      <return-value>
        <doc xml:space="preserve">The buddy list subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="blist_get_root"
              c:identifier="purple_blist_get_root"
              introspectable="0">
      <doc xml:space="preserve">Returns the root node of the main buddy list.</doc>
      <return-value>
        <doc xml:space="preserve">The root node.</doc>
        <type name="BlistNode" c:type="PurpleBlistNode*"/>
      </return-value>
    </function>
    <function name="blist_get_ui_data"
              c:identifier="purple_blist_get_ui_data"
              introspectable="0">
      <doc xml:space="preserve">Returns the UI data for the list.</doc>
      <return-value>
        <doc xml:space="preserve">The UI data for the list.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
    </function>
    <function name="blist_get_ui_ops" c:identifier="purple_blist_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure to be used for the buddy list.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure.</doc>
        <type name="BlistUiOps" c:type="PurpleBlistUiOps*"/>
      </return-value>
    </function>
    <function name="blist_init" c:identifier="purple_blist_init">
      <doc xml:space="preserve">Initializes the buddy list subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_remove_account"
              c:identifier="purple_blist_remove_account">
      <doc xml:space="preserve">Called when an account disconnects.  Sets the presence of all the buddies to 0
and tells the UI to update them.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_remove_buddy"
              c:identifier="purple_blist_remove_buddy">
      <doc xml:space="preserve">Removes a buddy from the buddy list and frees the memory allocated to it.
This doesn't actually try to remove the buddy from the server list.

See purple_account_remove_buddy().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buddy" transfer-ownership="none">
          <doc xml:space="preserve">The buddy to be removed</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_remove_chat" c:identifier="purple_blist_remove_chat">
      <doc xml:space="preserve">Removes a chat from the buddy list and frees the memory allocated to it.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chat" transfer-ownership="none">
          <doc xml:space="preserve">The chat to be removed</doc>
          <type name="Chat" c:type="PurpleChat*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_remove_contact"
              c:identifier="purple_blist_remove_contact">
      <doc xml:space="preserve">Removes a contact, and any buddies it contains, and frees the memory
allocated to it. This calls purple_blist_remove_buddy and therefore
doesn't remove the buddies from the server list.

See purple_blist_remove_buddy().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="contact" transfer-ownership="none">
          <doc xml:space="preserve">The contact to be removed</doc>
          <type name="Contact" c:type="PurpleContact*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_remove_group"
              c:identifier="purple_blist_remove_group">
      <doc xml:space="preserve">Removes a group from the buddy list and frees the memory allocated to it and to
its children</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group to be removed</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_request_add_buddy"
              c:identifier="purple_blist_request_add_buddy">
      <doc xml:space="preserve">Requests from the user information needed to add a buddy to the
buddy list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account the buddy is added to.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve">The username of the buddy.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The name of the group to place the buddy in.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="alias" transfer-ownership="none">
          <doc xml:space="preserve">The optional alias for the buddy.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_request_add_chat"
              c:identifier="purple_blist_request_add_chat">
      <doc xml:space="preserve">Requests from the user information needed to add a chat to the
buddy list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account the buddy is added to.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The optional group to add the chat to.</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="alias" transfer-ownership="none">
          <doc xml:space="preserve">The optional alias for the chat.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The required chat name.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_request_add_group"
              c:identifier="purple_blist_request_add_group">
      <doc xml:space="preserve">Requests from the user information needed to add a group to the
buddy list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_schedule_save"
              c:identifier="purple_blist_schedule_save">
      <doc xml:space="preserve">Schedule a save of the &lt;filename&gt;blist.xml&lt;/filename&gt; file.  This is used by
the account API whenever the privacy settings are changed.  If you make a
change to &lt;filename&gt;blist.xml&lt;/filename&gt; using one of the functions in the
buddy list API, then the buddy list is saved automatically, so you should not
need to call this.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_set_ui_data" c:identifier="purple_blist_set_ui_data">
      <doc xml:space="preserve">Sets the UI data for the list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ui_data" transfer-ownership="none">
          <doc xml:space="preserve">The UI data for the list.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_set_ui_ops" c:identifier="purple_blist_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used for the buddy list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The ops struct.</doc>
          <type name="BlistUiOps" c:type="PurpleBlistUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_set_visible" c:identifier="purple_blist_set_visible">
      <doc xml:space="preserve">Hides or unhides the buddy list.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="show" transfer-ownership="none">
          <doc xml:space="preserve">Whether or not to show the buddy list</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_show" c:identifier="purple_blist_show">
      <doc xml:space="preserve">Shows the buddy list, creating a new one if necessary.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_uninit" c:identifier="purple_blist_uninit">
      <doc xml:space="preserve">Uninitializes the buddy list subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="blist_update_buddies_cache"
              c:identifier="purple_blist_update_buddies_cache">
      <doc xml:space="preserve">Updates the buddies hash table when a buddy has been renamed. This only
updates the cache, the caller is responsible for the actual renaming of
the buddy after updating the cache.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buddy" transfer-ownership="none">
          <doc xml:space="preserve">The buddy whose name will be changed.</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </parameter>
        <parameter name="new_name" transfer-ownership="none">
          <doc xml:space="preserve">The new name of the buddy.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blist_update_groups_cache"
              c:identifier="purple_blist_update_groups_cache">
      <doc xml:space="preserve">Updates the groups hash table when a group has been renamed. This only
updates the cache, the caller is responsible for the actual renaming of
the group after updating the cache.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <doc xml:space="preserve">The group whose name will be changed.</doc>
          <type name="Group" c:type="PurpleGroup*"/>
        </parameter>
        <parameter name="new_name" transfer-ownership="none">
          <doc xml:space="preserve">The new name of the group.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmd_do_command"
              c:identifier="purple_cmd_do_command"
              introspectable="0">
      <doc xml:space="preserve">Do a command.

Normally the UI calls this to perform a command. This might also be useful
if aliases are ever implemented.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #PurpleCmdStatus indicating if the command succeeded or failed.</doc>
        <type name="CmdStatus" c:type="PurpleCmdStatus"/>
      </return-value>
      <parameters>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">The conversation the command was typed in.</doc>
          <type c:type="PurpleConversation*"/>
        </parameter>
        <parameter name="cmdline" transfer-ownership="none">
          <doc xml:space="preserve">The command the user typed (including all arguments) as a single string.
           The caller doesn't have to do any parsing, except removing the command
           prefix, which the core has no knowledge of. cmd should not contain any
           formatting, and should be in plain text (no html entities).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="markup" transfer-ownership="none">
          <doc xml:space="preserve">This is the same as cmd, but is the formatted version. It should be in
              HTML, with &lt; &gt; and &amp;, at least, escaped to html entities, and should
              include both the default formatting and any extra manual formatting.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="errormsg" transfer-ownership="none">
          <doc xml:space="preserve">If the command failed errormsg is filled in with the appropriate error
                message. It must be freed by the caller with g_free().</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmd_help"
              c:identifier="purple_cmd_help"
              introspectable="0">
      <doc xml:space="preserve">Get the help string for a command.

Returns the help strings for a given command in the form of a GList,
one node for each matching command.</doc>
      <return-value>
        <doc xml:space="preserve">A #GList of &lt;type&gt;const char *&lt;/type&gt;s, which is the help string
        for that command.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">The conversation, or %NULL for no context.</doc>
          <type c:type="PurpleConversation*"/>
        </parameter>
        <parameter name="cmd" transfer-ownership="none">
          <doc xml:space="preserve">The command. No wildcards accepted, but returns help for all
           commands if %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmd_list"
              c:identifier="purple_cmd_list"
              introspectable="0">
      <doc xml:space="preserve">List registered commands.

Returns a #GList (which must be freed by the caller) of all commands
that are valid in the context of @conv, or all commands, if @conv is
%NULL.  Don't keep this list around past the main loop, or anything else that
might unregister a command, as the &lt;type&gt;const char *&lt;/type&gt;'s used get freed
then.</doc>
      <return-value>
        <doc xml:space="preserve">A #GList of &lt;type&gt;const char *&lt;/type&gt;, which must be freed with
         g_list_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">The conversation, or %NULL.</doc>
          <type c:type="PurpleConversation*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmd_register"
              c:identifier="purple_cmd_register"
              introspectable="0">
      <doc xml:space="preserve">Register a new command with the core.

The command will only happen if commands are enabled,
which is a UI pref. UIs don't have to support commands at all.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #PurpleCmdId, which is only used for calling
        #purple_cmd_unregister, or 0 on failure.</doc>
        <type name="CmdId" c:type="PurpleCmdId"/>
      </return-value>
      <parameters>
        <parameter name="cmd" transfer-ownership="none">
          <doc xml:space="preserve">The command. This should be a UTF-8 (or ASCII) string, with no spaces
           or other white space.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve">A string of characters describing to libpurple how to parse this
       command's arguments.  If what the user types doesn't match this
       pattern, libpurple will keep looking for another command, unless
       the flag #PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS is passed in @f.
       This string should contain no whitespace, and use a single
       character for each argument.  The recognized characters are:
       &lt;itemizedlist&gt;
         &lt;listitem&gt;&lt;literal&gt;'w'&lt;/literal&gt;: Matches a single word.&lt;/listitem&gt;
         &lt;listitem&gt;&lt;literal&gt;'W'&lt;/literal&gt;: Matches a single word, with
                                           formatting.&lt;/listitem&gt;
         &lt;listitem&gt;&lt;literal&gt;'s'&lt;/literal&gt;: Matches the rest of the
                                           arguments after this point,
                                           as a single string.&lt;/listitem&gt;
         &lt;listitem&gt;&lt;literal&gt;'S'&lt;/literal&gt;: Same as &lt;literal&gt;'s'&lt;/literal&gt;
                                           but with formatting.&lt;/listitem&gt;
       &lt;/itemizedlist&gt;
       If args is the empty string, then the command accepts no
       arguments. The args passed to the callback @func will be a %NULL
       terminated array of %NULL terminated strings, and will always
       match the number of arguments asked for, unless
       #PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS is passed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve">This is the priority. Higher priority commands will be run first,
    and usually the first command will stop any others from being
    called.</doc>
          <type name="CmdPriority" c:type="PurpleCmdPriority"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">Flags specifying various options about this command, combined with
    &lt;literal&gt;|&lt;/literal&gt; (bitwise OR). You need to at least pass one of
    #PURPLE_CMD_FLAG_IM or #PURPLE_CMD_FLAG_CHAT (you may pass both) in
    order for the command to ever actually be called.</doc>
          <type name="CmdFlag" c:type="PurpleCmdFlag"/>
        </parameter>
        <parameter name="protocol_id" transfer-ownership="none">
          <doc xml:space="preserve">If the #PURPLE_CMD_FLAG_PROTOCOL_ONLY flag is set, this is the id
               of the protocol to which the command applies (such as
               &lt;literal&gt;"prpl-msn"&lt;/literal&gt;). If the flag is not set, this
               parameter is ignored; pass %NULL (or a humourous string of
               your choice!).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="7">
          <doc xml:space="preserve">This is the function to call when someone enters this
                     command.</doc>
          <type name="CmdFunc" c:type="PurpleCmdFunc"/>
        </parameter>
        <parameter name="helpstr" transfer-ownership="none">
          <doc xml:space="preserve">a whitespace sensitive, UTF-8, HTML string describing how to
          use the command.  The preferred format of this string is the
          command's name, followed by a space and any arguments it
          accepts (if it takes any arguments, otherwise no space),
          followed by a colon, two spaces, and a description of the
          command in sentence form.  Do not include a slash before the
          command name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User defined data to pass to the #PurpleCmdFunc @f.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmd_unregister" c:identifier="purple_cmd_unregister">
      <doc xml:space="preserve">Unregister a command with the core.

All registered commands must be unregistered, if they're registered by a plugin
or something else that might go away. Normally this is called when the plugin
unloads itself.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">The #PurpleCmdId to unregister, as returned by #purple_cmd_register.</doc>
          <type name="CmdId" c:type="PurpleCmdId"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmds_get_handle"
              c:identifier="purple_cmds_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Get the handle for the commands API</doc>
      <return-value>
        <doc xml:space="preserve">The handle</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
    </function>
    <function name="cmds_init" c:identifier="purple_cmds_init">
      <doc xml:space="preserve">Initialize the commands subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cmds_uninit" c:identifier="purple_cmds_uninit">
      <doc xml:space="preserve">Uninitialize the commands subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="connection_error_is_fatal"
              c:identifier="purple_connection_error_is_fatal"
              moved-to="ConnectionError.is_fatal">
      <doc xml:space="preserve">Reports whether a disconnection reason is fatal (in which case the account
should probably not be automatically reconnected) or transient (so
auto-reconnection is a good idea).
For instance, #PURPLE_CONNECTION_ERROR_NETWORK_ERROR is a temporary error,
which might be caused by losing the network connection, so &lt;literal&gt;
purple_connection_error_is_fatal (PURPLE_CONNECTION_ERROR_NETWORK_ERROR)&lt;/literal&gt;
is %FALSE.  On the other hand,
#PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED probably indicates a
misconfiguration of the account which needs the user to go fix it up, so
&lt;literal&gt; purple_connection_error_is_fatal
(PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED)&lt;/literal&gt; is %TRUE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the account should not be automatically reconnected, and
        %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="reason" transfer-ownership="none">
          <type name="ConnectionError" c:type="PurpleConnectionError"/>
        </parameter>
      </parameters>
    </function>
    <function name="connections_disconnect_all"
              c:identifier="purple_connections_disconnect_all">
      <doc xml:space="preserve">Disconnects from all connections.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="connections_get_all"
              c:identifier="purple_connections_get_all"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of all active connections.  This does not
include connections that are in the process of connecting.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A list of all active connections.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="connections_get_connecting"
              c:identifier="purple_connections_get_connecting"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of all connections in the process of connecting.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A list of connecting connections.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="connections_get_handle"
              c:identifier="purple_connections_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the handle to the connections subsystem.</doc>
      <return-value>
        <doc xml:space="preserve">The connections subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="connections_get_ui_ops"
              c:identifier="purple_connections_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure used for connections.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure in use.</doc>
        <type name="ConnectionUiOps" c:type="PurpleConnectionUiOps*"/>
      </return-value>
    </function>
    <function name="connections_init" c:identifier="purple_connections_init">
      <doc xml:space="preserve">Initializes the connections subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="connections_set_ui_ops"
              c:identifier="purple_connections_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used for connections.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="ConnectionUiOps" c:type="PurpleConnectionUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="connections_uninit"
              c:identifier="purple_connections_uninit">
      <doc xml:space="preserve">Uninitializes the connections subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="core_ensure_single_instance"
              c:identifier="purple_core_ensure_single_instance"
              moved-to="Core.ensure_single_instance">
      <doc xml:space="preserve">Ensures that only one instance is running.  If libpurple is built with D-Bus
support, this checks if another process owns the libpurple bus name and if
so whether that process is using the same configuration directory as this
process.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if this is the first instance of libpurple running;
         %FALSE if there is another instance running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="core_get_ui"
              c:identifier="purple_core_get_ui"
              moved-to="Core.get_ui">
      <doc xml:space="preserve">Returns the ID of the UI that is using the core, as passed to
purple_core_init().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The ID of the UI that is currently using the core.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="core_get_ui_ops"
              c:identifier="purple_core_get_ui_ops"
              moved-to="Core.get_ui_ops">
      <doc xml:space="preserve">Returns the UI ops for the core.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The core's UI ops structure.</doc>
        <type name="CoreUiOps" c:type="PurpleCoreUiOps*"/>
      </return-value>
    </function>
    <function name="core_get_version"
              c:identifier="purple_core_get_version"
              moved-to="Core.get_version">
      <doc xml:space="preserve">Returns the version of the core library.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The version of the core library.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="core_init"
              c:identifier="purple_core_init"
              moved-to="Core.init">
      <doc xml:space="preserve">Initializes the core of purple.

This will setup preferences for all the core subsystems.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if successful, or %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ui" transfer-ownership="none">
          <doc xml:space="preserve">The ID of the UI using the core. This should be a
          unique ID, registered with the purple team.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="core_quit"
              c:identifier="purple_core_quit"
              moved-to="Core.quit">
      <doc xml:space="preserve">Quits the core of purple, which, depending on the UI, may quit the
application using the purple core.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="core_quit_cb"
              c:identifier="purple_core_quit_cb"
              moved-to="Core.quit_cb">
      <doc xml:space="preserve">Calls purple_core_quit().  This can be used as the function
passed to purple_timeout_add() when you want to shutdown Purple
in a specified amount of time.  When shutting down Purple
from a plugin, you must use this instead of purple_core_quit();
for an immediate exit, use a timeout value of 0:

&lt;programlisting&gt;
purple_timeout_add(0, purple_core_quitcb, NULL)
&lt;/programlisting&gt;

This is ensures that code from your plugin is not being
executed when purple_core_quit() is called.  If the plugin
called purple_core_quit() directly, you would get a core dump
after purple_core_quit() executes and control returns to your
plugin because purple_core_quit() frees all plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="unused" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="core_set_ui_ops"
              c:identifier="purple_core_set_ui_ops"
              moved-to="Core.set_ui_ops">
      <doc xml:space="preserve">Sets the UI ops for the core.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">A UI ops structure for the core.</doc>
          <type name="CoreUiOps" c:type="PurpleCoreUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug" c:identifier="purple_debug" introspectable="0">
      <doc xml:space="preserve">Outputs debug information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">The debug level.</doc>
          <type name="DebugLevel" c:type="PurpleDebugLevel"/>
        </parameter>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_error"
              c:identifier="purple_debug_error"
              introspectable="0">
      <doc xml:space="preserve">Outputs error level debug information.

This is a wrapper for purple_debug(), and uses PURPLE_DEBUG_ERROR as
the level.

See purple_debug().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_fatal"
              c:identifier="purple_debug_fatal"
              introspectable="0">
      <doc xml:space="preserve">Outputs fatal error level debug information.

This is a wrapper for purple_debug(), and uses PURPLE_DEBUG_ERROR as
the level.

See purple_debug().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_get_ui_ops" c:identifier="purple_debug_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure used when outputting debug
information.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure in use.</doc>
        <type name="DebugUiOps" c:type="PurpleDebugUiOps*"/>
      </return-value>
    </function>
    <function name="debug_info"
              c:identifier="purple_debug_info"
              introspectable="0">
      <doc xml:space="preserve">Outputs info level debug information.

This is a wrapper for purple_debug(), and uses PURPLE_DEBUG_INFO as
the level.

See purple_debug().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_init" c:identifier="purple_debug_init">
      <doc xml:space="preserve">Initializes the debug subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_is_enabled" c:identifier="purple_debug_is_enabled">
      <doc xml:space="preserve">Check if console debug output is enabled.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if debugging is enabled, FALSE if it is not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="debug_is_unsafe" c:identifier="purple_debug_is_unsafe">
      <doc xml:space="preserve">Check if unsafe debugging is enabled.  Defaults to FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the debug logging of all messages is enabled, FALSE
        if messages that could potentially contain passwords and other
        sensitive information are not logged.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="debug_is_verbose" c:identifier="purple_debug_is_verbose">
      <doc xml:space="preserve">Check if verbose logging is enabled.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if verbose debugging is enabled, FALSE if it is not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="debug_misc"
              c:identifier="purple_debug_misc"
              introspectable="0">
      <doc xml:space="preserve">Outputs misc. level debug information.

This is a wrapper for purple_debug(), and uses PURPLE_DEBUG_MISC as
the level.

See purple_debug().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_colored" c:identifier="purple_debug_set_colored">
      <doc xml:space="preserve">Enable or disable colored output for bash console.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="colored" transfer-ownership="none">
          <doc xml:space="preserve">TRUE to enable colored output, FALSE to disable it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_enabled" c:identifier="purple_debug_set_enabled">
      <doc xml:space="preserve">Enable or disable printing debug output to the console.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="enabled" transfer-ownership="none">
          <doc xml:space="preserve">TRUE to enable debug output or FALSE to disable it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_ui_ops" c:identifier="purple_debug_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used when outputting debug
information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="DebugUiOps" c:type="PurpleDebugUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_unsafe" c:identifier="purple_debug_set_unsafe">
      <doc xml:space="preserve">Enable or disable unsafe debugging.  This ordinarily should only be called
by #purple_debug_init, but there are cases where this can be useful for
plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="unsafe" transfer-ownership="none">
          <doc xml:space="preserve">TRUE to enable debug logging of messages that could
       potentially contain passwords and other sensitive information.
       FALSE to disable it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_verbose" c:identifier="purple_debug_set_verbose">
      <doc xml:space="preserve">Enable or disable verbose debugging.  This ordinarily should only be called
by #purple_debug_init, but there are cases where this can be useful for
plugins.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="verbose" transfer-ownership="none">
          <doc xml:space="preserve">TRUE to enable verbose debugging or FALSE to disable it.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_warning"
              c:identifier="purple_debug_warning"
              introspectable="0">
      <doc xml:space="preserve">Outputs warning level debug information.

This is a wrapper for purple_debug(), and uses PURPLE_DEBUG_WARNING as
the level.

See purple_debug().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve">The category (or %NULL).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_a"
              c:identifier="purple_dnsquery_a"
              introspectable="0">
      <doc xml:space="preserve">Perform an asynchronous DNS query.</doc>
      <return-value>
        <doc xml:space="preserve">NULL if there was an error, otherwise return a reference to
        a data structure that can be used to cancel the pending
        DNS query, if needed.</doc>
        <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account that the query is being done for (or NULL)</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="hostname" transfer-ownership="none">
          <doc xml:space="preserve">The hostname to resolve.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">A port number which is stored in the struct sockaddr.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="4">
          <doc xml:space="preserve">The callback function to call after resolving.</doc>
          <type name="DnsQueryConnectFunction"
                c:type="PurpleDnsQueryConnectFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_destroy" c:identifier="purple_dnsquery_destroy">
      <doc xml:space="preserve">Cancel a DNS query and destroy the associated data structure.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The DNS query to cancel.  This data structure
       is freed by this function.</doc>
          <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_get_host" c:identifier="purple_dnsquery_get_host">
      <doc xml:space="preserve">Get the host associated with a PurpleDnsQueryData</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The host.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The DNS query</doc>
          <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_get_port" c:identifier="purple_dnsquery_get_port">
      <doc xml:space="preserve">Get the port associated with a PurpleDnsQueryData</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The port.</doc>
        <type name="gushort" c:type="unsigned short"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The DNS query</doc>
          <type name="DnsQueryData" c:type="PurpleDnsQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_get_ui_ops"
              c:identifier="purple_dnsquery_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure to be used when doing a DNS
resolve.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure.</doc>
        <type name="DnsQueryUiOps" c:type="PurpleDnsQueryUiOps*"/>
      </return-value>
    </function>
    <function name="dnsquery_init" c:identifier="purple_dnsquery_init">
      <doc xml:space="preserve">Initializes the DNS query subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="dnsquery_set_ui_ops"
              c:identifier="purple_dnsquery_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used when doing a DNS
resolve.  The UI operations need only be set if the UI wants to
handle the resolve itself; otherwise, leave it as NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="DnsQueryUiOps" c:type="PurpleDnsQueryUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnsquery_uninit" c:identifier="purple_dnsquery_uninit">
      <doc xml:space="preserve">Uninitializes the DNS query subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="eventloop_get_ui_ops"
              c:identifier="purple_eventloop_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure used for accounts.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure in use.</doc>
        <type name="EventLoopUiOps" c:type="PurpleEventLoopUiOps*"/>
      </return-value>
    </function>
    <function name="eventloop_set_ui_ops"
              c:identifier="purple_eventloop_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used for accounts.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="EventLoopUiOps" c:type="PurpleEventLoopUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_pounce"
              c:identifier="purple_find_pounce"
              introspectable="0">
      <doc xml:space="preserve">Finds a pounce with the specified event(s) and buddy.</doc>
      <return-value>
        <doc xml:space="preserve">The pounce if found, or %NULL otherwise.</doc>
        <type name="Pounce" c:type="PurplePounce*"/>
      </return-value>
      <parameters>
        <parameter name="pouncer" transfer-ownership="none">
          <doc xml:space="preserve">The account to match against.</doc>
          <type name="Account" c:type="const PurpleAccount*"/>
        </parameter>
        <parameter name="pouncee" transfer-ownership="none">
          <doc xml:space="preserve">The buddy to match against.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="events" transfer-ownership="none">
          <doc xml:space="preserve">The event(s) to match against.</doc>
          <type name="PounceEvent" c:type="PurplePounceEvent"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_core"
              c:identifier="purple_get_core"
              introspectable="0">
      <doc xml:space="preserve">This is used to connect to
&lt;link linkend="chapter-signals-core"&gt;core signals&lt;/link&gt;.</doc>
      <return-value>
        <doc xml:space="preserve">A handle to the purple core.</doc>
        <type name="Core" c:type="PurpleCore*"/>
      </return-value>
    </function>
    <function name="global_proxy_get_info"
              c:identifier="purple_global_proxy_get_info"
              introspectable="0">
      <doc xml:space="preserve">Returns purple's global proxy information.</doc>
      <return-value>
        <doc xml:space="preserve">The global proxy information.</doc>
        <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
      </return-value>
    </function>
    <function name="global_proxy_set_info"
              c:identifier="purple_global_proxy_set_info">
      <doc xml:space="preserve">Set purple's global proxy information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve">The proxy information.</doc>
          <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_cancel" c:identifier="purple_http_conn_cancel">
      <doc xml:space="preserve">Cancel a pending HTTP request.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The data returned when you initiated the HTTP request.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_cancel_all"
              c:identifier="purple_http_conn_cancel_all">
      <doc xml:space="preserve">Cancels all HTTP connections associated with the specified handle.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gc" transfer-ownership="none">
          <doc xml:space="preserve">The handle.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_get_cookie_jar"
              c:identifier="purple_http_conn_get_cookie_jar"
              introspectable="0">
      <doc xml:space="preserve">Gets cookie jar used within connection.</doc>
      <return-value>
        <doc xml:space="preserve">The cookie jar.</doc>
        <type name="HttpCookieJar" c:type="PurpleHttpCookieJar*"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP connection.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_get_purple_connection"
              c:identifier="purple_http_conn_get_purple_connection"
              introspectable="0">
      <doc xml:space="preserve">Gets PurpleConnection tied with specified HTTP connection.</doc>
      <return-value>
        <doc xml:space="preserve">The PurpleConnection object.</doc>
        <type name="Connection" c:type="PurpleConnection*"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP connection.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_get_request"
              c:identifier="purple_http_conn_get_request"
              introspectable="0">
      <doc xml:space="preserve">Gets PurpleHttpRequest used for specified HTTP connection.</doc>
      <return-value>
        <doc xml:space="preserve">The PurpleHttpRequest object.</doc>
        <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP connection.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_is_running"
              c:identifier="purple_http_conn_is_running">
      <doc xml:space="preserve">Checks, if provided HTTP request is running.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE, if provided connection is currently running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP connection (may be invalid pointer).</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_conn_set_progress_watcher"
              c:identifier="purple_http_conn_set_progress_watcher">
      <doc xml:space="preserve">Sets the watcher, called after writing or reading data to/from HTTP stream.
May be used for updating transfer progress gauge.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="http_conn" transfer-ownership="none">
          <doc xml:space="preserve">The HTTP connection.</doc>
          <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
        </parameter>
        <parameter name="watcher"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">The watcher.</doc>
          <type name="HttpProgressWatcher" c:type="PurpleHttpProgressWatcher"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">The user data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="interval_threshold" transfer-ownership="none">
          <doc xml:space="preserve">Minimum interval (in microseconds) of calls to
                        watcher, or -1 for default.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_get"
              c:identifier="purple_http_get"
              introspectable="0">
      <doc xml:space="preserve">Fetches the data from a URL with GET request, and passes it to a callback
function.</doc>
      <return-value>
        <doc xml:space="preserve">The HTTP connection struct.</doc>
        <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
      </return-value>
      <parameters>
        <parameter name="gc" transfer-ownership="none">
          <doc xml:space="preserve">The connection for which the request is needed, or NULL.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">The callback function.</doc>
          <type name="HttpCallback" c:type="PurpleHttpCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">The user data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="url" transfer-ownership="none">
          <doc xml:space="preserve">The URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_get_printf"
              c:identifier="purple_http_get_printf"
              introspectable="0">
      <doc xml:space="preserve">Constructs an URL and fetches the data from it with GET request, then passes
it to a callback function.</doc>
      <return-value>
        <doc xml:space="preserve">The HTTP connection struct.</doc>
        <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
      </return-value>
      <parameters>
        <parameter name="gc" transfer-ownership="none">
          <doc xml:space="preserve">The connection for which the request is needed, or NULL.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">The callback function.</doc>
          <type name="HttpCallback" c:type="PurpleHttpCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">The user data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve">The format string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="http_init" c:identifier="purple_http_init">
      <doc xml:space="preserve">Initializes the http subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="http_request"
              c:identifier="purple_http_request"
              introspectable="0">
      <doc xml:space="preserve">Fetches a HTTP request and passes the response to a callback function.
Provided request struct can be shared by multiple http requests but can not
be modified when any of these is running.</doc>
      <return-value>
        <doc xml:space="preserve">The HTTP connection struct.</doc>
        <type name="HttpConnection" c:type="PurpleHttpConnection*"/>
      </return-value>
      <parameters>
        <parameter name="gc" transfer-ownership="none">
          <doc xml:space="preserve">The connection for which the request is needed, or NULL.</doc>
          <type name="Connection" c:type="PurpleConnection*"/>
        </parameter>
        <parameter name="request" transfer-ownership="none">
          <doc xml:space="preserve">The request.</doc>
          <type name="HttpRequest" c:type="PurpleHttpRequest*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="3">
          <doc xml:space="preserve">The callback function.</doc>
          <type name="HttpCallback" c:type="PurpleHttpCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">The user data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_uninit" c:identifier="purple_http_uninit">
      <doc xml:space="preserve">Uninitializes the http subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="idle_get_ui_ops" c:identifier="purple_idle_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure used for idle reporting.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure in use.</doc>
        <type name="IdleUiOps" c:type="PurpleIdleUiOps*"/>
      </return-value>
    </function>
    <function name="idle_init" c:identifier="purple_idle_init">
      <doc xml:space="preserve">Initializes the idle system.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="idle_set" c:identifier="purple_idle_set">
      <doc xml:space="preserve">Fake our idle time by setting the time at which our
accounts purportedly became idle.  This is used by
the I'dle Mak'er plugin.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time" transfer-ownership="none">
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="idle_set_ui_ops" c:identifier="purple_idle_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used for idle reporting.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="IdleUiOps" c:type="PurpleIdleUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="idle_touch" c:identifier="purple_idle_touch">
      <doc xml:space="preserve">Touch our idle tracker.  This signifies that the user is
'active'.  The conversation code calls this when the
user sends an IM, for example.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="idle_uninit" c:identifier="purple_idle_uninit">
      <doc xml:space="preserve">Uninitializes the idle system.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="image_store_add"
              c:identifier="purple_image_store_add"
              introspectable="0">
      <doc xml:space="preserve">Permanently adds an image to the store. If the @image is already in the
store, it will return its current id.

This function increases @image's reference count, so it won't be destroyed
until image store subsystem is shut down. Don't decrease @image's reference
count by yourself - if you don't want the store to hold the reference,
use #purple_image_store_add_weak.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the unique identifier for the @image.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve">the image.</doc>
          <type c:type="PurpleImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="image_store_add_temporary"
              c:identifier="purple_image_store_add_temporary"
              introspectable="0">
      <doc xml:space="preserve">Adds an image to the store to be used in a short period of time.
If the @image is already in the store, it will just return its current id.

Increases reference count for the @image for a time long enough to display
the @image by the UI. In current implementation it's five seconds, but may be
changed in the future, so if you need more sophisticated reference
management, implement it on your own.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the unique identifier for the @image.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve">the image.</doc>
          <type c:type="PurpleImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="image_store_add_weak"
              c:identifier="purple_image_store_add_weak"
              introspectable="0">
      <doc xml:space="preserve">Adds an image to the store without increasing reference count. It will be
removed from the store when @image gets destroyed.

If the @image is already in the store, it will return its current id.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the unique identifier for the @image.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve">the image.</doc>
          <type c:type="PurpleImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="image_store_get"
              c:identifier="purple_image_store_get"
              introspectable="0">
      <doc xml:space="preserve">Finds the image with a certain identifier within a store.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the image referenced by @id, or %NULL if it
         doesn't exists.</doc>
        <type c:type="PurpleImage*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">the unique identifier of an image.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="image_store_get_from_uri"
              c:identifier="purple_image_store_get_from_uri"
              introspectable="0">
      <doc xml:space="preserve">Checks, if the @uri is pointing to any #PurpleImage by referring
to #PURPLE_IMAGE_STORE_PROTOCOL and returns the image, if it's valid.

The function doesn't throw any warning, if the @uri is for any
other protocol.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the image referenced by @uri, or %NULL if it
         doesn't point to any valid image.</doc>
        <type c:type="PurpleImage*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">the URI of a potential #PurpleImage. Should not be %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="image_store_get_uri"
              c:identifier="purple_image_store_get_uri"
              introspectable="0">
      <doc xml:space="preserve">Generates an URI for the @image, to be retrieved using
#purple_image_store_get_from_uri.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the URI for the @image. Should be #g_free'd when
you done using it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve">the image.</doc>
          <type c:type="PurpleImage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="input_add" c:identifier="purple_input_add">
      <doc xml:space="preserve">Adds an input handler.

See g_io_add_watch_full().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The resulting handle (will be greater than 0).</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The input file descriptor.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="cond" transfer-ownership="none">
          <doc xml:space="preserve">The condition type.</doc>
          <type name="InputCondition" c:type="PurpleInputCondition"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="3">
          <doc xml:space="preserve">The callback function for data.</doc>
          <type name="InputFunction" c:type="PurpleInputFunction"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">User-specified data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="input_get_error" c:identifier="purple_input_get_error">
      <doc xml:space="preserve">Get the current error status for an input.

The return value and error follow getsockopt() with a level of SOL_SOCKET and an
option name of SO_ERROR, and this is how the error is determined if the UI does not
implement the input_get_error UI op.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">0 if there is no error; -1 if there is an error, in which case
         #errno will be set.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The input file descriptor.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">A pointer to an #int which on return will have the error, or
            0 if no error.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="input_pipe" c:identifier="purple_input_pipe">
      <doc xml:space="preserve">Creates a pipe - an unidirectional data channel that can be used for
interprocess communication.

File descriptors for both ends of pipe will be written into provided array.
The first one (pipefd[0]) can be used for reading, the second one (pipefd[1])
for writing.

On Windows it's simulated by creating a pair of connected sockets, on other
systems pipe() is used.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">0 on success, -1 on error.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="pipefd" transfer-ownership="none">
          <doc xml:space="preserve">Array used to return file descriptors for both ends of pipe.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="input_remove" c:identifier="purple_input_remove">
      <doc xml:space="preserve">Removes an input handler.</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">The handle of the input handler. Note that this is the return
         value from purple_input_add(), &lt;emphasis&gt;not&lt;/emphasis&gt; the
         file descriptor.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_error_domain"
              c:identifier="purple_keyring_error_domain"
              moved-to="Keyring.error_domain">
      <doc xml:space="preserve">Gets keyring subsystem error domain.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">keyring subsystem error domain.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="keyring_export_password"
              c:identifier="purple_keyring_export_password"
              moved-to="Keyring.export_password">
      <doc xml:space="preserve">Export serialized (and maybe encrypted) password out of current keyring.

It's used by account.c while syncing accounts to xml.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the info was exported successfully, FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account for which we want the info.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="keyring_id" transfer-ownership="none">
          <doc xml:space="preserve">The plugin id to be stored in the XML node. This will be
                  NULL or a string that can be considered static.</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">An option field that can be used by the plugin. This will
                  be NULL or a string that can be considered static.</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">The data to be stored in the XML node. This string must be
                  freed using destroy() once not needed anymore if it is not
                  NULL.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Will be set if a problem occured.</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">A function to be called, if non NULL, to free data.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_find_keyring_by_id"
              c:identifier="purple_keyring_find_keyring_by_id"
              moved-to="Keyring.find_keyring_by_id">
      <doc xml:space="preserve">Find a keyring by an id.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The keyring, or NULL if not found.</doc>
        <type name="Keyring" c:type="PurpleKeyring*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">The id for the keyring.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_get_inuse"
              c:identifier="purple_keyring_get_inuse"
              moved-to="Keyring.get_inuse">
      <doc xml:space="preserve">Get the keyring being used.</doc>
      <return-value transfer-ownership="full">
        <type name="Keyring" c:type="PurpleKeyring*"/>
      </return-value>
    </function>
    <function name="keyring_get_password"
              c:identifier="purple_keyring_get_password"
              moved-to="Keyring.get_password">
      <doc xml:space="preserve">Read a password from the current keyring.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">A callback for once the password is read.</doc>
          <type name="KeyringReadCallback" c:type="PurpleKeyringReadCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_import_password"
              c:identifier="purple_keyring_import_password"
              moved-to="Keyring.import_password"
              throws="1">
      <doc xml:space="preserve">Import serialized (and maybe encrypted) password into current keyring.

It's used by account.c while reading a password from xml.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the input was accepted, FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="keyring_id" transfer-ownership="none">
          <doc xml:space="preserve">The plugin ID that was stored in the xml file. Can be NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">A keyring specific option that was stored. Can be NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data that was stored, can be NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_init"
              c:identifier="purple_keyring_init"
              moved-to="Keyring.init">
      <doc xml:space="preserve">Initializes the keyring subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="keyring_set_password"
              c:identifier="purple_keyring_set_password"
              moved-to="Keyring.set_password">
      <doc xml:space="preserve">Save a password to the current keyring.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve">The password to save.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="3">
          <doc xml:space="preserve">A callback for once the password is saved.</doc>
          <type name="KeyringSaveCallback" c:type="PurpleKeyringSaveCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">Data to be passed to the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="keyring_uninit"
              c:identifier="purple_keyring_uninit"
              moved-to="Keyring.uninit">
      <doc xml:space="preserve">Uninitializes the keyring subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="network_convert_idn_to_ascii"
              c:identifier="purple_network_convert_idn_to_ascii">
      <doc xml:space="preserve">Convert a UTF-8 domain name to ASCII in accordance with the IDNA
specification. If libpurple is compiled without IDN support, this function
copies the input into the output buffer.

Because this function is used by DNS resolver child/threads, it uses no
other libpurple API and is threadsafe.

In general, a buffer of about 512 bytes is the appropriate size to use.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">0 on success, -1 if the out is NULL, or an error code
               that currently corresponds to the Idna_rc enum in libidn.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve">The hostname to be converted.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">The output buffer where an allocated string will be returned.
               The caller is responsible for freeing this.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_force_online"
              c:identifier="purple_network_force_online">
      <doc xml:space="preserve">Makes purple_network_is_available() always return %TRUE.

This is what backs the --force-online command line argument in Pidgin,
for example.  This is useful for offline testing, especially when
combined with nullprotocol.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="network_get_all_local_system_ips"
              c:identifier="purple_network_get_all_local_system_ips"
              introspectable="0">
      <doc xml:space="preserve">Returns all IP addresses of the local system.

Note: The caller must free this list.  If libpurple was built with
      support for it, this function also enumerates IPv6 addresses.</doc>
      <return-value>
        <doc xml:space="preserve">A list of local IP addresses.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="network_get_handle"
              c:identifier="purple_network_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Get the handle for the network system</doc>
      <return-value>
        <doc xml:space="preserve">the handle to the network system</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="network_get_local_system_ip"
              c:identifier="purple_network_get_local_system_ip">
      <doc xml:space="preserve">Returns the IP address of the local system.

You probably want to use purple_network_get_my_ip() instead.

Note: The returned string is a pointer to a static buffer. If this
      function is called twice, it may be important to make a copy
      of the returned string.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The local IP address.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The fd to use to help figure out the IP, or else -1.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_get_my_ip" c:identifier="purple_network_get_my_ip">
      <doc xml:space="preserve">Returns the IP address that should be used anywhere a
public IP addresses is needed (listening for an incoming
file transfer, etc).

If the user has manually specified an IP address via
preferences, then this IP is returned.  Otherwise the
IP address returned by purple_network_get_local_system_ip()
is returned.

Note: The returned string is a pointer to a static buffer. If this
      function is called twice, it may be important to make a copy
      of the returned string.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The local IP address to be used.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The fd to use to help figure out the IP, or -1.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_get_port_from_fd"
              c:identifier="purple_network_get_port_from_fd">
      <doc xml:space="preserve">Gets a port number from a file descriptor.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The port number, in host byte order.</doc>
        <type name="gushort" c:type="unsigned short"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The file descriptor. This should be a tcp socket. The current
          implementation probably dies on anything but IPv4. Perhaps this
          possible bug will inspire new and valuable contributors to Purple.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_get_public_ip"
              c:identifier="purple_network_get_public_ip">
      <doc xml:space="preserve">Returns the IP address of the local system set in preferences.

This returns the value set via purple_network_set_public_ip().
You probably want to use purple_network_get_my_ip() instead.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The local IP address set in preferences.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="network_get_stun_ip"
              c:identifier="purple_network_get_stun_ip">
      <doc xml:space="preserve">Get the IP address of the STUN server as a string representation</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the IP address</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="network_get_turn_ip"
              c:identifier="purple_network_get_turn_ip">
      <doc xml:space="preserve">Get the IP address of the TURN server as a string representation</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the IP address</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="network_init" c:identifier="purple_network_init">
      <doc xml:space="preserve">Initializes the network subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="network_is_available"
              c:identifier="purple_network_is_available">
      <doc xml:space="preserve">Detects if there is an available network connection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the network is available</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="network_listen"
              c:identifier="purple_network_listen"
              introspectable="0">
      <doc xml:space="preserve">Attempts to open a listening port ONLY on the specified port number.
You probably want to use purple_network_listen_range() instead of this.
This function is useful, for example, if you wanted to write a telnet
server as a Purple plugin, and you HAD to listen on port 23.  Why anyone
would want to do that is beyond me.

This opens a listening port. The caller will want to set up a watcher
of type PURPLE_INPUT_READ on the fd returned in cb. It will probably call
accept in the watcher callback, and then possibly remove the watcher and
close the listening socket, and add a new watcher on the new socket accept
returned.

Libpurple does not currently do any port mapping (stateful firewall hole
poking) for IPv6-only listeners (if an IPv6 socket supports v4-mapped
addresses, a mapping is done).</doc>
      <return-value>
        <doc xml:space="preserve">A pointer to a data structure that can be used to cancel
         the pending listener, or %NULL if unable to obtain a local
         socket to listen on.</doc>
        <type name="NetworkListenData" c:type="PurpleNetworkListenData*"/>
      </return-value>
      <parameters>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The port number to bind to.  Must be greater than 0.</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="socket_family" transfer-ownership="none">
          <doc xml:space="preserve">The protocol family of the socket.  This should be
                AF_INET for IPv4 or AF_INET6 for IPv6.  IPv6 sockets
                may or may not be able to accept IPv4 connections
                based on the system configuration (use
                purple_socket_speaks_ipv4 to check).  If an IPv6
                socket doesn't accept V4-mapped addresses, you will
                need a second listener to support both v4 and v6.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="socket_type" transfer-ownership="none">
          <doc xml:space="preserve">The type of socket to open for listening.
              This will be either SOCK_STREAM for TCP or SOCK_DGRAM for UDP.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="map_external" transfer-ownership="none">
          <doc xml:space="preserve">Should the open port be mapped externally using
               NAT-PNP or UPnP?  (default should be %TRUE)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve">The callback to be invoked when the port to listen on is
     available. The file descriptor of the listening socket will be
     specified in this callback, or -1 if no socket could be established.</doc>
          <type name="NetworkListenCallback"
                c:type="PurpleNetworkListenCallback"/>
        </parameter>
        <parameter name="cb_data" transfer-ownership="none">
          <doc xml:space="preserve">extra data to be returned when cb is called</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_listen_cancel"
              c:identifier="purple_network_listen_cancel">
      <doc xml:space="preserve">This can be used to cancel any in-progress listener connection
by passing in the return value from either purple_network_listen()
or purple_network_listen_range().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="listen_data" transfer-ownership="none">
          <doc xml:space="preserve">This listener attempt will be cancelled and
       the struct will be freed.</doc>
          <type name="NetworkListenData" c:type="PurpleNetworkListenData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_listen_range"
              c:identifier="purple_network_listen_range"
              introspectable="0">
      <doc xml:space="preserve">Opens a listening port selected from a range of ports.  The range of
ports used is chosen in the following manner:
If a range is specified in preferences, these values are used.
If a non-0 values are passed to the function as parameters, these
values are used.
Otherwise a port is chosen at random by the operating system.

This opens a listening port. The caller will want to set up a watcher
of type PURPLE_INPUT_READ on the fd returned in cb. It will probably call
accept in the watcher callback, and then possibly remove the watcher and close
the listening socket, and add a new watcher on the new socket accept
returned.

Libpurple does not currently do any port mapping (stateful firewall hole
poking) for IPv6-only listeners (if an IPv6 socket supports v4-mapped
addresses, a mapping is done).</doc>
      <return-value>
        <doc xml:space="preserve">A pointer to a data structure that can be used to cancel
         the pending listener, or %NULL if unable to obtain a local
         socket to listen on.</doc>
        <type name="NetworkListenData" c:type="PurpleNetworkListenData*"/>
      </return-value>
      <parameters>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve">The port number to bind to, or 0 to pick a random port.
        Users are allowed to override this arg in prefs.</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve">The highest possible port in the range of ports to listen on,
      or 0 to pick a random port.  Users are allowed to override this
      arg in prefs.</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="socket_family" transfer-ownership="none">
          <doc xml:space="preserve">The protocol family of the socket.  This should be
                AF_INET for IPv4 or AF_INET6 for IPv6.  IPv6 sockets
                may or may not be able to accept IPv4 connections
                based on the system configuration (use
                purple_socket_speaks_ipv4 to check).  If an IPv6
                socket doesn't accept V4-mapped addresses, you will
                need a second listener to support both v4 and v6.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="socket_type" transfer-ownership="none">
          <doc xml:space="preserve">The type of socket to open for listening.
              This will be either SOCK_STREAM for TCP or SOCK_DGRAM for UDP.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="map_external" transfer-ownership="none">
          <doc xml:space="preserve">Should the open port be mapped externally using
               NAT-PNP or UPnP?  (default should be %TRUE)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="6">
          <doc xml:space="preserve">The callback to be invoked when the port to listen on is
     available. The file descriptor of the listening socket will be
     specified in this callback, or -1 if no socket could be established.</doc>
          <type name="NetworkListenCallback"
                c:type="PurpleNetworkListenCallback"/>
        </parameter>
        <parameter name="cb_data" transfer-ownership="none">
          <doc xml:space="preserve">extra data to be returned when cb is called</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_remove_port_mapping"
              c:identifier="purple_network_remove_port_mapping">
      <doc xml:space="preserve">Remove a port mapping (UPnP or NAT-PMP) associated with listening socket</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">Socket to remove the port mapping for</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_set_public_ip"
              c:identifier="purple_network_set_public_ip">
      <doc xml:space="preserve">Sets the IP address of the local system in preferences.  This
is the IP address that should be used for incoming connections
(file transfer, direct IM, etc.) and should therefore be
publicly accessible.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ip" transfer-ownership="none">
          <doc xml:space="preserve">The local IP address.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_set_stun_server"
              c:identifier="purple_network_set_stun_server">
      <doc xml:space="preserve">Update the STUN server IP given the host name
Will result in a DNS query being executed asynchronous</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="stun_server" transfer-ownership="none">
          <doc xml:space="preserve">The host name of the STUN server to set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_set_turn_server"
              c:identifier="purple_network_set_turn_server">
      <doc xml:space="preserve">Update the TURN server IP given the host name
Will result in a DNS query being executed asynchronous</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="turn_server" transfer-ownership="none">
          <doc xml:space="preserve">The host name of the TURN server to set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="network_uninit" c:identifier="purple_network_uninit">
      <doc xml:space="preserve">Shuts down the network subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="ntlm_gen_type1" c:identifier="purple_ntlm_gen_type1">
      <doc xml:space="preserve">Generates the base64 encoded type 1 message needed for NTLM authentication</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">base64 encoded string to send to the server.  This should
        be g_free'd by the caller.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="hostname" transfer-ownership="none">
          <doc xml:space="preserve">Your hostname</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">The domain to authenticate to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ntlm_gen_type3" c:identifier="purple_ntlm_gen_type3">
      <doc xml:space="preserve">Generates a type3 message</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A base64 encoded type3 message.  This should be g_free'd by
         the caller.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve">The username</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="passw" transfer-ownership="none">
          <doc xml:space="preserve">The password</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="hostname" transfer-ownership="none">
          <doc xml:space="preserve">The hostname</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">The domain to authenticate against</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nonce" transfer-ownership="none">
          <doc xml:space="preserve">The nonce returned by purple_ntlm_parse_type2</doc>
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve">Pointer to the flags returned by purple_ntlm_parse_type2</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ntlm_parse_type2" c:identifier="purple_ntlm_parse_type2">
      <doc xml:space="preserve">Parses the ntlm type 2 message</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The nonce for use in message type3.  This is a statically
        allocated 8 byte binary string.</doc>
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="type2" transfer-ownership="none">
          <doc xml:space="preserve">String containing the base64 encoded type2 message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve">If not %NULL, this will store the flags for the message</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_add_interface"
              c:identifier="purple_plugin_add_interface">
      <doc xml:space="preserve">Adds a dynamic interface type to an instantiable type.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin that is adding the interface type.</doc>
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
        <parameter name="instance_type" transfer-ownership="none">
          <doc xml:space="preserve">The GType of the instantiable type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_type" transfer-ownership="none">
          <doc xml:space="preserve">The GType of the interface type.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="interface_info" transfer-ownership="none">
          <doc xml:space="preserve">Information used to manage the interface type.</doc>
          <type name="GObject.InterfaceInfo" c:type="const GInterfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_disable" c:identifier="purple_plugin_disable">
      <doc xml:space="preserve">Disable a plugin.

This function adds the plugin to a list of plugins to "disable at the next
startup" by excluding said plugins from the list of plugins to save.  The
UI needs to call purple_plugins_save_loaded() after calling this for it
to have any effect.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_get_dependent_plugins"
              c:identifier="purple_plugin_get_dependent_plugins"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of plugins that depend on a particular plugin.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The list of a plugins that depend on the specified
                          plugin.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin whose dependent plugins are returned.</doc>
          <type name="Plugin" c:type="const PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_get_filename"
              c:identifier="purple_plugin_get_filename">
      <doc xml:space="preserve">Returns a plugin's filename, along with the path.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The plugin's filename.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin.</doc>
          <type name="Plugin" c:type="const PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_get_info"
              c:identifier="purple_plugin_get_info"
              introspectable="0">
      <doc xml:space="preserve">Returns a plugin's #PurplePluginInfo instance.</doc>
      <return-value>
        <doc xml:space="preserve">The plugin's #PurplePluginInfo instance.</doc>
        <type name="PluginInfo" c:type="PurplePluginInfo*"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin.</doc>
          <type name="Plugin" c:type="const PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_is_internal"
              c:identifier="purple_plugin_is_internal">
      <doc xml:space="preserve">Returns whether a plugin is an internal plugin. Internal plugins provide
required additional functionality to the libpurple core. These plugins must
not be shown in plugin lists. Examples of such plugins are in-tree protocol
plugins, loaders etc.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the plugin is an internal plugin, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin.</doc>
          <type name="Plugin" c:type="const PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_is_loaded" c:identifier="purple_plugin_is_loaded">
      <doc xml:space="preserve">Returns whether or not a plugin is currently loaded.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if loaded, or %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin.</doc>
          <type name="Plugin" c:type="const PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_load" c:identifier="purple_plugin_load" throws="1">
      <doc xml:space="preserve">Attempts to load a plugin.

Also see purple_plugin_unload().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if successful or already loaded, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin to load.</doc>
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_register_type"
              c:identifier="purple_plugin_register_type">
      <doc xml:space="preserve">Registers a new dynamic type.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The new GType, or %G_TYPE_INVALID if registration failed.</doc>
        <type name="GType" c:type="GType"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin that is registering the type.</doc>
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve">Type from which this type will be derived.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">Name of the new type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve">Information to initialize and destroy a type's classes and
          instances.</doc>
          <type name="GObject.TypeInfo" c:type="const GTypeInfo*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve">Bitwise combination of values that determines the nature
          (e.g. abstract or not) of the type.</doc>
          <type name="GObject.TypeFlags" c:type="GTypeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_unload"
              c:identifier="purple_plugin_unload"
              throws="1">
      <doc xml:space="preserve">Unloads the specified plugin.

Also see purple_plugin_load().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if successful or not loaded, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="plugin" transfer-ownership="none">
          <doc xml:space="preserve">The plugin handle.</doc>
          <type name="Plugin" c:type="PurplePlugin*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_add_search_path"
              c:identifier="purple_plugins_add_search_path">
      <doc xml:space="preserve">Add a new directory to search for plugins</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve">The new search path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_find_all"
              c:identifier="purple_plugins_find_all"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of all plugins, whether loaded or not.</doc>
      <return-value>
        <doc xml:space="preserve">A list of all plugins. The list is owned by the caller, and must be
        g_list_free()d to avoid leaking the nodes.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="plugins_find_by_filename"
              c:identifier="purple_plugins_find_by_filename"
              introspectable="0">
      <doc xml:space="preserve">Finds a plugin with the specified filename (filename with a path).</doc>
      <return-value>
        <doc xml:space="preserve">The plugin if found, or %NULL if not found.</doc>
        <type name="Plugin" c:type="PurplePlugin*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">The plugin filename.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_find_plugin"
              c:identifier="purple_plugins_find_plugin"
              introspectable="0">
      <doc xml:space="preserve">Finds a plugin with the specified plugin ID.</doc>
      <return-value>
        <doc xml:space="preserve">The plugin if found, or %NULL if not found.</doc>
        <type name="Plugin" c:type="PurplePlugin*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">The plugin ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_get_handle"
              c:identifier="purple_plugins_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the plugin subsystem handle.</doc>
      <return-value>
        <doc xml:space="preserve">The plugin sybsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="plugins_get_loaded"
              c:identifier="purple_plugins_get_loaded"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of all loaded plugins.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A list of all loaded plugins.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="plugins_init" c:identifier="purple_plugins_init">
      <doc xml:space="preserve">Initializes the plugin subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="plugins_load_saved"
              c:identifier="purple_plugins_load_saved">
      <doc xml:space="preserve">Attempts to load all the plugins in the specified preference key
that were loaded when purple last quit.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">The preference key containing the list of plugins.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_refresh" c:identifier="purple_plugins_refresh">
      <doc xml:space="preserve">Forces a refresh of all plugins found in the search paths, and loads plugins
that are to be auto-loaded.

See purple_plugins_add_search_path().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="plugins_save_loaded"
              c:identifier="purple_plugins_save_loaded">
      <doc xml:space="preserve">Saves the list of loaded plugins to the specified preference key.
Plugins that are set to auto-load are not saved.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">The preference key to save the list of plugins to.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugins_uninit" c:identifier="purple_plugins_uninit">
      <doc xml:space="preserve">Uninitializes the plugin subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pmp_create_map" c:identifier="purple_pmp_create_map">
      <doc xml:space="preserve">Remove the NAT-PMP mapping for a specified type on a specified port</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if successful; FALSE if unsuccessful</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">The PurplePmpType</doc>
          <type name="PmpType" c:type="PurplePmpType"/>
        </parameter>
        <parameter name="privateport" transfer-ownership="none">
          <doc xml:space="preserve">The private port on which we are listening locally</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="publicport" transfer-ownership="none">
          <doc xml:space="preserve">The public port on which we are expecting a response</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="lifetime" transfer-ownership="none">
          <doc xml:space="preserve">The lifetime of the mapping. It is recommended that this
                   be PURPLE_PMP_LIFETIME.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pmp_destroy_map" c:identifier="purple_pmp_destroy_map">
      <doc xml:space="preserve">Remove the NAT-PMP mapping for a specified type on a specified port</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if successful; FALSE if unsuccessful</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">The PurplePmpType</doc>
          <type name="PmpType" c:type="PurplePmpType"/>
        </parameter>
        <parameter name="privateport" transfer-ownership="none">
          <doc xml:space="preserve">The private port on which the mapping was previously made</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
      </parameters>
    </function>
    <function name="pmp_get_public_ip" c:identifier="purple_pmp_get_public_ip">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="pmp_init" c:identifier="purple_pmp_init">
      <doc xml:space="preserve">Initialize nat-pmp</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pounce_destroy_all_by_account"
              c:identifier="purple_pounce_destroy_all_by_account"
              moved-to="Pounce.destroy_all_by_account">
      <doc xml:space="preserve">Destroys all buddy pounces for the account</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account to remove all pounces from.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pounce_destroy_all_by_buddy"
              c:identifier="purple_pounce_destroy_all_by_buddy"
              moved-to="Pounce.destroy_all_by_buddy">
      <doc xml:space="preserve">Destroys all buddy pounces for a buddy</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buddy" transfer-ownership="none">
          <doc xml:space="preserve">The buddy whose pounces are to be removed</doc>
          <type name="Buddy" c:type="PurpleBuddy*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pounce_execute"
              c:identifier="purple_pounce_execute"
              moved-to="Pounce.execute">
      <doc xml:space="preserve">Executes a pounce with the specified pouncer, pouncee, and event type.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pouncer" transfer-ownership="none">
          <doc xml:space="preserve">The account that will do the pouncing.</doc>
          <type name="Account" c:type="const PurpleAccount*"/>
        </parameter>
        <parameter name="pouncee" transfer-ownership="none">
          <doc xml:space="preserve">The buddy that is being pounced.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="events" transfer-ownership="none">
          <doc xml:space="preserve">The events that triggered the pounce.</doc>
          <type name="PounceEvent" c:type="PurplePounceEvent"/>
        </parameter>
      </parameters>
    </function>
    <function name="pounces_get_all"
              c:identifier="purple_pounces_get_all"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of all registered buddy pounces.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The list of buddy pounces.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="pounces_get_all_for_ui"
              c:identifier="purple_pounces_get_all_for_ui"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of registered buddy pounces for the ui-type.</doc>
      <return-value>
        <doc xml:space="preserve">The list of buddy pounces. The list should be freed by
        the caller when it's no longer used.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="ui" transfer-ownership="none">
          <doc xml:space="preserve">The ID of the UI using the core.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pounces_get_handle"
              c:identifier="purple_pounces_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the buddy pounce subsystem handle.</doc>
      <return-value>
        <doc xml:space="preserve">The subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="pounces_init" c:identifier="purple_pounces_init">
      <doc xml:space="preserve">Initializes the pounces subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pounces_register_handler"
              c:identifier="purple_pounces_register_handler">
      <doc xml:space="preserve">Registers a pounce handler for a UI.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ui" transfer-ownership="none">
          <doc xml:space="preserve">The UI name.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">The callback function.</doc>
          <type name="PounceCb" c:type="PurplePounceCb"/>
        </parameter>
        <parameter name="new_pounce" transfer-ownership="none">
          <doc xml:space="preserve">The function called when a pounce is created.</doc>
          <type name="gpointer" c:type="gpointer*"/>
        </parameter>
        <parameter name="free_pounce" transfer-ownership="none">
          <doc xml:space="preserve">The function called when a pounce is freed.</doc>
          <type name="gpointer" c:type="gpointer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pounces_uninit" c:identifier="purple_pounces_uninit">
      <doc xml:space="preserve">Uninitializes the pounces subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pounces_unregister_handler"
              c:identifier="purple_pounces_unregister_handler">
      <doc xml:space="preserve">Unregisters a pounce handle for a UI.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ui" transfer-ownership="none">
          <doc xml:space="preserve">The UI name.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_bool" c:identifier="purple_prefs_add_bool">
      <doc xml:space="preserve">Add a new boolean pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_int" c:identifier="purple_prefs_add_int">
      <doc xml:space="preserve">Add a new integer pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_none" c:identifier="purple_prefs_add_none">
      <doc xml:space="preserve">Add a new typeless pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_path" c:identifier="purple_prefs_add_path">
      <doc xml:space="preserve">Add a new path pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_path_list"
              c:identifier="purple_prefs_add_path_list"
              introspectable="0">
      <doc xml:space="preserve">Add a new path list pref.

Note: This function takes a copy of the strings in the value list. The list
      itself and original copies of the strings are up to the caller to
      free.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_string" c:identifier="purple_prefs_add_string">
      <doc xml:space="preserve">Add a new string pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_add_string_list"
              c:identifier="purple_prefs_add_string_list"
              introspectable="0">
      <doc xml:space="preserve">Add a new string list pref.

Note: This function takes a copy of the strings in the value list. The list
      itself and original copies of the strings are up to the caller to
      free.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The initial value to set</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_connect_callback"
              c:identifier="purple_prefs_connect_callback">
      <doc xml:space="preserve">Add a callback to a pref (and its children)

See purple_prefs_disconnect_callback().</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">An id to disconnect the callback</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">The handle of the receiver.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the preference</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="3">
          <doc xml:space="preserve">The callback function</doc>
          <type name="PrefCallback" c:type="PurplePrefCallback"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">The data to pass to the callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_destroy" c:identifier="purple_prefs_destroy">
      <doc xml:space="preserve">Remove all prefs.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="prefs_disconnect_by_handle"
              c:identifier="purple_prefs_disconnect_by_handle">
      <doc xml:space="preserve">Remove all pref callbacks by handle</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_disconnect_callback"
              c:identifier="purple_prefs_disconnect_callback">
      <doc xml:space="preserve">Remove a callback to a pref</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="callback_id" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_exists" c:identifier="purple_prefs_exists">
      <doc xml:space="preserve">Check if a pref exists</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the pref exists.  Otherwise FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_bool" c:identifier="purple_prefs_get_bool">
      <doc xml:space="preserve">Get boolean pref value</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_children_names"
              c:identifier="purple_prefs_get_children_names"
              introspectable="0">
      <doc xml:space="preserve">Returns a list of children for a pref</doc>
      <return-value>
        <doc xml:space="preserve">A list of newly allocated strings denoting the names of the children.
        Returns %NULL if there are no children or if pref doesn't exist.
        The caller must free all the strings and the list.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The parent pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_handle"
              c:identifier="purple_prefs_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the prefs subsystem handle.</doc>
      <return-value>
        <doc xml:space="preserve">The prefs subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="prefs_get_int" c:identifier="purple_prefs_get_int">
      <doc xml:space="preserve">Get integer pref value</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_path" c:identifier="purple_prefs_get_path">
      <doc xml:space="preserve">Get path pref value</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_path_list"
              c:identifier="purple_prefs_get_path_list"
              introspectable="0">
      <doc xml:space="preserve">Get path list pref value</doc>
      <return-value>
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_pref_type"
              c:identifier="purple_prefs_get_pref_type">
      <doc xml:space="preserve">Get pref type</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The type of the pref</doc>
        <type name="PrefType" c:type="PurplePrefType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_string" c:identifier="purple_prefs_get_string">
      <doc xml:space="preserve">Get string pref value</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_get_string_list"
              c:identifier="purple_prefs_get_string_list"
              introspectable="0">
      <doc xml:space="preserve">Get string list pref value</doc>
      <return-value>
        <doc xml:space="preserve">The value of the pref</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_init" c:identifier="purple_prefs_init">
      <doc xml:space="preserve">Initialize core prefs</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="prefs_load" c:identifier="purple_prefs_load">
      <doc xml:space="preserve">Read preferences</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="prefs_remove" c:identifier="purple_prefs_remove">
      <doc xml:space="preserve">Remove a pref.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_rename" c:identifier="purple_prefs_rename">
      <doc xml:space="preserve">Rename a pref</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="oldname" transfer-ownership="none">
          <doc xml:space="preserve">The old name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="newname" transfer-ownership="none">
          <doc xml:space="preserve">The new name for the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_rename_boolean_toggle"
              c:identifier="purple_prefs_rename_boolean_toggle">
      <doc xml:space="preserve">Rename a boolean pref, toggling it's value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="oldname" transfer-ownership="none">
          <doc xml:space="preserve">The old name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="newname" transfer-ownership="none">
          <doc xml:space="preserve">The new name for the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_bool" c:identifier="purple_prefs_set_bool">
      <doc xml:space="preserve">Set boolean pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_int" c:identifier="purple_prefs_set_int">
      <doc xml:space="preserve">Set integer pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_path" c:identifier="purple_prefs_set_path">
      <doc xml:space="preserve">Set path pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_path_list"
              c:identifier="purple_prefs_set_path_list"
              introspectable="0">
      <doc xml:space="preserve">Set path list pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_string" c:identifier="purple_prefs_set_string">
      <doc xml:space="preserve">Set string pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_set_string_list"
              c:identifier="purple_prefs_set_string_list"
              introspectable="0">
      <doc xml:space="preserve">Set string list pref value</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">The name of the pref</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">The value to set</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_trigger_callback"
              c:identifier="purple_prefs_trigger_callback">
      <doc xml:space="preserve">Trigger callbacks as if the pref changed</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="prefs_uninit" c:identifier="purple_prefs_uninit">
      <doc xml:space="preserve">Uninitializes the prefs subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="proxy_connect"
              c:identifier="purple_proxy_connect"
              introspectable="0">
      <doc xml:space="preserve">Makes a connection to the specified host and port.  Note that this
function name can be misleading--although it is called "proxy
connect," it is used for establishing any outgoing TCP connection,
whether through a proxy or not.</doc>
      <return-value>
        <doc xml:space="preserve">NULL if there was an error, or a reference to an
        opaque data structure that can be used to cancel
        the pending connection, if needed.</doc>
        <type name="ProxyConnectData" c:type="PurpleProxyConnectData*"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">A handle that should be associated with this
             connection attempt.  The handle can be used
             to cancel the connection attempt using the
             purple_proxy_connect_cancel_with_handle()
             function.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The destination host.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The destination port.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="connect_cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve">The function to call when the connection is
             established.  If the connection failed then
             fd will be -1 and error message will be set
             to something descriptive (hopefully).</doc>
          <type name="ProxyConnectFunction"
                c:type="PurpleProxyConnectFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_connect_cancel"
              c:identifier="purple_proxy_connect_cancel">
      <doc xml:space="preserve">Cancel an in-progress connection attempt.  This should be called
by the protocol if the user disables an account while it is still
performing the initial sign on.  Or when establishing a file
transfer, if we attempt to connect to a remote user but they
are behind a firewall then the protocol can cancel the connection
attempt early rather than just letting the OS's TCP/IP stack
time-out the connection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connect_data" transfer-ownership="none">
          <type name="ProxyConnectData" c:type="PurpleProxyConnectData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_connect_cancel_with_handle"
              c:identifier="purple_proxy_connect_cancel_with_handle">
      <doc xml:space="preserve">Closes all proxy connections registered with the specified handle.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">The handle.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_connect_socks5_account"
              c:identifier="purple_proxy_connect_socks5_account"
              introspectable="0">
      <doc xml:space="preserve">Makes a connection through a SOCKS5 proxy.

Note that if the account that is making the connection uses a proxy, this
connection to a SOCKS5 proxy will be made through the account proxy.</doc>
      <return-value>
        <doc xml:space="preserve">NULL if there was an error, or a reference to an
        opaque data structure that can be used to cancel
        the pending connection, if needed.</doc>
        <type name="ProxyConnectData" c:type="PurpleProxyConnectData*"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">A handle that should be associated with this
             connection attempt.  The handle can be used
             to cancel the connection attempt using the
             purple_proxy_connect_cancel_with_handle()
             function.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="gpi" transfer-ownership="none">
          <doc xml:space="preserve">The PurpleProxyInfo specifying the proxy settings</doc>
          <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The destination host.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The destination port.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="connect_cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="6">
          <doc xml:space="preserve">The function to call when the connection is
             established.  If the connection failed then
             fd will be -1 and error message will be set
             to something descriptive (hopefully).</doc>
          <type name="ProxyConnectFunction"
                c:type="PurpleProxyConnectFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_connect_udp"
              c:identifier="purple_proxy_connect_udp"
              introspectable="0">
      <doc xml:space="preserve">Makes a connection to the specified host and port.  Note that this
function name can be misleading--although it is called "proxy
connect," it is used for establishing any outgoing UDP connection,
whether through a proxy or not.</doc>
      <return-value>
        <doc xml:space="preserve">NULL if there was an error, or a reference to an
        opaque data structure that can be used to cancel
        the pending connection, if needed.</doc>
        <type name="ProxyConnectData" c:type="PurpleProxyConnectData*"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">A handle that should be associated with this
             connection attempt.  The handle can be used
             to cancel the connection attempt using the
             purple_proxy_connect_cancel_with_handle()
             function.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The destination host.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The destination port.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="connect_cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve">The function to call when the connection is
             established.  If the connection failed then
             fd will be -1 and error message will be set
             to something descriptive (hopefully).</doc>
          <type name="ProxyConnectFunction"
                c:type="PurpleProxyConnectFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_get_handle"
              c:identifier="purple_proxy_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the proxy subsystem handle.</doc>
      <return-value>
        <doc xml:space="preserve">The proxy subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="proxy_get_setup"
              c:identifier="purple_proxy_get_setup"
              introspectable="0">
      <doc xml:space="preserve">Returns configuration of a proxy.</doc>
      <return-value>
        <doc xml:space="preserve">The configuration of a proxy.</doc>
        <type name="ProxyInfo" c:type="PurpleProxyInfo*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account for which the configuration is needed.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="proxy_init" c:identifier="purple_proxy_init">
      <doc xml:space="preserve">Initializes the proxy subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="proxy_uninit" c:identifier="purple_proxy_uninit">
      <doc xml:space="preserve">Uninitializes the proxy subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="savedstatus_delete"
              c:identifier="purple_savedstatus_delete"
              moved-to="SavedStatus.delete">
      <doc xml:space="preserve">Delete a saved status.  This removes the saved status from the list
of saved statuses, and writes the revised list to status.xml.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the status was successfully deleted.  FALSE if the
        status could not be deleted because no saved status exists
        with the given title.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="title" transfer-ownership="none">
          <doc xml:space="preserve">The title of the saved status.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatus_find"
              c:identifier="purple_savedstatus_find"
              moved-to="SavedStatus.find">
      <doc xml:space="preserve">Finds a saved status with the specified title.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The saved status if found, or NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
      <parameters>
        <parameter name="title" transfer-ownership="none">
          <doc xml:space="preserve">The name of the saved status.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatus_find_by_creation_time"
              c:identifier="purple_savedstatus_find_by_creation_time"
              moved-to="SavedStatus.find_by_creation_time">
      <doc xml:space="preserve">Finds a saved status with the specified creation time.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The saved status if found, or NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
      <parameters>
        <parameter name="creation_time" transfer-ownership="none">
          <doc xml:space="preserve">The timestamp when the saved
       status was created.</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatus_find_transient_by_type_and_message"
              c:identifier="purple_savedstatus_find_transient_by_type_and_message"
              moved-to="SavedStatus.find_transient_by_type_and_message">
      <doc xml:space="preserve">Finds a saved status with the specified primitive and message.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The saved status if found, or NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">The PurpleStatusPrimitive for the status you're trying
       to find.</doc>
          <type name="StatusPrimitive" c:type="PurpleStatusPrimitive"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve">The message for the status you're trying
       to find.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatus_get_current"
              c:identifier="purple_savedstatus_get_current"
              moved-to="SavedStatus.get_current">
      <doc xml:space="preserve">Returns the currently selected saved status.  If we are idle
then this returns purple_savedstatus_get_idleaway().  Otherwise
it returns purple_savedstatus_get_default().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A pointer to the in-use PurpleSavedStatus.
        This function never returns NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
    </function>
    <function name="savedstatus_get_default"
              c:identifier="purple_savedstatus_get_default"
              moved-to="SavedStatus.get_default">
      <doc xml:space="preserve">Returns the default saved status that is used when our
accounts are not idle-away.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A pointer to the in-use PurpleSavedStatus.
        This function never returns NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
    </function>
    <function name="savedstatus_get_idleaway"
              c:identifier="purple_savedstatus_get_idleaway"
              moved-to="SavedStatus.get_idleaway">
      <doc xml:space="preserve">Returns the saved status that is used when your
accounts become idle-away.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A pointer to the idle-away PurpleSavedStatus.
        This function never returns NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
    </function>
    <function name="savedstatus_get_startup"
              c:identifier="purple_savedstatus_get_startup"
              moved-to="SavedStatus.get_startup">
      <doc xml:space="preserve">Returns the status to be used when purple is starting up</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A pointer to the startup PurpleSavedStatus.
        This function never returns NULL.</doc>
        <type name="SavedStatus" c:type="PurpleSavedStatus*"/>
      </return-value>
    </function>
    <function name="savedstatus_is_idleaway"
              c:identifier="purple_savedstatus_is_idleaway"
              moved-to="SavedStatus.is_idleaway">
      <doc xml:space="preserve">Return TRUE if we are currently idle-away.  Otherwise
returns FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if our accounts have been set to idle-away.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="savedstatus_set_idleaway"
              c:identifier="purple_savedstatus_set_idleaway"
              moved-to="SavedStatus.set_idleaway">
      <doc xml:space="preserve">Set whether accounts in Purple are idle-away or not.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="idleaway" transfer-ownership="none">
          <doc xml:space="preserve">TRUE if accounts should be switched to use the
                idle-away saved status.  FALSE if they should
                be switched to use the default status.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatus_substatus_get_message"
              c:identifier="purple_savedstatus_substatus_get_message"
              moved-to="SavedStatus.substatus_get_message">
      <doc xml:space="preserve">Get the message of a given substatus.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The message of the substatus, or NULL if this substatus does
        not have a message.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="substatus" transfer-ownership="none">
          <doc xml:space="preserve">The substatus.</doc>
          <type name="SavedStatusSub" c:type="const PurpleSavedStatusSub*"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatuses_get_all"
              c:identifier="purple_savedstatuses_get_all"
              introspectable="0">
      <doc xml:space="preserve">Returns all saved statuses.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A list of saved statuses.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="savedstatuses_get_handle"
              c:identifier="purple_savedstatuses_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Get the handle for the status subsystem.</doc>
      <return-value>
        <doc xml:space="preserve">the handle to the status subsystem</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="savedstatuses_get_popular"
              c:identifier="purple_savedstatuses_get_popular"
              introspectable="0">
      <doc xml:space="preserve">Returns the n most popular saved statuses.  "Popularity" is
determined by when the last time a saved_status was used and
how many times it has been used. Transient statuses without
messages are not included in the list.</doc>
      <return-value>
        <doc xml:space="preserve">A linked list containing at most how_many
        PurpleSavedStatuses.  This list should be
        g_list_free'd by the caller (but the
        PurpleSavedStatuses must not be free'd).</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="how_many" transfer-ownership="none">
          <doc xml:space="preserve">The maximum number of saved statuses
                to return, or '0' to get all saved
                statuses sorted by popularity.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="savedstatuses_init"
              c:identifier="purple_savedstatuses_init">
      <doc xml:space="preserve">Initializes the status subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="savedstatuses_uninit"
              c:identifier="purple_savedstatuses_uninit">
      <doc xml:space="preserve">Uninitializes the status subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="smarshal_BOOLEAN__OBJECT"
              c:identifier="purple_smarshal_BOOLEAN__OBJECT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_BOOLEAN__OBJECT_POINTER_STRING"
              c:identifier="purple_smarshal_BOOLEAN__OBJECT_POINTER_STRING">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__ENUM_STRING_STRING"
              c:identifier="purple_smarshal_VOID__ENUM_STRING_STRING">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__ENUM_STRING_STRING_BOOLEAN"
              c:identifier="purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__FLAGS_FLAGS"
              c:identifier="purple_smarshal_VOID__FLAGS_FLAGS">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__POINTER_POINTER_OBJECT"
              c:identifier="purple_smarshal_VOID__POINTER_POINTER_OBJECT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT"
              c:identifier="purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__STRING_STRING"
              c:identifier="purple_smarshal_VOID__STRING_STRING">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__STRING_STRING_DOUBLE"
              c:identifier="purple_smarshal_VOID__STRING_STRING_DOUBLE">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smarshal_VOID__STRING_STRING_OBJECT_OBJECT"
              c:identifier="purple_smarshal_VOID__STRING_STRING_OBJECT_OBJECT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smiley_custom_add"
              c:identifier="purple_smiley_custom_add"
              introspectable="0">
      <doc xml:space="preserve">Adds a new smiley to the store. The @shortcut should be unique, but the
@image contents don't have to.</doc>
      <return-value>
        <doc xml:space="preserve">a new #PurpleSmiley, or %NULL if error occured.</doc>
        <type c:type="PurpleSmiley*"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve">the smiley's image.</doc>
          <type c:type="PurpleImage*"/>
        </parameter>
        <parameter name="shortcut" transfer-ownership="none">
          <doc xml:space="preserve">textual representation of a smiley.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="smiley_custom_get_list"
              c:identifier="purple_smiley_custom_get_list"
              introspectable="0">
      <doc xml:space="preserve">Returns the whole list of user-configured custom smileys.</doc>
      <return-value>
        <doc xml:space="preserve">a #PurpleSmileyList of custom smileys.</doc>
        <type c:type="PurpleSmileyList*"/>
      </return-value>
    </function>
    <function name="smiley_custom_remove"
              c:identifier="purple_smiley_custom_remove"
              introspectable="0">
      <doc xml:space="preserve">Removes a @smiley from the store. If the @smiley file is unique (not used by
other smileys) it will be removed from a disk.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="smiley" transfer-ownership="none">
          <doc xml:space="preserve">the smiley to be removed.</doc>
          <type c:type="PurpleSmiley*"/>
        </parameter>
      </parameters>
    </function>
    <function name="smiley_parser_find"
              c:identifier="purple_smiley_parser_find"
              introspectable="0">
      <doc xml:space="preserve">Searches for all smileys from the @smileys list present in @message.
Each smiley is returned only once, regardless how many times it appeared in
text. However, distinct smileys may share common image file (thus, their
paths will be the same).</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">the #GList of found smileys. Use #g_list_free
         when no longer need it.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="smileys" transfer-ownership="none">
          <doc xml:space="preserve">the list of smileys to find.</doc>
          <type c:type="PurpleSmileyList*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve">the message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="is_html" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the message is HTML, %FALSE if it's plain, unescaped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="smiley_parser_replace"
              c:identifier="purple_smiley_parser_replace"
              introspectable="0">
      <doc xml:space="preserve">Replaces all textual smiley representations from @smileys list with images.

This function is intended for replacing custom smileys before sending to the
other party. For replacing all sets of smileys (custom, remote and theme) at
once (ie. before displaying), use #purple_smiley_parser_smileify.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the smileifed message. Should be #g_free'd when
         done using it. Returns %NULL if and only if @html_message was %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="smileys" transfer-ownership="none">
          <doc xml:space="preserve">the list of smileys to replace.</doc>
          <type c:type="PurpleSmileyList*"/>
        </parameter>
        <parameter name="html_message" transfer-ownership="none">
          <doc xml:space="preserve">the html message, or escaped plain message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="3">
          <doc xml:space="preserve">the callback to replace smiley text with an image.</doc>
          <type name="SmileyParseCb" c:type="PurpleSmileyParseCb"/>
        </parameter>
        <parameter name="ui_data" transfer-ownership="none">
          <doc xml:space="preserve">the user data to be passed to @cb.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="smiley_parser_smileify"
              c:identifier="purple_smiley_parser_smileify"
              introspectable="0">
      <doc xml:space="preserve">Replaces all textual smiley representations with proper smiley images
configured for libpurple.

The @use_remote_smileys parameter should be %TRUE for incoming messages,
%FALSE for outgoing.

This function is intended for replacing all smileys before displaying. For
replacing custom smileys before sending to the other party,
see #purple_smiley_parser_replace.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the smileifed message. Should be #g_free'd when
         done using it. Returns %NULL if and only if @html_message was %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="conv" transfer-ownership="none">
          <doc xml:space="preserve">the conversation of a message.</doc>
          <type c:type="PurpleConversation*"/>
        </parameter>
        <parameter name="html_message" transfer-ownership="none">
          <doc xml:space="preserve">the html message, or escaped plain message.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="use_remote_smileys" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if remote smileys of @conv should be parsed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="4">
          <doc xml:space="preserve">the callback to replace smiley text with an image.</doc>
          <type name="SmileyParseCb" c:type="PurpleSmileyParseCb"/>
        </parameter>
        <parameter name="ui_data" transfer-ownership="none">
          <doc xml:space="preserve">the user data to be passed to @cb and
          #purple_smiley_theme_get_smileys.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="sound_get_ui_ops" c:identifier="purple_sound_get_ui_ops">
      <doc xml:space="preserve">Gets the UI sound operations</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI sound operations structure.</doc>
        <type name="SoundUiOps" c:type="PurpleSoundUiOps*"/>
      </return-value>
    </function>
    <function name="sound_init" c:identifier="purple_sound_init">
      <doc xml:space="preserve">Initializes the sound subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="sound_play_event" c:identifier="purple_sound_play_event">
      <doc xml:space="preserve">Plays the sound associated with the specified event.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve">The event.</doc>
          <type name="SoundEventID" c:type="PurpleSoundEventID"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account that this sound is associated with, or
       NULL if the sound is not associated with any specific
       account.  This is needed for the "sounds while away?"
       preference to work correctly.</doc>
          <type name="Account" c:type="const PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sound_play_file" c:identifier="purple_sound_play_file">
      <doc xml:space="preserve">Plays the specified sound file.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">The file to play.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account that this sound is associated with, or
       NULL if the sound is not associated with any specific
       account.  This is needed for the "sounds while away?"
       preference to work correctly.</doc>
          <type name="Account" c:type="const PurpleAccount*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sound_set_ui_ops" c:identifier="purple_sound_set_ui_ops">
      <doc xml:space="preserve">Sets the UI sound operations</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI sound operations structure.</doc>
          <type name="SoundUiOps" c:type="PurpleSoundUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sound_uninit" c:identifier="purple_sound_uninit">
      <doc xml:space="preserve">Shuts down the sound subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="sounds_get_handle"
              c:identifier="purple_sounds_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the sound subsystem handle.</doc>
      <return-value>
        <doc xml:space="preserve">The sound subsystem handle.</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="srv_resolve"
              c:identifier="purple_srv_resolve"
              introspectable="0">
      <doc xml:space="preserve">Queries an SRV record.</doc>
      <return-value>
        <doc xml:space="preserve">%NULL if there was an error, otherwise return a reference to
         a data structure that can be used to cancel the pending
         DNS query, if needed.</doc>
        <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account that the query is being done for (or %NULL)</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:space="preserve">Name of the protocol (e.g. "sip")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="transport" transfer-ownership="none">
          <doc xml:space="preserve">Name of the transport ("tcp" or "udp")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">Domain name to query (e.g. "blubb.com")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve">A callback which will be called with the results</doc>
          <type name="SrvCallback" c:type="PurpleSrvCallback"/>
        </parameter>
        <parameter name="extradata" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="srv_txt_query_destroy"
              c:identifier="purple_srv_txt_query_destroy">
      <doc xml:space="preserve">Cancel a SRV/TXT query and destroy the associated data structure.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The SRV/TXT query to cancel.  This data structure
       is freed by this function.</doc>
          <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="srv_txt_query_get_query"
              c:identifier="purple_srv_txt_query_get_query">
      <doc xml:space="preserve">Get the query from a PurpleSrvTxtQueryData</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The query.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The SRV/TXT query</doc>
          <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="srv_txt_query_get_query_type"
              c:identifier="purple_srv_txt_query_get_query_type">
      <doc xml:space="preserve">Get the type from a PurpleSrvTxtQueryData (TXT or SRV)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The query type.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="query_data" transfer-ownership="none">
          <doc xml:space="preserve">The query</doc>
          <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="srv_txt_query_get_ui_ops"
              c:identifier="purple_srv_txt_query_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure to be used when doing a SRV/TXT
resolve.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure.</doc>
        <type name="SrvTxtQueryUiOps" c:type="PurpleSrvTxtQueryUiOps*"/>
      </return-value>
    </function>
    <function name="srv_txt_query_set_ui_ops"
              c:identifier="purple_srv_txt_query_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used when doing a SRV/TXT
resolve.  The UI operations need only be set if the UI wants to
handle the resolve itself; otherwise, leave it as NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="SrvTxtQueryUiOps" c:type="PurpleSrvTxtQueryUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_close" c:identifier="purple_ssl_close">
      <doc xml:space="preserve">Closes a SSL connection.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection to close.</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_connect"
              c:identifier="purple_ssl_connect"
              introspectable="0">
      <doc xml:space="preserve">Makes a SSL connection to the specified host and port.  The caller
should keep track of the returned value and use it to cancel the
connection, if needed.</doc>
      <return-value>
        <doc xml:space="preserve">The SSL connection handle.</doc>
        <type name="SslConnection" c:type="PurpleSslConnection*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The destination host.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The destination port.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve">The SSL input handler function.</doc>
          <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
        </parameter>
        <parameter name="error_func" transfer-ownership="none" closure="5">
          <doc xml:space="preserve">The SSL error handler function.  This function
             should &lt;emphasis&gt;NOT&lt;/emphasis&gt; call purple_ssl_close(). In
             the event of an error the #PurpleSslConnection will be
             destroyed for you.</doc>
          <type name="SslErrorFunction" c:type="PurpleSslErrorFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_connect_with_host_fd"
              c:identifier="purple_ssl_connect_with_host_fd"
              introspectable="0">
      <doc xml:space="preserve">Makes a SSL connection using an already open file descriptor.</doc>
      <return-value>
        <doc xml:space="preserve">The SSL connection handle.</doc>
        <type name="SslConnection" c:type="PurpleSslConnection*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="fd" transfer-ownership="none">
          <doc xml:space="preserve">The file descriptor.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve">The SSL input handler function.</doc>
          <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
        </parameter>
        <parameter name="error_func" transfer-ownership="none" closure="5">
          <doc xml:space="preserve">The SSL error handler function.</doc>
          <type name="SslErrorFunction" c:type="PurpleSslErrorFunction"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The hostname of the other peer (to verify the CN)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_connect_with_ssl_cn"
              c:identifier="purple_ssl_connect_with_ssl_cn"
              introspectable="0">
      <doc xml:space="preserve">Makes a SSL connection to the specified host and port, using the separate
name to verify with the certificate.  The caller should keep track of the
returned value and use it to cancel the connection, if needed.</doc>
      <return-value>
        <doc xml:space="preserve">The SSL connection handle.</doc>
        <type name="SslConnection" c:type="PurpleSslConnection*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account making the connection.</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">The destination host.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <doc xml:space="preserve">The destination port.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve">The SSL input handler function.</doc>
          <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
        </parameter>
        <parameter name="error_func" transfer-ownership="none" closure="6">
          <doc xml:space="preserve">The SSL error handler function.  This function
             should &lt;emphasis&gt;NOT&lt;/emphasis&gt; call purple_ssl_close(). In
             the event of an error the #PurpleSslConnection will be
             destroyed for you.</doc>
          <type name="SslErrorFunction" c:type="PurpleSslErrorFunction"/>
        </parameter>
        <parameter name="ssl_host" transfer-ownership="none">
          <doc xml:space="preserve">The hostname of the other peer (to verify the CN)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_get_ops"
              c:identifier="purple_ssl_get_ops"
              introspectable="0">
      <doc xml:space="preserve">Returns the current SSL operations structure.</doc>
      <return-value>
        <doc xml:space="preserve">The SSL operations structure.</doc>
        <type name="SslOps" c:type="PurpleSslOps*"/>
      </return-value>
    </function>
    <function name="ssl_get_peer_certificates"
              c:identifier="purple_ssl_get_peer_certificates"
              introspectable="0">
      <doc xml:space="preserve">Obtains the peer's presented certificates</doc>
      <return-value>
        <doc xml:space="preserve">The peer certificate chain, in the order of certificate, issuer,
        issuer's issuer, etc. %NULL if no certificates have been provided,</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection handle</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_init" c:identifier="purple_ssl_init">
      <doc xml:space="preserve">Initializes the SSL subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="ssl_input_add"
              c:identifier="purple_ssl_input_add"
              introspectable="0">
      <doc xml:space="preserve">Adds an input watcher for the specified SSL connection.
Once the SSL handshake is complete, use this to watch for actual data across it.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection handle.</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">The callback function.</doc>
          <type name="SslInputFunction" c:type="PurpleSslInputFunction"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">User-defined data.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_input_remove" c:identifier="purple_ssl_input_remove">
      <doc xml:space="preserve">Removes an input watcher, added with purple_ssl_input_add().

If there is no input watcher set, does nothing.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection handle.</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_is_supported" c:identifier="purple_ssl_is_supported">
      <doc xml:space="preserve">Returns whether or not SSL is currently supported.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if SSL is supported, or %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="ssl_read" c:identifier="purple_ssl_read">
      <doc xml:space="preserve">Reads data from an SSL connection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The number of bytes read.</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection handle.</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve">The destination buffer.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">The maximum number of bytes to read.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_set_ops" c:identifier="purple_ssl_set_ops">
      <doc xml:space="preserve">Sets the current SSL operations structure.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The SSL operations structure to assign.</doc>
          <type name="SslOps" c:type="PurpleSslOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_strerror" c:identifier="purple_ssl_strerror">
      <doc xml:space="preserve">Returns a human-readable string for an SSL error.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">Human-readable error explanation</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">Error code</doc>
          <type name="SslErrorType" c:type="PurpleSslErrorType"/>
        </parameter>
      </parameters>
    </function>
    <function name="ssl_uninit" c:identifier="purple_ssl_uninit">
      <doc xml:space="preserve">Uninitializes the SSL subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="ssl_write" c:identifier="purple_ssl_write">
      <doc xml:space="preserve">Writes data to an SSL connection.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The number of bytes written.</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="gsc" transfer-ownership="none">
          <doc xml:space="preserve">The SSL connection handle.</doc>
          <type name="SslConnection" c:type="PurpleSslConnection*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve">The buffer to write.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve">The length of the data to write.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="stun_discover"
              c:identifier="purple_stun_discover"
              introspectable="0">
      <doc xml:space="preserve">Starts a NAT discovery. It returns a PurpleStunNatDiscovery if the discovery
is already done. Otherwise the callback is called when the discovery is over
and NULL is returned.</doc>
      <return-value>
        <doc xml:space="preserve">a PurpleStunNatDiscovery which includes the public IP and the type
        of NAT or NULL is discovery would block</doc>
        <type name="StunNatDiscovery" c:type="PurpleStunNatDiscovery*"/>
      </return-value>
      <parameters>
        <parameter name="cb" transfer-ownership="none">
          <doc xml:space="preserve">The callback to call when the STUN discovery is finished if the
          discovery would block.  If the discovery is done, this is NOT
          called.</doc>
          <type name="StunCallback" c:type="PurpleStunCallback"/>
        </parameter>
      </parameters>
    </function>
    <function name="stun_init" c:identifier="purple_stun_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="timeout_add" c:identifier="purple_timeout_add">
      <doc xml:space="preserve">Creates a callback timer.

The timer will repeat until the function returns %FALSE. The
first call will be at the end of the first interval.

If the timer is in a multiple of seconds, use purple_timeout_add_seconds()
instead as it allows UIs to group timers for power efficiency.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A handle to the timer which can be passed to
        purple_timeout_remove() to remove the timer.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">The time between calls of the function, in milliseconds.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">The function to call.</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">data to pass to @function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="timeout_add_seconds"
              c:identifier="purple_timeout_add_seconds">
      <doc xml:space="preserve">Creates a callback timer.

The timer will repeat until the function returns %FALSE. The
first call will be at the end of the first interval.

This function allows UIs to group timers for better power efficiency.  For
this reason, @interval may be rounded by up to a second.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A handle to the timer which can be passed to
        purple_timeout_remove() to remove the timer.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve">The time between calls of the function, in seconds.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve">The function to call.</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">data to pass to @function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="timeout_remove" c:identifier="purple_timeout_remove">
      <doc xml:space="preserve">Removes a timeout handler.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the handler was successfully removed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve">The handle, as returned by purple_timeout_add().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="txt_resolve"
              c:identifier="purple_txt_resolve"
              introspectable="0">
      <doc xml:space="preserve">Queries an TXT record.</doc>
      <return-value>
        <doc xml:space="preserve">%NULL if there was an error, otherwise return a reference to
         a data structure that can be used to cancel the pending
         DNS query, if needed.</doc>
        <type name="SrvTxtQueryData" c:type="PurpleSrvTxtQueryData*"/>
      </return-value>
      <parameters>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve">The account that the query is being done for (or %NULL)</doc>
          <type name="Account" c:type="PurpleAccount*"/>
        </parameter>
        <parameter name="owner" transfer-ownership="none">
          <doc xml:space="preserve">Name of the protocol (e.g. "_xmppconnect")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">Domain name to query (e.g. "blubb.com")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="cb"
                   transfer-ownership="none"
                   scope="call"
                   closure="4">
          <doc xml:space="preserve">A callback which will be called with the results</doc>
          <type name="TxtCallback" c:type="PurpleTxtCallback"/>
        </parameter>
        <parameter name="extradata" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="upnp_cancel_port_mapping"
              c:identifier="purple_upnp_cancel_port_mapping">
      <doc xml:space="preserve">Cancel a pending port mapping request initiated with either
purple_upnp_set_port_mapping() or purple_upnp_remove_port_mapping().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mapping_data" transfer-ownership="none">
          <doc xml:space="preserve">The data returned when you initiated the UPnP mapping request.</doc>
          <type name="UPnPMappingAddRemove"
                c:type="PurpleUPnPMappingAddRemove*"/>
        </parameter>
      </parameters>
    </function>
    <function name="upnp_discover"
              c:identifier="purple_upnp_discover"
              introspectable="0">
      <doc xml:space="preserve">Sends a discovery request to search for a UPnP enabled IGD that
contains the WANIPConnection service that will allow us to recieve the
public IP address of the IGD, and control it for forwarding ports.
The result will be cached for further use.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cb" transfer-ownership="none" closure="1">
          <doc xml:space="preserve">an optional callback function to be notified when the UPnP
          discovery is complete</doc>
          <type name="UPnPCallback" c:type="PurpleUPnPCallback"/>
        </parameter>
        <parameter name="cb_data" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="upnp_get_public_ip"
              c:identifier="purple_upnp_get_public_ip">
      <doc xml:space="preserve">Gets the IP address from a UPnP enabled IGD that sits on the local
network, so when getting the network IP, instead of returning the
local network IP, the public IP is retrieved.  This is a cached value from
the time of the UPnP discovery.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The IP address of the network, or NULL if something went wrong</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="upnp_init" c:identifier="purple_upnp_init">
      <doc xml:space="preserve">Initialize UPnP</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="upnp_remove_port_mapping"
              c:identifier="purple_upnp_remove_port_mapping"
              introspectable="0">
      <doc xml:space="preserve">Deletes a port mapping in a UPnP enabled IGD that sits on the local network
to this purple client. Essentially, this function takes care of deleting the
port forwarding after they have completed a connection so another client on
the local network can take advantage of the port forwarding</doc>
      <return-value>
        <doc xml:space="preserve">Data which can be passed to purple_upnp_cancel_port_mapping() to
         cancel</doc>
        <type name="UPnPMappingAddRemove"
              c:type="PurpleUPnPMappingAddRemove*"/>
      </return-value>
      <parameters>
        <parameter name="portmap" transfer-ownership="none">
          <doc xml:space="preserve">The port to delete the mapping for</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:space="preserve">The protocol to map to. Either "TCP" or "UDP"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="3">
          <doc xml:space="preserve">an optional callback function to be notified when the mapping
          removal is complete</doc>
          <type name="UPnPCallback" c:type="PurpleUPnPCallback"/>
        </parameter>
        <parameter name="cb_data" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="upnp_set_port_mapping"
              c:identifier="purple_upnp_set_port_mapping"
              introspectable="0">
      <doc xml:space="preserve">Maps Ports in a UPnP enabled IGD that sits on the local network to
this purple client. Essentially, this function takes care of the port
forwarding so things like file transfers can work behind NAT firewalls</doc>
      <return-value>
        <doc xml:space="preserve">Data which can be passed to purple_upnp_cancel_port_mapping() to
         cancel</doc>
        <type name="UPnPMappingAddRemove"
              c:type="PurpleUPnPMappingAddRemove*"/>
      </return-value>
      <parameters>
        <parameter name="portmap" transfer-ownership="none">
          <doc xml:space="preserve">The port to map to this client</doc>
          <type name="gushort" c:type="unsigned short"/>
        </parameter>
        <parameter name="protocol" transfer-ownership="none">
          <doc xml:space="preserve">The protocol to map, either "TCP" or "UDP"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cb" transfer-ownership="none" closure="3">
          <doc xml:space="preserve">an optional callback function to be notified when the mapping
          addition is complete</doc>
          <type name="UPnPCallback" c:type="PurpleUPnPCallback"/>
        </parameter>
        <parameter name="cb_data" transfer-ownership="none">
          <doc xml:space="preserve">Extra data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="version_check" c:identifier="purple_version_check">
      <doc xml:space="preserve">Checks that the libpurple version is compatible with the requested
version</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%NULL if the versions are compatible, or a string describing
         the version mismatch if not compatible.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc xml:space="preserve">the required major version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc xml:space="preserve">the required minor version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc xml:space="preserve">the required micro version.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="xfers_get_all"
              c:identifier="purple_xfers_get_all"
              introspectable="0">
      <doc xml:space="preserve">Returns all xfers</doc>
      <return-value>
        <doc xml:space="preserve">all current xfers with refs</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="xfers_get_handle"
              c:identifier="purple_xfers_get_handle"
              introspectable="0">
      <doc xml:space="preserve">Returns the handle to the file transfer subsystem</doc>
      <return-value>
        <doc xml:space="preserve">The handle</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
    </function>
    <function name="xfers_get_ui_ops" c:identifier="purple_xfers_get_ui_ops">
      <doc xml:space="preserve">Returns the UI operations structure to be used in all purple file transfers.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The UI operations structure.</doc>
        <type name="XferUiOps" c:type="PurpleXferUiOps*"/>
      </return-value>
    </function>
    <function name="xfers_init" c:identifier="purple_xfers_init">
      <doc xml:space="preserve">Initializes the file transfer subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="xfers_set_ui_ops" c:identifier="purple_xfers_set_ui_ops">
      <doc xml:space="preserve">Sets the UI operations structure to be used in all purple file transfers.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ops" transfer-ownership="none">
          <doc xml:space="preserve">The UI operations structure.</doc>
          <type name="XferUiOps" c:type="PurpleXferUiOps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xfers_uninit" c:identifier="purple_xfers_uninit">
      <doc xml:space="preserve">Uninitializes the file transfer subsystem</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
