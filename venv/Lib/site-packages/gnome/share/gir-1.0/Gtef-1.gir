<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gtk" version="3.0"/>
  <include name="GtkSource" version="3.0"/>
  <package name="gtef-1"/>
  <c:include name="gtef/gtef.h"/>
  <namespace name="Gtef"
             version="1"
             shared-library="libgtef-1-0.dll"
             c:identifier-prefixes="Gtef"
             c:symbol-prefixes="gtef">
    <alias name="Buffer_autoptr" c:type="GtefBuffer_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="FileLoader_autoptr" c:type="GtefFileLoader_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="FileMetadata_autoptr" c:type="GtefFileMetadata_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="File_autoptr" c:type="GtefFile_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="FoldRegion_autoptr" c:type="GtefFoldRegion_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="GutterRendererFolds_autoptr"
           c:type="GtefGutterRendererFolds_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="InfoBar_autoptr" c:type="GtefInfoBar_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="Tab_autoptr" c:type="GtefTab_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <alias name="View_autoptr" c:type="GtefView_autoptr">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <class name="Buffer"
           c:symbol-prefix="buffer"
           c:type="GtefBuffer"
           parent="GtkSource.Buffer"
           glib:type-name="GtefBuffer"
           glib:get-type="gtef_buffer_get_type"
           glib:type-struct="BufferClass">
      <constructor name="new" c:identifier="gtef_buffer_new" version="1.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefBuffer.</doc>
          <type name="Buffer" c:type="GtefBuffer*"/>
        </return-value>
      </constructor>
      <virtual-method name="cursor_moved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="GtefBuffer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_file"
              c:identifier="gtef_buffer_get_file"
              version="1.0">
        <doc xml:space="preserve">Returns the #GtefFile of @buffer. The returned object is guaranteed to be the
same for the lifetime of @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the associated #GtefFile.</doc>
          <type name="File" c:type="GtefFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefBuffer.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selection_type"
              c:identifier="gtef_buffer_get_selection_type"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current #GtefSelectionType.</doc>
          <type name="SelectionType" c:type="GtefSelectionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefBuffer.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="gtef_buffer_get_title"
              version="1.0">
        <doc xml:space="preserve">Returns a title suitable for a #GtkWindow title. It contains (in that order):
- '*' if the buffer is modified;
- the #GtefFile:short-name;
- the directory path in parenthesis if the #GtefFile:location isn't
  %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the @buffer title. Free the return value with g_free() when no
longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefBuffer.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_untouched"
              c:identifier="gtef_buffer_is_untouched"
              version="1.0">
        <doc xml:space="preserve">Returns whether @buffer is untouched.

This function is for example useful to know if we can re-use this buffer to
load a file, instead of opening a new tab or window.

For this function to return %TRUE, the @buffer must be empty, non-modified,
the undo/redo #GtkSourceBuffer history must be empty, and the
#GtefFile:location must be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @buffer has not been touched, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefBuffer.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="title" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve">The buffer title. See gtef_buffer_get_title().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GtkSource.Buffer" c:type="GtkSourceBuffer"/>
      </field>
      <glib:signal name="cursor-moved" when="first" version="1.0">
        <doc xml:space="preserve">The ::cursor-moved signal is emitted when the insert mark is moved
explicitely or when the buffer changes (insert/delete).

A typical use-case for this signal is to update the cursor position
in a statusbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BufferClass"
            c:type="GtefBufferClass"
            glib:is-gtype-struct-for="Buffer">
      <field name="parent_class">
        <type name="GtkSource.BufferClass" c:type="GtkSourceBufferClass"/>
      </field>
      <field name="cursor_moved">
        <callback name="cursor_moved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="GtefBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="CompressionType"
                 version="1.0"
                 glib:type-name="GtefCompressionType"
                 glib:get-type="gtef_compression_type_get_type"
                 c:type="GtefCompressionType">
      <member name="none"
              value="0"
              c:identifier="GTEF_COMPRESSION_TYPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">plain text.</doc>
      </member>
      <member name="gzip"
              value="1"
              c:identifier="GTEF_COMPRESSION_TYPE_GZIP"
              glib:nick="gzip">
        <doc xml:space="preserve">gzip compression.</doc>
      </member>
    </enumeration>
    <class name="File"
           c:symbol-prefix="file"
           c:type="GtefFile"
           parent="GObject.Object"
           glib:type-name="GtefFile"
           glib:get-type="gtef_file_get_type"
           glib:type-struct="FileClass">
      <constructor name="new" c:identifier="gtef_file_new" version="1.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFile object.</doc>
          <type name="File" c:type="GtefFile*"/>
        </return-value>
      </constructor>
      <method name="check_file_on_disk"
              c:identifier="gtef_file_check_file_on_disk"
              version="1.0">
        <doc xml:space="preserve">Checks synchronously the file on disk, to know whether the file is externally
modified, or has been deleted, and whether the file is read-only.

#GtefFile doesn't create a #GFileMonitor to track those properties, so
this function needs to be called instead. Creating lots of #GFileMonitor's
would take lots of resources.

Since this function is synchronous, it is advised to call it only on local
files. See gtef_file_is_local().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression_type"
              c:identifier="gtef_file_get_compression_type"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the compression type.</doc>
          <type name="CompressionType" c:type="GtefCompressionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="gtef_file_get_encoding"
              version="1.0">
        <doc xml:space="preserve">The encoding is initially %NULL. After a successful file loading or saving
operation, the encoding is non-%NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the character encoding.</doc>
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_metadata"
              c:identifier="gtef_file_get_file_metadata"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the associated #GtefFileMetadata.</doc>
          <type name="FileMetadata" c:type="GtefFileMetadata*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gtef_file_get_location"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="gtef_file_get_newline_type"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the newline type.</doc>
          <type name="NewlineType" c:type="GtefNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_name"
              c:identifier="gtef_file_get_short_name"
              version="1.0">
        <doc xml:space="preserve">Gets the @file short name. If the #GtefFile:location isn't %NULL,
returns its display-name (see #G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME).
Otherwise returns "Untitled File N", with N the Nth untitled file of the
application, starting at 1. When an untitled file is closed, its number is
released and can be used by a later untitled file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the @file short name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_deleted"
              c:identifier="gtef_file_is_deleted"
              version="1.0">
        <doc xml:space="preserve">Returns whether the file has been deleted. If the
#GtefFile:location is %NULL, returns %FALSE.

To have an up-to-date value, you must first call
gtef_file_check_file_on_disk().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the file has been deleted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_externally_modified"
              c:identifier="gtef_file_is_externally_modified"
              version="1.0">
        <doc xml:space="preserve">Returns whether the file is externally modified. If the
#GtefFile:location is %NULL, returns %FALSE.

To have an up-to-date value, you must first call
gtef_file_check_file_on_disk().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the file is externally modified.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_local" c:identifier="gtef_file_is_local" version="1.0">
        <doc xml:space="preserve">Returns whether the file is local. If the #GtefFile:location is %NULL,
returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the file is local.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_readonly"
              c:identifier="gtef_file_is_readonly"
              version="1.0">
        <doc xml:space="preserve">Returns whether the file is read-only. If the
#GtefFile:location is %NULL, returns %FALSE.

To have an up-to-date value, you must first call
gtef_file_check_file_on_disk().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the file is read-only.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="gtef_file_set_location"
              version="1.0">
        <doc xml:space="preserve">Sets the location.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new #GFile, or %NULL.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mount_operation_factory"
              c:identifier="gtef_file_set_mount_operation_factory"
              version="1.0"
              introspectable="0">
        <doc xml:space="preserve">Sets a #GtefMountOperationFactory function that will be called when a
#GMountOperation must be created. This is useful for creating a
#GtkMountOperation with the parent #GtkWindow.

If a mount operation factory isn't set, g_mount_operation_new() will be
called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve">a #GtefMountOperationFactory to call when a
  #GMountOperation is needed.</doc>
            <type name="MountOperationFactory"
                  c:type="GtefMountOperationFactory"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to the @callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">function to call on @user_data when the @callback is no
  longer needed, or %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="compression-type"
                version="1.0"
                transfer-ownership="none">
        <doc xml:space="preserve">The compression type.</doc>
        <type name="CompressionType"/>
      </property>
      <property name="encoding" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve">The character encoding, initially %NULL. After a successful file
loading or saving operation, the encoding is non-%NULL.</doc>
        <type name="GtkSource.Encoding"/>
      </property>
      <property name="location"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The location.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="newline-type" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve">The line ending type.</doc>
        <type name="NewlineType"/>
      </property>
      <property name="read-only" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve">Whether the file is read-only or not. The value of this property is
not updated automatically (there is no file monitors).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="short-name" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve">The file short name. See gtef_file_get_short_name().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FileClass"
            c:type="GtefFileClass"
            glib:is-gtype-struct-for="File">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="FileLoader"
           c:symbol-prefix="file_loader"
           c:type="GtefFileLoader"
           parent="GObject.Object"
           glib:type-name="GtefFileLoader"
           glib:get-type="gtef_file_loader_get_type"
           glib:type-struct="FileLoaderClass">
      <constructor name="new"
                   c:identifier="gtef_file_loader_new"
                   version="1.0">
        <doc xml:space="preserve">Creates a new #GtefFileLoader object. The contents is read from the #GtefFile
location.

If not already done, call gtef_file_set_location() before calling this
constructor. The previous location is anyway not needed, because as soon as
the file loading begins, the @buffer is emptied. Setting the #GtefFile
location directly permits to update the UI, to display the good location when
the file is loading.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFileLoader object.</doc>
          <type name="FileLoader" c:type="GtefFileLoader*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefBuffer to load the contents into.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer"
              c:identifier="gtef_file_loader_get_buffer"
              version="1.0">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GtefBuffer to load the contents
into.</doc>
          <type name="Buffer" c:type="GtefBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_size"
              c:identifier="gtef_file_loader_get_chunk_size"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the chunk size.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="gtef_file_loader_get_file"
              version="1.0">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GtefFile.</doc>
          <type name="File" c:type="GtefFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gtef_file_loader_get_location"
              version="1.0">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GFile to load.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_size"
              c:identifier="gtef_file_loader_get_max_size"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum contents size, or -1 for unlimited.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="gtef_file_loader_load_async"
              version="1.0">
        <doc xml:space="preserve">Loads asynchronously the file contents into the #GtefBuffer.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve">function to call back with
  progress information, or %NULL if progress information is not needed.</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_callback_notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">function to call on
  @progress_callback_data when the @progress_callback is no longer needed, or
  %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="gtef_file_loader_load_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Finishes a file loading started with gtef_file_loader_load_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the contents has been loaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chunk_size"
              c:identifier="gtef_file_loader_set_chunk_size"
              version="1.0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
          <parameter name="chunk_size" transfer-ownership="none">
            <doc xml:space="preserve">the new chunk size.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_size"
              c:identifier="gtef_file_loader_set_max_size"
              version="1.0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileLoader.</doc>
            <type name="FileLoader" c:type="GtefFileLoader*"/>
          </instance-parameter>
          <parameter name="max_size" transfer-ownership="none">
            <doc xml:space="preserve">the new maximum size, or -1 for unlimited.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtefBuffer to load the contents into. The #GtefFileLoader object
has a weak reference to the buffer.</doc>
        <type name="Buffer"/>
      </property>
      <property name="chunk-size"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The chunk size, in bytes. The contents is loaded chunk by chunk. It
permits to avoid allocating a too big contiguous memory area, as well
as reporting progress information after each chunk read.

A small chunk size is better when loading a remote file with a slow
connection. For local files, the chunk size can be larger.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="file"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtefFile. The #GtefFileLoader object has a weak
reference to the file.</doc>
        <type name="File"/>
      </property>
      <property name="location"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GFile to load. By default the location is taken from the
#GtefFile at construction time.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="max-size"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The maximum contents size, in bytes. Keep in mind that all the
contents is loaded in memory, and when loaded into a #GtkTextBuffer
it takes more memory than just the contents size.

Set to -1 for unlimited size.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FileLoaderClass"
            c:type="GtefFileLoaderClass"
            glib:is-gtype-struct-for="FileLoader">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="FileLoaderError"
                 version="1.0"
                 glib:type-name="GtefFileLoaderError"
                 glib:get-type="gtef_file_loader_error_get_type"
                 c:type="GtefFileLoaderError"
                 glib:error-domain="gtef-file-loader-error">
      <doc xml:space="preserve">An error code used with the %GTEF_FILE_LOADER_ERROR domain.</doc>
      <member name="too_big"
              value="0"
              c:identifier="GTEF_FILE_LOADER_ERROR_TOO_BIG"
              glib:nick="too-big">
        <doc xml:space="preserve">The file is too big.</doc>
      </member>
      <member name="encoding_auto_detection_failed"
              value="1"
              c:identifier="GTEF_FILE_LOADER_ERROR_ENCODING_AUTO_DETECTION_FAILED"
              glib:nick="encoding-auto-detection-failed">
        <doc xml:space="preserve">It is not possible to
  detect the encoding automatically.</doc>
      </member>
      <function name="quark" c:identifier="gtef_file_loader_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="FileMetadata"
           c:symbol-prefix="file_metadata"
           c:type="GtefFileMetadata"
           parent="GObject.Object"
           glib:type-name="GtefFileMetadata"
           glib:get-type="gtef_file_metadata_get_type"
           glib:type-struct="FileMetadataClass">
      <constructor name="new"
                   c:identifier="gtef_file_metadata_new"
                   version="1.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFileMetadata object.</doc>
          <type name="FileMetadata" c:type="GtefFileMetadata*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefFile that the metadata will belong to.</doc>
            <type name="File" c:type="GtefFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="gtef_file_metadata_get" version="1.0">
        <doc xml:space="preserve">Gets the value of a metadata stored in the @metadata object memory.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the value of the metadata, or %NULL if the metadata
  doesn't exist. Free with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the name of the metadata.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="gtef_file_metadata_get_file"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtefFile that the metadata belong to.</doc>
          <type name="File" c:type="GtefFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata object.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load"
              c:identifier="gtef_file_metadata_load"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Loads synchronously the metadata from #GtefFile:location. The loaded
metadata values can then be accessed with gtef_file_metadata_get().

If the metadata are loaded successfully, this function deletes all previous
metadata stored in the @metadata object memory.

The file at #GtefFile:location, if non-%NULL, must exist on the
filesystem, otherwise an error is returned.

If #GtefFile:location is %NULL, %FALSE is simply returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the metadata was loaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="gtef_file_metadata_load_async"
              version="1.0">
        <doc xml:space="preserve">The asynchronous version of gtef_file_metadata_load().

If the metadata is loaded from the metadata manager (i.e. not with GVfs),
this function loads the metadata synchronously. A future version might fix
this.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="gtef_file_metadata_load_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Finishes the metadata loading started with gtef_file_metadata_load_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the metadata was loaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save"
              c:identifier="gtef_file_metadata_save"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Saves synchronously the metadata for #GtefFile:location.

The file at #GtefFile:location, if non-%NULL, must exist on the
filesystem, otherwise an error is returned.

If #GtefFile:location is %NULL, %FALSE is simply returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the metadata was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async"
              c:identifier="gtef_file_metadata_save_async"
              version="1.0">
        <doc xml:space="preserve">The asynchronous version of gtef_file_metadata_save().

If the metadata is saved with the metadata manager (i.e. not with GVfs), this
function saves the metadata synchronously. A future version might fix this.

See the #GAsyncResult documentation to know how to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="gtef_file_metadata_save_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Finishes the metadata saving started with gtef_file_metadata_save_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the metadata was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gtef_file_metadata_set" version="1.0">
        <doc xml:space="preserve">Sets the value of a metadata. It's preferable that @key starts with a
namespace, to not get metadata conflicts between applications.

This function just stores the new metadata value in the @metadata object
memory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metadata" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileMetadata.</doc>
            <type name="FileMetadata" c:type="GtefFileMetadata*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the name of the metadata.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the value of the metadata, or %NULL to unset.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="file"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtefFile that the metadata belong to.</doc>
        <type name="File"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FileMetadataClass"
            c:type="GtefFileMetadataClass"
            glib:is-gtype-struct-for="FileMetadata">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="FileSaver"
           c:symbol-prefix="file_saver"
           c:type="GtefFileSaver"
           parent="GObject.Object"
           glib:type-name="GtefFileSaver"
           glib:get-type="gtef_file_saver_get_type"
           glib:type-struct="FileSaverClass">
      <constructor name="new" c:identifier="gtef_file_saver_new" version="1.0">
        <doc xml:space="preserve">Creates a new #GtefFileSaver object. The @buffer will be saved to the
#GtefFile's location.

This constructor is suitable for a simple "save" operation, when the @file
already contains a non-%NULL #GtefFile:location.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFileSaver object.</doc>
          <type name="FileSaver" c:type="GtefFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefBuffer to save.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_target"
                   c:identifier="gtef_file_saver_new_with_target"
                   version="1.0">
        <doc xml:space="preserve">Creates a new #GtefFileSaver object with a target location. When the
file saving is finished successfully, @target_location is set to the @file's
#GtefFile:location property. If an error occurs, the previous valid
location is still available in #GtefFile.

This constructor is suitable for a "save as" operation, or for saving a new
buffer for the first time.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFileSaver object.</doc>
          <type name="FileSaver" c:type="GtefFileSaver*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefBuffer to save.</doc>
            <type name="Buffer" c:type="GtefBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">the #GtefFile.</doc>
            <type name="File" c:type="GtefFile*"/>
          </parameter>
          <parameter name="target_location" transfer-ownership="none">
            <doc xml:space="preserve">the #GFile where to save the buffer to.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer"
              c:identifier="gtef_file_saver_get_buffer"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtefBuffer to save.</doc>
          <type name="Buffer" c:type="GtefBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression_type"
              c:identifier="gtef_file_saver_get_compression_type"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the compression type.</doc>
          <type name="GtkSource.CompressionType"
                c:type="GtkSourceCompressionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="gtef_file_saver_get_encoding"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the encoding.</doc>
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="gtef_file_saver_get_file"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtefFile.</doc>
          <type name="File" c:type="GtefFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="gtef_file_saver_get_flags"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the flags.</doc>
          <type name="FileSaverFlags" c:type="GtefFileSaverFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gtef_file_saver_get_location"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GFile where to save the buffer to.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="gtef_file_saver_get_newline_type"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the newline type.</doc>
          <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_async"
              c:identifier="gtef_file_saver_save_async"
              version="1.0">
        <doc xml:space="preserve">Saves asynchronously the buffer into the file. See the #GAsyncResult
documentation to know how to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve">the I/O priority of the request. E.g. %G_PRIORITY_LOW,
  %G_PRIORITY_DEFAULT or %G_PRIORITY_HIGH.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve">function to call back with
  progress information, or %NULL if progress information is not needed.</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_callback_notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">function to call on
  @progress_callback_data when the @progress_callback is no longer needed, or
  %NULL.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is
  satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">user data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="gtef_file_saver_save_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Finishes a file saving started with gtef_file_saver_save_async().

If the file has been saved successfully, the following #GtefFile
properties will be updated: the location, the encoding, the newline type and
the compression type.

gtk_text_buffer_set_modified() is called with %FALSE if the file has been
saved successfully.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the file was saved successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_compression_type"
              c:identifier="gtef_file_saver_set_compression_type"
              version="1.0">
        <doc xml:space="preserve">Sets the compression type. By default the compression type is taken from the
#GtefFile.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="compression_type" transfer-ownership="none">
            <doc xml:space="preserve">the new compression type.</doc>
            <type name="GtkSource.CompressionType"
                  c:type="GtkSourceCompressionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encoding"
              c:identifier="gtef_file_saver_set_encoding"
              version="1.0">
        <doc xml:space="preserve">Sets the encoding. If @encoding is %NULL, the UTF-8 encoding will be set.
By default the encoding is taken from the #GtefFile.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="encoding"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new encoding, or %NULL for UTF-8.</doc>
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="gtef_file_saver_set_flags"
              version="1.0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">the new flags.</doc>
            <type name="FileSaverFlags" c:type="GtefFileSaverFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_newline_type"
              c:identifier="gtef_file_saver_set_newline_type"
              version="1.0">
        <doc xml:space="preserve">Sets the newline type. By default the newline type is taken from the
#GtefFile.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="saver" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFileSaver.</doc>
            <type name="FileSaver" c:type="GtefFileSaver*"/>
          </instance-parameter>
          <parameter name="newline_type" transfer-ownership="none">
            <doc xml:space="preserve">the new newline type.</doc>
            <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtefBuffer to save. The #GtefFileSaver object has a weak
reference to the buffer.</doc>
        <type name="GtkSource.Buffer"/>
      </property>
      <property name="compression-type"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The compression type.</doc>
        <type name="GtkSource.CompressionType"/>
      </property>
      <property name="encoding"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The file's encoding.</doc>
        <type name="GtkSource.Encoding"/>
      </property>
      <property name="file"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtefFile. The #GtefFileSaver object has a weak
reference to the file.</doc>
        <type name="File"/>
      </property>
      <property name="flags"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">File saving flags.</doc>
        <type name="FileSaverFlags"/>
      </property>
      <property name="location"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GFile where to save the buffer. By default the location is taken
from the #GtefFile at construction time.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="newline-type"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The newline type.</doc>
        <type name="GtkSource.NewlineType"/>
      </property>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FileSaverPrivate" c:type="GtefFileSaverPrivate*"/>
      </field>
    </class>
    <record name="FileSaverClass"
            c:type="GtefFileSaverClass"
            glib:is-gtype-struct-for="FileSaver">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="FileSaverError"
                 version="1.0"
                 glib:type-name="GtefFileSaverError"
                 glib:get-type="gtef_file_saver_error_get_type"
                 c:type="GtefFileSaverError"
                 glib:error-domain="gtk-source-file-saver-error">
      <doc xml:space="preserve">An error code used with the %GTEF_FILE_SAVER_ERROR domain.</doc>
      <member name="invalid_chars"
              value="0"
              c:identifier="GTEF_FILE_SAVER_ERROR_INVALID_CHARS"
              glib:nick="invalid-chars">
        <doc xml:space="preserve">The buffer contains invalid
  characters.</doc>
      </member>
      <member name="externally_modified"
              value="1"
              c:identifier="GTEF_FILE_SAVER_ERROR_EXTERNALLY_MODIFIED"
              glib:nick="externally-modified">
        <doc xml:space="preserve">The file is externally
  modified.</doc>
      </member>
      <function name="quark" c:identifier="gtef_file_saver_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FileSaverFlags"
              version="1.0"
              glib:type-name="GtefFileSaverFlags"
              glib:get-type="gtef_file_saver_flags_get_type"
              c:type="GtefFileSaverFlags">
      <doc xml:space="preserve">Flags to define the behavior of a #GtefFileSaver.</doc>
      <member name="none"
              value="0"
              c:identifier="GTEF_FILE_SAVER_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags.</doc>
      </member>
      <member name="ignore_invalid_chars"
              value="1"
              c:identifier="GTEF_FILE_SAVER_FLAGS_IGNORE_INVALID_CHARS"
              glib:nick="ignore-invalid-chars">
        <doc xml:space="preserve">Ignore invalid characters.</doc>
      </member>
      <member name="ignore_modification_time"
              value="2"
              c:identifier="GTEF_FILE_SAVER_FLAGS_IGNORE_MODIFICATION_TIME"
              glib:nick="ignore-modification-time">
        <doc xml:space="preserve">Save file despite external modifications.</doc>
      </member>
      <member name="create_backup"
              value="4"
              c:identifier="GTEF_FILE_SAVER_FLAGS_CREATE_BACKUP"
              glib:nick="create-backup">
        <doc xml:space="preserve">Create a backup before saving the file.</doc>
      </member>
    </bitfield>
    <record name="FileSaverPrivate"
            c:type="GtefFileSaverPrivate"
            disguised="1">
    </record>
    <class name="FoldRegion"
           c:symbol-prefix="fold_region"
           c:type="GtefFoldRegion"
           parent="GObject.Object"
           glib:type-name="GtefFoldRegion"
           glib:get-type="gtef_fold_region_get_type"
           glib:type-struct="FoldRegionClass">
      <constructor name="new"
                   c:identifier="gtef_fold_region_new"
                   version="1.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GtefFoldRegion.</doc>
          <type name="FoldRegion" c:type="GtefFoldRegion*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextBuffer.</doc>
            <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_bounds"
              c:identifier="gtef_fold_region_get_bounds"
              version="1.0">
        <doc xml:space="preserve">Obtains iterators pointing to the start and end of the #GtefFoldRegion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFoldRegion.</doc>
            <type name="FoldRegion" c:type="GtefFoldRegion*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">iterator to initialize.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">iterator to initialize.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="gtef_fold_region_get_buffer"
              version="1.0">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #GtkTextBuffer where the fold region
  is applied.</doc>
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFoldRegion.</doc>
            <type name="FoldRegion" c:type="GtefFoldRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="gtef_fold_region_get_folded"
              version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the #GtefFoldRegion is folded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFoldRegion.</doc>
            <type name="FoldRegion" c:type="GtefFoldRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bounds"
              c:identifier="gtef_fold_region_set_bounds"
              version="1.0">
        <doc xml:space="preserve">Sets the start and end of the #GtefFoldRegion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFoldRegion.</doc>
            <type name="FoldRegion" c:type="GtefFoldRegion*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folded"
              c:identifier="gtef_fold_region_set_folded"
              version="1.0">
        <doc xml:space="preserve">Folds or unfolds the region.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fold_region" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefFoldRegion.</doc>
            <type name="FoldRegion" c:type="GtefFoldRegion*"/>
          </instance-parameter>
          <parameter name="folded" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GtkTextBuffer where the fold region is applied. The
#GtefFoldRegion object has a weak reference to the buffer.</doc>
        <type name="Gtk.TextBuffer"/>
      </property>
      <property name="folded"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether the #GtefFoldRegion is folded or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FoldRegionClass"
            c:type="GtefFoldRegionClass"
            glib:is-gtype-struct-for="FoldRegion">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="GutterRendererFolds"
           c:symbol-prefix="gutter_renderer_folds"
           c:type="GtefGutterRendererFolds"
           parent="GtkSource.GutterRenderer"
           glib:type-name="GtefGutterRendererFolds"
           glib:get-type="gtef_gutter_renderer_folds_get_type"
           glib:type-struct="GutterRendererFoldsClass">
      <constructor name="new"
                   c:identifier="gtef_gutter_renderer_folds_new"
                   version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtefGutterRendererFolds.</doc>
          <type name="GtkSource.GutterRenderer"
                c:type="GtkSourceGutterRenderer*"/>
        </return-value>
      </constructor>
      <method name="set_state"
              c:identifier="gtef_gutter_renderer_folds_set_state"
              version="1.0">
        <doc xml:space="preserve">Sets the folding state of the next cell to be drawn.

This function is intended to be called from a subclass' draw method before
chaining-up to its parent's draw method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefGutterRendererFolds.</doc>
            <type name="GutterRendererFolds"
                  c:type="GtefGutterRendererFolds*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefGutterRendererFoldsState.</doc>
            <type name="GutterRendererFoldsState"
                  c:type="GtefGutterRendererFoldsState"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GtkSource.GutterRenderer"
              c:type="GtkSourceGutterRenderer"/>
      </field>
    </class>
    <record name="GutterRendererFoldsClass"
            c:type="GtefGutterRendererFoldsClass"
            glib:is-gtype-struct-for="GutterRendererFolds">
      <field name="parent_class">
        <type name="GtkSource.GutterRendererClass"
              c:type="GtkSourceGutterRendererClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="GutterRendererFoldsState"
              version="1.0"
              glib:type-name="GtefGutterRendererFoldsState"
              glib:get-type="gtef_gutter_renderer_folds_state_get_type"
              c:type="GtefGutterRendererFoldsState">
      <doc xml:space="preserve">The folding state at a certain line in the #GtkTextBuffer.

Since #GtefGutterRendererFolds has a flat view of the folding tree, some
states can be combined; for example, %GTEF_GUTTER_RENDERER_FOLDS_STATE_END
and %GTEF_GUTTER_RENDERER_FOLDS_STATE_CONTINUE.</doc>
      <member name="none"
              value="0"
              c:identifier="GTEF_GUTTER_RENDERER_FOLDS_STATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No code folding here.</doc>
      </member>
      <member name="start_folded"
              value="1"
              c:identifier="GTEF_GUTTER_RENDERER_FOLDS_STATE_START_FOLDED"
              glib:nick="start-folded">
        <doc xml:space="preserve">Start of currently folded
  fold region.</doc>
      </member>
      <member name="start_opened"
              value="2"
              c:identifier="GTEF_GUTTER_RENDERER_FOLDS_STATE_START_OPENED"
              glib:nick="start-opened">
        <doc xml:space="preserve">Start of currently opened
  fold region.</doc>
      </member>
      <member name="continue"
              value="4"
              c:identifier="GTEF_GUTTER_RENDERER_FOLDS_STATE_CONTINUE"
              glib:nick="continue">
        <doc xml:space="preserve">Fold region continues.</doc>
      </member>
      <member name="end"
              value="8"
              c:identifier="GTEF_GUTTER_RENDERER_FOLDS_STATE_END"
              glib:nick="end">
        <doc xml:space="preserve">End of fold region.</doc>
      </member>
    </bitfield>
    <class name="InfoBar"
           c:symbol-prefix="info_bar"
           c:type="GtefInfoBar"
           parent="Gtk.InfoBar"
           glib:type-name="GtefInfoBar"
           glib:get-type="gtef_info_bar_get_type"
           glib:type-struct="InfoBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="gtef_info_bar_new" version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtefInfoBar.</doc>
          <type name="InfoBar" c:type="GtefInfoBar*"/>
        </return-value>
      </constructor>
      <function name="create_label"
                c:identifier="gtef_info_bar_create_label"
                version="1.0">
        <doc xml:space="preserve">Utility function to create a #GtkLabel suitable for a #GtkInfoBar. The
wrapping and alignment is configured. The label is also set as selectable,
for example to copy an error message and search an explanation on the web.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtkLabel suitable for a #GtkInfoBar.</doc>
          <type name="Gtk.Label" c:type="GtkLabel*"/>
        </return-value>
      </function>
      <field name="parent_instance">
        <type name="Gtk.InfoBar" c:type="GtkInfoBar"/>
      </field>
    </class>
    <record name="InfoBarClass"
            c:type="GtefInfoBarClass"
            glib:is-gtype-struct-for="InfoBar">
      <field name="parent_class">
        <type name="Gtk.InfoBarClass" c:type="GtkInfoBarClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MountOperationFactory"
              c:type="GtefMountOperationFactory"
              version="1.0"
              introspectable="0">
      <doc xml:space="preserve">Type definition for a function that will be called to create a
#GMountOperation. This is useful for creating a #GtkMountOperation.</doc>
      <return-value>
        <type name="Gio.MountOperation" c:type="GMountOperation*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve">a #GtefFile.</doc>
          <type name="File" c:type="GtefFile*"/>
        </parameter>
        <parameter name="userdata" transfer-ownership="none">
          <doc xml:space="preserve">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="NewlineType"
                 version="1.0"
                 glib:type-name="GtefNewlineType"
                 glib:get-type="gtef_newline_type_get_type"
                 c:type="GtefNewlineType">
      <member name="lf"
              value="0"
              c:identifier="GTEF_NEWLINE_TYPE_LF"
              glib:nick="lf">
        <doc xml:space="preserve">line feed, used on UNIX.</doc>
      </member>
      <member name="cr"
              value="1"
              c:identifier="GTEF_NEWLINE_TYPE_CR"
              glib:nick="cr">
        <doc xml:space="preserve">carriage return, used on Mac.</doc>
      </member>
      <member name="cr_lf"
              value="2"
              c:identifier="GTEF_NEWLINE_TYPE_CR_LF"
              glib:nick="cr-lf">
        <doc xml:space="preserve">carriage return followed by a line feed, used
  on Windows.</doc>
      </member>
    </enumeration>
    <enumeration name="SelectionType"
                 version="1.0"
                 glib:type-name="GtefSelectionType"
                 glib:get-type="gtef_selection_type_get_type"
                 c:type="GtefSelectionType">
      <member name="no_selection"
              value="0"
              c:identifier="GTEF_SELECTION_TYPE_NO_SELECTION"
              glib:nick="no-selection">
        <doc xml:space="preserve">No selection.</doc>
      </member>
      <member name="on_same_line"
              value="1"
              c:identifier="GTEF_SELECTION_TYPE_ON_SAME_LINE"
              glib:nick="on-same-line">
        <doc xml:space="preserve">The start and end selection bounds are on
  the same line.</doc>
      </member>
      <member name="multiple_lines"
              value="2"
              c:identifier="GTEF_SELECTION_TYPE_MULTIPLE_LINES"
              glib:nick="multiple-lines">
        <doc xml:space="preserve">The selection spans multiple lines.</doc>
      </member>
    </enumeration>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="GtefTab"
           parent="Gtk.Grid"
           glib:type-name="GtefTab"
           glib:get-type="gtef_tab_get_type"
           glib:type-struct="TabClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="gtef_tab_new" version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtefTab.</doc>
          <type name="Tab" c:type="GtefTab*"/>
        </return-value>
        <parameters>
          <parameter name="main_widget" transfer-ownership="none">
            <doc xml:space="preserve">the main #GtkWidget that will be contained in the #GtefTab.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_info_bar"
              c:identifier="gtef_tab_add_info_bar"
              version="1.0">
        <doc xml:space="preserve">Attaches @info_bar to @tab, above the main widget.

If several info bars are added, the first one will be at the top, the second
one below the first info bar, etc. With the main widget of @tab at the
bottom.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefTab.</doc>
            <type name="Tab" c:type="GtefTab*"/>
          </instance-parameter>
          <parameter name="info_bar" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkInfoBar.</doc>
            <type name="Gtk.InfoBar" c:type="GtkInfoBar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
    </class>
    <record name="TabClass"
            c:type="GtefTabClass"
            glib:is-gtype-struct-for="Tab">
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="View"
           c:symbol-prefix="view"
           c:type="GtefView"
           parent="GtkSource.View"
           glib:type-name="GtefView"
           glib:get-type="gtef_view_get_type"
           glib:type-struct="ViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="gtef_view_new" version="1.0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #GtefView.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="copy_clipboard"
              c:identifier="gtef_view_copy_clipboard"
              version="1.0">
        <doc xml:space="preserve">Copies the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cut_clipboard"
              c:identifier="gtef_view_cut_clipboard"
              version="1.0">
        <doc xml:space="preserve">Cuts the clipboard and then scrolls to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_selection"
              c:identifier="gtef_view_delete_selection"
              version="1.0">
        <doc xml:space="preserve">Deletes the text currently selected in the #GtkTextBuffer associated
to the view and then scrolls to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="paste_clipboard"
              c:identifier="gtef_view_paste_clipboard"
              version="1.0">
        <doc xml:space="preserve">Pastes the clipboard and then scrolls to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scroll_to_cursor"
              c:identifier="gtef_view_scroll_to_cursor"
              version="1.0">
        <doc xml:space="preserve">Scrolls the @view to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_all"
              c:identifier="gtef_view_select_all"
              version="1.0">
        <doc xml:space="preserve">Selects all the text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #GtefView.</doc>
            <type name="View" c:type="GtefView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GtkSource.View" c:type="GtkSourceView"/>
      </field>
    </class>
    <record name="ViewClass"
            c:type="GtefViewClass"
            glib:is-gtype-struct-for="View">
      <field name="parent_class">
        <type name="GtkSource.ViewClass" c:type="GtkSourceViewClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function name="file_loader_error_quark"
              c:identifier="gtef_file_loader_error_quark"
              moved-to="FileLoaderError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="file_saver_error_quark"
              c:identifier="gtef_file_saver_error_quark"
              moved-to="FileSaverError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="metadata_manager_init"
              c:identifier="gtef_metadata_manager_init"
              version="1.0">
      <doc xml:space="preserve">This function initializes the metadata manager.

The @metadata_path must be different for each process. It is advised for your
application to rely on #GApplication process uniqueness.

A good place to store the metadata is in a sub-directory of the user data
directory. See g_get_user_data_dir().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="metadata_path" transfer-ownership="none">
          <doc xml:space="preserve">the filename where the metadata is stored.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="metadata_manager_shutdown"
              c:identifier="gtef_metadata_manager_shutdown"
              version="1.0">
      <doc xml:space="preserve">This function saves synchronously metadata if they need to be saved, and
frees the internal data of the metadata manager.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
