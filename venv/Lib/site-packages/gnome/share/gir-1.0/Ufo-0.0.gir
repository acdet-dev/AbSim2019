<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Json" version="1.0"/>
  <package name="Ufo-0.0"/>
  <c:include name="ufo.h"/>
  <namespace name="Ufo"
             version="0.0"
             shared-library="libufo-0.dll"
             c:identifier-prefixes="Ufo"
             c:symbol-prefixes="ufo">
    <constant name="BUFFER_MAX_NDIMS" value="3" c:type="UFO_BUFFER_MAX_NDIMS">
      <doc xml:space="preserve">Maximum number of allowed dimensions. This is a pre-processor macro instead
of const variable because of &lt;ulink
url="http://c-faq.com/ansi/constasconst.html"&gt;C constraints&lt;/ulink&gt;.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="BaseScheduler"
           c:symbol-prefix="base_scheduler"
           c:type="UfoBaseScheduler"
           parent="GObject.Object"
           glib:type-name="UfoBaseScheduler"
           glib:get-type="ufo_base_scheduler_get_type"
           glib:type-struct="BaseSchedulerClass">
      <doc xml:space="preserve">The base class scheduler is responsible of assigning command queues to
filters (thus managing GPU device resources) and decide if to run a GPU or a
CPU. The actual schedule planning can be overriden.</doc>
      <implements name="Gio.Initable"/>
      <function name="error_quark"
                c:identifier="ufo_base_scheduler_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="run" invoker="run" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scheduler" transfer-ownership="none">
            <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
          </instance-parameter>
          <parameter name="graph" transfer-ownership="none">
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_resources"
              c:identifier="ufo_base_scheduler_get_resources">
        <doc xml:space="preserve">Get the current #UfoResources currently associated with @scheduler.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the currently associated #UfoResources object.</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </return-value>
        <parameters>
          <instance-parameter name="scheduler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBaseScheduler</doc>
            <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ufo_base_scheduler_run" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scheduler" transfer-ownership="none">
            <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
          </instance-parameter>
          <parameter name="task_graph" transfer-ownership="none">
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gpu_nodes"
              c:identifier="ufo_base_scheduler_set_gpu_nodes">
        <doc xml:space="preserve">Sets the GPU nodes that @scheduler can only use. Note, that the #UfoGpuNode
objects must be from the same #UfoArchGraph that is returned by
ufo_base_scheduler_get_resources().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scheduler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBaseScheduler</doc>
            <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
          </instance-parameter>
          <parameter name="gpu_nodes" transfer-ownership="none">
            <doc xml:space="preserve">A list of #UfoGpuNode objects.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GpuNode"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_resources"
              c:identifier="ufo_base_scheduler_set_resources">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="scheduler" transfer-ownership="none">
            <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-tracing" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expand" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="time" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BaseSchedulerPrivate" c:type="UfoBaseSchedulerPrivate*"/>
      </field>
    </class>
    <record name="BaseSchedulerClass"
            c:type="UfoBaseSchedulerClass"
            glib:is-gtype-struct-for="BaseScheduler">
      <doc xml:space="preserve">#UfoBaseScheduler class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="run">
        <callback name="run" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="scheduler" transfer-ownership="none">
              <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
            </parameter>
            <parameter name="graph" transfer-ownership="none">
              <type name="TaskGraph" c:type="UfoTaskGraph*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="BaseSchedulerError" c:type="UfoBaseSchedulerError">
      <member name="setup"
              value="0"
              c:identifier="UFO_BASE_SCHEDULER_ERROR_SETUP">
        <doc xml:space="preserve">Could not start scheduler due to error</doc>
      </member>
      <member name="execution"
              value="1"
              c:identifier="UFO_BASE_SCHEDULER_ERROR_EXECUTION">
        <doc xml:space="preserve">Error occured during execution</doc>
      </member>
    </enumeration>
    <record name="BaseSchedulerPrivate"
            c:type="UfoBaseSchedulerPrivate"
            disguised="1">
    </record>
    <class name="Buffer"
           c:symbol-prefix="buffer"
           c:type="UfoBuffer"
           parent="GObject.Object"
           glib:type-name="UfoBuffer"
           glib:get-type="ufo_buffer_get_type"
           glib:type-struct="BufferClass">
      <doc xml:space="preserve">Represents n-dimensional data. The contents of the #UfoBuffer structure are
private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_buffer_new">
        <doc xml:space="preserve">Create a new #UfoBuffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoBuffer with the given dimensions.</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">size requisition</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
          <parameter name="context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">cl_context to use for creating the device array</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_data"
                   c:identifier="ufo_buffer_new_with_data">
        <doc xml:space="preserve">Create a new buffer using existing host memory.</doc>
        <return-value transfer-ownership="full">
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">size requisition</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Pointer to host memory that will be used by</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">OpenCL context for this buffer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_size"
                   c:identifier="ufo_buffer_new_with_size">
        <doc xml:space="preserve">Create a new #UfoBuffer with a list of dimensions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoBuffer with the given dimensions.</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="dims" transfer-ownership="none">
            <doc xml:space="preserve">size requisition</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="guint64"/>
            </type>
          </parameter>
          <parameter name="context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">cl_context to use for creating the device array</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cmp_dimensions" c:identifier="ufo_buffer_cmp_dimensions">
        <doc xml:space="preserve">Compare the size of @buffer with a given @requisition.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value &lt; 0, 0 or &gt; 0 if requisition is smaller, equal or larger.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">#UfoRequisition</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert" c:identifier="ufo_buffer_convert">
        <doc xml:space="preserve">Convert host data according to its @depth to the internal 32-bit floating
point representation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve">Source bit depth of host data</doc>
            <type name="BufferDepth" c:type="UfoBufferDepth"/>
          </parameter>
        </parameters>
      </method>
      <method name="convert_from_data"
              c:identifier="ufo_buffer_convert_from_data">
        <doc xml:space="preserve">Convert @data according from @depth to the internal 32-bit floating
point representation.

Note: @data must provide as many bytes as the buffer was initialized with.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Pointer to data that should be converted</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve">Source bit depth of host data</doc>
            <type name="BufferDepth" c:type="UfoBufferDepth"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ufo_buffer_copy">
        <doc xml:space="preserve">Copy contents of @src to @dst. The final memory location is determined by the
destination buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">Source #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve">Destination #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_metadata" c:identifier="ufo_buffer_copy_metadata">
        <doc xml:space="preserve">Copies meta data content from @src to @dst.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">Source buffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve">Destination buffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="discard_location"
              c:identifier="ufo_buffer_discard_location">
        <doc xml:space="preserve">Discard the current and use the last location without copying to it first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ufo_buffer_dup">
        <doc xml:space="preserve">Create a new buffer with the same requisition as @buffer. Note, that this is
not a copy of @buffer!</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UfoBuffer with the same size as @buffer.</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_array"
              c:identifier="ufo_buffer_get_device_array">
        <doc xml:space="preserve">Return the current cl_mem object of @buffer. If the data is not yet in device
memory, it is transfered via @cmd_queue to the object. If @cmd_queue is %NULL
@cmd_queue, the last used command queue is used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A cl_mem object associated with @buffer.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer.</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cl_command_queue object or %NULL.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_array_view"
              c:identifier="ufo_buffer_get_device_array_view">
        <doc xml:space="preserve">This method creates a new memory buffer that must be freed by the user.
Moreover, the original @buffer is kept intact.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated cl_mem that the user must release
himself with clReleaseMemObject().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue" transfer-ownership="none">
            <doc xml:space="preserve">A cl_command_queue object</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="region" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoRegion specifying the view of the sub buffer</doc>
            <type name="Region" c:type="UfoRegion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_array_with_offset"
              c:identifier="ufo_buffer_get_device_array_with_offset">
        <doc xml:space="preserve">Creates a new cl_mem object with the given offset and a size that is the
original size minus the offset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A cl_mem sub buffer of the original data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cl_command_queue object or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">Offset in bytes from the original buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_image"
              c:identifier="ufo_buffer_get_device_image">
        <doc xml:space="preserve">Return the current cl_mem image object of @buffer. If the data is not yet in
device memory, it is transfered via @cmd_queue to the object. If @cmd_queue
is %NULL @cmd_queue, the last used command queue is used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A cl_mem image object associated with @buffer.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer.</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cl_command_queue object or %NULL.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_host_array" c:identifier="ufo_buffer_get_host_array">
        <doc xml:space="preserve">Returns a flat C-array containing the raw float data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Float array.</doc>
          <type name="gfloat" c:type="gfloat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer.</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A cl_command_queue object or %NULL.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="ufo_buffer_get_location">
        <doc xml:space="preserve">Return current location of data backed by @buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="BufferLocation" c:type="UfoBufferLocation"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata" c:identifier="ufo_buffer_get_metadata">
        <doc xml:space="preserve">Retrieve meta data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">previously defined metadata #GValue for this buffer.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the associated meta data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_keys"
              c:identifier="ufo_buffer_get_metadata_keys">
        <doc xml:space="preserve">Get all meta data keys associated with @buffer.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GList with C strings.
The content of the list owned by the buffer and should not be modified or
freed. Use #g_list_free() when done using the list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requisition" c:identifier="ufo_buffer_get_requisition">
        <doc xml:space="preserve">Return the size of @buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="requisition"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A location to store the requisition of @buffer</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="ufo_buffer_get_size">
        <doc xml:space="preserve">Get the number of bytes of raw data that is managed by the @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The size of @buffer's data.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="max" c:identifier="ufo_buffer_max">
        <doc xml:space="preserve">Return the maximum value of @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The maximum found.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue" transfer-ownership="none">
            <doc xml:space="preserve">An OpenCL command queue or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="min" c:identifier="ufo_buffer_min">
        <doc xml:space="preserve">Return the minimum value of @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The minimum found.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="cmd_queue" transfer-ownership="none">
            <doc xml:space="preserve">An OpenCL command queue or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="ufo_buffer_resize" version="0.2">
        <doc xml:space="preserve">Resize an existing buffer. If the new requisition has the same size as
before, resizing is a no-op.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoRequisition structure</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_array" c:identifier="ufo_buffer_set_host_array">
        <doc xml:space="preserve">Use this function to set a host array with a user-provided memory buffer.
This is useful to expose private data of a generator filter to a subsequent
consumer. Note, that the buffer *must* have an appropriate size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A pointer to a float array with suitable size.</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="free_data" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @buffer is supposed to clean up the host array.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata" c:identifier="ufo_buffer_set_metadata">
        <doc xml:space="preserve">Associates a key-value pair with @buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoBuffer</doc>
            <type name="Buffer" c:type="UfoBuffer*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the associated meta data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">#GValue of the meta data</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BufferPrivate" c:type="UfoBufferPrivate*"/>
      </field>
    </class>
    <record name="BufferClass"
            c:type="UfoBufferClass"
            glib:is-gtype-struct-for="Buffer">
      <doc xml:space="preserve">#UfoBuffer class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="BufferDepth" c:type="UfoBufferDepth">
      <doc xml:space="preserve">Source depth of data as used in ufo_buffer_convert().</doc>
      <member name="8u" value="0" c:identifier="UFO_BUFFER_DEPTH_8U">
        <doc xml:space="preserve">8 bit unsigned</doc>
      </member>
      <member name="16u" value="1" c:identifier="UFO_BUFFER_DEPTH_16U">
        <doc xml:space="preserve">16 bit unsigned</doc>
      </member>
      <member name="16s" value="2" c:identifier="UFO_BUFFER_DEPTH_16S">
        <doc xml:space="preserve">16 bit signed</doc>
      </member>
      <member name="32s" value="3" c:identifier="UFO_BUFFER_DEPTH_32S">
        <doc xml:space="preserve">32 bit signed</doc>
      </member>
      <member name="32u" value="4" c:identifier="UFO_BUFFER_DEPTH_32U">
        <doc xml:space="preserve">32 bit unsigned</doc>
      </member>
      <member name="32f" value="5" c:identifier="UFO_BUFFER_DEPTH_32F">
        <doc xml:space="preserve">32 bit float</doc>
      </member>
    </enumeration>
    <enumeration name="BufferLocation" c:type="UfoBufferLocation">
      <doc xml:space="preserve">Location of the backed data memory.</doc>
      <member name="host" value="0" c:identifier="UFO_BUFFER_LOCATION_HOST">
        <doc xml:space="preserve">Data is located in main memory</doc>
      </member>
      <member name="device"
              value="1"
              c:identifier="UFO_BUFFER_LOCATION_DEVICE">
        <doc xml:space="preserve">Data is located in regular device memory</doc>
      </member>
      <member name="device_image"
              value="2"
              c:identifier="UFO_BUFFER_LOCATION_DEVICE_IMAGE">
        <doc xml:space="preserve">Data is located in image device memory</doc>
      </member>
      <member name="invalid"
              value="3"
              c:identifier="UFO_BUFFER_LOCATION_INVALID">
        <doc xml:space="preserve">There is currently no data associated with the
 buffer</doc>
      </member>
    </enumeration>
    <class name="BufferParam"
           c:symbol-prefix="buffer_param"
           parent="GObject.ParamSpec"
           glib:type-name="UfoBufferParam"
           glib:get-type="ufo_buffer_param_get_type"
           glib:fundamental="1">
    </class>
    <record name="BufferParamSpec" c:type="UfoBufferParamSpec">
      <doc xml:space="preserve">UfoBufferParamSpec class</doc>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ParamSpec" c:type="GParamSpec"/>
      </field>
      <field name="default_value" readable="0" private="1">
        <type name="Buffer" c:type="UfoBuffer*"/>
      </field>
    </record>
    <record name="BufferPrivate" c:type="UfoBufferPrivate" disguised="1">
    </record>
    <class name="CopyTask"
           c:symbol-prefix="copy_task"
           c:type="UfoCopyTask"
           parent="TaskNode"
           glib:type-name="UfoCopyTask"
           glib:get-type="ufo_copy_task_get_type"
           glib:type-struct="CopyTaskClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoCopyTask structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Task"/>
      <constructor name="new" c:identifier="ufo_copy_task_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TaskNode" c:type="UfoTaskNode"/>
      </field>
    </class>
    <record name="CopyTaskClass"
            c:type="UfoCopyTaskClass"
            glib:is-gtype-struct-for="CopyTask">
      <doc xml:space="preserve">#UfoCopyTask class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="TaskNodeClass" c:type="UfoTaskNodeClass"/>
      </field>
    </record>
    <interface name="Copyable"
               c:symbol-prefix="copyable"
               c:type="UfoCopyable"
               glib:type-name="UfoCopyable"
               glib:get-type="ufo_copyable_get_type"
               glib:type-struct="CopyableIface">
      <function name="copy" c:identifier="ufo_copyable_copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A copy of the @origin object.</doc>
          <type name="Copyable" c:type="UfoCopyable*"/>
        </return-value>
        <parameters>
          <parameter name="origin" transfer-ownership="none">
            <doc xml:space="preserve">A source object that implements #UfoCopyable interface.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="copy" transfer-ownership="none">
            <doc xml:space="preserve">A destination object that implements #UfoCopyable interface.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </interface>
    <record name="CopyableIface"
            c:type="UfoCopyableIface"
            glib:is-gtype-struct-for="Copyable">
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="copy" introspectable="0">
        <callback name="copy" introspectable="0">
          <return-value>
            <type name="Copyable" c:type="UfoCopyable*"/>
          </return-value>
          <parameters>
            <parameter name="origin" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="copy" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CpuNode"
           c:symbol-prefix="cpu_node"
           c:type="UfoCpuNode"
           parent="Node"
           glib:type-name="UfoCpuNode"
           glib:get-type="ufo_cpu_node_get_type"
           glib:type-struct="CpuNodeClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoCpuNode structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_cpu_node_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_affinity" c:identifier="ufo_cpu_node_get_affinity">
        <doc xml:space="preserve">Get affinity mask of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A pointer to the cpu_set_t mask associated with
@node.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoCpuNode</doc>
            <type name="CpuNode" c:type="UfoCpuNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Node" c:type="UfoNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CpuNodePrivate" c:type="UfoCpuNodePrivate*"/>
      </field>
    </class>
    <record name="CpuNodeClass"
            c:type="UfoCpuNodeClass"
            glib:is-gtype-struct-for="CpuNode">
      <doc xml:space="preserve">#UfoCpuNode class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="NodeClass" c:type="UfoNodeClass"/>
      </field>
    </record>
    <record name="CpuNodePrivate" c:type="UfoCpuNodePrivate" disguised="1">
    </record>
    <class name="Daemon"
           c:symbol-prefix="daemon"
           c:type="UfoDaemon"
           parent="GObject.Object"
           glib:type-name="UfoDaemon"
           glib:get-type="ufo_daemon_get_type"
           glib:type-struct="DaemonClass">
      <doc xml:space="preserve">TODO: Add documentation</doc>
      <constructor name="new" c:identifier="ufo_daemon_new">
        <return-value transfer-ownership="full">
          <type name="Daemon" c:type="UfoDaemon*"/>
        </return-value>
        <parameters>
          <parameter name="listen_addr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="start" c:identifier="ufo_daemon_start" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="daemon" transfer-ownership="none">
            <type name="Daemon" c:type="UfoDaemon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ufo_daemon_stop" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="daemon" transfer-ownership="none">
            <type name="Daemon" c:type="UfoDaemon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wait_finish" c:identifier="ufo_daemon_wait_finish">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="daemon" transfer-ownership="none">
            <type name="Daemon" c:type="UfoDaemon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DaemonPrivate" c:type="UfoDaemonPrivate*"/>
      </field>
    </class>
    <record name="DaemonClass"
            c:type="UfoDaemonClass"
            glib:is-gtype-struct-for="Daemon">
      <doc xml:space="preserve">#UfoDaemon class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DaemonPrivate" c:type="UfoDaemonPrivate" disguised="1">
    </record>
    <bitfield name="DeviceType" c:type="UfoDeviceType">
      <doc xml:space="preserve">Types of OpenCL devices to query for. See UfoConfig:"device-type".</doc>
      <member name="cpu" value="1" c:identifier="UFO_DEVICE_CPU">
        <doc xml:space="preserve">Only CPU devices</doc>
      </member>
      <member name="gpu" value="2" c:identifier="UFO_DEVICE_GPU">
        <doc xml:space="preserve">Only GPU devices</doc>
      </member>
      <member name="acc" value="4" c:identifier="UFO_DEVICE_ACC">
        <doc xml:space="preserve">Only accelerator devices such as Xeon Phi</doc>
      </member>
      <member name="all" value="7" c:identifier="UFO_DEVICE_ALL">
        <doc xml:space="preserve">All devices</doc>
      </member>
    </bitfield>
    <class name="DummyTask"
           c:symbol-prefix="dummy_task"
           c:type="UfoDummyTask"
           parent="TaskNode"
           glib:type-name="UfoDummyTask"
           glib:get-type="ufo_dummy_task_get_type"
           glib:type-struct="DummyTaskClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoDummyTask structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Task"/>
      <constructor name="new" c:identifier="ufo_dummy_task_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TaskNode" c:type="UfoTaskNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DummyTaskPrivate" c:type="UfoDummyTaskPrivate*"/>
      </field>
    </class>
    <record name="DummyTaskClass"
            c:type="UfoDummyTaskClass"
            glib:is-gtype-struct-for="DummyTask">
      <doc xml:space="preserve">#UfoDummyTask class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="TaskNodeClass" c:type="UfoTaskNodeClass"/>
      </field>
    </record>
    <record name="DummyTaskPrivate" c:type="UfoDummyTaskPrivate" disguised="1">
    </record>
    <record name="Edge" c:type="UfoEdge">
      <doc xml:space="preserve">An edge in a #UfoGraph.</doc>
      <field name="source" writable="1">
        <doc xml:space="preserve">source node</doc>
        <type name="Node" c:type="UfoNode*"/>
      </field>
      <field name="target" writable="1">
        <doc xml:space="preserve">target node</doc>
        <type name="Node" c:type="UfoNode*"/>
      </field>
      <field name="label" writable="1">
        <doc xml:space="preserve">label</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="FilterPredicate" c:type="UfoFilterPredicate">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="Node" c:type="UfoNode*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="FixedScheduler"
           c:symbol-prefix="fixed_scheduler"
           c:type="UfoFixedScheduler"
           parent="BaseScheduler"
           glib:type-name="UfoFixedScheduler"
           glib:get-type="ufo_fixed_scheduler_get_type"
           glib:type-struct="FixedSchedulerClass">
      <doc xml:space="preserve">The base class scheduler is responsible of assigning command queues to
filters (thus managing GPU device resources) and decide if to run a GPU or a
CPU. The actual schedule planning can be overriden.</doc>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ufo_fixed_scheduler_new">
        <doc xml:space="preserve">Creates a new #UfoFixedScheduler.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoFixedScheduler</doc>
          <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="ufo_fixed_scheduler_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="BaseScheduler" c:type="UfoBaseScheduler"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FixedSchedulerPrivate" c:type="UfoFixedSchedulerPrivate*"/>
      </field>
    </class>
    <record name="FixedSchedulerClass"
            c:type="UfoFixedSchedulerClass"
            glib:is-gtype-struct-for="FixedScheduler">
      <doc xml:space="preserve">#UfoFixedScheduler class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseSchedulerClass" c:type="UfoBaseSchedulerClass"/>
      </field>
    </record>
    <enumeration name="FixedSchedulerError" c:type="UfoFixedSchedulerError">
      <member name="fixed_scheduler_error_setup"
              value="0"
              c:identifier="UFO_FIXED_SCHEDULER_ERROR_SETUP">
        <doc xml:space="preserve">Could not start scheduler due to error</doc>
      </member>
    </enumeration>
    <record name="FixedSchedulerPrivate"
            c:type="UfoFixedSchedulerPrivate"
            disguised="1">
    </record>
    <class name="GpuNode"
           c:symbol-prefix="gpu_node"
           c:type="UfoGpuNode"
           parent="Node"
           glib:type-name="UfoGpuNode"
           glib:get-type="ufo_gpu_node_get_type"
           glib:type-struct="GpuNodeClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoGpuNode structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_gpu_node_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cmd_queue" c:identifier="ufo_gpu_node_get_cmd_queue">
        <doc xml:space="preserve">Get command queue associated with @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A cl_command_queue object for @node.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGpuNode</doc>
            <type name="GpuNode" c:type="UfoGpuNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="ufo_gpu_node_get_info">
        <doc xml:space="preserve">Return information about the associated OpenCL device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Information about @info.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGpuNodeInfo</doc>
            <type name="GpuNode" c:type="UfoGpuNode*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">Information to be queried</doc>
            <type name="GpuNodeInfo" c:type="UfoGpuNodeInfo"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Node" c:type="UfoNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GpuNodePrivate" c:type="UfoGpuNodePrivate*"/>
      </field>
    </class>
    <record name="GpuNodeClass"
            c:type="UfoGpuNodeClass"
            glib:is-gtype-struct-for="GpuNode">
      <doc xml:space="preserve">#UfoGpuNode class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="NodeClass" c:type="UfoNodeClass"/>
      </field>
    </record>
    <enumeration name="GpuNodeInfo" c:type="UfoGpuNodeInfo">
      <doc xml:space="preserve">OpenCL device info types. Refer to the OpenCL standard for complete details
about each information.</doc>
      <member name="global_mem_size"
              value="0"
              c:identifier="UFO_GPU_NODE_INFO_GLOBAL_MEM_SIZE">
        <doc xml:space="preserve">Global memory size</doc>
      </member>
      <member name="local_mem_size"
              value="1"
              c:identifier="UFO_GPU_NODE_INFO_LOCAL_MEM_SIZE">
        <doc xml:space="preserve">Local memory size</doc>
      </member>
    </enumeration>
    <record name="GpuNodePrivate" c:type="UfoGpuNodePrivate" disguised="1">
    </record>
    <class name="Graph"
           c:symbol-prefix="graph"
           c:type="UfoGraph"
           parent="GObject.Object"
           glib:type-name="UfoGraph"
           glib:get-type="ufo_graph_get_type"
           glib:type-struct="GraphClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoGraph structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_graph_new">
        <doc xml:space="preserve">Create a new #UfoGraph object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UfoGraph.</doc>
          <type name="Graph" c:type="UfoGraph*"/>
        </return-value>
      </constructor>
      <method name="connect_nodes" c:identifier="ufo_graph_connect_nodes">
        <doc xml:space="preserve">Connect @source with @target in @graph and annotate the edge with
@label.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">A source node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">A target node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve">An arbitrary label</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ufo_graph_copy" throws="1">
        <doc xml:space="preserve">Deep-copies the structure of @graph by duplicating all nodes via
ufo_node_copy(). This means the nodes will not be the same but have the same
properties.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A copy of @graph or %NULL on error.</doc>
          <type name="Graph" c:type="UfoGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump_dot" c:identifier="ufo_graph_dump_dot">
        <doc xml:space="preserve">Stores a GraphViz dot representation of @graph in @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">A string containing a filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand" c:identifier="ufo_graph_expand">
        <doc xml:space="preserve">Duplicate nodes between head and tail of path and insert at the exact the
position of where path started and ended.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">A path of nodes.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Node"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="find_longest_path"
              c:identifier="ufo_graph_find_longest_path">
        <doc xml:space="preserve">Find the longest path in @task_graph that fulfills @predicate.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A list with nodes in
subsequent order of the path. User must free it with g_list_free.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="pred"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">Predicate function for which elements of the path must
     evaluate to %TRUE.</doc>
            <type name="FilterPredicate" c:type="UfoFilterPredicate"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data passed to @pred.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="flatten" c:identifier="ufo_graph_flatten">
        <doc xml:space="preserve">Flatten @graph to lists of lists.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GList of GList, each containing nodes at the same height.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GLib.List">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_edge_label" c:identifier="ufo_graph_get_edge_label">
        <doc xml:space="preserve">Retrieve edge label between @source and @target.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Edge label pointer.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">Source node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">Target node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_edges" c:identifier="ufo_graph_get_edges">
        <doc xml:space="preserve">Get all edges contained in @graph.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a list of #UfoEdge elements or %NULL on
error. Release the list with g_list_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Edge"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_leaves" c:identifier="ufo_graph_get_leaves">
        <doc xml:space="preserve">Get all leaves of @graph.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of all nodes
that do not have a predessor node.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nodes" c:identifier="ufo_graph_get_nodes">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of all nodes
added to @graph.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nodes_filtered"
              c:identifier="ufo_graph_get_nodes_filtered">
        <doc xml:space="preserve">Get nodes filtered by the predicate @func.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of all nodes
that are marked as true by the predicate function @func.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">Predicate function to filter out nodes</doc>
            <type name="FilterPredicate" c:type="UfoFilterPredicate"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">Data to be passed to @func on invocation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_edges" c:identifier="ufo_graph_get_num_edges">
        <doc xml:space="preserve">Get number of edges present in @graph.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of edges.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_nodes" c:identifier="ufo_graph_get_num_nodes">
        <doc xml:space="preserve">Get number of nodes in @graph. The number is always divisible by two, because
nodes are only part of a graph if member of an edge.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of nodes.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_predecessors"
              c:identifier="ufo_graph_get_num_predecessors">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_successors"
              c:identifier="ufo_graph_get_num_successors">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_predecessors"
              c:identifier="ufo_graph_get_predecessors">
        <doc xml:space="preserve">Get the all nodes connected to @node.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list with preceeding
nodes of @node. Free the list with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode whose predecessors are returned.</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_roots" c:identifier="ufo_graph_get_roots">
        <doc xml:space="preserve">Get all roots of @graph.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list of all nodes
that do not have a predessor node.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_successors" c:identifier="ufo_graph_get_successors">
        <doc xml:space="preserve">Get the successors of @node.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A list with succeeding
nodes of @node. Free the list with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Node"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode whose successors are returned.</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_connected" c:identifier="ufo_graph_is_connected">
        <doc xml:space="preserve">Check whether @from is connected to @to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @from is connected to @to, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve">A source node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve">A target node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_edge" c:identifier="ufo_graph_remove_edge">
        <doc xml:space="preserve">Remove edge between @source and @target.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">A source node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">A target node</doc>
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shallow_copy" c:identifier="ufo_graph_shallow_copy">
        <doc xml:space="preserve">Make a shallow copy of @graph, which means both graphs share the same nodes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A copy of @graph.</doc>
          <type name="Graph" c:type="UfoGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="shallow_subgraph"
              c:identifier="ufo_graph_shallow_subgraph">
        <doc xml:space="preserve">Make a shallow subgraph of @graph that contains nodes which satisfy @pred.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A subgraph of @graph.</doc>
          <type name="Graph" c:type="UfoGraph*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGraph</doc>
            <type name="Graph" c:type="UfoGraph*"/>
          </instance-parameter>
          <parameter name="pred"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A filter predicate</doc>
            <type name="FilterPredicate" c:type="UfoFilterPredicate"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data that is passed to @pred</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GraphPrivate" c:type="UfoGraphPrivate*"/>
      </field>
    </class>
    <record name="GraphClass"
            c:type="UfoGraphClass"
            glib:is-gtype-struct-for="Graph">
      <doc xml:space="preserve">#UfoGraph class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GraphPrivate" c:type="UfoGraphPrivate" disguised="1">
    </record>
    <class name="Group"
           c:symbol-prefix="group"
           c:type="UfoGroup"
           parent="GObject.Object"
           glib:type-name="UfoGroup"
           glib:get-type="ufo_group_get_type"
           glib:type-struct="GroupClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoGroup structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_group_new">
        <doc xml:space="preserve">Create a new #UfoGroup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoGroup.</doc>
          <type name="Group" c:type="UfoGroup*"/>
        </return-value>
        <parameters>
          <parameter name="targets" transfer-ownership="none">
            <doc xml:space="preserve">A list of #UfoNode targets</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Node"/>
            </type>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">A cl_context on which the targets should operate on.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">Pattern to distribute data among the @targets</doc>
            <type name="SendPattern" c:type="UfoSendPattern"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="finish" c:identifier="ufo_group_finish">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_targets" c:identifier="ufo_group_get_num_targets">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop_input_buffer"
              c:identifier="ufo_group_pop_input_buffer">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A buffer that must be released with
ufo_group_push_input_buffer().</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGroup</doc>
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">The #UfoTask that is a target in @group</doc>
            <type name="Task" c:type="UfoTask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pop_output_buffer"
              c:identifier="ufo_group_pop_output_buffer">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated buffer or a re-used buffer
that must be released with ufo_group_push_output_buffer().</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoGroup</doc>
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <doc xml:space="preserve">Size of the buffer.</doc>
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_input_buffer"
              c:identifier="ufo_group_push_input_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_output_buffer"
              c:identifier="ufo_group_push_output_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_expected"
              c:identifier="ufo_group_set_num_expected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </parameter>
          <parameter name="n_expected" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GroupPrivate" c:type="UfoGroupPrivate*"/>
      </field>
    </class>
    <record name="GroupClass"
            c:type="UfoGroupClass"
            glib:is-gtype-struct-for="Group">
      <doc xml:space="preserve">#UfoGroup class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GroupPrivate" c:type="UfoGroupPrivate" disguised="1">
    </record>
    <class name="InputTask"
           c:symbol-prefix="input_task"
           c:type="UfoInputTask"
           parent="TaskNode"
           glib:type-name="UfoInputTask"
           glib:get-type="ufo_input_task_get_type"
           glib:type-struct="InputTaskClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoInputTask structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Task"/>
      <constructor name="new" c:identifier="ufo_input_task_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
      </constructor>
      <method name="get_input_buffer"
              c:identifier="ufo_input_task_get_input_buffer">
        <doc xml:space="preserve">Get the input buffer to which we write the data received from the master
remote node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer for writing input data.</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoInputTask</doc>
            <type name="InputTask" c:type="UfoInputTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="release_input_buffer"
              c:identifier="ufo_input_task_release_input_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="InputTask" c:type="UfoInputTask*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ufo_input_task_stop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="InputTask" c:type="UfoInputTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="TaskNode" c:type="UfoTaskNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="InputTaskPrivate" c:type="UfoInputTaskPrivate*"/>
      </field>
    </class>
    <record name="InputTaskClass"
            c:type="UfoInputTaskClass"
            glib:is-gtype-struct-for="InputTask">
      <doc xml:space="preserve">#UfoInputTask class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="TaskNodeClass" c:type="UfoTaskNodeClass"/>
      </field>
    </record>
    <record name="InputTaskPrivate" c:type="UfoInputTaskPrivate" disguised="1">
    </record>
    <class name="LocalScheduler"
           c:symbol-prefix="local_scheduler"
           c:type="UfoLocalScheduler"
           parent="BaseScheduler"
           glib:type-name="UfoLocalScheduler"
           glib:get-type="ufo_local_scheduler_get_type"
           glib:type-struct="LocalSchedulerClass">
      <doc xml:space="preserve">The base class scheduler is responsible of assigning command queues to
filters (thus managing GPU device resources) and decide if to run a GPU or a
CPU. The actual schedule planning can be overriden.</doc>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ufo_local_scheduler_new">
        <doc xml:space="preserve">Creates a new #UfoLocalScheduler.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoLocalScheduler</doc>
          <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="ufo_local_scheduler_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="BaseScheduler" c:type="UfoBaseScheduler"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocalSchedulerPrivate" c:type="UfoLocalSchedulerPrivate*"/>
      </field>
    </class>
    <record name="LocalSchedulerClass"
            c:type="UfoLocalSchedulerClass"
            glib:is-gtype-struct-for="LocalScheduler">
      <doc xml:space="preserve">#UfoLocalScheduler class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseSchedulerClass" c:type="UfoBaseSchedulerClass"/>
      </field>
    </record>
    <enumeration name="LocalSchedulerError" c:type="UfoLocalSchedulerError">
      <member name="local_scheduler_error_setup"
              value="0"
              c:identifier="UFO_LOCAL_SCHEDULER_ERROR_SETUP">
        <doc xml:space="preserve">Could not start scheduler due to error</doc>
      </member>
    </enumeration>
    <record name="LocalSchedulerPrivate"
            c:type="UfoLocalSchedulerPrivate"
            disguised="1">
    </record>
    <record name="Message" c:type="UfoMessage">
      <doc xml:space="preserve">A message transfered via IPC.</doc>
      <field name="type" writable="1">
        <doc xml:space="preserve">#UfoMessageType</doc>
        <type name="MessageType" c:type="UfoMessageType"/>
      </field>
      <field name="data_size" writable="1">
        <doc xml:space="preserve">The size of the data field.</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve">A #gpointer to the transferred data</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="free" c:identifier="ufo_message_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="UfoMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="ufo_message_new" introspectable="0">
        <doc xml:space="preserve">Create a new message.</doc>
        <return-value>
          <type name="Message" c:type="UfoMessage*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">message type</doc>
            <type name="MessageType" c:type="UfoMessageType"/>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <doc xml:space="preserve">total size of the message</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="MessageType" c:type="UfoMessageType">
      <doc xml:space="preserve">The type of a message.</doc>
      <member name="stream_json"
              value="0"
              c:identifier="UFO_MESSAGE_STREAM_JSON">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="replicate_json"
              value="1"
              c:identifier="UFO_MESSAGE_REPLICATE_JSON">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="get_num_devices"
              value="2"
              c:identifier="UFO_MESSAGE_GET_NUM_DEVICES">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="get_structure"
              value="3"
              c:identifier="UFO_MESSAGE_GET_STRUCTURE">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="get_requisition"
              value="4"
              c:identifier="UFO_MESSAGE_GET_REQUISITION">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="send_inputs"
              value="5"
              c:identifier="UFO_MESSAGE_SEND_INPUTS">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="get_result"
              value="6"
              c:identifier="UFO_MESSAGE_GET_RESULT">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="cleanup" value="7" c:identifier="UFO_MESSAGE_CLEANUP">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="terminate" value="8" c:identifier="UFO_MESSAGE_TERMINATE">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="invalid_request"
              value="9"
              c:identifier="UFO_MESSAGE_INVALID_REQUEST">
      </member>
      <member name="structure" value="10" c:identifier="UFO_MESSAGE_STRUCTURE">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="requisition"
              value="11"
              c:identifier="UFO_MESSAGE_REQUISITION">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="result" value="12" c:identifier="UFO_MESSAGE_RESULT">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="ack" value="13" c:identifier="UFO_MESSAGE_ACK">
        <doc xml:space="preserve">insert</doc>
      </member>
    </enumeration>
    <interface name="Messenger"
               c:symbol-prefix="messenger"
               c:type="UfoMessenger"
               glib:type-name="UfoMessenger"
               glib:get-type="ufo_messenger_get_type"
               glib:type-struct="MessengerIface">
      <function name="create" c:identifier="ufo_messenger_create" throws="1">
        <doc xml:space="preserve">Create a new #UfoMessenger basend on the PROTOCOL:// of the given @address</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoMessenger or %NULL in case of
error.</doc>
          <type name="Messenger" c:type="UfoMessenger*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">listen address for the messenger</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="ufo_messenger_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="connect" invoker="connect" throws="1">
        <doc xml:space="preserve">Connects a messenger to and endpoint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve">The address to connect. This is implementation specific.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">The role of the local endpoint (client or server).</doc>
            <type name="MessengerRole" c:type="UfoMessengerRole"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect" invoker="disconnect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="recv_blocking"
                      invoker="recv_blocking"
                      introspectable="0"
                      throws="1">
        <return-value>
          <doc xml:space="preserve">The received #UfoMessage.

Receives a #UfoMessage from the connected endpoint and blocks until the
message was fully received.</doc>
          <type name="Message" c:type="UfoMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object.</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_blocking"
                      invoker="send_blocking"
                      introspectable="0"
                      throws="1">
        <return-value>
          <doc xml:space="preserve">A #UfoMessage response to the sent request.

Sends a #UfoMessage request to the connected
endpoint and blocks until the message want fully sent.</doc>
          <type name="Message" c:type="UfoMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request #UfoMessage.</doc>
            <type name="Message" c:type="UfoMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="connect" c:identifier="ufo_messenger_connect" throws="1">
        <doc xml:space="preserve">Connects a messenger to and endpoint.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve">The address to connect. This is implementation specific.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="role" transfer-ownership="none">
            <doc xml:space="preserve">The role of the local endpoint (client or server).</doc>
            <type name="MessengerRole" c:type="UfoMessengerRole"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="ufo_messenger_disconnect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="recv_blocking"
              c:identifier="ufo_messenger_recv_blocking"
              introspectable="0"
              throws="1">
        <return-value>
          <doc xml:space="preserve">The received #UfoMessage.

Receives a #UfoMessage from the connected endpoint and blocks until the
message was fully received.</doc>
          <type name="Message" c:type="UfoMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object.</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_blocking"
              c:identifier="ufo_messenger_send_blocking"
              introspectable="0"
              throws="1">
        <return-value>
          <doc xml:space="preserve">A #UfoMessage response to the sent request.

Sends a #UfoMessage request to the connected
endpoint and blocks until the message want fully sent.</doc>
          <type name="Message" c:type="UfoMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="messenger" transfer-ownership="none">
            <doc xml:space="preserve">The messenger object</doc>
            <type name="Messenger" c:type="UfoMessenger*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve">The request #UfoMessage.</doc>
            <type name="Message" c:type="UfoMessage*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <enumeration name="MessengerError"
                 c:type="UfoMessengerError"
                 glib:error-domain="ufo-messenger-error-quark">
      <member name="connection_problem"
              value="0"
              c:identifier="UFO_MESSENGER_CONNECTION_PROBLEM">
        <doc xml:space="preserve">Could not establish a connection</doc>
      </member>
      <member name="buffer_full"
              value="1"
              c:identifier="UFO_MESSENGER_BUFFER_FULL">
        <doc xml:space="preserve">Buffer is filled up completely</doc>
      </member>
      <member name="size_missmatch"
              value="2"
              c:identifier="UFO_MESSENGER_SIZE_MISSMATCH">
        <doc xml:space="preserve">Size mismatch</doc>
      </member>
      <member name="invalid_address"
              value="3"
              c:identifier="UFO_MESSENGER_INVALID_ADDRESS">
        <doc xml:space="preserve">Given listen address is invalid</doc>
      </member>
      <member name="unknown_protocol"
              value="4"
              c:identifier="UFO_MESSENGER_UNKNOWN_PROTOCOL">
        <doc xml:space="preserve">The given address is of unknown PROTOCOL://</doc>
      </member>
    </enumeration>
    <record name="MessengerIface"
            c:type="UfoMessengerIface"
            glib:is-gtype-struct-for="Messenger">
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="connect">
        <callback name="connect" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="messenger" transfer-ownership="none">
              <doc xml:space="preserve">The messenger object</doc>
              <type name="Messenger" c:type="UfoMessenger*"/>
            </parameter>
            <parameter name="addr" transfer-ownership="none">
              <doc xml:space="preserve">The address to connect. This is implementation specific.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="role" transfer-ownership="none">
              <doc xml:space="preserve">The role of the local endpoint (client or server).</doc>
              <type name="MessengerRole" c:type="UfoMessengerRole"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect">
        <callback name="disconnect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="messenger" transfer-ownership="none">
              <type name="Messenger" c:type="UfoMessenger*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_blocking" introspectable="0">
        <callback name="send_blocking" introspectable="0" throws="1">
          <return-value>
            <doc xml:space="preserve">A #UfoMessage response to the sent request.

Sends a #UfoMessage request to the connected
endpoint and blocks until the message want fully sent.</doc>
            <type name="Message" c:type="UfoMessage*"/>
          </return-value>
          <parameters>
            <parameter name="messenger" transfer-ownership="none">
              <doc xml:space="preserve">The messenger object</doc>
              <type name="Messenger" c:type="UfoMessenger*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve">The request #UfoMessage.</doc>
              <type name="Message" c:type="UfoMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="recv_blocking" introspectable="0">
        <callback name="recv_blocking" introspectable="0" throws="1">
          <return-value>
            <doc xml:space="preserve">The received #UfoMessage.

Receives a #UfoMessage from the connected endpoint and blocks until the
message was fully received.</doc>
            <type name="Message" c:type="UfoMessage*"/>
          </return-value>
          <parameters>
            <parameter name="messenger" transfer-ownership="none">
              <doc xml:space="preserve">The messenger object.</doc>
              <type name="Messenger" c:type="UfoMessenger*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="MessengerRole" c:type="UfoMessengerRole">
      <doc xml:space="preserve">The role of an connection endpoint.</doc>
      <member name="client" value="0" c:identifier="UFO_MESSENGER_CLIENT">
        <doc xml:space="preserve">insert</doc>
      </member>
      <member name="server" value="1" c:identifier="UFO_MESSENGER_SERVER">
        <doc xml:space="preserve">insert</doc>
      </member>
    </enumeration>
    <interface name="Method"
               c:symbol-prefix="method"
               c:type="UfoMethod"
               glib:type-name="UfoMethod"
               glib:get-type="ufo_method_get_type"
               glib:type-struct="MethodIface">
      <virtual-method name="process" invoker="process">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="method" transfer-ownership="none">
            <type name="Method" c:type="UfoMethod*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="process" c:identifier="ufo_method_process">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="method" transfer-ownership="none">
            <type name="Method" c:type="UfoMethod*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="MethodIface"
            c:type="UfoMethodIface"
            glib:is-gtype-struct-for="Method">
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="process">
        <callback name="process">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="method" transfer-ownership="none">
              <type name="Method" c:type="UfoMethod*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="pevent" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Node"
           c:symbol-prefix="node"
           c:type="UfoNode"
           parent="GObject.Object"
           glib:type-name="UfoNode"
           glib:get-type="ufo_node_get_type"
           glib:type-struct="NodeClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoNode structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_node_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="copy" invoker="copy" throws="1">
        <doc xml:space="preserve">Get a copy of @node. How "deep" the copy is, depends on the inherited
implementation of @node. The copy receives an new index and the total amount
of nodes is increased by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Copy of @node.</doc>
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode</doc>
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="equal" invoker="equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="n1" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
          <parameter name="n2" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy" c:identifier="ufo_node_copy" throws="1">
        <doc xml:space="preserve">Get a copy of @node. How "deep" the copy is, depends on the inherited
implementation of @node. The copy receives an new index and the total amount
of nodes is increased by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Copy of @node.</doc>
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode</doc>
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="ufo_node_equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="n1" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
          <parameter name="n2" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index" c:identifier="ufo_node_get_index">
        <doc xml:space="preserve">Get the index of this node. When a graph is expanded, nodes are copied. The
original node has index 1, all successive copies receive a monotonous
increasing index. The total amount of copied nodes can be queried with
ufo_node_get_total().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The index of @node.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode</doc>
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="ufo_node_get_label">
        <doc xml:space="preserve">Get arbitrary label data of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The label of @node.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode</doc>
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total" c:identifier="ufo_node_get_total">
        <doc xml:space="preserve">Get the total amount of copied nodes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of copied nodes.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoNode</doc>
            <type name="Node" c:type="UfoNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NodePrivate" c:type="UfoNodePrivate*"/>
      </field>
    </class>
    <record name="NodeClass"
            c:type="UfoNodeClass"
            glib:is-gtype-struct-for="Node">
      <doc xml:space="preserve">#UfoNode class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="copy">
        <callback name="copy" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">Copy of @node.</doc>
            <type name="Node" c:type="UfoNode*"/>
          </return-value>
          <parameters>
            <parameter name="node" transfer-ownership="none">
              <doc xml:space="preserve">A #UfoNode</doc>
              <type name="Node" c:type="UfoNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="equal">
        <callback name="equal">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="n1" transfer-ownership="none">
              <type name="Node" c:type="UfoNode*"/>
            </parameter>
            <parameter name="n2" transfer-ownership="none">
              <type name="Node" c:type="UfoNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="NodePrivate" c:type="UfoNodePrivate" disguised="1">
    </record>
    <class name="OutputTask"
           c:symbol-prefix="output_task"
           c:type="UfoOutputTask"
           parent="TaskNode"
           glib:type-name="UfoOutputTask"
           glib:get-type="ufo_output_task_get_type"
           glib:type-struct="OutputTaskClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoOutputTask structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Task"/>
      <constructor name="new" c:identifier="ufo_output_task_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <parameter name="n_dims" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_output_buffer"
              c:identifier="ufo_output_task_get_output_buffer">
        <doc xml:space="preserve">Get the output buffer from which we read the data to be sent to the master
remote node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer for reading output data.</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoInputTask</doc>
            <type name="OutputTask" c:type="UfoOutputTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_requisition"
              c:identifier="ufo_output_task_get_output_requisition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="OutputTask" c:type="UfoOutputTask*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_output_buffer"
              c:identifier="ufo_output_task_release_output_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="OutputTask" c:type="UfoOutputTask*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <property name="num-dims" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="TaskNode" c:type="UfoTaskNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OutputTaskPrivate" c:type="UfoOutputTaskPrivate*"/>
      </field>
    </class>
    <record name="OutputTaskClass"
            c:type="UfoOutputTaskClass"
            glib:is-gtype-struct-for="OutputTask">
      <doc xml:space="preserve">#UfoOutputTask class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="TaskNodeClass" c:type="UfoTaskNodeClass"/>
      </field>
    </record>
    <record name="OutputTaskPrivate"
            c:type="UfoOutputTaskPrivate"
            disguised="1">
    </record>
    <class name="PluginManager"
           c:symbol-prefix="plugin_manager"
           c:type="UfoPluginManager"
           parent="GObject.Object"
           glib:type-name="UfoPluginManager"
           glib:get-type="ufo_plugin_manager_get_type"
           glib:type-struct="PluginManagerClass">
      <doc xml:space="preserve">Creates #UfoFilter instances by loading corresponding shared objects. The
contents of the #UfoPluginManager structure are private and should only be
accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_plugin_manager_new">
        <doc xml:space="preserve">Create a plugin manager object to instantiate filter objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoPluginManager object.</doc>
          <type name="PluginManager" c:type="UfoPluginManager*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="ufo_plugin_manager_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_all_task_names"
              c:identifier="ufo_plugin_manager_get_all_task_names">
        <doc xml:space="preserve">Return a list with potential filter names that match shared objects in all
search paths.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">List of strings with filter names</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoPluginManager</doc>
            <type name="PluginManager" c:type="UfoPluginManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin"
              c:identifier="ufo_plugin_manager_get_plugin"
              throws="1">
        <doc xml:space="preserve">Load a module and return an instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">(allow-none): A loaded plugin or %NULL if module
cannot be found.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoPluginManager</doc>
            <type name="PluginManager" c:type="UfoPluginManager*"/>
          </instance-parameter>
          <parameter name="func_name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the constructor function.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve">Filename of the shared object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_task"
              c:identifier="ufo_plugin_manager_get_task"
              version="0.2"
              throws="1">
        <doc xml:space="preserve">Load a #UfoFilter module and return an instance. The shared object name must
be * constructed as "libfilter@name.so".</doc>
        <doc-version xml:space="preserve">, the error parameter is available</doc-version>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">(allow-none): #UfoFilter or %NULL if module cannot be found</doc>
          <type name="TaskNode" c:type="UfoTaskNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoPluginManager</doc>
            <type name="PluginManager" c:type="UfoPluginManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the plugin.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PluginManagerPrivate" c:type="UfoPluginManagerPrivate*"/>
      </field>
    </class>
    <record name="PluginManagerClass"
            c:type="UfoPluginManagerClass"
            glib:is-gtype-struct-for="PluginManager">
      <doc xml:space="preserve">#UfoPluginManager class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="PluginManagerError" c:type="UfoPluginManagerError">
      <doc xml:space="preserve">Possible errors that ufo_plugin_manager_get_task() can return.</doc>
      <member name="module_not_found"
              value="0"
              c:identifier="UFO_PLUGIN_MANAGER_ERROR_MODULE_NOT_FOUND">
        <doc xml:space="preserve">The module could not be found</doc>
      </member>
      <member name="module_open"
              value="1"
              c:identifier="UFO_PLUGIN_MANAGER_ERROR_MODULE_OPEN">
        <doc xml:space="preserve">Module could not be opened</doc>
      </member>
      <member name="symbol_not_found"
              value="2"
              c:identifier="UFO_PLUGIN_MANAGER_ERROR_SYMBOL_NOT_FOUND">
        <doc xml:space="preserve">Necessary entry symbol was not
     found</doc>
      </member>
    </enumeration>
    <record name="PluginManagerPrivate"
            c:type="UfoPluginManagerPrivate"
            disguised="1">
    </record>
    <class name="Processor"
           c:symbol-prefix="processor"
           c:type="UfoProcessor"
           parent="GObject.Object"
           glib:type-name="UfoProcessor"
           glib:get-type="ufo_processor_get_type"
           glib:type-struct="ProcessorClass">
      <doc xml:space="preserve">Describes a basic processing element that is used inside a filter</doc>
      <implements name="Copyable"/>
      <constructor name="new" c:identifier="ufo_processor_new">
        <return-value transfer-ownership="full">
          <type name="Processor" c:type="UfoProcessor*"/>
        </return-value>
      </constructor>
      <virtual-method name="configure" invoker="configure">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="processor" transfer-ownership="none">
            <type name="Processor" c:type="UfoProcessor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="setup" invoker="setup" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="processor" transfer-ownership="none">
            <type name="Processor" c:type="UfoProcessor*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="configure" c:identifier="ufo_processor_configure">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="processor" transfer-ownership="none">
            <type name="Processor" c:type="UfoProcessor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="ufo_processor_setup" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="processor" transfer-ownership="none">
            <type name="Processor" c:type="UfoProcessor*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
        </parameters>
      </method>
      <property name="command-queue" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="ufo-profiler" writable="1" transfer-ownership="none">
        <type name="Profiler"/>
      </property>
      <property name="ufo-resources" writable="1" transfer-ownership="none">
        <type name="Resources"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProcessorPrivate" c:type="UfoProcessorPrivate*"/>
      </field>
    </class>
    <record name="ProcessorClass"
            c:type="UfoProcessorClass"
            glib:is-gtype-struct-for="Processor">
      <doc xml:space="preserve">#UfoProcessor class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="setup">
        <callback name="setup" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="processor" transfer-ownership="none">
              <type name="Processor" c:type="UfoProcessor*"/>
            </parameter>
            <parameter name="resources" transfer-ownership="none">
              <type name="Resources" c:type="UfoResources*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure">
        <callback name="configure">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="processor" transfer-ownership="none">
              <type name="Processor" c:type="UfoProcessor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ProcessorPrivate" c:type="UfoProcessorPrivate" disguised="1">
    </record>
    <class name="Profiler"
           c:symbol-prefix="profiler"
           c:type="UfoProfiler"
           parent="GObject.Object"
           glib:type-name="UfoProfiler"
           glib:get-type="ufo_profiler_get_type"
           glib:type-struct="ProfilerClass">
      <doc xml:space="preserve">The #UfoProfiler collects and records OpenCL events and stores them in a
convenient format on disk or prints summaries on screen.</doc>
      <constructor name="new" c:identifier="ufo_profiler_new">
        <doc xml:space="preserve">Create a profiler object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new profiler object.</doc>
          <type name="Profiler" c:type="UfoProfiler*"/>
        </return-value>
      </constructor>
      <method name="call" c:identifier="ufo_profiler_call">
        <doc xml:space="preserve">Execute the @kernel using the command queue and execution parameters. The
event associated with the clEnqueueNDRangeKernel() call is recorded and may
be used for profiling purposes later on.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="command_queue" transfer-ownership="none">
            <doc xml:space="preserve">A %cl_command_queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <doc xml:space="preserve">A %cl_kernel</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="work_dim" transfer-ownership="none">
            <doc xml:space="preserve">Number of working dimensions.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="global_work_size" transfer-ownership="none">
            <doc xml:space="preserve">Sizes of global dimensions. The array must have at least
     @work_dim entries.</doc>
            <type name="gsize" c:type="const gsize*"/>
          </parameter>
          <parameter name="local_work_size" transfer-ownership="none">
            <doc xml:space="preserve">Sizes of local work group dimensions. The array must have
     at least @work_dim entries.</doc>
            <type name="gsize" c:type="const gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="elapsed" c:identifier="ufo_profiler_elapsed">
        <doc xml:space="preserve">Get the elapsed time in seconds for @timer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Elapsed time in seconds.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="timer" transfer-ownership="none">
            <doc xml:space="preserve">Which timer to start</doc>
            <type name="ProfilerTimer" c:type="UfoProfilerTimer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_tracing" c:identifier="ufo_profiler_enable_tracing">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="ufo_profiler_foreach">
        <doc xml:space="preserve">Iterates through the recorded events and calls @func for each entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The function to be called for an entry</doc>
            <type name="ProfilerFunc" c:type="UfoProfilerFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User parameters</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_trace_events"
              c:identifier="ufo_profiler_get_trace_events"
              introspectable="0">
        <doc xml:space="preserve">Get all events recorded with @profiler.</doc>
        <return-value>
          <doc xml:space="preserve">A list with #UfoTraceEvent objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="TraceEvent"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_event" c:identifier="ufo_profiler_register_event">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="command_queue" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ufo_profiler_start">
        <doc xml:space="preserve">Start @timer. The timer is not reset but accumulates the time elapsed between
ufo_profiler_start() and ufo_profiler_stop() calls.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="timer" transfer-ownership="none">
            <doc xml:space="preserve">Which timer to start</doc>
            <type name="ProfilerTimer" c:type="UfoProfilerTimer"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ufo_profiler_stop">
        <doc xml:space="preserve">Stop @timer. The timer is not reset but accumulates the time elapsed between
ufo_profiler_start() and ufo_profiler_stop() calls.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoProfiler object.</doc>
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="timer" transfer-ownership="none">
            <doc xml:space="preserve">Which timer to stop</doc>
            <type name="ProfilerTimer" c:type="UfoProfilerTimer"/>
          </parameter>
        </parameters>
      </method>
      <method name="trace_event" c:identifier="ufo_profiler_trace_event">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="profiler" transfer-ownership="none">
            <type name="Profiler" c:type="UfoProfiler*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="TraceEventType" c:type="UfoTraceEventType"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProfilerPrivate" c:type="UfoProfilerPrivate*"/>
      </field>
    </class>
    <record name="ProfilerClass"
            c:type="UfoProfilerClass"
            glib:is-gtype-struct-for="Profiler">
      <doc xml:space="preserve">#UfoProfiler class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ProfilerFunc" c:type="UfoProfilerFunc">
      <doc xml:space="preserve">Specifies the type of functions passed to ufo_profiler_foreach().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kernel" transfer-ownership="none">
          <doc xml:space="preserve">Kernel name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="queue" transfer-ownership="none">
          <doc xml:space="preserve">OpenCL command queue</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="queued" transfer-ownership="none">
          <doc xml:space="preserve">Queuing timestamp in ns</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="submitted" transfer-ownership="none">
          <doc xml:space="preserve">Submit timestamp in ns</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve">Start timestamp in ns</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve">End timestamp in ns</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="6">
          <doc xml:space="preserve">User data passed to ufo_profiler_foreach().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProfilerPrivate" c:type="UfoProfilerPrivate" disguised="1">
    </record>
    <enumeration name="ProfilerTimer" c:type="UfoProfilerTimer">
      <doc xml:space="preserve">Use these values to select a specific timer when calling
ufo_profiler_start(), ufo_profiler_stop() and ufo_profiler_elapsed().</doc>
      <member name="io" value="0" c:identifier="UFO_PROFILER_TIMER_IO">
        <doc xml:space="preserve">Select I/O timer</doc>
      </member>
      <member name="cpu" value="1" c:identifier="UFO_PROFILER_TIMER_CPU">
        <doc xml:space="preserve">Select CPU timer</doc>
      </member>
      <member name="gpu" value="2" c:identifier="UFO_PROFILER_TIMER_GPU">
        <doc xml:space="preserve">Select GPU timer</doc>
      </member>
      <member name="fetch" value="3" c:identifier="UFO_PROFILER_TIMER_FETCH">
        <doc xml:space="preserve">Select timer that measures the synchronization
 time to fetch data from the queues.</doc>
      </member>
      <member name="release"
              value="4"
              c:identifier="UFO_PROFILER_TIMER_RELEASE">
        <doc xml:space="preserve">Select timer that measures the synchronization
 time to push data to the queues.</doc>
      </member>
      <member name="last" value="5" c:identifier="UFO_PROFILER_TIMER_LAST">
        <doc xml:space="preserve">Auxiliary value, do not use.</doc>
      </member>
    </enumeration>
    <record name="Region" c:type="UfoRegion">
      <doc xml:space="preserve">Defines a region with at most #UFO_BUFFER_MAX_NDIMS dimensions for use with
ufo_buffer_get_device_array_view().</doc>
      <field name="origin" writable="1">
        <doc xml:space="preserve">n-dimensional origin of the region</doc>
        <array zero-terminated="0" c:type="gsize" fixed-size="3">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve">n-dimensional size of the region</doc>
        <array zero-terminated="0" c:type="gsize" fixed-size="3">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
    </record>
    <enumeration name="RemoteMode" c:type="UfoRemoteMode">
      <member name="stream" value="0" c:identifier="UFO_REMOTE_MODE_STREAM">
        <doc xml:space="preserve">Expand task graph and execute only sub-branches
 remotely.</doc>
      </member>
      <member name="replicate"
              value="1"
              c:identifier="UFO_REMOTE_MODE_REPLICATE">
        <doc xml:space="preserve">Replicate the entire task graph and execute it
 remotely.</doc>
      </member>
    </enumeration>
    <class name="RemoteNode"
           c:symbol-prefix="remote_node"
           c:type="UfoRemoteNode"
           parent="Node"
           glib:type-name="UfoRemoteNode"
           glib:get-type="ufo_remote_node_get_type"
           glib:type-struct="RemoteNodeClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoRemoteNode structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_remote_node_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cleanup" c:identifier="ufo_remote_node_cleanup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="ufo_remote_node_get_mode">
        <return-value transfer-ownership="none">
          <type name="TaskMode" c:type="UfoTaskMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_dimensions"
              c:identifier="ufo_remote_node_get_num_dimensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_gpus" c:identifier="ufo_remote_node_get_num_gpus">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_inputs"
              c:identifier="ufo_remote_node_get_num_inputs">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requisition"
              c:identifier="ufo_remote_node_get_requisition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_result" c:identifier="ufo_remote_node_get_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_setup"
              c:identifier="ufo_remote_node_request_setup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_inputs" c:identifier="ufo_remote_node_send_inputs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="inputs" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer**"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_json" c:identifier="ufo_remote_node_send_json">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RemoteMode" c:type="UfoRemoteMode"/>
          </parameter>
          <parameter name="json" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_inputs"
              c:identifier="ufo_remote_node_set_num_inputs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
          <parameter name="n_inputs" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="terminate" c:identifier="ufo_remote_node_terminate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RemoteNode" c:type="UfoRemoteNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Node" c:type="UfoNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteNodePrivate" c:type="UfoRemoteNodePrivate*"/>
      </field>
    </class>
    <record name="RemoteNodeClass"
            c:type="UfoRemoteNodeClass"
            glib:is-gtype-struct-for="RemoteNode">
      <doc xml:space="preserve">#UfoRemoteNode class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="NodeClass" c:type="UfoNodeClass"/>
      </field>
    </record>
    <record name="RemoteNodePrivate"
            c:type="UfoRemoteNodePrivate"
            disguised="1">
    </record>
    <class name="RemoteTask"
           c:symbol-prefix="remote_task"
           c:type="UfoRemoteTask"
           parent="TaskNode"
           glib:type-name="UfoRemoteTask"
           glib:get-type="ufo_remote_task_get_type"
           glib:type-struct="RemoteTaskClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoRemoteTask structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Task"/>
      <constructor name="new" c:identifier="ufo_remote_task_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TaskNode" c:type="UfoTaskNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteTaskPrivate" c:type="UfoRemoteTaskPrivate*"/>
      </field>
    </class>
    <record name="RemoteTaskClass"
            c:type="UfoRemoteTaskClass"
            glib:is-gtype-struct-for="RemoteTask">
      <doc xml:space="preserve">#UfoRemoteTask class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="TaskNodeClass" c:type="UfoTaskNodeClass"/>
      </field>
    </record>
    <record name="RemoteTaskPrivate"
            c:type="UfoRemoteTaskPrivate"
            disguised="1">
    </record>
    <record name="Requisition" c:type="UfoRequisition">
      <doc xml:space="preserve">Used to specify buffer size requirements.</doc>
      <field name="n_dims" writable="1">
        <doc xml:space="preserve">Number of dimensions</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dims" writable="1">
        <doc xml:space="preserve">Size of dimension</doc>
        <array zero-terminated="0" c:type="gsize" fixed-size="3">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
    </record>
    <class name="Resources"
           c:symbol-prefix="resources"
           c:type="UfoResources"
           parent="GObject.Object"
           glib:type-name="UfoResources"
           glib:get-type="ufo_resources_get_type"
           glib:type-struct="ResourcesClass">
      <doc xml:space="preserve">Manages OpenCL resources. The contents of the #UfoResources structure
are private and should only be accessed via the provided API.</doc>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ufo_resources_new" throws="1">
        <doc xml:space="preserve">Create a new #UfoResources instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new #UfoResources</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </return-value>
      </constructor>
      <function name="clerr" c:identifier="ufo_resources_clerr">
        <doc xml:space="preserve">Get a human-readable string representation of @error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A static string of @error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">An OpenCL error code</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="ufo_resources_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="add_path" c:identifier="ufo_resources_add_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cached_kernel"
              c:identifier="ufo_resources_get_cached_kernel"
              throws="1">
        <doc xml:space="preserve">Loads a and builds a kernel from a file. The file is searched in the current
working directory and all paths added through ufo_resources_add_path (). If
@kernel is %NULL, the first encountered kernel is returned. The kernel object
is cached and should not be used by two threads concurrently.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a cl_kernel object that is load from @filename or %NULL on error</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources object</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Name of the .cl kernel file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <doc xml:space="preserve">Name of a kernel, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cmd_queues"
              c:identifier="ufo_resources_get_cmd_queues"
              introspectable="0">
        <doc xml:space="preserve">Get all command queues managed by @resources.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">List with
cl_command_queue objects. Free with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="ufo_resources_get_context"
              introspectable="0">
        <doc xml:space="preserve">Returns the OpenCL context object that is used by the resource resources. This
context can be used to initialize othe third-party libraries.</doc>
        <return-value>
          <doc xml:space="preserve">A cl_context object.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="ufo_resources_get_devices"
              introspectable="0">
        <doc xml:space="preserve">Get all devices queues managed by @resources.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">List with
cl_device_id objects. Free with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gpu_nodes" c:identifier="ufo_resources_get_gpu_nodes">
        <doc xml:space="preserve">Get all #UfoGpuNode objects managed by @resources.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">List with
#UfoGpuNode objects. Free with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GpuNode"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel"
              c:identifier="ufo_resources_get_kernel"
              throws="1">
        <doc xml:space="preserve">Loads a and builds a kernel from a file. The file is searched in the current
working directory and all paths added through ufo_resources_add_path (). If
@kernel is %NULL, the first encountered kernel is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a cl_kernel object that is load from @filename or %NULL on error</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources object</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Name of the .cl kernel file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <doc xml:space="preserve">Name of a kernel, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_kernel_from_source"
              c:identifier="ufo_resources_get_kernel_from_source"
              throws="1">
        <doc xml:space="preserve">Loads and builds a kernel from a string. If @kernel is %NULL, the first
kernel defined in @source is used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a cl_kernel object that is load from @filename</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">OpenCL source string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <doc xml:space="preserve">Name of a kernel or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_kernel_with_opts"
              c:identifier="ufo_resources_get_kernel_with_opts"
              throws="1">
        <doc xml:space="preserve">Loads a and builds a kernel from a file. The file is searched in the current
working directory and all paths added through ufo_resources_add_paths (). If
@kernel is %NULL, the first encountered kernel is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a cl_kernel object that is load from @filename or %NULL on error</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources object</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Name of the .cl kernel file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel" transfer-ownership="none">
            <doc xml:space="preserve">Name of a kernel, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve">Options passed to the OpenCL compiler</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_nodes"
              c:identifier="ufo_resources_get_remote_nodes">
        <doc xml:space="preserve">Get all #UfoRemoteNode objects managed by @resources.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">List with
#UfoRemoteNode objects. Free with g_list_free() but not its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RemoteNode"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="device-type"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Type of the devices that should be used exclusively for computation.

See: #UfoDeviceType for the device classes.</doc>
        <type/>
      </property>
      <property name="platform-index" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="remotes" writable="1" transfer-ownership="none">
        <type name="GObject.ValueArray"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ResourcesPrivate" c:type="UfoResourcesPrivate*"/>
      </field>
    </class>
    <record name="ResourcesClass"
            c:type="UfoResourcesClass"
            glib:is-gtype-struct-for="Resources">
      <doc xml:space="preserve">#UfoResources class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ResourcesError" c:type="UfoResourcesError">
      <doc xml:space="preserve">OpenCL related errors.</doc>
      <member name="general"
              value="0"
              c:identifier="UFO_RESOURCES_ERROR_GENERAL">
        <doc xml:space="preserve">General resource problems</doc>
      </member>
      <member name="load_program"
              value="1"
              c:identifier="UFO_RESOURCES_ERROR_LOAD_PROGRAM">
        <doc xml:space="preserve">Could not load the OpenCL file</doc>
      </member>
      <member name="create_program"
              value="2"
              c:identifier="UFO_RESOURCES_ERROR_CREATE_PROGRAM">
        <doc xml:space="preserve">Could not create a program from
     the sources</doc>
      </member>
      <member name="build_program"
              value="3"
              c:identifier="UFO_RESOURCES_ERROR_BUILD_PROGRAM">
        <doc xml:space="preserve">Could not build program from
     sources</doc>
      </member>
      <member name="create_kernel"
              value="4"
              c:identifier="UFO_RESOURCES_ERROR_CREATE_KERNEL">
        <doc xml:space="preserve">Could not create kernel</doc>
      </member>
    </enumeration>
    <record name="ResourcesPrivate" c:type="UfoResourcesPrivate" disguised="1">
    </record>
    <class name="Scheduler"
           c:symbol-prefix="scheduler"
           c:type="UfoScheduler"
           parent="BaseScheduler"
           glib:type-name="UfoScheduler"
           glib:get-type="ufo_scheduler_get_type"
           glib:type-struct="SchedulerClass">
      <doc xml:space="preserve">The base class scheduler is responsible of assigning command queues to
filters (thus managing GPU device resources) and decide if to run a GPU or a
CPU. The actual schedule planning can be overriden.</doc>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="ufo_scheduler_new">
        <doc xml:space="preserve">Creates a new #UfoBaseScheduler.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #UfoBaseScheduler</doc>
          <type name="BaseScheduler" c:type="UfoBaseScheduler*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="ufo_scheduler_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="BaseScheduler" c:type="UfoBaseScheduler"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SchedulerPrivate" c:type="UfoSchedulerPrivate*"/>
      </field>
    </class>
    <record name="SchedulerClass"
            c:type="UfoSchedulerClass"
            glib:is-gtype-struct-for="Scheduler">
      <doc xml:space="preserve">#UfoScheduler class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseSchedulerClass" c:type="UfoBaseSchedulerClass"/>
      </field>
    </record>
    <enumeration name="SchedulerError" c:type="UfoSchedulerError">
      <member name="scheduler_error_setup"
              value="0"
              c:identifier="UFO_SCHEDULER_ERROR_SETUP">
        <doc xml:space="preserve">Could not start scheduler due to error</doc>
      </member>
    </enumeration>
    <record name="SchedulerPrivate" c:type="UfoSchedulerPrivate" disguised="1">
    </record>
    <enumeration name="SendPattern" c:type="UfoSendPattern">
      <doc xml:space="preserve">The send pattern describes how results are passed to connected nodes.</doc>
      <member name="broadcast" value="0" c:identifier="UFO_SEND_BROADCAST">
        <doc xml:space="preserve">Broadcast data to all connected nodes</doc>
      </member>
      <member name="scatter" value="1" c:identifier="UFO_SEND_SCATTER">
        <doc xml:space="preserve">Scatter data among connected nodes.</doc>
      </member>
      <member name="sequential" value="2" c:identifier="UFO_SEND_SEQUENTIAL">
        <doc xml:space="preserve">Break up a linear input stream and transfer sub streams
one by one to connected nodes.</doc>
      </member>
    </enumeration>
    <constant name="TRACE_EVENT_TIME_MASK"
              value="0"
              c:type="UFO_TRACE_EVENT_TIME_MASK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TRACE_EVENT_TYPE_MASK"
              value="0"
              c:type="UFO_TRACE_EVENT_TYPE_MASK">
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Task"
               c:symbol-prefix="task"
               c:type="UfoTask"
               glib:type-name="UfoTask"
               glib:get-type="ufo_task_get_type"
               glib:type-struct="TaskIface">
      <function name="error_quark" c:identifier="ufo_task_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="generate" invoker="generate">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mode" invoker="get_mode">
        <return-value transfer-ownership="none">
          <type name="TaskMode" c:type="UfoTaskMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_dimensions" invoker="get_num_dimensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_inputs" invoker="get_num_inputs">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_requisition" invoker="get_requisition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="inputs" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer**"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process" invoker="process">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="inputs" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer**"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_json_object_property"
                      invoker="set_json_object_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="setup" invoker="setup" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="generate" c:identifier="ufo_task_generate">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="ufo_task_get_mode">
        <return-value transfer-ownership="none">
          <type name="TaskMode" c:type="UfoTaskMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_dimensions"
              c:identifier="ufo_task_get_num_dimensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_inputs" c:identifier="ufo_task_get_num_inputs">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requisition" c:identifier="ufo_task_get_requisition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="inputs" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer**"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process" c:identifier="ufo_task_process">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="inputs" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer**"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="requisition" transfer-ownership="none">
            <type name="Requisition" c:type="UfoRequisition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_json_object_property"
              c:identifier="ufo_task_set_json_object_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="ufo_task_setup" throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
        </parameters>
      </method>
      <method name="uses_cpu" c:identifier="ufo_task_uses_cpu">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="uses_gpu" c:identifier="ufo_task_uses_gpu">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <type name="Task" c:type="UfoTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="generated" when="first" no-recurse="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="processed" when="first" no-recurse="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <enumeration name="TaskError"
                 c:type="UfoTaskError"
                 glib:error-domain="ufo-task-error-quark">
      <member name="task_error_setup"
              value="0"
              c:identifier="UFO_TASK_ERROR_SETUP">
        <doc xml:space="preserve">Error during setup of a task.</doc>
      </member>
    </enumeration>
    <callback name="TaskGenerateFunc" c:type="UfoTaskGenerateFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Task" c:type="UfoTask*"/>
        </parameter>
        <parameter name="output" transfer-ownership="none">
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="requisition" transfer-ownership="none">
          <type name="Requisition" c:type="UfoRequisition*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TaskGraph"
           c:symbol-prefix="task_graph"
           c:type="UfoTaskGraph"
           parent="Graph"
           glib:type-name="UfoTaskGraph"
           glib:get-type="ufo_task_graph_get_type"
           glib:type-struct="TaskGraphClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoTaskGraph structure
are private and should only be accessed via the provided API.</doc>
      <constructor name="new" c:identifier="ufo_task_graph_new">
        <doc xml:space="preserve">Create a new task graph without any nodes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UfoGraph that can be upcast to a #UfoTaskGraph.</doc>
          <type name="Graph" c:type="UfoGraph*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="ufo_task_graph_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="connect_nodes" c:identifier="ufo_task_graph_connect_nodes">
        <doc xml:space="preserve">Connect @n1 with @n2 using @n2's default input port. To specify any other
port, use ufo_task_graph_connect_nodes_full().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="n1" transfer-ownership="none">
            <doc xml:space="preserve">A source node</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </parameter>
          <parameter name="n2" transfer-ownership="none">
            <doc xml:space="preserve">A destination node</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_nodes_full"
              c:identifier="ufo_task_graph_connect_nodes_full">
        <doc xml:space="preserve">Connect @n1 with @n2 using @n2's @input port.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="n1" transfer-ownership="none">
            <doc xml:space="preserve">A source node</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </parameter>
          <parameter name="n2" transfer-ownership="none">
            <doc xml:space="preserve">A destination node</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">Input port of @n2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand" c:identifier="ufo_task_graph_expand">
        <doc xml:space="preserve">Expands @task_graph in a way that most of the resources in @arch_graph can be
occupied. In the simple pipeline case, the longest possible GPU paths are
duplicated as much as there are GPUs in @arch_graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="resources" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoResources objects</doc>
            <type name="Resources" c:type="UfoResources*"/>
          </parameter>
          <parameter name="n_gpus" transfer-ownership="none">
            <doc xml:space="preserve">Number of GPUs to expand the graph for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="expand_remote" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if remote nodes should be inserted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="fuse" c:identifier="ufo_task_graph_fuse">
        <doc xml:space="preserve">Fuses task nodes to increase data locality.

Note: This is not implemented and a no-op right now.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_json_data"
              c:identifier="ufo_task_graph_get_json_data"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition" c:identifier="ufo_task_graph_get_partition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_alright"
              c:identifier="ufo_task_graph_is_alright"
              throws="1">
        <doc xml:space="preserve">Check if nodes int the task graph are properly connected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if everything is alright, %FALSE else.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="map" c:identifier="ufo_task_graph_map">
        <doc xml:space="preserve">Map task nodes of @task_graph to the processing nodes of @arch_graph. Not
doing this could break execution of @task_graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="gpu_nodes" transfer-ownership="none">
            <doc xml:space="preserve">List of #UfoGpuNode objects</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GpuNode"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="read_from_data"
              c:identifier="ufo_task_graph_read_from_data"
              throws="1">
        <doc xml:space="preserve">Read a JSON configuration file to fill the structure of @graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph.</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoPluginManager used to load the filters</doc>
            <type name="PluginManager" c:type="UfoPluginManager*"/>
          </parameter>
          <parameter name="json" transfer-ownership="none">
            <doc xml:space="preserve">%NULL-terminated string with JSON data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_from_file"
              c:identifier="ufo_task_graph_read_from_file"
              throws="1">
        <doc xml:space="preserve">Read a JSON configuration file to fill the structure of @graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph.</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoPluginManager used to load the filters</doc>
            <type name="PluginManager" c:type="UfoPluginManager*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Path and filename to the JSON file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_json"
              c:identifier="ufo_task_graph_save_to_json"
              throws="1">
        <doc xml:space="preserve">Save a JSON configuration file with the filter structure of @graph.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskGraph.</doc>
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">Path and filename to the JSON file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition" c:identifier="ufo_task_graph_set_partition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_graph" transfer-ownership="none">
            <type name="TaskGraph" c:type="UfoTaskGraph*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Graph" c:type="UfoGraph"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TaskGraphPrivate" c:type="UfoTaskGraphPrivate*"/>
      </field>
    </class>
    <record name="TaskGraphClass"
            c:type="UfoTaskGraphClass"
            glib:is-gtype-struct-for="TaskGraph">
      <doc xml:space="preserve">#UfoTaskGraph class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GraphClass" c:type="UfoGraphClass"/>
      </field>
    </record>
    <enumeration name="TaskGraphError" c:type="UfoTaskGraphError">
      <doc xml:space="preserve">Task graph errors</doc>
      <member name="json_key"
              value="0"
              c:identifier="UFO_TASK_GRAPH_ERROR_JSON_KEY">
        <doc xml:space="preserve">Key is not found in JSON</doc>
      </member>
      <member name="bad_inputs"
              value="1"
              c:identifier="UFO_TASK_GRAPH_ERROR_BAD_INPUTS">
        <doc xml:space="preserve">Inputs of a task do not play well with each
 other.</doc>
      </member>
    </enumeration>
    <record name="TaskGraphPrivate" c:type="UfoTaskGraphPrivate" disguised="1">
    </record>
    <record name="TaskIface"
            c:type="UfoTaskIface"
            glib:is-gtype-struct-for="Task">
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="setup">
        <callback name="setup" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="resources" transfer-ownership="none">
              <type name="Resources" c:type="UfoResources*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_inputs">
        <callback name="get_num_inputs">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_dimensions">
        <callback name="get_num_dimensions">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mode">
        <callback name="get_mode">
          <return-value transfer-ownership="none">
            <type name="TaskMode" c:type="UfoTaskMode"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_requisition">
        <callback name="get_requisition">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="inputs" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer**"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <type name="Requisition" c:type="UfoRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_json_object_property">
        <callback name="set_json_object_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="Json.Object" c:type="JsonObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process">
        <callback name="process">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="inputs" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer**"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <type name="Requisition" c:type="UfoRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate">
        <callback name="generate">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="Task" c:type="UfoTask*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="requisition" transfer-ownership="none">
              <type name="Requisition" c:type="UfoRequisition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="TaskMode" c:type="UfoTaskMode">
      <doc xml:space="preserve">Task modes describe how a task operates considering the input data.</doc>
      <member name="invalid" value="0" c:identifier="UFO_TASK_MODE_INVALID">
        <doc xml:space="preserve">invalid</doc>
      </member>
      <member name="processor"
              value="1"
              c:identifier="UFO_TASK_MODE_PROCESSOR">
        <doc xml:space="preserve">one-by-one processing</doc>
      </member>
      <member name="generator"
              value="2"
              c:identifier="UFO_TASK_MODE_GENERATOR">
        <doc xml:space="preserve">do not receive any data but produce a stream.</doc>
      </member>
      <member name="reductor" value="4" c:identifier="UFO_TASK_MODE_REDUCTOR">
        <doc xml:space="preserve">receive fininite stream and generate a reduced stream</doc>
      </member>
      <member name="sink" value="8" c:identifier="UFO_TASK_MODE_SINK">
        <doc xml:space="preserve">receives data but does not produce any,</doc>
      </member>
      <member name="cpu" value="16" c:identifier="UFO_TASK_MODE_CPU">
        <doc xml:space="preserve">runs on CPU</doc>
      </member>
      <member name="gpu" value="32" c:identifier="UFO_TASK_MODE_GPU">
        <doc xml:space="preserve">runs on GPU</doc>
      </member>
      <member name="share_data"
              value="64"
              c:identifier="UFO_TASK_MODE_SHARE_DATA">
        <doc xml:space="preserve">sibling tasks share the same input data</doc>
      </member>
      <member name="type_mask"
              value="15"
              c:identifier="UFO_TASK_MODE_TYPE_MASK">
        <doc xml:space="preserve">mask to get type from UfoTaskMode</doc>
      </member>
      <member name="processor_mask"
              value="48"
              c:identifier="UFO_TASK_MODE_PROCESSOR_MASK">
        <doc xml:space="preserve">mask to get processor from UfoTaskMode</doc>
      </member>
    </bitfield>
    <class name="TaskNode"
           c:symbol-prefix="task_node"
           c:type="UfoTaskNode"
           parent="Node"
           glib:type-name="UfoTaskNode"
           glib:get-type="ufo_task_node_get_type"
           glib:type-struct="TaskNodeClass">
      <doc xml:space="preserve">Main object for organizing filters. The contents of the #UfoTaskNode structure
are private and should only be accessed via the provided API.</doc>
      <method name="add_in_group" c:identifier="ufo_task_node_add_in_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_in_group"
              c:identifier="ufo_task_node_get_current_in_group">
        <doc xml:space="preserve">Several nodes can be connected to input @pos of @node. However, at a time
@node will fetch only one buffer from all its inputs. This method returns the
currently selected input group at @pos.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The current in group of @node for @pos.</doc>
          <type name="Group" c:type="UfoGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskNode</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve">Input position of @node</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="ufo_task_node_get_identifier">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_expected"
              c:identifier="ufo_task_node_get_num_expected">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_out_group" c:identifier="ufo_task_node_get_out_group">
        <doc xml:space="preserve">Get the current out of @node. The out group is used to fetch the ouput buffer
for @node using ufo_group_pop_output_buffer().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The out group of @node.</doc>
          <type name="Group" c:type="UfoGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskNode</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition" c:identifier="ufo_task_node_get_partition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plugin_name"
              c:identifier="ufo_task_node_get_plugin_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proc_node" c:identifier="ufo_task_node_get_proc_node">
        <doc xml:space="preserve">Get the associated processing node of @node.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UfoNode.</doc>
          <type name="Node" c:type="UfoNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskNode</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profiler" c:identifier="ufo_task_node_get_profiler">
        <doc xml:space="preserve">Get the associated profiler of @node.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #UfoProfiler object.</doc>
          <type name="Profiler" c:type="UfoProfiler*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskNode</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_send_pattern"
              c:identifier="ufo_task_node_get_send_pattern">
        <return-value transfer-ownership="none">
          <type name="SendPattern" c:type="UfoSendPattern"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="increase_processed"
              c:identifier="ufo_task_node_increase_processed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ufo_task_node_reset">
        <doc xml:space="preserve">Reset a task node so it can be re-used a second time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTaskNode</doc>
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_identifier"
              c:identifier="ufo_task_node_set_identifier">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_expected"
              c:identifier="ufo_task_node_set_num_expected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_expected" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_out_group" c:identifier="ufo_task_node_set_out_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="Group" c:type="UfoGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition" c:identifier="ufo_task_node_set_partition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="total" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_plugin_name"
              c:identifier="ufo_task_node_set_plugin_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proc_node" c:identifier="ufo_task_node_set_proc_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="task_node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="proc_node" transfer-ownership="none">
            <type name="Node" c:type="UfoNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_profiler" c:identifier="ufo_task_node_set_profiler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="profiler" transfer-ownership="none">
            <type name="Profiler" c:type="UfoProfiler*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_pattern"
              c:identifier="ufo_task_node_set_send_pattern">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="SendPattern" c:type="UfoSendPattern"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="ufo_task_node_setup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="switch_in_group"
              c:identifier="ufo_task_node_switch_in_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TaskNode" c:type="UfoTaskNode*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="num-processed" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Node" c:type="UfoNode"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TaskNodePrivate" c:type="UfoTaskNodePrivate*"/>
      </field>
    </class>
    <record name="TaskNodeClass"
            c:type="UfoTaskNodeClass"
            glib:is-gtype-struct-for="TaskNode">
      <doc xml:space="preserve">#UfoTaskNode class</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="NodeClass" c:type="UfoNodeClass"/>
      </field>
    </record>
    <record name="TaskNodePrivate" c:type="UfoTaskNodePrivate" disguised="1">
    </record>
    <callback name="TaskProcessFunc" c:type="UfoTaskProcessFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Task" c:type="UfoTask*"/>
        </parameter>
        <parameter name="inputs" transfer-ownership="none">
          <type name="Buffer" c:type="UfoBuffer**"/>
        </parameter>
        <parameter name="output" transfer-ownership="none">
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="requisition" transfer-ownership="none">
          <type name="Requisition" c:type="UfoRequisition*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TraceEvent" c:type="UfoTraceEvent">
      <field name="type" writable="1">
        <doc xml:space="preserve">Type of the event</doc>
        <type name="TraceEventType" c:type="UfoTraceEventType"/>
      </field>
      <field name="thread_id" writable="1">
        <doc xml:space="preserve">ID of thread in which the event was issued</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="timestamp" writable="1">
        <doc xml:space="preserve">Arbitrary timestamp of the event</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <bitfield name="TraceEventType" c:type="UfoTraceEventType">
      <member name="process" value="1" c:identifier="UFO_TRACE_EVENT_PROCESS">
        <doc xml:space="preserve">A process event</doc>
      </member>
      <member name="generate"
              value="2"
              c:identifier="UFO_TRACE_EVENT_GENERATE">
        <doc xml:space="preserve">A generate event</doc>
      </member>
      <member name="begin" value="4" c:identifier="UFO_TRACE_EVENT_BEGIN">
        <doc xml:space="preserve">Beginning of an event</doc>
      </member>
      <member name="end" value="8" c:identifier="UFO_TRACE_EVENT_END">
        <doc xml:space="preserve">End of an event</doc>
      </member>
    </bitfield>
    <interface name="Transform"
               c:symbol-prefix="transform"
               c:type="UfoTransform"
               glib:type-name="UfoTransform"
               glib:get-type="ufo_transform_get_type"
               glib:type-struct="TransformIface">
      <function name="string" c:identifier="ufo_transform_string">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string there in @pattern was placed @s.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">A pattern to place the result string in it.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">A string, which should be placed in the @pattern.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="separator" transfer-ownership="none">
            <doc xml:space="preserve">A string containing separator symbols in the @s that should be removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="direct" invoker="direct">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <type name="Transform" c:type="UfoTransform*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="inverse" invoker="inverse">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <type name="Transform" c:type="UfoTransform*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="direct" c:identifier="ufo_transform_direct">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <type name="Transform" c:type="UfoTransform*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="inverse" c:identifier="ufo_transform_inverse">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="transform" transfer-ownership="none">
            <type name="Transform" c:type="UfoTransform*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="Buffer" c:type="UfoBuffer*"/>
          </parameter>
          <parameter name="pevent" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="TransformIface"
            c:type="UfoTransformIface"
            glib:is-gtype-struct-for="Transform">
      <field name="parent_iface" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="direct">
        <callback name="direct">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="transform" transfer-ownership="none">
              <type name="Transform" c:type="UfoTransform*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="pevent" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="inverse">
        <callback name="inverse">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="transform" transfer-ownership="none">
              <type name="Transform" c:type="UfoTransform*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="output" transfer-ownership="none">
              <type name="Buffer" c:type="UfoBuffer*"/>
            </parameter>
            <parameter name="pevent" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TwoWayQueue" c:type="UfoTwoWayQueue" disguised="1">
      <method name="consumer_pop"
              c:identifier="ufo_two_way_queue_consumer_pop">
        <doc xml:space="preserve">Fetch an item for consumption.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A consumable item.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTwoWayQueue</doc>
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="consumer_push"
              c:identifier="ufo_two_way_queue_consumer_push">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ufo_two_way_queue_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capacity"
              c:identifier="ufo_two_way_queue_get_capacity">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ufo_two_way_queue_insert">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="producer_pop"
              c:identifier="ufo_two_way_queue_producer_pop">
        <doc xml:space="preserve">Fetch an item for production.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A producable item.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve">A #UfoTwoWayQueue</doc>
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="producer_push"
              c:identifier="ufo_two_way_queue_producer_push">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="ufo_two_way_queue_new"
                introspectable="0">
        <doc xml:space="preserve">Create a new two-way queue and optionally initialize the consumer queue with
elements from @init.</doc>
        <return-value>
          <doc xml:space="preserve">A new #UfoTwoWayQueue.</doc>
          <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
        </return-value>
        <parameters>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">List with elements inserted into
 consumer queue</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="ZmqMessenger"
           c:symbol-prefix="zmq_messenger"
           c:type="UfoZmqMessenger"
           parent="GObject.Object"
           glib:type-name="UfoZmqMessenger"
           glib:get-type="ufo_zmq_messenger_get_type"
           glib:type-struct="ZmqMessengerClass">
      <implements name="Messenger"/>
      <constructor name="new" c:identifier="ufo_zmq_messenger_new">
        <return-value transfer-ownership="full">
          <type name="ZmqMessenger" c:type="UfoZmqMessenger*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ZmqMessengerPrivate" c:type="UfoZmqMessengerPrivate*"/>
      </field>
    </class>
    <record name="ZmqMessengerClass"
            c:type="UfoZmqMessengerClass"
            glib:is-gtype-struct-for="ZmqMessenger">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ZmqMessengerPrivate"
            c:type="UfoZmqMessengerPrivate"
            disguised="1">
    </record>
    <function name="buffer_param_spec" c:identifier="ufo_buffer_param_spec">
      <doc xml:space="preserve">Creates a new #UfoBufferParamSpec instance specifying a #UFO_TYPE_BUFFER
property.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a newly created parameter specification

@see g_param_spec_internal() for details on property names.</doc>
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve">canonical name of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="nick" transfer-ownership="none">
          <doc xml:space="preserve">nick name for the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="blurb" transfer-ownership="none">
          <doc xml:space="preserve">description of the property specified</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="default_value" transfer-ownership="none">
          <doc xml:space="preserve">default value for the property specified</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve">flags for the property specified</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="copyable_copy"
              c:identifier="ufo_copyable_copy"
              moved-to="Copyable.copy">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A copy of the @origin object.</doc>
        <type name="Copyable" c:type="UfoCopyable*"/>
      </return-value>
      <parameters>
        <parameter name="origin" transfer-ownership="none">
          <doc xml:space="preserve">A source object that implements #UfoCopyable interface.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="copy" transfer-ownership="none">
          <doc xml:space="preserve">A destination object that implements #UfoCopyable interface.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new"
              c:identifier="ufo_message_new"
              moved-to="Message.new"
              introspectable="0">
      <doc xml:space="preserve">Create a new message.</doc>
      <return-value>
        <type name="Message" c:type="UfoMessage*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">message type</doc>
          <type name="MessageType" c:type="UfoMessageType"/>
        </parameter>
        <parameter name="data_size" transfer-ownership="none">
          <doc xml:space="preserve">total size of the message</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="messenger_create"
              c:identifier="ufo_messenger_create"
              moved-to="Messenger.create"
              throws="1">
      <doc xml:space="preserve">Create a new #UfoMessenger basend on the PROTOCOL:// of the given @address</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #UfoMessenger or %NULL in case of
error.</doc>
        <type name="Messenger" c:type="UfoMessenger*"/>
      </return-value>
      <parameters>
        <parameter name="address" transfer-ownership="none">
          <doc xml:space="preserve">listen address for the messenger</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="messenger_error_quark"
              c:identifier="ufo_messenger_error_quark"
              moved-to="Messenger.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="object_from_json" c:identifier="ufo_object_from_json">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A pointer to the object created with passed Json @object.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve">A #JsonObject that should be processed.</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </parameter>
        <parameter name="manager" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoPluginManager.</doc>
          <type name="PluginManager" c:type="UfoPluginManager*"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_POSC" c:identifier="ufo_op_POSC">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the POSC operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_add" c:identifier="ufo_op_add">
      <doc xml:space="preserve">out = arg1 + arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_add2" c:identifier="ufo_op_add2">
      <doc xml:space="preserve">@out = @arg1 + @modifier * @arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="modifier" transfer-ownership="none">
          <doc xml:space="preserve">Scalar value</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_deduction" c:identifier="ufo_op_deduction">
      <doc xml:space="preserve">@out = @arg1 - @arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_deduction2" c:identifier="ufo_op_deduction2">
      <doc xml:space="preserve">@out = @arg1 - @modifier * @arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="modifier" transfer-ownership="none">
          <doc xml:space="preserve">Scalar value</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_euclidean_distance"
              c:identifier="ufo_op_euclidean_distance">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">Euclidean distance between @arg1 and @arg2.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_gradient_descent"
              c:identifier="ufo_op_gradient_descent">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the POSC operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_gradient_directions"
              c:identifier="ufo_op_gradient_directions">
      <doc xml:space="preserve">Compute magnitude of gradients</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="magnitudes" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_gradient_magnitudes"
              c:identifier="ufo_op_gradient_magnitudes">
      <doc xml:space="preserve">Compute magnitude of gradients</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_inv" c:identifier="ufo_op_inv">
      <doc xml:space="preserve">Invert @arg.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the invert operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_l1_norm" c:identifier="ufo_op_l1_norm">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">L1 norm.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_l2_norm" c:identifier="ufo_op_l2_norm">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">L2 norm.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_mul" c:identifier="ufo_op_mul">
      <doc xml:space="preserve">out = arg1 * arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the mul operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_mul_rows" c:identifier="ufo_op_mul_rows">
      <doc xml:space="preserve">@out = @arg1 - @modifier * @arg2</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the add operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg1" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve">Offset</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">n ?</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="op_set" c:identifier="ufo_op_set">
      <doc xml:space="preserve">Fill a buffer with a value using OpenCL.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Event of the set operation</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="arg" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoBuffer</doc>
          <type name="Buffer" c:type="UfoBuffer*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">Value to fill @arg with</doc>
          <type name="gfloat" c:type="gfloat"/>
        </parameter>
        <parameter name="resources" transfer-ownership="none">
          <doc xml:space="preserve">#UfoResources object</doc>
          <type name="Resources" c:type="UfoResources*"/>
        </parameter>
        <parameter name="command_queue" transfer-ownership="none">
          <doc xml:space="preserve">A valid cl_command_queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_get_all_plugin_names"
              c:identifier="ufo_plugin_get_all_plugin_names">
      <doc xml:space="preserve">Return a list with potential plugin names that match shared objects in all
search paths.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">List of strings with filter names</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="manager" transfer-ownership="none">
          <doc xml:space="preserve">A #UfoPluginManager</doc>
          <type name="PluginManager" c:type="UfoPluginManager*"/>
        </parameter>
        <parameter name="filename_regex" transfer-ownership="none">
          <doc xml:space="preserve">Regex for filenames</doc>
          <type name="GLib.Regex" c:type="const GRegex*"/>
        </parameter>
        <parameter name="filename_pattern" transfer-ownership="none">
          <doc xml:space="preserve">Pattern according with the files will be searched</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_emit"
              c:identifier="ufo_signal_emit"
              introspectable="0">
      <doc xml:space="preserve">Emits a signal just like g_signal_emit(). In case ufo-core is compiled with
Python-support, the GIL will be locked before signalling.

Note that g_signal_emit() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve">the instance the signal is being emitted on.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="signal_id" transfer-ownership="none">
          <doc xml:space="preserve">the signal id</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="detail" transfer-ownership="none">
          <doc xml:space="preserve">the detail</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">parameters to be passed to the signal, followed by a
 location for the return value. If the return type of the signal
 is #G_TYPE_NONE, the return value location can be omitted.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="task_error_quark"
              c:identifier="ufo_task_error_quark"
              moved-to="Task.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="transform_string"
              c:identifier="ufo_transform_string"
              moved-to="Transform.string">
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A string there in @pattern was placed @s.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve">A pattern to place the result string in it.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <doc xml:space="preserve">A string, which should be placed in the @pattern.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="separator" transfer-ownership="none">
          <doc xml:space="preserve">A string containing separator symbols in the @s that should be removed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="two_way_queue_new"
              c:identifier="ufo_two_way_queue_new"
              moved-to="TwoWayQueue.new"
              introspectable="0">
      <doc xml:space="preserve">Create a new two-way queue and optionally initialize the consumer queue with
elements from @init.</doc>
      <return-value>
        <doc xml:space="preserve">A new #UfoTwoWayQueue.</doc>
        <type name="TwoWayQueue" c:type="UfoTwoWayQueue*"/>
      </return-value>
      <parameters>
        <parameter name="init" transfer-ownership="none">
          <doc xml:space="preserve">List with elements inserted into
 consumer queue</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
