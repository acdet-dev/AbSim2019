<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Guestfs"
             version="1.0"
             shared-library="libguestfs-gobject-1.0-0.dll"
             c:identifier-prefixes="Guestfs"
             c:symbol-prefixes="guestfs">
    <class name="AddDomain"
           c:symbol-prefix="add_domain"
           c:type="GuestfsAddDomain"
           parent="GObject.Object"
           glib:type-name="GuestfsAddDomain"
           glib:get-type="guestfs_add_domain_get_type"
           glib:type-struct="AddDomainClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_add_domain.</doc>
      <constructor name="new" c:identifier="guestfs_add_domain_new">
        <doc xml:space="preserve">Create a new GuestfsAddDomain object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsAddDomain object</doc>
          <type name="AddDomain" c:type="GuestfsAddDomain*"/>
        </return-value>
      </constructor>
      <property name="allowuuid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="iface"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="libvirturi"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="live"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="readonly"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="readonlydisk"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AddDomainPrivate" c:type="GuestfsAddDomainPrivate*"/>
      </field>
    </class>
    <record name="AddDomainClass"
            c:type="GuestfsAddDomainClass"
            glib:is-gtype-struct-for="AddDomain">
      <doc xml:space="preserve">A class metadata object for GuestfsAddDomain.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsAddDomainClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AddDomainPrivate"
            c:type="GuestfsAddDomainPrivate"
            disguised="1">
    </record>
    <class name="AddDrive"
           c:symbol-prefix="add_drive"
           c:type="GuestfsAddDrive"
           parent="GObject.Object"
           glib:type-name="GuestfsAddDrive"
           glib:get-type="guestfs_add_drive_get_type"
           glib:type-struct="AddDriveClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_add_drive.</doc>
      <constructor name="new" c:identifier="guestfs_add_drive_new">
        <doc xml:space="preserve">Create a new GuestfsAddDrive object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsAddDrive object</doc>
          <type name="AddDrive" c:type="GuestfsAddDrive*"/>
        </return-value>
      </constructor>
      <property name="format"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="iface"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="readonly"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="secret"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="username"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AddDrivePrivate" c:type="GuestfsAddDrivePrivate*"/>
      </field>
    </class>
    <record name="AddDriveClass"
            c:type="GuestfsAddDriveClass"
            glib:is-gtype-struct-for="AddDrive">
      <doc xml:space="preserve">A class metadata object for GuestfsAddDrive.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsAddDriveClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AddDrivePrivate"
            c:type="GuestfsAddDrivePrivate"
            disguised="1">
    </record>
    <record name="Application"
            c:type="GuestfsApplication"
            glib:type-name="GuestfsApplication"
            glib:get-type="guestfs_application_get_type"
            c:symbol-prefix="application">
      <field name="app_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_display_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_epoch" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="app_version" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_release" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_install_path" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_trans_path" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_publisher" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_url" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_source_package" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_summary" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_description" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <record name="Application2"
            c:type="GuestfsApplication2"
            glib:type-name="GuestfsApplication2"
            glib:get-type="guestfs_application2_get_type"
            c:symbol-prefix="application2">
      <field name="app2_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_display_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_epoch" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="app2_version" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_release" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_arch" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_install_path" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_trans_path" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_publisher" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_url" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_source_package" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_summary" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_description" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_spare1" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_spare2" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_spare3" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app2_spare4" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="BTRFSFilesystemResize"
           c:symbol-prefix="btrfs_filesystem_resize"
           c:type="GuestfsBTRFSFilesystemResize"
           parent="GObject.Object"
           glib:type-name="GuestfsBTRFSFilesystemResize"
           glib:get-type="guestfs_btrfs_filesystem_resize_get_type"
           glib:type-struct="BTRFSFilesystemResizeClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_btrfs_filesystem_resize.</doc>
      <constructor name="new"
                   c:identifier="guestfs_btrfs_filesystem_resize_new">
        <doc xml:space="preserve">Create a new GuestfsBTRFSFilesystemResize object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsBTRFSFilesystemResize object</doc>
          <type name="BTRFSFilesystemResize"
                c:type="GuestfsBTRFSFilesystemResize*"/>
        </return-value>
      </constructor>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BTRFSFilesystemResizePrivate"
              c:type="GuestfsBTRFSFilesystemResizePrivate*"/>
      </field>
    </class>
    <record name="BTRFSFilesystemResizeClass"
            c:type="GuestfsBTRFSFilesystemResizeClass"
            glib:is-gtype-struct-for="BTRFSFilesystemResize">
      <doc xml:space="preserve">A class metadata object for GuestfsBTRFSFilesystemResize.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsBTRFSFilesystemResizeClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BTRFSFilesystemResizePrivate"
            c:type="GuestfsBTRFSFilesystemResizePrivate"
            disguised="1">
    </record>
    <record name="BTRFSSubvolume"
            c:type="GuestfsBTRFSSubvolume"
            glib:type-name="GuestfsBTRFSSubvolume"
            glib:get-type="guestfs_btrfssubvolume_get_type"
            c:symbol-prefix="btrfssubvolume">
      <field name="btrfssubvolume_id" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="btrfssubvolume_top_level_id" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="btrfssubvolume_path" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="BtrfsFsck"
           c:symbol-prefix="btrfs_fsck"
           c:type="GuestfsBtrfsFsck"
           parent="GObject.Object"
           glib:type-name="GuestfsBtrfsFsck"
           glib:get-type="guestfs_btrfs_fsck_get_type"
           glib:type-struct="BtrfsFsckClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_btrfs_fsck.</doc>
      <constructor name="new" c:identifier="guestfs_btrfs_fsck_new">
        <doc xml:space="preserve">Create a new GuestfsBtrfsFsck object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsBtrfsFsck object</doc>
          <type name="BtrfsFsck" c:type="GuestfsBtrfsFsck*"/>
        </return-value>
      </constructor>
      <property name="repair"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="superblock"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BtrfsFsckPrivate" c:type="GuestfsBtrfsFsckPrivate*"/>
      </field>
    </class>
    <record name="BtrfsFsckClass"
            c:type="GuestfsBtrfsFsckClass"
            glib:is-gtype-struct-for="BtrfsFsck">
      <doc xml:space="preserve">A class metadata object for GuestfsBtrfsFsck.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsBtrfsFsckClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BtrfsFsckPrivate"
            c:type="GuestfsBtrfsFsckPrivate"
            disguised="1">
    </record>
    <class name="CompressDeviceOut"
           c:symbol-prefix="compress_device_out"
           c:type="GuestfsCompressDeviceOut"
           parent="GObject.Object"
           glib:type-name="GuestfsCompressDeviceOut"
           glib:get-type="guestfs_compress_device_out_get_type"
           glib:type-struct="CompressDeviceOutClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_compress_device_out.</doc>
      <constructor name="new" c:identifier="guestfs_compress_device_out_new">
        <doc xml:space="preserve">Create a new GuestfsCompressDeviceOut object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCompressDeviceOut object</doc>
          <type name="CompressDeviceOut" c:type="GuestfsCompressDeviceOut*"/>
        </return-value>
      </constructor>
      <property name="level"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CompressDeviceOutPrivate"
              c:type="GuestfsCompressDeviceOutPrivate*"/>
      </field>
    </class>
    <record name="CompressDeviceOutClass"
            c:type="GuestfsCompressDeviceOutClass"
            glib:is-gtype-struct-for="CompressDeviceOut">
      <doc xml:space="preserve">A class metadata object for GuestfsCompressDeviceOut.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCompressDeviceOutClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CompressDeviceOutPrivate"
            c:type="GuestfsCompressDeviceOutPrivate"
            disguised="1">
    </record>
    <class name="CompressOut"
           c:symbol-prefix="compress_out"
           c:type="GuestfsCompressOut"
           parent="GObject.Object"
           glib:type-name="GuestfsCompressOut"
           glib:get-type="guestfs_compress_out_get_type"
           glib:type-struct="CompressOutClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_compress_out.</doc>
      <constructor name="new" c:identifier="guestfs_compress_out_new">
        <doc xml:space="preserve">Create a new GuestfsCompressOut object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCompressOut object</doc>
          <type name="CompressOut" c:type="GuestfsCompressOut*"/>
        </return-value>
      </constructor>
      <property name="level"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CompressOutPrivate" c:type="GuestfsCompressOutPrivate*"/>
      </field>
    </class>
    <record name="CompressOutClass"
            c:type="GuestfsCompressOutClass"
            glib:is-gtype-struct-for="CompressOut">
      <doc xml:space="preserve">A class metadata object for GuestfsCompressOut.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCompressOutClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CompressOutPrivate"
            c:type="GuestfsCompressOutPrivate"
            disguised="1">
    </record>
    <class name="CopyDeviceToDevice"
           c:symbol-prefix="copy_device_to_device"
           c:type="GuestfsCopyDeviceToDevice"
           parent="GObject.Object"
           glib:type-name="GuestfsCopyDeviceToDevice"
           glib:get-type="guestfs_copy_device_to_device_get_type"
           glib:type-struct="CopyDeviceToDeviceClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_copy_device_to_device.</doc>
      <constructor name="new" c:identifier="guestfs_copy_device_to_device_new">
        <doc xml:space="preserve">Create a new GuestfsCopyDeviceToDevice object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCopyDeviceToDevice object</doc>
          <type name="CopyDeviceToDevice" c:type="GuestfsCopyDeviceToDevice*"/>
        </return-value>
      </constructor>
      <property name="destoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="sparse"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="srcoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CopyDeviceToDevicePrivate"
              c:type="GuestfsCopyDeviceToDevicePrivate*"/>
      </field>
    </class>
    <record name="CopyDeviceToDeviceClass"
            c:type="GuestfsCopyDeviceToDeviceClass"
            glib:is-gtype-struct-for="CopyDeviceToDevice">
      <doc xml:space="preserve">A class metadata object for GuestfsCopyDeviceToDevice.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCopyDeviceToDeviceClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CopyDeviceToDevicePrivate"
            c:type="GuestfsCopyDeviceToDevicePrivate"
            disguised="1">
    </record>
    <class name="CopyDeviceToFile"
           c:symbol-prefix="copy_device_to_file"
           c:type="GuestfsCopyDeviceToFile"
           parent="GObject.Object"
           glib:type-name="GuestfsCopyDeviceToFile"
           glib:get-type="guestfs_copy_device_to_file_get_type"
           glib:type-struct="CopyDeviceToFileClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_copy_device_to_file.</doc>
      <constructor name="new" c:identifier="guestfs_copy_device_to_file_new">
        <doc xml:space="preserve">Create a new GuestfsCopyDeviceToFile object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCopyDeviceToFile object</doc>
          <type name="CopyDeviceToFile" c:type="GuestfsCopyDeviceToFile*"/>
        </return-value>
      </constructor>
      <property name="destoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="sparse"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="srcoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CopyDeviceToFilePrivate"
              c:type="GuestfsCopyDeviceToFilePrivate*"/>
      </field>
    </class>
    <record name="CopyDeviceToFileClass"
            c:type="GuestfsCopyDeviceToFileClass"
            glib:is-gtype-struct-for="CopyDeviceToFile">
      <doc xml:space="preserve">A class metadata object for GuestfsCopyDeviceToFile.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCopyDeviceToFileClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CopyDeviceToFilePrivate"
            c:type="GuestfsCopyDeviceToFilePrivate"
            disguised="1">
    </record>
    <class name="CopyFileToDevice"
           c:symbol-prefix="copy_file_to_device"
           c:type="GuestfsCopyFileToDevice"
           parent="GObject.Object"
           glib:type-name="GuestfsCopyFileToDevice"
           glib:get-type="guestfs_copy_file_to_device_get_type"
           glib:type-struct="CopyFileToDeviceClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_copy_file_to_device.</doc>
      <constructor name="new" c:identifier="guestfs_copy_file_to_device_new">
        <doc xml:space="preserve">Create a new GuestfsCopyFileToDevice object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCopyFileToDevice object</doc>
          <type name="CopyFileToDevice" c:type="GuestfsCopyFileToDevice*"/>
        </return-value>
      </constructor>
      <property name="destoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="sparse"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="srcoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CopyFileToDevicePrivate"
              c:type="GuestfsCopyFileToDevicePrivate*"/>
      </field>
    </class>
    <record name="CopyFileToDeviceClass"
            c:type="GuestfsCopyFileToDeviceClass"
            glib:is-gtype-struct-for="CopyFileToDevice">
      <doc xml:space="preserve">A class metadata object for GuestfsCopyFileToDevice.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCopyFileToDeviceClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CopyFileToDevicePrivate"
            c:type="GuestfsCopyFileToDevicePrivate"
            disguised="1">
    </record>
    <class name="CopyFileToFile"
           c:symbol-prefix="copy_file_to_file"
           c:type="GuestfsCopyFileToFile"
           parent="GObject.Object"
           glib:type-name="GuestfsCopyFileToFile"
           glib:get-type="guestfs_copy_file_to_file_get_type"
           glib:type-struct="CopyFileToFileClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_copy_file_to_file.</doc>
      <constructor name="new" c:identifier="guestfs_copy_file_to_file_new">
        <doc xml:space="preserve">Create a new GuestfsCopyFileToFile object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsCopyFileToFile object</doc>
          <type name="CopyFileToFile" c:type="GuestfsCopyFileToFile*"/>
        </return-value>
      </constructor>
      <property name="destoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="sparse"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="srcoffset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CopyFileToFilePrivate"
              c:type="GuestfsCopyFileToFilePrivate*"/>
      </field>
    </class>
    <record name="CopyFileToFileClass"
            c:type="GuestfsCopyFileToFileClass"
            glib:is-gtype-struct-for="CopyFileToFile">
      <doc xml:space="preserve">A class metadata object for GuestfsCopyFileToFile.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsCopyFileToFileClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CopyFileToFilePrivate"
            c:type="GuestfsCopyFileToFilePrivate"
            disguised="1">
    </record>
    <record name="Dirent"
            c:type="GuestfsDirent"
            glib:type-name="GuestfsDirent"
            glib:get-type="guestfs_dirent_get_type"
            c:symbol-prefix="dirent">
      <field name="ino" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="ftyp" writable="1">
        <doc xml:space="preserve">A character</doc>
        <type name="gchar" c:type="gchar"/>
      </field>
      <field name="name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="E2fsck"
           c:symbol-prefix="e2fsck"
           c:type="GuestfsE2fsck"
           parent="GObject.Object"
           glib:type-name="GuestfsE2fsck"
           glib:get-type="guestfs_e2fsck_get_type"
           glib:type-struct="E2fsckClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_e2fsck.</doc>
      <constructor name="new" c:identifier="guestfs_e2fsck_new">
        <doc xml:space="preserve">Create a new GuestfsE2fsck object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsE2fsck object</doc>
          <type name="E2fsck" c:type="GuestfsE2fsck*"/>
        </return-value>
      </constructor>
      <property name="correct"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="forceall"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="E2fsckPrivate" c:type="GuestfsE2fsckPrivate*"/>
      </field>
    </class>
    <record name="E2fsckClass"
            c:type="GuestfsE2fsckClass"
            glib:is-gtype-struct-for="E2fsck">
      <doc xml:space="preserve">A class metadata object for GuestfsE2fsck.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsE2fsckClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="E2fsckPrivate" c:type="GuestfsE2fsckPrivate" disguised="1">
    </record>
    <class name="Fstrim"
           c:symbol-prefix="fstrim"
           c:type="GuestfsFstrim"
           parent="GObject.Object"
           glib:type-name="GuestfsFstrim"
           glib:get-type="guestfs_fstrim_get_type"
           glib:type-struct="FstrimClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_fstrim.</doc>
      <constructor name="new" c:identifier="guestfs_fstrim_new">
        <doc xml:space="preserve">Create a new GuestfsFstrim object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsFstrim object</doc>
          <type name="Fstrim" c:type="GuestfsFstrim*"/>
        </return-value>
      </constructor>
      <property name="length"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="minimumfreeextent"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="offset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FstrimPrivate" c:type="GuestfsFstrimPrivate*"/>
      </field>
    </class>
    <record name="FstrimClass"
            c:type="GuestfsFstrimClass"
            glib:is-gtype-struct-for="Fstrim">
      <doc xml:space="preserve">A class metadata object for GuestfsFstrim.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsFstrimClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FstrimPrivate" c:type="GuestfsFstrimPrivate" disguised="1">
    </record>
    <class name="Grep"
           c:symbol-prefix="grep"
           c:type="GuestfsGrep"
           parent="GObject.Object"
           glib:type-name="GuestfsGrep"
           glib:get-type="guestfs_grep_get_type"
           glib:type-struct="GrepClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_grep.</doc>
      <constructor name="new" c:identifier="guestfs_grep_new">
        <doc xml:space="preserve">Create a new GuestfsGrep object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsGrep object</doc>
          <type name="Grep" c:type="GuestfsGrep*"/>
        </return-value>
      </constructor>
      <property name="compressed"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="extended"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="fixed"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="insensitive"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="GrepPrivate" c:type="GuestfsGrepPrivate*"/>
      </field>
    </class>
    <record name="GrepClass"
            c:type="GuestfsGrepClass"
            glib:is-gtype-struct-for="Grep">
      <doc xml:space="preserve">A class metadata object for GuestfsGrep.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsGrepClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GrepPrivate" c:type="GuestfsGrepPrivate" disguised="1">
    </record>
    <record name="HivexNode"
            c:type="GuestfsHivexNode"
            glib:type-name="GuestfsHivexNode"
            glib:get-type="guestfs_hivex_node_get_type"
            c:symbol-prefix="hivex_node">
      <field name="hivex_node_h" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <class name="HivexOpen"
           c:symbol-prefix="hivex_open"
           c:type="GuestfsHivexOpen"
           parent="GObject.Object"
           glib:type-name="GuestfsHivexOpen"
           glib:get-type="guestfs_hivex_open_get_type"
           glib:type-struct="HivexOpenClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_hivex_open.</doc>
      <constructor name="new" c:identifier="guestfs_hivex_open_new">
        <doc xml:space="preserve">Create a new GuestfsHivexOpen object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsHivexOpen object</doc>
          <type name="HivexOpen" c:type="GuestfsHivexOpen*"/>
        </return-value>
      </constructor>
      <property name="debug"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="verbose"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="write"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="HivexOpenPrivate" c:type="GuestfsHivexOpenPrivate*"/>
      </field>
    </class>
    <record name="HivexOpenClass"
            c:type="GuestfsHivexOpenClass"
            glib:is-gtype-struct-for="HivexOpen">
      <doc xml:space="preserve">A class metadata object for GuestfsHivexOpen.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsHivexOpenClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="HivexOpenPrivate"
            c:type="GuestfsHivexOpenPrivate"
            disguised="1">
    </record>
    <record name="HivexValue"
            c:type="GuestfsHivexValue"
            glib:type-name="GuestfsHivexValue"
            glib:get-type="guestfs_hivex_value_get_type"
            c:symbol-prefix="hivex_value">
      <field name="hivex_value_h" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <record name="INotifyEvent"
            c:type="GuestfsINotifyEvent"
            glib:type-name="GuestfsINotifyEvent"
            glib:get-type="guestfs_inotify_event_get_type"
            c:symbol-prefix="inotify_event">
      <field name="in_wd" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="in_mask" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="in_cookie" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="in_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <record name="ISOInfo"
            c:type="GuestfsISOInfo"
            glib:type-name="GuestfsISOInfo"
            glib:get-type="guestfs_isoinfo_get_type"
            c:symbol-prefix="isoinfo">
      <field name="iso_system_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_volume_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_volume_space_size" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="iso_volume_set_size" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="iso_volume_sequence_number" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="iso_logical_block_size" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="iso_volume_set_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_publisher_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_data_preparer_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_application_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_copyright_file_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_abstract_file_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_bibliographic_file_id" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="iso_volume_creation_t" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="iso_volume_modification_t" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="iso_volume_expiration_t" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="iso_volume_effective_t" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <class name="InspectGetIcon"
           c:symbol-prefix="inspect_get_icon"
           c:type="GuestfsInspectGetIcon"
           parent="GObject.Object"
           glib:type-name="GuestfsInspectGetIcon"
           glib:get-type="guestfs_inspect_get_icon_get_type"
           glib:type-struct="InspectGetIconClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_inspect_get_icon.</doc>
      <constructor name="new" c:identifier="guestfs_inspect_get_icon_new">
        <doc xml:space="preserve">Create a new GuestfsInspectGetIcon object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsInspectGetIcon object</doc>
          <type name="InspectGetIcon" c:type="GuestfsInspectGetIcon*"/>
        </return-value>
      </constructor>
      <property name="favicon"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="highquality"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="InspectGetIconPrivate"
              c:type="GuestfsInspectGetIconPrivate*"/>
      </field>
    </class>
    <record name="InspectGetIconClass"
            c:type="GuestfsInspectGetIconClass"
            glib:is-gtype-struct-for="InspectGetIcon">
      <doc xml:space="preserve">A class metadata object for GuestfsInspectGetIcon.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsInspectGetIconClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="InspectGetIconPrivate"
            c:type="GuestfsInspectGetIconPrivate"
            disguised="1">
    </record>
    <record name="IntBool"
            c:type="GuestfsIntBool"
            glib:type-name="GuestfsIntBool"
            glib:get-type="guestfs_int_bool_get_type"
            c:symbol-prefix="int_bool">
      <field name="i" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="b" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
    </record>
    <class name="InternalTest"
           c:symbol-prefix="internal_test"
           c:type="GuestfsInternalTest"
           parent="GObject.Object"
           glib:type-name="GuestfsInternalTest"
           glib:get-type="guestfs_internal_test_get_type"
           glib:type-struct="InternalTestClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_internal_test.</doc>
      <constructor name="new" c:identifier="guestfs_internal_test_new">
        <doc xml:space="preserve">Create a new GuestfsInternalTest object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsInternalTest object</doc>
          <type name="InternalTest" c:type="GuestfsInternalTest*"/>
        </return-value>
      </constructor>
      <property name="obool"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="oint"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="oint64"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ostring"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="InternalTestPrivate" c:type="GuestfsInternalTestPrivate*"/>
      </field>
    </class>
    <class name="InternalTest63Optargs"
           c:symbol-prefix="internal_test_63_optargs"
           c:type="GuestfsInternalTest63Optargs"
           parent="GObject.Object"
           glib:type-name="GuestfsInternalTest63Optargs"
           glib:get-type="guestfs_internal_test_63_optargs_get_type"
           glib:type-struct="InternalTest63OptargsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_internal_test_63_optargs.</doc>
      <constructor name="new"
                   c:identifier="guestfs_internal_test_63_optargs_new">
        <doc xml:space="preserve">Create a new GuestfsInternalTest63Optargs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsInternalTest63Optargs object</doc>
          <type name="InternalTest63Optargs"
                c:type="GuestfsInternalTest63Optargs*"/>
        </return-value>
      </constructor>
      <property name="opt1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt11"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt12"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt13"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt14"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt15"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt16"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt17"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt18"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt19"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt20"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt21"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt22"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt23"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt24"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt25"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt26"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt27"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt28"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt29"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt30"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt31"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt32"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt33"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt34"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt35"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt36"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt37"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt38"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt39"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt4"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt40"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt41"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt42"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt43"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt44"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt45"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt46"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt47"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt48"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt49"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt5"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt50"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt51"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt52"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt53"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt54"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt55"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt56"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt57"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt58"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt59"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt60"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt61"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt62"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt63"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt7"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opt9"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="InternalTest63OptargsPrivate"
              c:type="GuestfsInternalTest63OptargsPrivate*"/>
      </field>
    </class>
    <record name="InternalTest63OptargsClass"
            c:type="GuestfsInternalTest63OptargsClass"
            glib:is-gtype-struct-for="InternalTest63Optargs">
      <doc xml:space="preserve">A class metadata object for GuestfsInternalTest63Optargs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsInternalTest63OptargsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="InternalTest63OptargsPrivate"
            c:type="GuestfsInternalTest63OptargsPrivate"
            disguised="1">
    </record>
    <record name="InternalTestClass"
            c:type="GuestfsInternalTestClass"
            glib:is-gtype-struct-for="InternalTest">
      <doc xml:space="preserve">A class metadata object for GuestfsInternalTest.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsInternalTestClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="InternalTestOnlyOptargs"
           c:symbol-prefix="internal_test_only_optargs"
           c:type="GuestfsInternalTestOnlyOptargs"
           parent="GObject.Object"
           glib:type-name="GuestfsInternalTestOnlyOptargs"
           glib:get-type="guestfs_internal_test_only_optargs_get_type"
           glib:type-struct="InternalTestOnlyOptargsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_internal_test_only_optargs.</doc>
      <constructor name="new"
                   c:identifier="guestfs_internal_test_only_optargs_new">
        <doc xml:space="preserve">Create a new GuestfsInternalTestOnlyOptargs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsInternalTestOnlyOptargs object</doc>
          <type name="InternalTestOnlyOptargs"
                c:type="GuestfsInternalTestOnlyOptargs*"/>
        </return-value>
      </constructor>
      <property name="test"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="InternalTestOnlyOptargsPrivate"
              c:type="GuestfsInternalTestOnlyOptargsPrivate*"/>
      </field>
    </class>
    <record name="InternalTestOnlyOptargsClass"
            c:type="GuestfsInternalTestOnlyOptargsClass"
            glib:is-gtype-struct-for="InternalTestOnlyOptargs">
      <doc xml:space="preserve">A class metadata object for GuestfsInternalTestOnlyOptargs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsInternalTestOnlyOptargsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="InternalTestOnlyOptargsPrivate"
            c:type="GuestfsInternalTestOnlyOptargsPrivate"
            disguised="1">
    </record>
    <record name="InternalTestPrivate"
            c:type="GuestfsInternalTestPrivate"
            disguised="1">
    </record>
    <class name="IsBlockdev"
           c:symbol-prefix="is_blockdev"
           c:type="GuestfsIsBlockdev"
           parent="GObject.Object"
           glib:type-name="GuestfsIsBlockdev"
           glib:get-type="guestfs_is_blockdev_get_type"
           glib:type-struct="IsBlockdevClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_blockdev.</doc>
      <constructor name="new" c:identifier="guestfs_is_blockdev_new">
        <doc xml:space="preserve">Create a new GuestfsIsBlockdev object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsBlockdev object</doc>
          <type name="IsBlockdev" c:type="GuestfsIsBlockdev*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsBlockdevPrivate" c:type="GuestfsIsBlockdevPrivate*"/>
      </field>
    </class>
    <record name="IsBlockdevClass"
            c:type="GuestfsIsBlockdevClass"
            glib:is-gtype-struct-for="IsBlockdev">
      <doc xml:space="preserve">A class metadata object for GuestfsIsBlockdev.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsBlockdevClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsBlockdevPrivate"
            c:type="GuestfsIsBlockdevPrivate"
            disguised="1">
    </record>
    <class name="IsChardev"
           c:symbol-prefix="is_chardev"
           c:type="GuestfsIsChardev"
           parent="GObject.Object"
           glib:type-name="GuestfsIsChardev"
           glib:get-type="guestfs_is_chardev_get_type"
           glib:type-struct="IsChardevClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_chardev.</doc>
      <constructor name="new" c:identifier="guestfs_is_chardev_new">
        <doc xml:space="preserve">Create a new GuestfsIsChardev object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsChardev object</doc>
          <type name="IsChardev" c:type="GuestfsIsChardev*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsChardevPrivate" c:type="GuestfsIsChardevPrivate*"/>
      </field>
    </class>
    <record name="IsChardevClass"
            c:type="GuestfsIsChardevClass"
            glib:is-gtype-struct-for="IsChardev">
      <doc xml:space="preserve">A class metadata object for GuestfsIsChardev.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsChardevClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsChardevPrivate"
            c:type="GuestfsIsChardevPrivate"
            disguised="1">
    </record>
    <class name="IsDir"
           c:symbol-prefix="is_dir"
           c:type="GuestfsIsDir"
           parent="GObject.Object"
           glib:type-name="GuestfsIsDir"
           glib:get-type="guestfs_is_dir_get_type"
           glib:type-struct="IsDirClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_dir.</doc>
      <constructor name="new" c:identifier="guestfs_is_dir_new">
        <doc xml:space="preserve">Create a new GuestfsIsDir object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsDir object</doc>
          <type name="IsDir" c:type="GuestfsIsDir*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsDirPrivate" c:type="GuestfsIsDirPrivate*"/>
      </field>
    </class>
    <record name="IsDirClass"
            c:type="GuestfsIsDirClass"
            glib:is-gtype-struct-for="IsDir">
      <doc xml:space="preserve">A class metadata object for GuestfsIsDir.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsDirClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsDirPrivate" c:type="GuestfsIsDirPrivate" disguised="1">
    </record>
    <class name="IsFifo"
           c:symbol-prefix="is_fifo"
           c:type="GuestfsIsFifo"
           parent="GObject.Object"
           glib:type-name="GuestfsIsFifo"
           glib:get-type="guestfs_is_fifo_get_type"
           glib:type-struct="IsFifoClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_fifo.</doc>
      <constructor name="new" c:identifier="guestfs_is_fifo_new">
        <doc xml:space="preserve">Create a new GuestfsIsFifo object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsFifo object</doc>
          <type name="IsFifo" c:type="GuestfsIsFifo*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsFifoPrivate" c:type="GuestfsIsFifoPrivate*"/>
      </field>
    </class>
    <record name="IsFifoClass"
            c:type="GuestfsIsFifoClass"
            glib:is-gtype-struct-for="IsFifo">
      <doc xml:space="preserve">A class metadata object for GuestfsIsFifo.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsFifoClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsFifoPrivate" c:type="GuestfsIsFifoPrivate" disguised="1">
    </record>
    <class name="IsFile"
           c:symbol-prefix="is_file"
           c:type="GuestfsIsFile"
           parent="GObject.Object"
           glib:type-name="GuestfsIsFile"
           glib:get-type="guestfs_is_file_get_type"
           glib:type-struct="IsFileClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_file.</doc>
      <constructor name="new" c:identifier="guestfs_is_file_new">
        <doc xml:space="preserve">Create a new GuestfsIsFile object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsFile object</doc>
          <type name="IsFile" c:type="GuestfsIsFile*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsFilePrivate" c:type="GuestfsIsFilePrivate*"/>
      </field>
    </class>
    <record name="IsFileClass"
            c:type="GuestfsIsFileClass"
            glib:is-gtype-struct-for="IsFile">
      <doc xml:space="preserve">A class metadata object for GuestfsIsFile.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsFileClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsFilePrivate" c:type="GuestfsIsFilePrivate" disguised="1">
    </record>
    <class name="IsSocket"
           c:symbol-prefix="is_socket"
           c:type="GuestfsIsSocket"
           parent="GObject.Object"
           glib:type-name="GuestfsIsSocket"
           glib:get-type="guestfs_is_socket_get_type"
           glib:type-struct="IsSocketClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_is_socket.</doc>
      <constructor name="new" c:identifier="guestfs_is_socket_new">
        <doc xml:space="preserve">Create a new GuestfsIsSocket object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsIsSocket object</doc>
          <type name="IsSocket" c:type="GuestfsIsSocket*"/>
        </return-value>
      </constructor>
      <property name="followsymlinks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="IsSocketPrivate" c:type="GuestfsIsSocketPrivate*"/>
      </field>
    </class>
    <record name="IsSocketClass"
            c:type="GuestfsIsSocketClass"
            glib:is-gtype-struct-for="IsSocket">
      <doc xml:space="preserve">A class metadata object for GuestfsIsSocket.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsIsSocketClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IsSocketPrivate"
            c:type="GuestfsIsSocketPrivate"
            disguised="1">
    </record>
    <record name="LV"
            c:type="GuestfsLV"
            glib:type-name="GuestfsLV"
            glib:get-type="guestfs_lvm_lv_get_type"
            c:symbol-prefix="lvm_lv">
      <field name="lv_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="lv_uuid" writable="1">
        <doc xml:space="preserve">A 32 byte UUID. Note that this is not NULL-terminated</doc>
        <array zero-terminated="0" c:type="gchar" fixed-size="32">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="lv_attr" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="lv_major" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="lv_minor" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="lv_kernel_major" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="lv_kernel_minor" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="lv_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="seg_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="origin" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="snap_percent" writable="1">
        <doc xml:space="preserve">A floating point number. A value between 0 and 100 represents a percentage. A value of -1 represents 'not present'</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="copy_percent" writable="1">
        <doc xml:space="preserve">A floating point number. A value between 0 and 100 represents a percentage. A value of -1 represents 'not present'</doc>
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="move_pv" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="lv_tags" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mirror_log" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="modules" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="MDCreate"
           c:symbol-prefix="md_create"
           c:type="GuestfsMDCreate"
           parent="GObject.Object"
           glib:type-name="GuestfsMDCreate"
           glib:get-type="guestfs_md_create_get_type"
           glib:type-struct="MDCreateClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_md_create.</doc>
      <constructor name="new" c:identifier="guestfs_md_create_new">
        <doc xml:space="preserve">Create a new GuestfsMDCreate object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMDCreate object</doc>
          <type name="MDCreate" c:type="GuestfsMDCreate*"/>
        </return-value>
      </constructor>
      <property name="chunk"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="level"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="missingbitmap"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="nrdevices"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="spare"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MDCreatePrivate" c:type="GuestfsMDCreatePrivate*"/>
      </field>
    </class>
    <record name="MDCreateClass"
            c:type="GuestfsMDCreateClass"
            glib:is-gtype-struct-for="MDCreate">
      <doc xml:space="preserve">A class metadata object for GuestfsMDCreate.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMDCreateClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MDCreatePrivate"
            c:type="GuestfsMDCreatePrivate"
            disguised="1">
    </record>
    <record name="MDStat"
            c:type="GuestfsMDStat"
            glib:type-name="GuestfsMDStat"
            glib:get-type="guestfs_mdstat_get_type"
            c:symbol-prefix="mdstat">
      <field name="mdstat_device" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mdstat_index" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="mdstat_flags" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="Mke2fs"
           c:symbol-prefix="mke2fs"
           c:type="GuestfsMke2fs"
           parent="GObject.Object"
           glib:type-name="GuestfsMke2fs"
           glib:get-type="guestfs_mke2fs_get_type"
           glib:type-struct="Mke2fsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mke2fs.</doc>
      <constructor name="new" c:identifier="guestfs_mke2fs_new">
        <doc xml:space="preserve">Create a new GuestfsMke2fs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMke2fs object</doc>
          <type name="Mke2fs" c:type="GuestfsMke2fs*"/>
        </return-value>
      </constructor>
      <property name="blockscount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="blocksize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="blockspergroup"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="bytesperinode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="creatoros"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="discard"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="extent"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="filetype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="flexbg"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="forcecreate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="fragsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="fstype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hasjournal"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="inodesize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="journaldev"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="journaldevice"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="journalsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="largefile"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="lastmounteddir"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lazyitableinit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="lazyjournalinit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="maxonlineresize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="mmpupdateinterval"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="numberofgroups"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="numberofinodes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="quota"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="quotatype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="reservedblockspercentage"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="resizeinode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="sparsesuper"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="stridesize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="stripewidth"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="testfs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="uninitbg"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="usagetype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="writesbandgrouponly"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="Mke2fsPrivate" c:type="GuestfsMke2fsPrivate*"/>
      </field>
    </class>
    <record name="Mke2fsClass"
            c:type="GuestfsMke2fsClass"
            glib:is-gtype-struct-for="Mke2fs">
      <doc xml:space="preserve">A class metadata object for GuestfsMke2fs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMke2fsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Mke2fsPrivate" c:type="GuestfsMke2fsPrivate" disguised="1">
    </record>
    <class name="Mkfs"
           c:symbol-prefix="mkfs"
           c:type="GuestfsMkfs"
           parent="GObject.Object"
           glib:type-name="GuestfsMkfs"
           glib:get-type="guestfs_mkfs_get_type"
           glib:type-struct="MkfsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mkfs.</doc>
      <constructor name="new" c:identifier="guestfs_mkfs_new">
        <doc xml:space="preserve">Create a new GuestfsMkfs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMkfs object</doc>
          <type name="Mkfs" c:type="GuestfsMkfs*"/>
        </return-value>
      </constructor>
      <property name="blocksize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="features"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="inode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sectorsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MkfsPrivate" c:type="GuestfsMkfsPrivate*"/>
      </field>
    </class>
    <class name="MkfsBtrfs"
           c:symbol-prefix="mkfs_btrfs"
           c:type="GuestfsMkfsBtrfs"
           parent="GObject.Object"
           glib:type-name="GuestfsMkfsBtrfs"
           glib:get-type="guestfs_mkfs_btrfs_get_type"
           glib:type-struct="MkfsBtrfsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mkfs_btrfs.</doc>
      <constructor name="new" c:identifier="guestfs_mkfs_btrfs_new">
        <doc xml:space="preserve">Create a new GuestfsMkfsBtrfs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMkfsBtrfs object</doc>
          <type name="MkfsBtrfs" c:type="GuestfsMkfsBtrfs*"/>
        </return-value>
      </constructor>
      <property name="allocstart"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="bytecount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="datatype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="leafsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="metadata"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nodesize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sectorsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MkfsBtrfsPrivate" c:type="GuestfsMkfsBtrfsPrivate*"/>
      </field>
    </class>
    <record name="MkfsBtrfsClass"
            c:type="GuestfsMkfsBtrfsClass"
            glib:is-gtype-struct-for="MkfsBtrfs">
      <doc xml:space="preserve">A class metadata object for GuestfsMkfsBtrfs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMkfsBtrfsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MkfsBtrfsPrivate"
            c:type="GuestfsMkfsBtrfsPrivate"
            disguised="1">
    </record>
    <record name="MkfsClass"
            c:type="GuestfsMkfsClass"
            glib:is-gtype-struct-for="Mkfs">
      <doc xml:space="preserve">A class metadata object for GuestfsMkfs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMkfsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MkfsPrivate" c:type="GuestfsMkfsPrivate" disguised="1">
    </record>
    <class name="Mkswap"
           c:symbol-prefix="mkswap"
           c:type="GuestfsMkswap"
           parent="GObject.Object"
           glib:type-name="GuestfsMkswap"
           glib:get-type="guestfs_mkswap_get_type"
           glib:type-struct="MkswapClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mkswap.</doc>
      <constructor name="new" c:identifier="guestfs_mkswap_new">
        <doc xml:space="preserve">Create a new GuestfsMkswap object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMkswap object</doc>
          <type name="Mkswap" c:type="GuestfsMkswap*"/>
        </return-value>
      </constructor>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MkswapPrivate" c:type="GuestfsMkswapPrivate*"/>
      </field>
    </class>
    <record name="MkswapClass"
            c:type="GuestfsMkswapClass"
            glib:is-gtype-struct-for="Mkswap">
      <doc xml:space="preserve">A class metadata object for GuestfsMkswap.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMkswapClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MkswapPrivate" c:type="GuestfsMkswapPrivate" disguised="1">
    </record>
    <class name="Mktemp"
           c:symbol-prefix="mktemp"
           c:type="GuestfsMktemp"
           parent="GObject.Object"
           glib:type-name="GuestfsMktemp"
           glib:get-type="guestfs_mktemp_get_type"
           glib:type-struct="MktempClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mktemp.</doc>
      <constructor name="new" c:identifier="guestfs_mktemp_new">
        <doc xml:space="preserve">Create a new GuestfsMktemp object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMktemp object</doc>
          <type name="Mktemp" c:type="GuestfsMktemp*"/>
        </return-value>
      </constructor>
      <property name="suffix"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MktempPrivate" c:type="GuestfsMktempPrivate*"/>
      </field>
    </class>
    <record name="MktempClass"
            c:type="GuestfsMktempClass"
            glib:is-gtype-struct-for="Mktemp">
      <doc xml:space="preserve">A class metadata object for GuestfsMktemp.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMktempClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MktempPrivate" c:type="GuestfsMktempPrivate" disguised="1">
    </record>
    <class name="Mount9P"
           c:symbol-prefix="mount_9p"
           c:type="GuestfsMount9P"
           parent="GObject.Object"
           glib:type-name="GuestfsMount9P"
           glib:get-type="guestfs_mount_9p_get_type"
           glib:type-struct="Mount9PClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mount_9p.</doc>
      <constructor name="new" c:identifier="guestfs_mount_9p_new">
        <doc xml:space="preserve">Create a new GuestfsMount9P object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMount9P object</doc>
          <type name="Mount9P" c:type="GuestfsMount9P*"/>
        </return-value>
      </constructor>
      <property name="options"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="Mount9PPrivate" c:type="GuestfsMount9PPrivate*"/>
      </field>
    </class>
    <record name="Mount9PClass"
            c:type="GuestfsMount9PClass"
            glib:is-gtype-struct-for="Mount9P">
      <doc xml:space="preserve">A class metadata object for GuestfsMount9P.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMount9PClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Mount9PPrivate" c:type="GuestfsMount9PPrivate" disguised="1">
    </record>
    <class name="MountLocal"
           c:symbol-prefix="mount_local"
           c:type="GuestfsMountLocal"
           parent="GObject.Object"
           glib:type-name="GuestfsMountLocal"
           glib:get-type="guestfs_mount_local_get_type"
           glib:type-struct="MountLocalClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_mount_local.</doc>
      <constructor name="new" c:identifier="guestfs_mount_local_new">
        <doc xml:space="preserve">Create a new GuestfsMountLocal object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsMountLocal object</doc>
          <type name="MountLocal" c:type="GuestfsMountLocal*"/>
        </return-value>
      </constructor>
      <property name="cachetimeout"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="debugcalls"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="options"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="readonly"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MountLocalPrivate" c:type="GuestfsMountLocalPrivate*"/>
      </field>
    </class>
    <record name="MountLocalClass"
            c:type="GuestfsMountLocalClass"
            glib:is-gtype-struct-for="MountLocal">
      <doc xml:space="preserve">A class metadata object for GuestfsMountLocal.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsMountLocalClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MountLocalPrivate"
            c:type="GuestfsMountLocalPrivate"
            disguised="1">
    </record>
    <class name="NTFSResizeOpts"
           c:symbol-prefix="ntfsresize"
           c:type="GuestfsNTFSResizeOpts"
           parent="GObject.Object"
           glib:type-name="GuestfsNTFSResizeOpts"
           glib:get-type="guestfs_ntfsresize_get_type"
           glib:type-struct="NTFSResizeOptsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_ntfsresize.</doc>
      <constructor name="new" c:identifier="guestfs_ntfsresize_new">
        <doc xml:space="preserve">Create a new GuestfsNTFSResizeOpts object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsNTFSResizeOpts object</doc>
          <type name="NTFSResizeOpts" c:type="GuestfsNTFSResizeOpts*"/>
        </return-value>
      </constructor>
      <property name="force"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NTFSResizeOptsPrivate"
              c:type="GuestfsNTFSResizeOptsPrivate*"/>
      </field>
    </class>
    <record name="NTFSResizeOptsClass"
            c:type="GuestfsNTFSResizeOptsClass"
            glib:is-gtype-struct-for="NTFSResizeOpts">
      <doc xml:space="preserve">A class metadata object for GuestfsNTFSResizeOpts.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsNTFSResizeOptsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NTFSResizeOptsPrivate"
            c:type="GuestfsNTFSResizeOptsPrivate"
            disguised="1">
    </record>
    <class name="NtfscloneOut"
           c:symbol-prefix="ntfsclone_out"
           c:type="GuestfsNtfscloneOut"
           parent="GObject.Object"
           glib:type-name="GuestfsNtfscloneOut"
           glib:get-type="guestfs_ntfsclone_out_get_type"
           glib:type-struct="NtfscloneOutClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_ntfsclone_out.</doc>
      <constructor name="new" c:identifier="guestfs_ntfsclone_out_new">
        <doc xml:space="preserve">Create a new GuestfsNtfscloneOut object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsNtfscloneOut object</doc>
          <type name="NtfscloneOut" c:type="GuestfsNtfscloneOut*"/>
        </return-value>
      </constructor>
      <property name="force"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="ignorefscheck"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="metadataonly"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="preservetimestamps"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="rescue"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NtfscloneOutPrivate" c:type="GuestfsNtfscloneOutPrivate*"/>
      </field>
    </class>
    <record name="NtfscloneOutClass"
            c:type="GuestfsNtfscloneOutClass"
            glib:is-gtype-struct-for="NtfscloneOut">
      <doc xml:space="preserve">A class metadata object for GuestfsNtfscloneOut.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsNtfscloneOutClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NtfscloneOutPrivate"
            c:type="GuestfsNtfscloneOutPrivate"
            disguised="1">
    </record>
    <class name="Ntfsfix"
           c:symbol-prefix="ntfsfix"
           c:type="GuestfsNtfsfix"
           parent="GObject.Object"
           glib:type-name="GuestfsNtfsfix"
           glib:get-type="guestfs_ntfsfix_get_type"
           glib:type-struct="NtfsfixClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_ntfsfix.</doc>
      <constructor name="new" c:identifier="guestfs_ntfsfix_new">
        <doc xml:space="preserve">Create a new GuestfsNtfsfix object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsNtfsfix object</doc>
          <type name="Ntfsfix" c:type="GuestfsNtfsfix*"/>
        </return-value>
      </constructor>
      <property name="clearbadsectors"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NtfsfixPrivate" c:type="GuestfsNtfsfixPrivate*"/>
      </field>
    </class>
    <record name="NtfsfixClass"
            c:type="GuestfsNtfsfixClass"
            glib:is-gtype-struct-for="Ntfsfix">
      <doc xml:space="preserve">A class metadata object for GuestfsNtfsfix.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsNtfsfixClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NtfsfixPrivate" c:type="GuestfsNtfsfixPrivate" disguised="1">
    </record>
    <record name="PV"
            c:type="GuestfsPV"
            glib:type-name="GuestfsPV"
            glib:get-type="guestfs_lvm_pv_get_type"
            c:symbol-prefix="lvm_pv">
      <field name="pv_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pv_uuid" writable="1">
        <doc xml:space="preserve">A 32 byte UUID. Note that this is not NULL-terminated</doc>
        <array zero-terminated="0" c:type="gchar" fixed-size="32">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="pv_fmt" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pv_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="dev_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="pv_free" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="pv_used" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="pv_attr" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pv_pe_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pv_pe_alloc_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pv_tags" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pe_start" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="pv_mda_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pv_mda_free" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <record name="Partition"
            c:type="GuestfsPartition"
            glib:type-name="GuestfsPartition"
            glib:get-type="guestfs_partition_get_type"
            c:symbol-prefix="partition">
      <field name="part_num" writable="1">
        <doc xml:space="preserve">A signed 32-bit integer</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="part_start" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="part_end" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="part_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <class name="Rsync"
           c:symbol-prefix="rsync"
           c:type="GuestfsRsync"
           parent="GObject.Object"
           glib:type-name="GuestfsRsync"
           glib:get-type="guestfs_rsync_get_type"
           glib:type-struct="RsyncClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_rsync.</doc>
      <constructor name="new" c:identifier="guestfs_rsync_new">
        <doc xml:space="preserve">Create a new GuestfsRsync object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsRsync object</doc>
          <type name="Rsync" c:type="GuestfsRsync*"/>
        </return-value>
      </constructor>
      <property name="archive"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="deletedest"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RsyncPrivate" c:type="GuestfsRsyncPrivate*"/>
      </field>
    </class>
    <record name="RsyncClass"
            c:type="GuestfsRsyncClass"
            glib:is-gtype-struct-for="Rsync">
      <doc xml:space="preserve">A class metadata object for GuestfsRsync.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsRsyncClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="RsyncIn"
           c:symbol-prefix="rsync_in"
           c:type="GuestfsRsyncIn"
           parent="GObject.Object"
           glib:type-name="GuestfsRsyncIn"
           glib:get-type="guestfs_rsync_in_get_type"
           glib:type-struct="RsyncInClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_rsync_in.</doc>
      <constructor name="new" c:identifier="guestfs_rsync_in_new">
        <doc xml:space="preserve">Create a new GuestfsRsyncIn object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsRsyncIn object</doc>
          <type name="RsyncIn" c:type="GuestfsRsyncIn*"/>
        </return-value>
      </constructor>
      <property name="archive"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="deletedest"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RsyncInPrivate" c:type="GuestfsRsyncInPrivate*"/>
      </field>
    </class>
    <record name="RsyncInClass"
            c:type="GuestfsRsyncInClass"
            glib:is-gtype-struct-for="RsyncIn">
      <doc xml:space="preserve">A class metadata object for GuestfsRsyncIn.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsRsyncInClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RsyncInPrivate" c:type="GuestfsRsyncInPrivate" disguised="1">
    </record>
    <class name="RsyncOut"
           c:symbol-prefix="rsync_out"
           c:type="GuestfsRsyncOut"
           parent="GObject.Object"
           glib:type-name="GuestfsRsyncOut"
           glib:get-type="guestfs_rsync_out_get_type"
           glib:type-struct="RsyncOutClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_rsync_out.</doc>
      <constructor name="new" c:identifier="guestfs_rsync_out_new">
        <doc xml:space="preserve">Create a new GuestfsRsyncOut object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsRsyncOut object</doc>
          <type name="RsyncOut" c:type="GuestfsRsyncOut*"/>
        </return-value>
      </constructor>
      <property name="archive"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="deletedest"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RsyncOutPrivate" c:type="GuestfsRsyncOutPrivate*"/>
      </field>
    </class>
    <record name="RsyncOutClass"
            c:type="GuestfsRsyncOutClass"
            glib:is-gtype-struct-for="RsyncOut">
      <doc xml:space="preserve">A class metadata object for GuestfsRsyncOut.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsRsyncOutClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RsyncOutPrivate"
            c:type="GuestfsRsyncOutPrivate"
            disguised="1">
    </record>
    <record name="RsyncPrivate" c:type="GuestfsRsyncPrivate" disguised="1">
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="GuestfsSession"
           parent="GObject.Object"
           glib:type-name="GuestfsSession"
           glib:get-type="guestfs_session_get_type"
           glib:type-struct="SessionClass">
      <doc xml:space="preserve">A libguestfs session, encapsulating a single libguestfs handle.</doc>
      <constructor name="new" c:identifier="guestfs_session_new">
        <doc xml:space="preserve">Create a new libguestfs session.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new guestfs session object</doc>
          <type name="Session" c:type="GuestfsSession*"/>
        </return-value>
      </constructor>
      <method name="acl_delete_def_file"
              c:identifier="guestfs_session_acl_delete_def_file"
              throws="1">
        <doc xml:space="preserve">delete the default POSIX ACL of a directory

This function deletes the default POSIX Access Control List (ACL)
attached to directory @dir.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="acl_get_file"
              c:identifier="guestfs_session_acl_get_file"
              throws="1">
        <doc xml:space="preserve">get the POSIX ACL attached to a file

This function returns the POSIX Access Control List (ACL) attached to
@path. The ACL is returned in "long text form" (see acl(5)).

The @acltype parameter may be:

@access
Return the ordinary (access) ACL for any file, directory or other
filesystem object.

@default
Return the default ACL. Normally this only makes sense if @path is a
directory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="acltype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="acl_set_file"
              c:identifier="guestfs_session_acl_set_file"
              throws="1">
        <doc xml:space="preserve">set the POSIX ACL attached to a file

This function sets the POSIX Access Control List (ACL) attached to
@path.

The @acltype parameter may be:

@access
Set the ordinary (access) ACL for any file, directory or other
filesystem object.

@default
Set the default ACL. Normally this only makes sense if @path is a
directory.

The @acl parameter is the new ACL in either "long text form" or "short
text form" (see acl(5)). The new ACL completely replaces any previous
ACL on the file. The ACL must contain the full Unix permissions (eg.
"u::rwx,g::rx,o::rx").

If you are specifying individual users or groups, then the mask field is
also required (eg. "m::rwx"), followed by the "u:*ID*:..." and/or
"g:*ID*:..." field(s). A full ACL string might therefore look like this:

&lt;![CDATA[u::rwx,g::rwx,o::rwx,m::rwx,u:500:rwx,g:500:rwx]]&gt;

&lt;![CDATA[\ Unix permissions / \mask/ \      ACL        /]]&gt;

You should use numeric UIDs and GIDs. To map usernames and groupnames to
the correct numeric ID in the context of the guest, use the Augeas
functions (see guestfs_session_aug_init()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="acltype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="acl" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_cdrom"
              c:identifier="guestfs_session_add_cdrom"
              throws="1">
        <doc xml:space="preserve">add a CD-ROM disk image to examine

This function adds a virtual CD-ROM disk image to the guest.

Do not use this function! ISO files are just ordinary read-only disk
images. Use guestfs_session_add_drive_ro() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_domain"
              c:identifier="guestfs_session_add_domain"
              throws="1">
        <doc xml:space="preserve">add the disk(s) from a named libvirt domain

This function adds the disk(s) attached to the named libvirt domain
@dom. It works by connecting to libvirt, requesting the domain and
domain XML from libvirt, parsing it for disks, and calling
guestfs_session_add_drive_opts() on each one.

The number of disks added is returned. This operation is atomic: if an
error is returned, then no disks are added.

This function does some minimal checks to make sure the libvirt domain
is not running (unless @readonly is true). In a future version we will
try to acquire the libvirt lock on each disk.

Disks must be accessible locally. This often means that adding disks
from a remote libvirt connection (see &lt;ulink
url='http://libvirt.org/remote.html'&gt; http://libvirt.org/remote.html
&lt;/ulink&gt;) will fail unless those disks are accessible via the same
device path locally too.

The optional @libvirturi parameter sets the libvirt URI (see &lt;ulink
url='http://libvirt.org/uri.html'&gt; http://libvirt.org/uri.html
&lt;/ulink&gt;). If this is not set then we connect to the default libvirt URI
(or one set through an environment variable, see the libvirt
documentation for full details).

The optional @live flag controls whether this call will try to connect
to a running virtual machine @guestfsd process if it sees a suitable
&amp;lt;channel&amp;gt; element in the libvirt XML definition. The default (if
the flag is omitted) is never to try. See "ATTACHING TO RUNNING DAEMONS"
in guestfs(3) for more information.

If the @allowuuid flag is true (default is false) then a UUID *may* be
passed instead of the domain name. The @dom string is treated as a UUID
first and looked up, and if that lookup fails then we treat @dom as a
name as usual.

The optional @readonlydisk parameter controls what we do for disks which
are marked &amp;lt;readonly/&amp;gt; in the libvirt XML. Possible values are:

readonlydisk = "error"
If @readonly is false:

The whole call is aborted with an error if any disk with the
&amp;lt;readonly/&amp;gt; flag is found.

If @readonly is true:

Disks with the &amp;lt;readonly/&amp;gt; flag are added read-only.

readonlydisk = "read"
If @readonly is false:

Disks with the &amp;lt;readonly/&amp;gt; flag are added read-only. Other
disks are added read/write.

If @readonly is true:

Disks with the &amp;lt;readonly/&amp;gt; flag are added read-only.

readonlydisk = "write" (default)
If @readonly is false:

Disks with the &amp;lt;readonly/&amp;gt; flag are added read/write.

If @readonly is true:

Disks with the &amp;lt;readonly/&amp;gt; flag are added read-only.

readonlydisk = "ignore"
If @readonly is true or false:

Disks with the &amp;lt;readonly/&amp;gt; flag are skipped.

The other optional parameters are passed directly through to
guestfs_session_add_drive_opts().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dom" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsAddDomain containing optional arguments</doc>
            <type name="AddDomain" c:type="GuestfsAddDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drive"
              c:identifier="guestfs_session_add_drive"
              throws="1">
        <doc xml:space="preserve">add an image to examine or modify

This function adds a disk image called @filename to the handle.
@filename may be a regular host file or a host device.

When this function is called before guestfs_session_launch() (the usual
case) then the first time you call this function, the disk appears in
the API as "/dev/sda", the second time as "/dev/sdb", and so on.

In libguestfs &amp;ge; 1.20 you can also call this function after launch
(with some restrictions). This is called "hotplugging". When
hotplugging, you must specify a @label so that the new disk gets a
predictable name. For more information see "HOTPLUGGING" in guestfs(3).

You don't necessarily need to be root when using libguestfs. However you
obviously do need sufficient permissions to access the filename for
whatever operations you want to perform (ie. read access if you just
want to read the image or write access if you want to modify the image).

This call checks that @filename exists.

@filename may be the special string "/dev/null". See "NULL DISKS" in
guestfs(3).

The optional arguments are:

@readonly
If true then the image is treated as read-only. Writes are still
allowed, but they are stored in a temporary snapshot overlay which
is discarded at the end. The disk that you add is not modified.

@format
This forces the image format. If you omit this (or use
guestfs_session_add_drive() or guestfs_session_add_drive_ro()) then
the format is automatically detected. Possible formats include @raw
and @qcow2.

Automatic detection of the format opens you up to a potential
security hole when dealing with untrusted raw-format images. See
CVE-2010-3851 and &lt;ulink
url='https://bugzilla.redhat.com/show_bug.cgi?id=642934'&gt;
RHBZ&amp;num;642934 &lt;/ulink&gt;. Specifying the format closes this security
hole.

@iface
This rarely-used option lets you emulate the behaviour of the
deprecated guestfs_session_add_drive_with_if() call (q.v.)

@name
The name the drive had in the original guest, e.g. "/dev/sdb". This
is used as a hint to the guest inspection process if it is
available.

@label
Give the disk a label. The label should be a unique, short string
using *only* ASCII characters "[a-zA-Z]". As well as its usual name
in the API (such as "/dev/sda"), the drive will also be named
"/dev/disk/guestfs/*label*".

See "DISK LABELS" in guestfs(3).

@protocol
The optional protocol argument can be used to select an alternate
source protocol.

See also: "REMOTE STORAGE" in guestfs(3).

"protocol = "file""
@filename is interpreted as a local file or device. This is the
default if the optional protocol parameter is omitted.

"protocol = "ftp"|"ftps"|"http"|"https"|"tftp""
Connect to a remote FTP, HTTP or TFTP server. The @server
parameter must also be supplied - see below.

See also: "FTP, HTTP AND TFTP" in guestfs(3)

"protocol = "gluster""
Connect to the GlusterFS server. The @server parameter must also
be supplied - see below.

See also: "GLUSTER" in guestfs(3)

"protocol = "iscsi""
Connect to the iSCSI server. The @server parameter must also be
supplied - see below.

See also: "ISCSI" in guestfs(3).

"protocol = "nbd""
Connect to the Network Block Device server. The @server
parameter must also be supplied - see below.

See also: "NETWORK BLOCK DEVICE" in guestfs(3).

"protocol = "rbd""
Connect to the Ceph (librbd/RBD) server. The @server parameter
must also be supplied - see below. The @username parameter may
be supplied. See below. The @secret parameter may be supplied.
See below.

See also: "CEPH" in guestfs(3).

"protocol = "sheepdog""
Connect to the Sheepdog server. The @server parameter may also
be supplied - see below.

See also: "SHEEPDOG" in guestfs(3).

"protocol = "ssh""
Connect to the Secure Shell (ssh) server.

The @server parameter must be supplied. The @username parameter
may be supplied. See below.

See also: "SSH" in guestfs(3).

@server
For protocols which require access to a remote server, this is a
list of server(s).

&lt;![CDATA[Protocol       Number of servers required]]&gt;

&lt;![CDATA[--------       --------------------------]]&gt;

&lt;![CDATA[file           List must be empty or param not used at all]]&gt;

&lt;![CDATA[ftp|ftps|http|https|tftp  Exactly one]]&gt;

&lt;![CDATA[gluster        Exactly one]]&gt;

&lt;![CDATA[iscsi          Exactly one]]&gt;

&lt;![CDATA[nbd            Exactly one]]&gt;

&lt;![CDATA[rbd            One or more]]&gt;

&lt;![CDATA[sheepdog       Zero or more]]&gt;

&lt;![CDATA[ssh            Exactly one]]&gt;

Each list element is a string specifying a server. The string must
be in one of the following formats:

&lt;![CDATA[hostname]]&gt;

&lt;![CDATA[hostname:port]]&gt;

&lt;![CDATA[tcp:hostname]]&gt;

&lt;![CDATA[tcp:hostname:port]]&gt;

&lt;![CDATA[unix:/path/to/socket]]&gt;

If the port number is omitted, then the standard port number for the
protocol is used (see "/etc/services").

@username
For the @ftp, @ftps, @http, @https, @iscsi, @rbd, @ssh and @tftp
protocols, this specifies the remote username.

If not given, then the local username is used for @ssh, and no
authentication is attempted for ceph. But note this sometimes may
give unexpected results, for example if using the libvirt backend
and if the libvirt backend is configured to start the qemu appliance
as a special user such as "qemu.qemu". If in doubt, specify the
remote username you want.

@secret
For the @rbd protocol only, this specifies the 'secret' to use when
connecting to the remote device.

If not given, then a secret matching the given username will be
looked up in the default keychain locations, or if no username is
given, then no authentication will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsAddDrive containing optional arguments</doc>
            <type name="AddDrive" c:type="GuestfsAddDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drive_ro"
              c:identifier="guestfs_session_add_drive_ro"
              throws="1">
        <doc xml:space="preserve">add a drive in snapshot mode (read-only)

This function is the equivalent of calling
guestfs_session_add_drive_opts() with the optional parameter
@GUESTFS_ADD_DRIVE_OPTS_READONLY set to 1, so the disk is added
read-only, with the format being detected automatically.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drive_ro_with_if"
              c:identifier="guestfs_session_add_drive_ro_with_if"
              throws="1">
        <doc xml:space="preserve">add a drive read-only specifying the QEMU block emulation to use

This is the same as guestfs_session_add_drive_ro() but it allows you to
specify the QEMU interface emulation to use at run time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="iface" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_drive_with_if"
              c:identifier="guestfs_session_add_drive_with_if"
              throws="1">
        <doc xml:space="preserve">add a drive specifying the QEMU block emulation to use

This is the same as guestfs_session_add_drive() but it allows you to
specify the QEMU interface emulation to use at run time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="iface" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_clear"
              c:identifier="guestfs_session_aug_clear"
              throws="1">
        <doc xml:space="preserve">clear Augeas path

Set the value associated with @path to @NULL. This is the same as the
augtool(1) @clear command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_close"
              c:identifier="guestfs_session_aug_close"
              throws="1">
        <doc xml:space="preserve">close the current Augeas handle

Close the current Augeas handle and free up any resources used by it.
After calling this, you have to call guestfs_session_aug_init() again
before you can use any other Augeas functions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="aug_defnode"
              c:identifier="guestfs_session_aug_defnode"
              throws="1">
        <doc xml:space="preserve">define an Augeas node

Defines a variable @name whose value is the result of evaluating @expr.

If @expr evaluates to an empty nodeset, a node is created, equivalent to
calling guestfs_session_aug_set() @expr, @value. @name will be the
nodeset containing that single node.

On success this returns a pair containing the number of nodes in the
nodeset, and a boolean flag if a node was created.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a IntBool object, or NULL on error</doc>
          <type name="IntBool" c:type="GuestfsIntBool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="expr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_defvar"
              c:identifier="guestfs_session_aug_defvar"
              throws="1">
        <doc xml:space="preserve">define an Augeas variable

Defines an Augeas variable @name whose value is the result of evaluating
@expr. If @expr is NULL, then @name is undefined.

On success this returns the number of nodes in @expr, or @0 if @expr
evaluates to something which is not a nodeset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="expr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_get" c:identifier="guestfs_session_aug_get" throws="1">
        <doc xml:space="preserve">look up the value of an Augeas path

Look up the value associated with @path. If @path matches exactly one
node, the @value is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_init"
              c:identifier="guestfs_session_aug_init"
              throws="1">
        <doc xml:space="preserve">create a new Augeas handle

Create a new Augeas handle for editing configuration files. If there was
any previous Augeas handle associated with this guestfs session, then it
is closed.

You must call this before using any other "guestfs_aug_*" commands.

@root is the filesystem root. @root must not be NULL, use "/" instead.

The flags are the same as the flags defined in &amp;lt;augeas.h&amp;gt;, the
logical *or* of the following integers:

@AUG_SAVE_BACKUP = 1
Keep the original file with a ".augsave" extension.

@AUG_SAVE_NEWFILE = 2
Save changes into a file with extension ".augnew", and do not
overwrite original. Overrides @AUG_SAVE_BACKUP.

@AUG_TYPE_CHECK = 4
Typecheck lenses.

This option is only useful when debugging Augeas lenses. Use of this
option may require additional memory for the libguestfs appliance.
You may need to set the @LIBGUESTFS_MEMSIZE environment variable or
call guestfs_session_set_memsize().

@AUG_NO_STDINC = 8
Do not use standard load path for modules.

@AUG_SAVE_NOOP = 16
Make save a no-op, just record what would have been changed.

@AUG_NO_LOAD = 32
Do not load the tree in guestfs_session_aug_init().

To close the handle, you can call guestfs_session_aug_close().

To find out more about Augeas, see &lt;ulink url='http://augeas.net/'&gt;
http://augeas.net/ &lt;/ulink&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_insert"
              c:identifier="guestfs_session_aug_insert"
              throws="1">
        <doc xml:space="preserve">insert a sibling Augeas node

Create a new sibling @label for @path, inserting it into the tree before
or after @path (depending on the boolean flag @before).

@path must match exactly one existing node in the tree, and @label must
be a label, ie. not contain "/", "*" or end with a bracketed index
"[N]".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="before" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_load"
              c:identifier="guestfs_session_aug_load"
              throws="1">
        <doc xml:space="preserve">load files into the tree

Load files into the tree.

See @aug_load in the Augeas documentation for the full gory details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="aug_ls" c:identifier="guestfs_session_aug_ls" throws="1">
        <doc xml:space="preserve">list Augeas nodes under augpath

This is just a shortcut for listing guestfs_session_aug_match() "path/*"
and sorting the resulting nodes into alphabetical order.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_match"
              c:identifier="guestfs_session_aug_match"
              throws="1">
        <doc xml:space="preserve">return Augeas nodes which match augpath

Returns a list of paths which match the path expression @path. The
returned paths are sufficiently qualified so that they match exactly one
node in the current tree.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_mv" c:identifier="guestfs_session_aug_mv" throws="1">
        <doc xml:space="preserve">move Augeas node

Move the node @src to @dest. @src must match exactly one node. @dest is
overwritten if it exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_rm" c:identifier="guestfs_session_aug_rm" throws="1">
        <doc xml:space="preserve">remove an Augeas path

Remove @path and all of its children.

On success this returns the number of entries which were removed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="aug_save"
              c:identifier="guestfs_session_aug_save"
              throws="1">
        <doc xml:space="preserve">write all pending Augeas changes to disk

This writes all pending changes to disk.

The flags which were passed to guestfs_session_aug_init() affect exactly
how files are saved.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="aug_set" c:identifier="guestfs_session_aug_set" throws="1">
        <doc xml:space="preserve">set Augeas path to value

Set the value associated with @path to @val.

In the Augeas API, it is possible to clear a node by setting the value
to NULL. Due to an oversight in the libguestfs API you cannot do that
with this call. Instead you must use the guestfs_session_aug_clear()
call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="augpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="available"
              c:identifier="guestfs_session_available"
              throws="1">
        <doc xml:space="preserve">test availability of some parts of the API

This command is used to check the availability of some groups of
functionality in the appliance, which not all builds of the libguestfs
appliance will be able to provide.

The libguestfs groups, and the functions that those groups correspond
to, are listed in "AVAILABILITY" in guestfs(3). You can also fetch this
list at runtime by calling guestfs_session_available_all_groups().

The argument @groups is a list of group names, eg: "["inotify",
"augeas"]" would check for the availability of the Linux inotify
functions and Augeas (configuration file editing) functions.

The command returns no error if *all* requested groups are available.

It fails with an error if one or more of the requested groups is
unavailable in the appliance.

If an unknown group name is included in the list of groups then an error
is always returned.

*Notes:*

*   guestfs_session_feature_available() is the same as this call, but
with a slightly simpler to use API: that call returns a boolean
true/false instead of throwing an error.

*   You must call guestfs_session_launch() before calling this function.

The reason is because we don't know what groups are supported by the
appliance/daemon until it is running and can be queried.

*   If a group of functions is available, this does not necessarily mean
that they will work. You still have to check for errors when calling
individual API functions even if they are available.

*   It is usually the job of distro packagers to build complete
functionality into the libguestfs appliance. Upstream libguestfs, if
built from source with all requirements satisfied, will support
everything.

*   This call was added in version 1.0.80. In previous versions of
libguestfs all you could do would be to speculatively execute a
command to find out if the daemon implemented it. See also
guestfs_session_version().

See also guestfs_session_filesystem_available().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="groups" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="available_all_groups"
              c:identifier="guestfs_session_available_all_groups"
              throws="1">
        <doc xml:space="preserve">return a list of all optional groups

This command returns a list of all optional groups that this daemon
knows about. Note this returns both supported and unsupported groups. To
find out which ones the daemon can actually support you have to call
guestfs_session_available() / guestfs_session_feature_available() on
each member of the returned list.

See also guestfs_session_available(),
guestfs_session_feature_available() and "AVAILABILITY" in guestfs(3).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="base64_in"
              c:identifier="guestfs_session_base64_in"
              throws="1">
        <doc xml:space="preserve">upload base64-encoded data to file

This command uploads base64-encoded data from @base64file to @filename.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="base64file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="base64_out"
              c:identifier="guestfs_session_base64_out"
              throws="1">
        <doc xml:space="preserve">download file and encode as base64

This command downloads the contents of @filename, writing it out to
local file @base64file encoded as base64.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="base64file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blkid" c:identifier="guestfs_session_blkid" throws="1">
        <doc xml:space="preserve">print block device attributes

This command returns block device attributes for @device. The following
fields are usually present in the returned hash. Other fields may also
be present.

@UUID
The uuid of this device.

@LABEL
The label of this device.

@VERSION
The version of blkid command.

@TYPE
The filesystem type or RAID of this device.

@USAGE
The usage of this device, for example @filesystem or @raid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_flushbufs"
              c:identifier="guestfs_session_blockdev_flushbufs"
              throws="1">
        <doc xml:space="preserve">flush device buffers

This tells the kernel to flush internal buffers associated with @device.

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_getbsz"
              c:identifier="guestfs_session_blockdev_getbsz"
              throws="1">
        <doc xml:space="preserve">get blocksize of block device

This returns the block size of a device.

(Note this is different from both *size in blocks* and *filesystem block
size*).

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_getro"
              c:identifier="guestfs_session_blockdev_getro"
              throws="1">
        <doc xml:space="preserve">is block device set to read-only

Returns a boolean indicating if the block device is read-only (true if
read-only, false if not).

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_getsize64"
              c:identifier="guestfs_session_blockdev_getsize64"
              throws="1">
        <doc xml:space="preserve">get total size of device in bytes

This returns the size of the device in bytes.

See also guestfs_session_blockdev_getsz().

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_getss"
              c:identifier="guestfs_session_blockdev_getss"
              throws="1">
        <doc xml:space="preserve">get sectorsize of block device

This returns the size of sectors on a block device. Usually 512, but can
be larger for modern devices.

(Note, this is not the size in sectors, use
guestfs_session_blockdev_getsz() for that).

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_getsz"
              c:identifier="guestfs_session_blockdev_getsz"
              throws="1">
        <doc xml:space="preserve">get total size of device in 512-byte sectors

This returns the size of the device in units of 512-byte sectors (even
if the sectorsize isn't 512 bytes ... weird).

See also guestfs_session_blockdev_getss() for the real sector size of
the device, and guestfs_session_blockdev_getsize64() for the more useful
*size in bytes*.

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_rereadpt"
              c:identifier="guestfs_session_blockdev_rereadpt"
              throws="1">
        <doc xml:space="preserve">reread partition table

Reread the partition table on @device.

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_setbsz"
              c:identifier="guestfs_session_blockdev_setbsz"
              throws="1">
        <doc xml:space="preserve">set blocksize of block device

This sets the block size of a device.

(Note this is different from both *size in blocks* and *filesystem block
size*).

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_setro"
              c:identifier="guestfs_session_blockdev_setro"
              throws="1">
        <doc xml:space="preserve">set block device to read-only

Sets the block device named @device to read-only.

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blockdev_setrw"
              c:identifier="guestfs_session_blockdev_setrw"
              throws="1">
        <doc xml:space="preserve">set block device to read-write

Sets the block device named @device to read-write.

This uses the blockdev(8) command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_device_add"
              c:identifier="guestfs_session_btrfs_device_add"
              throws="1">
        <doc xml:space="preserve">add devices to a btrfs filesystem

Add the list of device(s) in @devices to the btrfs filesystem mounted at
@fs. If @devices is an empty list, this does nothing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_device_delete"
              c:identifier="guestfs_session_btrfs_device_delete"
              throws="1">
        <doc xml:space="preserve">remove devices from a btrfs filesystem

Remove the @devices from the btrfs filesystem mounted at @fs. If
@devices is an empty list, this does nothing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_filesystem_balance"
              c:identifier="guestfs_session_btrfs_filesystem_balance"
              throws="1">
        <doc xml:space="preserve">balance a btrfs filesystem

Balance the chunks in the btrfs filesystem mounted at @fs across the
underlying devices.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_filesystem_resize"
              c:identifier="guestfs_session_btrfs_filesystem_resize"
              throws="1">
        <doc xml:space="preserve">resize a btrfs filesystem

This command resizes a btrfs filesystem.

Note that unlike other resize calls, the filesystem has to be mounted
and the parameter is the mountpoint not the device (this is a
requirement of btrfs itself).

The optional parameters are:

@size
The new size (in bytes) of the filesystem. If omitted, the
filesystem is resized to the maximum size.

See also btrfs(8).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsBTRFSFilesystemResize containing optional arguments</doc>
            <type name="BTRFSFilesystemResize"
                  c:type="GuestfsBTRFSFilesystemResize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_filesystem_sync"
              c:identifier="guestfs_session_btrfs_filesystem_sync"
              throws="1">
        <doc xml:space="preserve">sync a btrfs filesystem

Force sync on the btrfs filesystem mounted at @fs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_fsck"
              c:identifier="guestfs_session_btrfs_fsck"
              throws="1">
        <doc xml:space="preserve">check a btrfs filesystem

Used to check a btrfs filesystem, @device is the device file where the
filesystem is stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsBtrfsFsck containing optional arguments</doc>
            <type name="BtrfsFsck" c:type="GuestfsBtrfsFsck*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_set_seeding"
              c:identifier="guestfs_session_btrfs_set_seeding"
              throws="1">
        <doc xml:space="preserve">enable or disable the seeding feature of device

Enable or disable the seeding feature of a device that contains a btrfs
filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="seeding" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_subvolume_create"
              c:identifier="guestfs_session_btrfs_subvolume_create"
              throws="1">
        <doc xml:space="preserve">create a btrfs snapshot

Create a btrfs subvolume. The @dest argument is the destination
directory and the name of the snapshot, in the form
"/path/to/dest/name".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_subvolume_delete"
              c:identifier="guestfs_session_btrfs_subvolume_delete"
              throws="1">
        <doc xml:space="preserve">delete a btrfs snapshot

Delete the named btrfs subvolume.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="subvolume" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_subvolume_list"
              c:identifier="guestfs_session_btrfs_subvolume_list"
              throws="1">
        <doc xml:space="preserve">list btrfs snapshots and subvolumes

List the btrfs snapshots and subvolumes of the btrfs filesystem which is
mounted at @fs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of BTRFSSubvolume objects, or NULL on error</doc>
          <array c:type="GuestfsBTRFSSubvolume**">
            <type name="BTRFSSubvolume"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_subvolume_set_default"
              c:identifier="guestfs_session_btrfs_subvolume_set_default"
              throws="1">
        <doc xml:space="preserve">set default btrfs subvolume

Set the subvolume of the btrfs filesystem @fs which will be mounted by
default. See guestfs_session_btrfs_subvolume_list() to get a list of
subvolumes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="fs" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="btrfs_subvolume_snapshot"
              c:identifier="guestfs_session_btrfs_subvolume_snapshot"
              throws="1">
        <doc xml:space="preserve">create a writable btrfs snapshot

Create a writable snapshot of the btrfs subvolume @source. The @dest
argument is the destination directory and the name of the snapshot, in
the form "/path/to/dest/name".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="canonical_device_name"
              c:identifier="guestfs_session_canonical_device_name"
              throws="1">
        <doc xml:space="preserve">return canonical device name

This utility function is useful when displaying device names to the
user. It takes a number of irregular device names and returns them in a
consistent format:

"/dev/hdX"
"/dev/vdX"
These are returned as "/dev/sdX". Note this works for device names
and partition names. This is approximately the reverse of the
algorithm described in "BLOCK DEVICE NAMING" in guestfs(3).

"/dev/mapper/VG-LV"
"/dev/dm-N"
Converted to "/dev/VG/LV" form using
guestfs_session_lvm_canonical_lvm_name().

Other strings are returned unmodified.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cap_get_file"
              c:identifier="guestfs_session_cap_get_file"
              throws="1">
        <doc xml:space="preserve">get the Linux capabilities attached to a file

This function returns the Linux capabilities attached to @path. The
capabilities set is returned in text form (see cap_to_text(3)).

If no capabilities are attached to a file, an empty string is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cap_set_file"
              c:identifier="guestfs_session_cap_set_file"
              throws="1">
        <doc xml:space="preserve">set the Linux capabilities attached to a file

This function sets the Linux capabilities attached to @path. The
capabilities set @cap should be passed in text form (see
cap_from_text(3)).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cap" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="case_sensitive_path"
              c:identifier="guestfs_session_case_sensitive_path"
              throws="1">
        <doc xml:space="preserve">return true path on case-insensitive filesystem

This can be used to resolve case insensitive paths on a filesystem which
is case sensitive. The use case is to resolve paths which you have read
from Windows configuration files or the Windows Registry, to the true
path.

The command handles a peculiarity of the Linux ntfs-3g filesystem driver
(and probably others), which is that although the underlying filesystem
is case-insensitive, the driver exports the filesystem to Linux as
case-sensitive.

One consequence of this is that special directories such as "c:\windows"
may appear as "/WINDOWS" or "/windows" (or other things) depending on
the precise details of how they were created. In Windows itself this
would not be a problem.

Bug or feature? You decide: &lt;ulink
url='http://www.tuxera.com/community/ntfs-3g-faq/#posixfilenames1'&gt;
http://www.tuxera.com/community/ntfs-3g-faq/#posixfilenames1 &lt;/ulink&gt;

This function resolves the true case of each element in the path and
returns the case-sensitive path.

Thus guestfs_session_case_sensitive_path() ("/Windows/System32") might
return "/WINDOWS/system32" (the exact return value would depend on
details of how the directories were originally created under Windows).

*Note*: This function does not handle drive names, backslashes etc.

See also guestfs_session_realpath().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cat" c:identifier="guestfs_session_cat" throws="1">
        <doc xml:space="preserve">list the contents of a file

Return the contents of the file named @path.

Because, in C, this function returns a "char *", there is no way to
differentiate between a "\0" character in a file and end of string. To
handle binary files, use the guestfs_session_read_file() or
guestfs_session_download() functions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checksum"
              c:identifier="guestfs_session_checksum"
              throws="1">
        <doc xml:space="preserve">compute MD5, SHAx or CRC checksum of file

This call computes the MD5, SHAx or CRC checksum of the file named
@path.

The type of checksum to compute is given by the @csumtype parameter
which must have one of the following values:

@crc
Compute the cyclic redundancy check (CRC) specified by POSIX for the
@cksum command.

@md5
Compute the MD5 hash (using the @md5sum program).

@sha1
Compute the SHA1 hash (using the @sha1sum program).

@sha224
Compute the SHA224 hash (using the @sha224sum program).

@sha256
Compute the SHA256 hash (using the @sha256sum program).

@sha384
Compute the SHA384 hash (using the @sha384sum program).

@sha512
Compute the SHA512 hash (using the @sha512sum program).

The checksum is returned as a printable string.

To get the checksum for a device, use guestfs_session_checksum_device().

To get the checksums for many files, use
guestfs_session_checksums_out().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="csumtype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checksum_device"
              c:identifier="guestfs_session_checksum_device"
              throws="1">
        <doc xml:space="preserve">compute MD5, SHAx or CRC checksum of the contents of a device

This call computes the MD5, SHAx or CRC checksum of the contents of the
device named @device. For the types of checksums supported see the
guestfs_session_checksum() command.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="csumtype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checksums_out"
              c:identifier="guestfs_session_checksums_out"
              throws="1">
        <doc xml:space="preserve">compute MD5, SHAx or CRC checksum of files in a directory

This command computes the checksums of all regular files in @directory
and then emits a list of those checksums to the local output file
@sumsfile.

This can be used for verifying the integrity of a virtual machine.
However to be properly secure you should pay attention to the output of
the checksum command (it uses the ones from GNU coreutils). In
particular when the filename is not printable, coreutils uses a special
backslash syntax. For more information, see the GNU coreutils info file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="csumtype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="sumsfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chmod" c:identifier="guestfs_session_chmod" throws="1">
        <doc xml:space="preserve">change file mode

Change the mode (permissions) of @path to @mode. Only numeric modes are
supported.

*Note*: When using this command from guestfish, @mode by default would
be decimal, unless you prefix it with @0 to get octal, ie. use @0700 not
@700.

The mode actually set is affected by the umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chown" c:identifier="guestfs_session_chown" throws="1">
        <doc xml:space="preserve">change file owner and group

Change the file owner to @owner and group to @group.

Only numeric uid and gid are supported. If you want to use names, you
will need to locate and parse the password file yourself (Augeas support
makes this relatively easy).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="owner" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="guestfs_session_close" throws="1">
        <doc xml:space="preserve">Close a libguestfs session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="command" c:identifier="guestfs_session_command" throws="1">
        <doc xml:space="preserve">run a command from the guest filesystem

This call runs a command from the guest filesystem. The filesystem must
be mounted, and must contain a compatible operating system (ie.
something Linux, with the same or compatible processor architecture).

The single parameter is an argv-style list of arguments. The first
element is the name of the program to run. Subsequent elements are
parameters. The list must be non-empty (ie. must contain a program
name). Note that the command runs directly, and is *not* invoked via the
shell (see guestfs_session_sh()).

The return value is anything printed to *stdout* by the command.

If the command returns a non-zero exit status, then this function
returns an error message. The error message string is the content of
*stderr* from the command.

The $PATH environment variable will contain at least "/usr/bin" and
"/bin". If you require a program from another location, you should
provide the full path in the first parameter.

Shared libraries and data files required by the program must be
available on filesystems which are mounted in the correct places. It is
the caller's responsibility to ensure all filesystems that are needed
are mounted at the right locations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="arguments" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="command_lines"
              c:identifier="guestfs_session_command_lines"
              throws="1">
        <doc xml:space="preserve">run a command, returning lines

This is the same as guestfs_session_command(), but splits the result
into a list of lines.

See also: guestfs_session_sh_lines()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="arguments" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="compress_device_out"
              c:identifier="guestfs_session_compress_device_out"
              throws="1">
        <doc xml:space="preserve">output compressed device

This command compresses @device and writes it out to the local file
@zdevice.

The @ctype and optional @level parameters have the same meaning as in
guestfs_session_compress_out().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="ctype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="zdevice" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCompressDeviceOut containing optional arguments</doc>
            <type name="CompressDeviceOut" c:type="GuestfsCompressDeviceOut*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compress_out"
              c:identifier="guestfs_session_compress_out"
              throws="1">
        <doc xml:space="preserve">output compressed file

This command compresses @file and writes it out to the local file
@zfile.

The compression program used is controlled by the @ctype parameter.
Currently this includes: @compress, @gzip, @bzip2, @xz or @lzop. Some
compression types may not be supported by particular builds of
libguestfs, in which case you will get an error containing the substring
"not supported".

The optional @level parameter controls compression level. The meaning
and default for this parameter depends on the compression program being
used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="ctype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="zfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCompressOut containing optional arguments</doc>
            <type name="CompressOut" c:type="GuestfsCompressOut*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="config" c:identifier="guestfs_session_config" throws="1">
        <doc xml:space="preserve">add qemu parameters

This can be used to add arbitrary qemu command line parameters of the
form *-param value*. Actually it's not quite arbitrary - we prevent you
from setting some parameters which would interfere with parameters that
we use.

The first character of @qemuparam string must be a @- (dash).

@qemuvalue can be NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="qemuparam" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="qemuvalue"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_device_to_device"
              c:identifier="guestfs_session_copy_device_to_device"
              throws="1">
        <doc xml:space="preserve">copy from source device to destination device

The four calls guestfs_session_copy_device_to_device(),
guestfs_session_copy_device_to_file(),
guestfs_session_copy_file_to_device(), and
guestfs_session_copy_file_to_file() let you copy from a source
(device|file) to a destination (device|file).

Partial copies can be made since you can specify optionally the source
offset, destination offset and size to copy. These values are all
specified in bytes. If not given, the offsets both default to zero, and
the size defaults to copying as much as possible until we hit the end of
the source.

The source and destination may be the same object. However overlapping
regions may not be copied correctly.

If the destination is a file, it is created if required. If the
destination file is not large enough, it is extended.

If the @sparse flag is true then the call avoids writing blocks that
contain only zeroes, which can help in some situations where the backing
disk is thin-provisioned. Note that unless the target is already zeroed,
using this option will result in incorrect copying.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCopyDeviceToDevice containing optional arguments</doc>
            <type name="CopyDeviceToDevice"
                  c:type="GuestfsCopyDeviceToDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_device_to_file"
              c:identifier="guestfs_session_copy_device_to_file"
              throws="1">
        <doc xml:space="preserve">copy from source device to destination file

See guestfs_session_copy_device_to_device() for a general overview of
this call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCopyDeviceToFile containing optional arguments</doc>
            <type name="CopyDeviceToFile" c:type="GuestfsCopyDeviceToFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_file_to_device"
              c:identifier="guestfs_session_copy_file_to_device"
              throws="1">
        <doc xml:space="preserve">copy from source file to destination device

See guestfs_session_copy_device_to_device() for a general overview of
this call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCopyFileToDevice containing optional arguments</doc>
            <type name="CopyFileToDevice" c:type="GuestfsCopyFileToDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_file_to_file"
              c:identifier="guestfs_session_copy_file_to_file"
              throws="1">
        <doc xml:space="preserve">copy from source file to destination file

See guestfs_session_copy_device_to_device() for a general overview of
this call.

This is not the function you want for copying files. This is for copying
blocks within existing files. See guestfs_session_cp(),
guestfs_session_cp_a() and guestfs_session_mv() for general file copying
and moving functions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsCopyFileToFile containing optional arguments</doc>
            <type name="CopyFileToFile" c:type="GuestfsCopyFileToFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_size"
              c:identifier="guestfs_session_copy_size"
              throws="1">
        <doc xml:space="preserve">copy size bytes from source to destination using dd

This command copies exactly @size bytes from one source device or file
@src to another destination device or file @dest.

Note this will fail if the source is too short or if the destination is
not large enough.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="cp" c:identifier="guestfs_session_cp" throws="1">
        <doc xml:space="preserve">copy a file

This copies a file from @src to @dest where @dest is either a
destination filename or destination directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cp_a" c:identifier="guestfs_session_cp_a" throws="1">
        <doc xml:space="preserve">copy a file or directory recursively

This copies a file or directory from @src to @dest recursively using the
"cp -a" command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cp_r" c:identifier="guestfs_session_cp_r" throws="1">
        <doc xml:space="preserve">copy a file or directory recursively

This copies a file or directory from @src to @dest recursively using the
"cp -rP" command.

Most users should use guestfs_session_cp_a() instead. This command is
useful when you don't want to preserve permissions, because the target
filesystem does not support it (primarily when writing to DOS FAT
filesystems).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dd" c:identifier="guestfs_session_dd" throws="1">
        <doc xml:space="preserve">copy from source to destination using dd

This command copies from one source device or file @src to another
destination device or file @dest. Normally you would use this to copy to
or from a device or partition, for example to duplicate a filesystem.

If the destination is a device, it must be as large or larger than the
source file or device, otherwise the copy will fail. This command cannot
do partial copies (see guestfs_session_copy_device_to_device()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="debug" c:identifier="guestfs_session_debug" throws="1">
        <doc xml:space="preserve">debugging and internals

The guestfs_session_debug() command exposes some internals of @guestfsd
(the guestfs daemon) that runs inside the qemu subprocess.

There is no comprehensive help for this command. You have to look at the
file "daemon/debug.c" in the libguestfs source to find out what you can
do.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="subcmd" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="extraargs" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="debug_drives"
              c:identifier="guestfs_session_debug_drives"
              throws="1">
        <doc xml:space="preserve">debug the drives (internal use only)

This returns the internal list of drives. 'debug' commands are not part
of the formal API and can be removed or changed at any time.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="debug_upload"
              c:identifier="guestfs_session_debug_upload"
              throws="1">
        <doc xml:space="preserve">upload a file to the appliance (internal use only)

The guestfs_session_debug_upload() command uploads a file to the
libguestfs appliance.

There is no comprehensive help for this command. You have to look at the
file "daemon/debug.c" in the libguestfs source to find out what it is
for.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="tmpname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="device_index"
              c:identifier="guestfs_session_device_index"
              throws="1">
        <doc xml:space="preserve">convert device to index

This function takes a device name (eg. "/dev/sdb") and returns the index
of the device in the list of devices.

Index numbers start from 0. The named device must exist, for example as
a string returned from guestfs_session_list_devices().

See also guestfs_session_list_devices(), guestfs_session_part_to_dev().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="df" c:identifier="guestfs_session_df" throws="1">
        <doc xml:space="preserve">report file system disk space usage

This command runs the @df command to report disk space used.

This command is mostly useful for interactive sessions. It is *not*
intended that you try to parse the output string. Use
guestfs_session_statvfs() from programs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="df_h" c:identifier="guestfs_session_df_h" throws="1">
        <doc xml:space="preserve">report file system disk space usage (human readable)

This command runs the "df -h" command to report disk space used in
human-readable format.

This command is mostly useful for interactive sessions. It is *not*
intended that you try to parse the output string. Use
guestfs_session_statvfs() from programs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="disk_format"
              c:identifier="guestfs_session_disk_format"
              throws="1">
        <doc xml:space="preserve">detect the disk format of a disk image

Detect and return the format of the disk image called @filename.
@filename can also be a host device, etc. If the format of the image
could not be detected, then "unknown" is returned.

Note that detecting the disk format can be insecure under some
circumstances. See "CVE-2010-3851" in guestfs(3).

See also: "DISK IMAGE FORMATS" in guestfs(3)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disk_has_backing_file"
              c:identifier="guestfs_session_disk_has_backing_file"
              throws="1">
        <doc xml:space="preserve">return whether disk has a backing file

Detect and return whether the disk image @filename has a backing file.

Note that detecting disk features can be insecure under some
circumstances. See "CVE-2010-3851" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disk_virtual_size"
              c:identifier="guestfs_session_disk_virtual_size"
              throws="1">
        <doc xml:space="preserve">return virtual size of a disk

Detect and return the virtual size in bytes of the disk image called
@filename.

Note that detecting disk features can be insecure under some
circumstances. See "CVE-2010-3851" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dmesg" c:identifier="guestfs_session_dmesg" throws="1">
        <doc xml:space="preserve">return kernel messages

This returns the kernel messages (@dmesg output) from the guest kernel.
This is sometimes useful for extended debugging of problems.

Another way to get the same information is to enable verbose messages
with guestfs_session_set_verbose() or by setting the environment
variable "LIBGUESTFS_DEBUG=1" before running the program.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="download"
              c:identifier="guestfs_session_download"
              throws="1">
        <doc xml:space="preserve">download a file to the local machine

Download file @remotefilename and save it as @filename on the local
machine.

@filename can also be a named pipe.

See also guestfs_session_upload(), guestfs_session_cat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="remotefilename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_offset"
              c:identifier="guestfs_session_download_offset"
              throws="1">
        <doc xml:space="preserve">download a file to the local machine with offset and size

Download file @remotefilename and save it as @filename on the local
machine.

@remotefilename is read for @size bytes starting at @offset (this region
must be within the file or device).

Note that there is no limit on the amount of data that can be downloaded
with this call, unlike with guestfs_session_pread(), and this call
always reads the full amount unless an error occurs.

See also guestfs_session_download(), guestfs_session_pread().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="remotefilename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_caches"
              c:identifier="guestfs_session_drop_caches"
              throws="1">
        <doc xml:space="preserve">drop kernel page cache, dentries and inodes

This instructs the guest kernel to drop its page cache, and/or dentries
and inode caches. The parameter @whattodrop tells the kernel what
precisely to drop, see &lt;ulink url='http://linux-mm.org/Drop_Caches'&gt;
http://linux-mm.org/Drop_Caches &lt;/ulink&gt;

Setting @whattodrop to 3 should drop everything.

This automatically calls sync(2) before the operation, so that the
maximum guest memory is freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="whattodrop" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="du" c:identifier="guestfs_session_du" throws="1">
        <doc xml:space="preserve">estimate file space usage

This command runs the "du -s" command to estimate file space usage for
@path.

@path can be a file or a directory. If @path is a directory then the
estimate includes the contents of the directory and all subdirectories
(recursively).

The result is the estimated size in *kilobytes* (ie. units of 1024
bytes).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="e2fsck" c:identifier="guestfs_session_e2fsck" throws="1">
        <doc xml:space="preserve">check an ext2/ext3 filesystem

This runs the ext2/ext3 filesystem checker on @device. It can take the
following optional arguments:

@correct
Automatically repair the file system. This option will cause e2fsck
to automatically fix any filesystem problems that can be safely
fixed without human intervention.

This option may not be specified at the same time as the @forceall
option.

@forceall
Assume an answer of 'yes' to all questions; allows e2fsck to be used
non-interactively.

This option may not be specified at the same time as the @correct
option.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsE2fsck containing optional arguments</doc>
            <type name="E2fsck" c:type="GuestfsE2fsck*"/>
          </parameter>
        </parameters>
      </method>
      <method name="e2fsck_f"
              c:identifier="guestfs_session_e2fsck_f"
              throws="1">
        <doc xml:space="preserve">check an ext2/ext3 filesystem

This runs "e2fsck -p -f device", ie. runs the ext2/ext3 filesystem
checker on @device, noninteractively (*-p*), even if the filesystem
appears to be clean (*-f*).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="echo_daemon"
              c:identifier="guestfs_session_echo_daemon"
              throws="1">
        <doc xml:space="preserve">echo arguments back to the client

This command concatenates the list of @words passed with single spaces
between them and returns the resulting string.

You can use this command to test the connection through to the daemon.

See also guestfs_session_ping_daemon().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="words" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="egrep" c:identifier="guestfs_session_egrep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @egrep program and returns the matching lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="egrepi" c:identifier="guestfs_session_egrepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "egrep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="guestfs_session_equal" throws="1">
        <doc xml:space="preserve">test if two files have equal contents

This compares the two files @file1 and @file2 and returns true if their
content is exactly equal, or false otherwise.

The external cmp(1) program is used for the comparison.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file1" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="file2" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exists" c:identifier="guestfs_session_exists" throws="1">
        <doc xml:space="preserve">test if file or directory exists

This returns @true if and only if there is a file, directory (or
anything) with the given @path name.

See also guestfs_session_is_file(), guestfs_session_is_dir(),
guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extlinux"
              c:identifier="guestfs_session_extlinux"
              throws="1">
        <doc xml:space="preserve">install the SYSLINUX bootloader on an ext2/3/4 or btrfs filesystem

Install the SYSLINUX bootloader on the device mounted at @directory.
Unlike guestfs_session_syslinux() which requires a FAT filesystem, this
can be used on an ext2/3/4 or btrfs filesystem.

The @directory parameter can be either a mountpoint, or a directory
within the mountpoint.

You also have to mark the partition as "active"
(guestfs_session_part_set_bootable()) and a Master Boot Record must be
installed (eg. using guestfs_session_pwrite_device()) on the first
sector of the whole disk. The SYSLINUX package comes with some suitable
Master Boot Records. See the extlinux(1) man page for further
information.

Additional configuration can be supplied to SYSLINUX by placing a file
called "extlinux.conf" on the filesystem under @directory. For further
information about the contents of this file, see extlinux(1).

See also guestfs_session_syslinux().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fallocate"
              c:identifier="guestfs_session_fallocate"
              throws="1">
        <doc xml:space="preserve">preallocate a file in the guest filesystem

This command preallocates a file (containing zero bytes) named @path of
size @len bytes. If the file exists already, it is overwritten.

Do not confuse this with the guestfish-specific @alloc command which
allocates a file in the host and attaches it as a device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fallocate64"
              c:identifier="guestfs_session_fallocate64"
              throws="1">
        <doc xml:space="preserve">preallocate a file in the guest filesystem

This command preallocates a file (containing zero bytes) named @path of
size @len bytes. If the file exists already, it is overwritten.

Note that this call allocates disk blocks for the file. To create a
sparse file use guestfs_session_truncate_size() instead.

The deprecated call guestfs_session_fallocate() does the same, but owing
to an oversight it only allowed 30 bit lengths to be specified,
effectively limiting the maximum size of files created through that call
to 1GB.

Do not confuse this with the guestfish-specific @alloc and @sparse
commands which create a file in the host and attach it as a device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="feature_available"
              c:identifier="guestfs_session_feature_available"
              throws="1">
        <doc xml:space="preserve">test availability of some parts of the API

This is the same as guestfs_session_available(), but unlike that call it
returns a simple true/false boolean result, instead of throwing an
exception if a feature is not found. For other documentation see
guestfs_session_available().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="groups" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="fgrep" c:identifier="guestfs_session_fgrep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @fgrep program and returns the matching lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fgrepi" c:identifier="guestfs_session_fgrepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "fgrep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file" c:identifier="guestfs_session_file" throws="1">
        <doc xml:space="preserve">determine file type

This call uses the standard file(1) command to determine the type or
contents of the file.

This call will also transparently look inside various types of
compressed file.

The exact command which runs is "file -zb path". Note in particular that
the filename is not prepended to the output (the *-b* option).

The output depends on the output of the underlying file(1) command and
it can change in future in ways beyond our control. In other words, the
output is not guaranteed by the ABI.

See also: file(1), guestfs_session_vfs_type(), guestfs_session_lstat(),
guestfs_session_is_file(), guestfs_session_is_blockdev() (etc),
guestfs_session_is_zero().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_architecture"
              c:identifier="guestfs_session_file_architecture"
              throws="1">
        <doc xml:space="preserve">detect the architecture of a binary file

This detects the architecture of the binary @filename, and returns it if
known.

Currently defined architectures are:

"i386"
This string is returned for all 32 bit i386, i486, i586, i686
binaries irrespective of the precise processor requirements of the
binary.

"x86_64"
64 bit x86-64.

"sparc"
32 bit SPARC.

"sparc64"
64 bit SPARC V9 and above.

"ia64"
Intel Itanium.

"ppc"
32 bit Power PC.

"ppc64"
64 bit Power PC.

Libguestfs may return other architecture strings in future.

The function works on at least the following types of files:

*   many types of Un*x and Linux binary

*   many types of Un*x and Linux shared library

*   Windows Win32 and Win64 binaries

*   Windows Win32 and Win64 DLLs

Win32 binaries and DLLs return @i386.

Win64 binaries and DLLs return @x86_64.

*   Linux kernel modules

*   Linux new-style initrd images

*   some non-x86 Linux vmlinuz kernels

What it can't do currently:

*   static libraries (libfoo.a)

*   Linux old-style initrd as compressed ext2 filesystem (RHEL 3)

*   x86 Linux vmlinuz kernels

x86 vmlinuz images (bzImage format) consist of a mix of 16-, 32- and
compressed code, and are horribly hard to unpack. If you want to
find the architecture of a kernel, use the architecture of the
associated initrd or kernel module(s) instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filesize"
              c:identifier="guestfs_session_filesize"
              throws="1">
        <doc xml:space="preserve">return the size of the file in bytes

This command returns the size of @file in bytes.

To get other stats about a file, use guestfs_session_stat(),
guestfs_session_lstat(), guestfs_session_is_dir(),
guestfs_session_is_file() etc. To get the size of block devices, use
guestfs_session_blockdev_getsize64().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filesystem_available"
              c:identifier="guestfs_session_filesystem_available"
              throws="1">
        <doc xml:space="preserve">check if filesystem is available

Check whether libguestfs supports the named filesystem. The argument
@filesystem is a filesystem name, such as @ext3.

You must call guestfs_session_launch() before using this command.

This is mainly useful as a negative test. If this returns true, it
doesn't mean that a particular filesystem can be created or mounted,
since filesystems can fail for other reasons such as it being a later
version of the filesystem, or having incompatible features, or lacking
the right mkfs.&amp;lt;*fs*&amp;gt; tool.

See also guestfs_session_available(),
guestfs_session_feature_available(), "AVAILABILITY" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filesystem" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="guestfs_session_fill" throws="1">
        <doc xml:space="preserve">fill a file with octets

This command creates a new file called @path. The initial content of the
file is @len octets of @c, where @c must be a number in the range
"[0..255]".

To fill a file with zero bytes (sparsely), it is much more efficient to
use guestfs_session_truncate_size(). To create a file with a pattern of
repeating bytes use guestfs_session_fill_pattern().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_dir"
              c:identifier="guestfs_session_fill_dir"
              throws="1">
        <doc xml:space="preserve">fill a directory with empty files

This function, useful for testing filesystems, creates @nr empty files
in the directory @dir with names @00000000 through @nr-1 (ie. each file
name is 8 digits long padded with zeroes).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="nr" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill_pattern"
              c:identifier="guestfs_session_fill_pattern"
              throws="1">
        <doc xml:space="preserve">fill a file with a repeating pattern of bytes

This function is like guestfs_session_fill() except that it creates a
new file of length @len containing the repeating pattern of bytes in
@pattern. The pattern is truncated if necessary to ensure the length of
the file is exactly @len bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="guestfs_session_find" throws="1">
        <doc xml:space="preserve">find all files and directories

This command lists out all files and directories, recursively, starting
at @directory. It is essentially equivalent to running the shell command
"find directory -print" but some post-processing happens on the output,
described below.

This returns a list of strings *without any prefix*. Thus if the
directory structure was:

&lt;![CDATA[/tmp/a]]&gt;

&lt;![CDATA[/tmp/b]]&gt;

&lt;![CDATA[/tmp/c/d]]&gt;

then the returned list from guestfs_session_find() "/tmp" would be 4
elements:

&lt;![CDATA[a]]&gt;

&lt;![CDATA[b]]&gt;

&lt;![CDATA[c]]&gt;

&lt;![CDATA[c/d]]&gt;

If @directory is not a directory, then this command returns an error.

The returned list is sorted.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find0" c:identifier="guestfs_session_find0" throws="1">
        <doc xml:space="preserve">find all files and directories, returning NUL-separated list

This command lists out all files and directories, recursively, starting
at @directory, placing the resulting list in the external file called
@files.

This command works the same way as guestfs_session_find() with the
following exceptions:

*   The resulting list is written to an external file.

*   Items (filenames) in the result are separated by "\0" characters.
See find(1) option *-print0*.

*   The result list is not sorted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="findfs_label"
              c:identifier="guestfs_session_findfs_label"
              throws="1">
        <doc xml:space="preserve">find a filesystem by label

This command searches the filesystems and returns the one which has the
given label. An error is returned if no such filesystem can be found.

To find the label of a filesystem, use guestfs_session_vfs_label().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="findfs_uuid"
              c:identifier="guestfs_session_findfs_uuid"
              throws="1">
        <doc xml:space="preserve">find a filesystem by UUID

This command searches the filesystems and returns the one which has the
given UUID. An error is returned if no such filesystem can be found.

To find the UUID of a filesystem, use guestfs_session_vfs_uuid().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fsck" c:identifier="guestfs_session_fsck" throws="1">
        <doc xml:space="preserve">run the filesystem checker

This runs the filesystem checker (fsck) on @device which should have
filesystem type @fstype.

The returned integer is the status. See fsck(8) for the list of status
codes from @fsck.

Notes:

*   Multiple status codes can be summed together.

*   A non-zero return code can mean "success", for example if errors
have been corrected on the filesystem.

*   Checking or repairing NTFS volumes is not supported (by linux-ntfs).

This command is entirely equivalent to running "fsck -a -t fstype
device".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fstrim" c:identifier="guestfs_session_fstrim" throws="1">
        <doc xml:space="preserve">trim free space in a filesystem

Trim the free space in the filesystem mounted on @mountpoint. The
filesystem must be mounted read-write.

The filesystem contents are not affected, but any free space in the
filesystem is "trimmed", that is, given back to the host device, thus
making disk images more sparse, allowing unused space in qcow2 files to
be reused, etc.

This operation requires support in libguestfs, the mounted filesystem,
the host filesystem, qemu and the host kernel. If this support isn't
present it may give an error or even appear to run but do nothing.

See also guestfs_session_zero_free_space(). That is a slightly different
operation that turns free space in the filesystem into zeroes. It is
valid to call guestfs_session_fstrim() either instead of, or after
calling guestfs_session_zero_free_space().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsFstrim containing optional arguments</doc>
            <type name="Fstrim" c:type="GuestfsFstrim*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_append"
              c:identifier="guestfs_session_get_append"
              throws="1">
        <doc xml:space="preserve">get the additional kernel options

Return the additional kernel options which are added to the guest kernel
command line.

If @NULL then no options are added.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string. Note that NULL does not indicate error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attach_method"
              c:identifier="guestfs_session_get_attach_method"
              throws="1">
        <doc xml:space="preserve">get the backend

Return the current backend.

See guestfs_session_set_backend() and "BACKEND" in guestfs(3).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autosync"
              c:identifier="guestfs_session_get_autosync"
              throws="1">
        <doc xml:space="preserve">get autosync mode

Get the autosync flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backend"
              c:identifier="guestfs_session_get_backend"
              throws="1">
        <doc xml:space="preserve">get the backend

Return the current backend.

This handle property was previously called the "attach method".

See guestfs_session_set_backend() and "BACKEND" in guestfs(3).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cachedir"
              c:identifier="guestfs_session_get_cachedir"
              throws="1">
        <doc xml:space="preserve">get the appliance cache directory

Get the directory used by the handle to store the appliance cache.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direct"
              c:identifier="guestfs_session_get_direct"
              throws="1">
        <doc xml:space="preserve">get direct appliance mode flag

Return the direct appliance mode flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_e2attrs"
              c:identifier="guestfs_session_get_e2attrs"
              throws="1">
        <doc xml:space="preserve">get ext2 file attributes of a file

This returns the file attributes associated with @file.

The attributes are a set of bits associated with each inode which affect
the behaviour of the file. The attributes are returned as a string of
letters (described below). The string may be empty, indicating that no
file attributes are set for this file.

These attributes are only present when the file is located on an
ext2/3/4 filesystem. Using this call on other filesystem types will
result in an error.

The characters (file attributes) in the returned string are currently:

'A' When the file is accessed, its atime is not modified.

'a' The file is append-only.

'c' The file is compressed on-disk.

'D' (Directories only.) Changes to this directory are written
synchronously to disk.

'd' The file is not a candidate for backup (see dump(8)).

'E' The file has compression errors.

'e' The file is using extents.

'h' The file is storing its blocks in units of the filesystem blocksize
instead of sectors.

'I' (Directories only.) The directory is using hashed trees.

'i' The file is immutable. It cannot be modified, deleted or renamed. No
link can be created to this file.

'j' The file is data-journaled.

's' When the file is deleted, all its blocks will be zeroed.

'S' Changes to this file are written synchronously to disk.

'T' (Directories only.) This is a hint to the block allocator that
subdirectories contained in this directory should be spread across
blocks. If not present, the block allocator will try to group
subdirectories together.

't' For a file, this disables tail-merging. (Not used by upstream
implementations of ext2.)

'u' When the file is deleted, its blocks will be saved, allowing the
file to be undeleted.

'X' The raw contents of the compressed file may be accessed.

'Z' The compressed file is dirty.

More file attributes may be added to this list later. Not all file
attributes may be set for all kinds of files. For detailed information,
consult the chattr(1) man page.

See also guestfs_session_set_e2attrs().

Don't confuse these attributes with extended attributes (see
guestfs_session_getxattr()).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_e2generation"
              c:identifier="guestfs_session_get_e2generation"
              throws="1">
        <doc xml:space="preserve">get ext2 file generation of a file

This returns the ext2 file generation of a file. The generation (which
used to be called the "version") is a number associated with an inode.
This is most commonly used by NFS servers.

The generation is only present when the file is located on an ext2/3/4
filesystem. Using this call on other filesystem types will result in an
error.

See guestfs_session_set_e2generation().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_e2label"
              c:identifier="guestfs_session_get_e2label"
              throws="1">
        <doc xml:space="preserve">get the ext2/3/4 filesystem label

This returns the ext2/3/4 filesystem label of the filesystem on @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_e2uuid"
              c:identifier="guestfs_session_get_e2uuid"
              throws="1">
        <doc xml:space="preserve">get the ext2/3/4 filesystem UUID

This returns the ext2/3/4 filesystem UUID of the filesystem on @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_libvirt_requested_credential_challenge"
              c:identifier="guestfs_session_get_libvirt_requested_credential_challenge"
              throws="1">
        <doc xml:space="preserve">challenge of i'th requested credential

Get the challenge (provided by libvirt) for the @index'th requested
credential. If libvirt did not provide a challenge, this returns the
empty string "".

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_libvirt_requested_credential_defresult"
              c:identifier="guestfs_session_get_libvirt_requested_credential_defresult"
              throws="1">
        <doc xml:space="preserve">default result of i'th requested credential

Get the default result (provided by libvirt) for the @index'th requested
credential. If libvirt did not provide a default result, this returns
the empty string "".

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_libvirt_requested_credential_prompt"
              c:identifier="guestfs_session_get_libvirt_requested_credential_prompt"
              throws="1">
        <doc xml:space="preserve">prompt of i'th requested credential

Get the prompt (provided by libvirt) for the @index'th requested
credential. If libvirt did not provide a prompt, this returns the empty
string "".

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_libvirt_requested_credentials"
              c:identifier="guestfs_session_get_libvirt_requested_credentials"
              throws="1">
        <doc xml:space="preserve">get list of credentials requested by libvirt

This should only be called during the event callback for events of type
@GUESTFS_EVENT_LIBVIRT_AUTH.

Return the list of credentials requested by libvirt. Possible values are
a subset of the strings provided when you called
guestfs_session_set_libvirt_supported_credentials().

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_memsize"
              c:identifier="guestfs_session_get_memsize"
              throws="1">
        <doc xml:space="preserve">get memory allocated to the qemu subprocess

This gets the memory size in megabytes allocated to the qemu subprocess.

If guestfs_session_set_memsize() was not called on this handle, and if
@LIBGUESTFS_MEMSIZE was not set, then this returns the compiled-in
default value for memsize.

For more information on the architecture of libguestfs, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network"
              c:identifier="guestfs_session_get_network"
              throws="1">
        <doc xml:space="preserve">get enable network flag

This returns the enable network flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="guestfs_session_get_path"
              throws="1">
        <doc xml:space="preserve">get the search path

Return the current search path.

This is always non-NULL. If it wasn't set already, then this will return
the default path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pgroup"
              c:identifier="guestfs_session_get_pgroup"
              throws="1">
        <doc xml:space="preserve">get process group flag

This returns the process group flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pid" c:identifier="guestfs_session_get_pid" throws="1">
        <doc xml:space="preserve">get PID of qemu subprocess

Return the process ID of the qemu subprocess. If there is no qemu
subprocess, then this will return an error.

This is an internal call used for debugging and testing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_program"
              c:identifier="guestfs_session_get_program"
              throws="1">
        <doc xml:space="preserve">get the program name

Get the program name. See guestfs_session_set_program().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_qemu"
              c:identifier="guestfs_session_get_qemu"
              throws="1">
        <doc xml:space="preserve">get the qemu binary

Return the current qemu binary.

This is always non-NULL. If it wasn't set already, then this will return
the default qemu binary name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recovery_proc"
              c:identifier="guestfs_session_get_recovery_proc"
              throws="1">
        <doc xml:space="preserve">get recovery process enabled flag

Return the recovery process enabled flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selinux"
              c:identifier="guestfs_session_get_selinux"
              throws="1">
        <doc xml:space="preserve">get SELinux enabled flag

This returns the current setting of the selinux flag which is passed to
the appliance at boot time. See guestfs_session_set_selinux().

For more information on the architecture of libguestfs, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smp" c:identifier="guestfs_session_get_smp" throws="1">
        <doc xml:space="preserve">get number of virtual CPUs in appliance

This returns the number of virtual CPUs assigned to the appliance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="guestfs_session_get_state"
              throws="1">
        <doc xml:space="preserve">get the current state

This returns the current state as an opaque integer. This is only useful
for printing debug and internal error messages.

For more information on states, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tmpdir"
              c:identifier="guestfs_session_get_tmpdir"
              throws="1">
        <doc xml:space="preserve">get the temporary directory

Get the directory used by the handle to store temporary files.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trace"
              c:identifier="guestfs_session_get_trace"
              throws="1">
        <doc xml:space="preserve">get command trace enabled flag

Return the command trace flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_umask"
              c:identifier="guestfs_session_get_umask"
              throws="1">
        <doc xml:space="preserve">get the current umask

Return the current umask. By default the umask is @022 unless it has
been set by calling guestfs_session_umask().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_verbose"
              c:identifier="guestfs_session_get_verbose"
              throws="1">
        <doc xml:space="preserve">get verbose mode

This returns the verbose messages flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getcon" c:identifier="guestfs_session_getcon" throws="1">
        <doc xml:space="preserve">get SELinux security context

This gets the SELinux security context of the daemon.

See the documentation about SELINUX in guestfs(3), and
guestfs_session_setcon()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getxattr"
              c:identifier="guestfs_session_getxattr"
              throws="1">
        <doc xml:space="preserve">get a single extended attribute

Get a single extended attribute from file @path named @name. This call
follows symlinks. If you want to lookup an extended attribute for the
symlink itself, use guestfs_session_lgetxattr().

Normally it is better to get all extended attributes from a file in one
go by calling guestfs_session_getxattrs(). However some Linux filesystem
implementations are buggy and do not provide a way to list out
attributes. For these filesystems (notably ntfs-3g) you have to know the
names of the extended attributes you want in advance and call this
function.

Extended attribute values are blobs of binary data. If there is no
extended attribute named @name, this returns an error.

See also: guestfs_session_getxattrs(), guestfs_session_lgetxattr(),
attr(5).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="2" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="getxattrs"
              c:identifier="guestfs_session_getxattrs"
              throws="1">
        <doc xml:space="preserve">list extended attributes of a file or directory

This call lists the extended attributes of the file or directory @path.

At the system call level, this is a combination of the listxattr(2) and
getxattr(2) calls.

See also: guestfs_session_lgetxattrs(), attr(5).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of XAttr objects, or NULL on error</doc>
          <array c:type="GuestfsXAttr**">
            <type name="XAttr"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="glob_expand"
              c:identifier="guestfs_session_glob_expand"
              throws="1">
        <doc xml:space="preserve">expand a wildcard path

This command searches for all the pathnames matching @pattern according
to the wildcard expansion rules used by the shell.

If no paths match, then this returns an empty list (note: not an error).

It is just a wrapper around the C glob(3) function with flags
"GLOB_MARK|GLOB_BRACE". See that manual page for more details.

Notice that there is no equivalent command for expanding a device name
(eg. "/dev/sd*"). Use guestfs_session_list_devices(),
guestfs_session_list_partitions() etc functions instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grep" c:identifier="guestfs_session_grep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @grep program and returns the matching lines.

The optional flags are:

@extended
Use extended regular expressions. This is the same as using the *-E*
flag.

@fixed
Match fixed (don't use regular expressions). This is the same as
using the *-F* flag.

@insensitive
Match case-insensitive. This is the same as using the *-i* flag.

@compressed
Use @zgrep instead of @grep. This allows the input to be compress-
or gzip-compressed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsGrep containing optional arguments</doc>
            <type name="Grep" c:type="GuestfsGrep*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grepi" c:identifier="guestfs_session_grepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "grep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="grub_install"
              c:identifier="guestfs_session_grub_install"
              throws="1">
        <doc xml:space="preserve">install GRUB 1

This command installs GRUB 1 (the Grand Unified Bootloader) on @device,
with the root directory being @root.

Notes:

*   There is currently no way in the API to install grub2, which is used
by most modern Linux guests. It is possible to run the grub2 command
from the guest, although see the caveats in "RUNNING COMMANDS" in
guestfs(3).

*   This uses @grub-install from the host. Unfortunately grub is not
always compatible with itself, so this only works in rather narrow
circumstances. Careful testing with each guest version is advisable.

*   If grub-install reports the error "No suitable drive was found in
the generated device map." it may be that you need to create a
"/boot/grub/device.map" file first that contains the mapping between
grub device names and Linux device names. It is usually sufficient
to create a file containing:

&lt;![CDATA[(hd0) /dev/vda]]&gt;

replacing "/dev/vda" with the name of the installation device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="head" c:identifier="guestfs_session_head" throws="1">
        <doc xml:space="preserve">return first 10 lines of a file

This command returns up to the first 10 lines of a file as a list of
strings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="head_n" c:identifier="guestfs_session_head_n" throws="1">
        <doc xml:space="preserve">return first N lines of a file

If the parameter @nrlines is a positive number, this returns the first
@nrlines lines of the file @path.

If the parameter @nrlines is a negative number, this returns lines from
the file @path, excluding the last @nrlines lines.

If the parameter @nrlines is zero, this returns an empty list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nrlines" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hexdump" c:identifier="guestfs_session_hexdump" throws="1">
        <doc xml:space="preserve">dump a file in hexadecimal

This runs "hexdump -C" on the given @path. The result is the
human-readable, canonical hex dump of the file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_close"
              c:identifier="guestfs_session_hivex_close"
              throws="1">
        <doc xml:space="preserve">close the current hivex handle

Close the current hivex handle.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hivex_commit"
              c:identifier="guestfs_session_hivex_commit"
              throws="1">
        <doc xml:space="preserve">commit (write) changes back to the hive

Commit (write) changes to the hive.

If the optional @filename parameter is null, then the changes are
written back to the same hive that was opened. If this is not null then
they are written to the alternate filename given and the original hive
is left untouched.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_add_child"
              c:identifier="guestfs_session_hivex_node_add_child"
              throws="1">
        <doc xml:space="preserve">add a child node

Add a child node to @parent named @name.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_children"
              c:identifier="guestfs_session_hivex_node_children"
              throws="1">
        <doc xml:space="preserve">return list of nodes which are subkeys of node

Return the list of nodes which are subkeys of @nodeh.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of HivexNode objects, or NULL on error</doc>
          <array c:type="GuestfsHivexNode**">
            <type name="HivexNode"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_delete_child"
              c:identifier="guestfs_session_hivex_node_delete_child"
              throws="1">
        <doc xml:space="preserve">delete a node (recursively)

Delete @nodeh, recursively if necessary.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_get_child"
              c:identifier="guestfs_session_hivex_node_get_child"
              throws="1">
        <doc xml:space="preserve">return the named child of node

Return the child of @nodeh with the name @name, if it exists. This can
return @0 meaning the name was not found.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_get_value"
              c:identifier="guestfs_session_hivex_node_get_value"
              throws="1">
        <doc xml:space="preserve">return the named value

Return the value attached to @nodeh which has the name @key, if it
exists. This can return @0 meaning the key was not found.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_name"
              c:identifier="guestfs_session_hivex_node_name"
              throws="1">
        <doc xml:space="preserve">return the name of the node

Return the name of @nodeh.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_parent"
              c:identifier="guestfs_session_hivex_node_parent"
              throws="1">
        <doc xml:space="preserve">return the parent of node

Return the parent node of @nodeh.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_set_value"
              c:identifier="guestfs_session_hivex_node_set_value"
              throws="1">
        <doc xml:space="preserve">set or replace a single value in a node

Set or replace a single value under the node @nodeh. The @key is the
name, @t is the type, and @val is the data.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="4" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="val_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of val, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_node_values"
              c:identifier="guestfs_session_hivex_node_values"
              throws="1">
        <doc xml:space="preserve">return list of values attached to node

Return the array of (key, datatype, data) tuples attached to @nodeh.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of HivexValue objects, or NULL on error</doc>
          <array c:type="GuestfsHivexValue**">
            <type name="HivexValue"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nodeh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_open"
              c:identifier="guestfs_session_hivex_open"
              throws="1">
        <doc xml:space="preserve">open a Windows Registry hive file

Open the Windows Registry hive file named @filename. If there was any
previous hivex handle associated with this guestfs session, then it is
closed.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsHivexOpen containing optional arguments</doc>
            <type name="HivexOpen" c:type="GuestfsHivexOpen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_root"
              c:identifier="guestfs_session_hivex_root"
              throws="1">
        <doc xml:space="preserve">return the root node of the hive

Return the root node of the hive.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hivex_value_key"
              c:identifier="guestfs_session_hivex_value_key"
              throws="1">
        <doc xml:space="preserve">return the key field from the (key, datatype, data) tuple

Return the key (name) field of a (key, datatype, data) tuple.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="valueh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_value_type"
              c:identifier="guestfs_session_hivex_value_type"
              throws="1">
        <doc xml:space="preserve">return the data type from the (key, datatype, data) tuple

Return the data type field from a (key, datatype, data) tuple.

This is a wrapper around the hivex(3) call of the same name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="valueh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_value_utf8"
              c:identifier="guestfs_session_hivex_value_utf8"
              throws="1">
        <doc xml:space="preserve">return the data field from the (key, datatype, data) tuple

This calls guestfs_session_hivex_value_value() (which returns the data
field from a hivex value tuple). It then assumes that the field is a
UTF-16LE string and converts the result to UTF-8 (or if this is not
possible, it returns an error).

This is useful for reading strings out of the Windows registry. However
it is not foolproof because the registry is not strongly-typed and
fields can contain arbitrary or unexpected data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="valueh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="hivex_value_value"
              c:identifier="guestfs_session_hivex_value_value"
              throws="1">
        <doc xml:space="preserve">return the data field from the (key, datatype, data) tuple

Return the data field of a (key, datatype, data) tuple.

This is a wrapper around the hivex(3) call of the same name.

See also: guestfs_session_hivex_value_utf8().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="1" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="valueh" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="initrd_cat"
              c:identifier="guestfs_session_initrd_cat"
              throws="1">
        <doc xml:space="preserve">list the contents of a single file in an initrd

This command unpacks the file @filename from the initrd file called
@initrdpath. The filename must be given *without* the initial "/"
character.

For example, in guestfish you could use the following command to examine
the boot script (usually called "/init") contained in a Linux initrd or
initramfs image:

&lt;![CDATA[initrd-cat /boot/initrd-&lt;version&gt;.img init]]&gt;

See also guestfs_session_initrd_list().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="2" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="initrdpath" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="initrd_list"
              c:identifier="guestfs_session_initrd_list"
              throws="1">
        <doc xml:space="preserve">list files in an initrd

This command lists out files contained in an initrd.

The files are listed without any initial "/" character. The files are
listed in the order they appear (not necessarily alphabetical).
Directory names are listed as separate items.

Old Linux kernels (2.4 and earlier) used a compressed ext2 filesystem as
initrd. We *only* support the newer initramfs format (compressed cpio
files).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inotify_add_watch"
              c:identifier="guestfs_session_inotify_add_watch"
              throws="1">
        <doc xml:space="preserve">add an inotify watch

Watch @path for the events listed in @mask.

Note that if @path is a directory then events within that directory are
watched, but this does *not* happen recursively (in subdirectories).

Note for non-C or non-Linux callers: the inotify events are defined by
the Linux kernel ABI and are listed in "/usr/include/sys/inotify.h".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="inotify_close"
              c:identifier="guestfs_session_inotify_close"
              throws="1">
        <doc xml:space="preserve">close the inotify handle

This closes the inotify handle which was previously opened by
inotify_init. It removes all watches, throws away any pending events,
and deallocates all resources.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inotify_files"
              c:identifier="guestfs_session_inotify_files"
              throws="1">
        <doc xml:space="preserve">return list of watched files that had events

This function is a helpful wrapper around guestfs_session_inotify_read()
which just returns a list of pathnames of objects that were touched. The
returned pathnames are sorted and deduplicated.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inotify_init"
              c:identifier="guestfs_session_inotify_init"
              throws="1">
        <doc xml:space="preserve">create an inotify handle

This command creates a new inotify handle. The inotify subsystem can be
used to notify events which happen to objects in the guest filesystem.

@maxevents is the maximum number of events which will be queued up
between calls to guestfs_session_inotify_read() or
guestfs_session_inotify_files(). If this is passed as @0, then the
kernel (or previously set) default is used. For Linux 2.6.29 the default
was 16384 events. Beyond this limit, the kernel throws away events, but
records the fact that it threw them away by setting a flag
@IN_Q_OVERFLOW in the returned structure list (see
guestfs_session_inotify_read()).

Before any events are generated, you have to add some watches to the
internal watch list. See: guestfs_session_inotify_add_watch() and
guestfs_session_inotify_rm_watch().

Queued up events should be read periodically by calling
guestfs_session_inotify_read() (or guestfs_session_inotify_files() which
is just a helpful wrapper around guestfs_session_inotify_read()). If you
don't read the events out often enough then you risk the internal queue
overflowing.

The handle should be closed after use by calling
guestfs_session_inotify_close(). This also removes any watches
automatically.

See also inotify(7) for an overview of the inotify interface as exposed
by the Linux kernel, which is roughly what we expose via libguestfs.
Note that there is one global inotify handle per libguestfs instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="maxevents" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="inotify_read"
              c:identifier="guestfs_session_inotify_read"
              throws="1">
        <doc xml:space="preserve">return list of inotify events

Return the complete queue of events that have happened since the
previous read call.

If no events have happened, this returns an empty list.

*Note*: In order to make sure that all events have been read, you must
call this function repeatedly until it returns an empty list. The reason
is that the call will read events up to the maximum appliance-to-host
message size and leave remaining events in the queue.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of INotifyEvent objects, or NULL on error</doc>
          <array c:type="GuestfsINotifyEvent**">
            <type name="INotifyEvent"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inotify_rm_watch"
              c:identifier="guestfs_session_inotify_rm_watch"
              throws="1">
        <doc xml:space="preserve">remove an inotify watch

Remove a previously defined inotify watch. See
guestfs_session_inotify_add_watch().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="wd" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_arch"
              c:identifier="guestfs_session_inspect_get_arch"
              throws="1">
        <doc xml:space="preserve">get architecture of inspected operating system

This returns the architecture of the inspected operating system. The
possible return values are listed under
guestfs_session_file_architecture().

If the architecture could not be determined, then the string @unknown is
returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_distro"
              c:identifier="guestfs_session_inspect_get_distro"
              throws="1">
        <doc xml:space="preserve">get distro of inspected operating system

This returns the distro (distribution) of the inspected operating
system.

Currently defined distros are:

"archlinux"
Arch Linux.

"buildroot"
Buildroot-derived distro, but not one we specifically recognize.

"centos"
CentOS.

"cirros"
Cirros.

"debian"
Debian.

"fedora"
Fedora.

"freedos"
FreeDOS.

"gentoo"
Gentoo.

"linuxmint"
Linux Mint.

"mageia"
Mageia.

"mandriva"
Mandriva.

"meego"
MeeGo.

"openbsd"
OpenBSD.

"opensuse"
OpenSUSE.

"pardus"
Pardus.

"redhat-based"
Some Red Hat-derived distro.

"rhel"
Red Hat Enterprise Linux.

"scientificlinux"
Scientific Linux.

"slackware"
Slackware.

"sles"
SuSE Linux Enterprise Server or Desktop.

"suse-based"
Some openSuSE-derived distro.

"ttylinux"
ttylinux.

"ubuntu"
Ubuntu.

"unknown"
The distro could not be determined.

"windows"
Windows does not have distributions. This string is returned if the
OS type is Windows.

Future versions of libguestfs may return other strings here. The caller
should be prepared to handle any string.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_drive_mappings"
              c:identifier="guestfs_session_inspect_get_drive_mappings"
              throws="1">
        <doc xml:space="preserve">get drive letter mappings

This call is useful for Windows which uses a primitive system of
assigning drive letters (like "C:") to partitions. This inspection API
examines the Windows Registry to find out how disks/partitions are
mapped to drive letters, and returns a hash table as in the example
below:

&lt;![CDATA[C      =&gt;     /dev/vda2]]&gt;

&lt;![CDATA[E      =&gt;     /dev/vdb1]]&gt;

&lt;![CDATA[F      =&gt;     /dev/vdc1]]&gt;

Note that keys are drive letters. For Windows, the key is case
insensitive and just contains the drive letter, without the customary
colon separator character.

In future we may support other operating systems that also used drive
letters, but the keys for those might not be case insensitive and might
be longer than 1 character. For example in OS-9, hard drives were named
@h0, @h1 etc.

For Windows guests, currently only hard drive mappings are returned.
Removable disks (eg. DVD-ROMs) are ignored.

For guests that do not use drive mappings, or if the drive mappings
could not be determined, this returns an empty hash table.

Please read "INSPECTION" in guestfs(3) for more details. See also
guestfs_session_inspect_get_mountpoints(),
guestfs_session_inspect_get_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_filesystems"
              c:identifier="guestfs_session_inspect_get_filesystems"
              throws="1">
        <doc xml:space="preserve">get filesystems associated with inspected operating system

This returns a list of all the filesystems that we think are associated
with this operating system. This includes the root filesystem, other
ordinary filesystems, and non-mounted devices like swap partitions.

In the case of a multi-boot virtual machine, it is possible for a
filesystem to be shared between operating systems.

Please read "INSPECTION" in guestfs(3) for more details. See also
guestfs_session_inspect_get_mountpoints().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_format"
              c:identifier="guestfs_session_inspect_get_format"
              throws="1">
        <doc xml:space="preserve">get format of inspected operating system

This returns the format of the inspected operating system. You can use
it to detect install images, live CDs and similar.

Currently defined formats are:

"installed"
This is an installed operating system.

"installer"
The disk image being inspected is not an installed operating system,
but a *bootable* install disk, live CD, or similar.

"unknown"
The format of this disk image is not known.

Future versions of libguestfs may return other strings here. The caller
should be prepared to handle any string.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_hostname"
              c:identifier="guestfs_session_inspect_get_hostname"
              throws="1">
        <doc xml:space="preserve">get hostname of the operating system

This function returns the hostname of the operating system as found by
inspection of the guest's configuration files.

If the hostname could not be determined, then the string @unknown is
returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_icon"
              c:identifier="guestfs_session_inspect_get_icon"
              throws="1">
        <doc xml:space="preserve">get the icon corresponding to this operating system

This function returns an icon corresponding to the inspected operating
system. The icon is returned as a buffer containing a PNG image
(re-encoded to PNG if necessary).

If it was not possible to get an icon this function returns a
zero-length (non-NULL) buffer. *Callers must check for this case*.

Libguestfs will start by looking for a file called "/etc/favicon.png" or
"C:\etc\favicon.png" and if it has the correct format, the contents of
this file will be returned. You can disable favicons by passing the
optional @favicon boolean as false (default is true).

If finding the favicon fails, then we look in other places in the guest
for a suitable icon.

If the optional @highquality boolean is true then only high quality
icons are returned, which means only icons of high resolution with an
alpha channel. The default (false) is to return any icon we can, even if
it is of substandard quality.

Notes:

*   Unlike most other inspection API calls, the guest's disks must be
mounted up before you call this, since it needs to read information
from the guest filesystem during the call.

*   Security: The icon data comes from the untrusted guest, and should
be treated with caution. PNG files have been known to contain
exploits. Ensure that libpng (or other relevant libraries) are fully
up to date before trying to process or display the icon.

*   The PNG image returned can be any size. It might not be square.
Libguestfs tries to return the largest, highest quality icon
available. The application must scale the icon to the required size.

*   Extracting icons from Windows guests requires the external @wrestool
program from the @icoutils package, and several programs (@bmptopnm,
@pnmtopng, @pamcut) from the @netpbm package. These must be
installed separately.

*   Operating system icons are usually trademarks. Seek legal advice
before using trademarks in applications.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="2" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsInspectGetIcon containing optional arguments</doc>
            <type name="InspectGetIcon" c:type="GuestfsInspectGetIcon*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_major_version"
              c:identifier="guestfs_session_inspect_get_major_version"
              throws="1">
        <doc xml:space="preserve">get major version of inspected operating system

This returns the major version number of the inspected operating system.

Windows uses a consistent versioning scheme which is *not* reflected in
the popular public names used by the operating system. Notably the
operating system known as "Windows 7" is really version 6.1 (ie. major =
6, minor = 1). You can find out the real versions corresponding to
releases of Windows by consulting Wikipedia or MSDN.

If the version could not be determined, then @0 is returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_minor_version"
              c:identifier="guestfs_session_inspect_get_minor_version"
              throws="1">
        <doc xml:space="preserve">get minor version of inspected operating system

This returns the minor version number of the inspected operating system.

If the version could not be determined, then @0 is returned.

Please read "INSPECTION" in guestfs(3) for more details. See also
guestfs_session_inspect_get_major_version().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_mountpoints"
              c:identifier="guestfs_session_inspect_get_mountpoints"
              throws="1">
        <doc xml:space="preserve">get mountpoints of inspected operating system

This returns a hash of where we think the filesystems associated with
this operating system should be mounted. Callers should note that this
is at best an educated guess made by reading configuration files such as
"/etc/fstab". *In particular note* that this may return filesystems
which are non-existent or not mountable and callers should be prepared
to handle or ignore failures if they try to mount them.

Each element in the returned hashtable has a key which is the path of
the mountpoint (eg. "/boot") and a value which is the filesystem that
would be mounted there (eg. "/dev/sda1").

Non-mounted devices such as swap devices are *not* returned in this
list.

For operating systems like Windows which still use drive letters, this
call will only return an entry for the first drive "mounted on" "/". For
information about the mapping of drive letters to partitions, see
guestfs_session_inspect_get_drive_mappings().

Please read "INSPECTION" in guestfs(3) for more details. See also
guestfs_session_inspect_get_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_package_format"
              c:identifier="guestfs_session_inspect_get_package_format"
              throws="1">
        <doc xml:space="preserve">get package format used by the operating system

This function and guestfs_session_inspect_get_package_management()
return the package format and package management tool used by the
inspected operating system. For example for Fedora these functions would
return @rpm (package format) and @yum (package management).

This returns the string @unknown if we could not determine the package
format *or* if the operating system does not have a real packaging
system (eg. Windows).

Possible strings include: @rpm, @deb, @ebuild, @pisi, @pacman, @pkgsrc.
Future versions of libguestfs may return other strings.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_package_management"
              c:identifier="guestfs_session_inspect_get_package_management"
              throws="1">
        <doc xml:space="preserve">get package management tool used by the operating system

guestfs_session_inspect_get_package_format() and this function return
the package format and package management tool used by the inspected
operating system. For example for Fedora these functions would return
@rpm (package format) and @yum (package management).

This returns the string @unknown if we could not determine the package
management tool *or* if the operating system does not have a real
packaging system (eg. Windows).

Possible strings include: @yum, @up2date, @apt (for all Debian
derivatives), @portage, @pisi, @pacman, @urpmi, @zypper. Future versions
of libguestfs may return other strings.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_product_name"
              c:identifier="guestfs_session_inspect_get_product_name"
              throws="1">
        <doc xml:space="preserve">get product name of inspected operating system

This returns the product name of the inspected operating system. The
product name is generally some freeform string which can be displayed to
the user, but should not be parsed by programs.

If the product name could not be determined, then the string @unknown is
returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_product_variant"
              c:identifier="guestfs_session_inspect_get_product_variant"
              throws="1">
        <doc xml:space="preserve">get product variant of inspected operating system

This returns the product variant of the inspected operating system.

For Windows guests, this returns the contents of the Registry key
"HKLM\Software\Microsoft\Windows NT\CurrentVersion" @InstallationType
which is usually a string such as @Client or @Server (other values are
possible). This can be used to distinguish consumer and enterprise
versions of Windows that have the same version number (for example,
Windows 7 and Windows 2008 Server are both version 6.1, but the former
is @Client and the latter is @Server).

For enterprise Linux guests, in future we intend this to return the
product variant such as @Desktop, @Server and so on. But this is not
implemented at present.

If the product variant could not be determined, then the string @unknown
is returned.

Please read "INSPECTION" in guestfs(3) for more details. See also
guestfs_session_inspect_get_product_name(),
guestfs_session_inspect_get_major_version().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_roots"
              c:identifier="guestfs_session_inspect_get_roots"
              throws="1">
        <doc xml:space="preserve">return list of operating systems found by last inspection

This function is a convenient way to get the list of root devices, as
returned from a previous call to guestfs_session_inspect_os(), but
without redoing the whole inspection process.

This returns an empty list if either no root devices were found or the
caller has not called guestfs_session_inspect_os().

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inspect_get_type"
              c:identifier="guestfs_session_inspect_get_type"
              throws="1">
        <doc xml:space="preserve">get type of inspected operating system

This returns the type of the inspected operating system. Currently
defined types are:

"linux"
Any Linux-based operating system.

"windows"
Any Microsoft Windows operating system.

"freebsd"
FreeBSD.

"netbsd"
NetBSD.

"openbsd"
OpenBSD.

"hurd"
GNU/Hurd.

"dos"
MS-DOS, FreeDOS and others.

"unknown"
The operating system type could not be determined.

Future versions of libguestfs may return other strings here. The caller
should be prepared to handle any string.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_windows_current_control_set"
              c:identifier="guestfs_session_inspect_get_windows_current_control_set"
              throws="1">
        <doc xml:space="preserve">get Windows CurrentControlSet of inspected operating system

This returns the Windows CurrentControlSet of the inspected guest. The
CurrentControlSet is a registry key name such as @ControlSet001.

This call assumes that the guest is Windows and that the Registry could
be examined by inspection. If this is not the case then an error is
returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_get_windows_systemroot"
              c:identifier="guestfs_session_inspect_get_windows_systemroot"
              throws="1">
        <doc xml:space="preserve">get Windows systemroot of inspected operating system

This returns the Windows systemroot of the inspected guest. The
systemroot is a directory path such as "/WINDOWS".

This call assumes that the guest is Windows and that the systemroot
could be determined by inspection. If this is not the case then an error
is returned.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_is_live"
              c:identifier="guestfs_session_inspect_is_live"
              throws="1">
        <doc xml:space="preserve">get live flag for install disk

If guestfs_session_inspect_get_format() returns @installer (this is an
install disk), then this returns true if a live image was detected on
the disk.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_is_multipart"
              c:identifier="guestfs_session_inspect_is_multipart"
              throws="1">
        <doc xml:space="preserve">get multipart flag for install disk

If guestfs_session_inspect_get_format() returns @installer (this is an
install disk), then this returns true if the disk is part of a set.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_is_netinst"
              c:identifier="guestfs_session_inspect_is_netinst"
              throws="1">
        <doc xml:space="preserve">get netinst (network installer) flag for install disk

If guestfs_session_inspect_get_format() returns @installer (this is an
install disk), then this returns true if the disk is a network
installer, ie. not a self-contained install CD but one which is likely
to require network access to complete the install.

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_list_applications"
              c:identifier="guestfs_session_inspect_list_applications"
              throws="1">
        <doc xml:space="preserve">get list of applications installed in the operating system

Return the list of applications installed in the operating system.

*Note:* This call works differently from other parts of the inspection
API. You have to call guestfs_session_inspect_os(), then
guestfs_session_inspect_get_mountpoints(), then mount up the disks,
before calling this. Listing applications is a significantly more
difficult operation which requires access to the full filesystem. Also
note that unlike the other "guestfs_inspect_get_*" calls which are just
returning data cached in the libguestfs handle, this call actually reads
parts of the mounted filesystems during the call.

This returns an empty list if the inspection code was not able to
determine the list of applications.

The application structure contains the following fields:

@app_name
The name of the application. For Red Hat-derived and Debian-derived
Linux guests, this is the package name.

@app_display_name
The display name of the application, sometimes localized to the
install language of the guest operating system.

If unavailable this is returned as an empty string "". Callers
needing to display something can use @app_name instead.

@app_epoch
For package managers which use epochs, this contains the epoch of
the package (an integer). If unavailable, this is returned as @0.

@app_version
The version string of the application or package. If unavailable
this is returned as an empty string "".

@app_release
The release string of the application or package, for package
managers that use this. If unavailable this is returned as an empty
string "".

@app_install_path
The installation path of the application (on operating systems such
as Windows which use installation paths). This path is in the format
used by the guest operating system, it is not a libguestfs path.

If unavailable this is returned as an empty string "".

@app_trans_path
The install path translated into a libguestfs path. If unavailable
this is returned as an empty string "".

@app_publisher
The name of the publisher of the application, for package managers
that use this. If unavailable this is returned as an empty string
"".

@app_url
The URL (eg. upstream URL) of the application. If unavailable this
is returned as an empty string "".

@app_source_package
For packaging systems which support this, the name of the source
package. If unavailable this is returned as an empty string "".

@app_summary
A short (usually one line) description of the application or
package. If unavailable this is returned as an empty string "".

@app_description
A longer description of the application or package. If unavailable
this is returned as an empty string "".

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of Application objects, or NULL on error</doc>
          <array c:type="GuestfsApplication**">
            <type name="Application"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_list_applications2"
              c:identifier="guestfs_session_inspect_list_applications2"
              throws="1">
        <doc xml:space="preserve">get list of applications installed in the operating system

Return the list of applications installed in the operating system.

*Note:* This call works differently from other parts of the inspection
API. You have to call guestfs_session_inspect_os(), then
guestfs_session_inspect_get_mountpoints(), then mount up the disks,
before calling this. Listing applications is a significantly more
difficult operation which requires access to the full filesystem. Also
note that unlike the other "guestfs_inspect_get_*" calls which are just
returning data cached in the libguestfs handle, this call actually reads
parts of the mounted filesystems during the call.

This returns an empty list if the inspection code was not able to
determine the list of applications.

The application structure contains the following fields:

@app2_name
The name of the application. For Red Hat-derived and Debian-derived
Linux guests, this is the package name.

@app2_display_name
The display name of the application, sometimes localized to the
install language of the guest operating system.

If unavailable this is returned as an empty string "". Callers
needing to display something can use @app2_name instead.

@app2_epoch
For package managers which use epochs, this contains the epoch of
the package (an integer). If unavailable, this is returned as @0.

@app2_version
The version string of the application or package. If unavailable
this is returned as an empty string "".

@app2_release
The release string of the application or package, for package
managers that use this. If unavailable this is returned as an empty
string "".

@app2_arch
The architecture string of the application or package, for package
managers that use this. If unavailable this is returned as an empty
string "".

@app2_install_path
The installation path of the application (on operating systems such
as Windows which use installation paths). This path is in the format
used by the guest operating system, it is not a libguestfs path.

If unavailable this is returned as an empty string "".

@app2_trans_path
The install path translated into a libguestfs path. If unavailable
this is returned as an empty string "".

@app2_publisher
The name of the publisher of the application, for package managers
that use this. If unavailable this is returned as an empty string
"".

@app2_url
The URL (eg. upstream URL) of the application. If unavailable this
is returned as an empty string "".

@app2_source_package
For packaging systems which support this, the name of the source
package. If unavailable this is returned as an empty string "".

@app2_summary
A short (usually one line) description of the application or
package. If unavailable this is returned as an empty string "".

@app2_description
A longer description of the application or package. If unavailable
this is returned as an empty string "".

Please read "INSPECTION" in guestfs(3) for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of Application2 objects, or NULL on error</doc>
          <array c:type="GuestfsApplication2**">
            <type name="Application2"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_os"
              c:identifier="guestfs_session_inspect_os"
              throws="1">
        <doc xml:space="preserve">inspect disk and return list of operating systems found

This function uses other libguestfs functions and certain heuristics to
inspect the disk(s) (usually disks belonging to a virtual machine),
looking for operating systems.

The list returned is empty if no operating systems were found.

If one operating system was found, then this returns a list with a
single element, which is the name of the root filesystem of this
operating system. It is also possible for this function to return a list
containing more than one element, indicating a dual-boot or multi-boot
virtual machine, with each element being the root filesystem of one of
the operating systems.

You can pass the root string(s) returned to other
"guestfs_inspect_get_*" functions in order to query further information
about each operating system, such as the name and version.

This function uses other libguestfs features such as
guestfs_session_mount_ro() and guestfs_session_umount_all() in order to
mount and unmount filesystems and look at the contents. This should be
called with no disks currently mounted. The function may also use
Augeas, so any existing Augeas handle will be closed.

This function cannot decrypt encrypted disks. The caller must do that
first (supplying the necessary keys) if the disk is encrypted.

Please read "INSPECTION" in guestfs(3) for more details.

See also guestfs_session_list_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test"
              c:identifier="guestfs_session_internal_test"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible parameter
type correctly.

It echos the contents of each parameter to stdout (by default) or to a
file (if guestfs_session_internal_test_set_output() was called).

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optstr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="strlist" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="integer" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="integer64" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="filein" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="fileout" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="bufferin" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="9" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="bufferin_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of bufferin, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsInternalTest containing optional arguments</doc>
            <type name="InternalTest" c:type="GuestfsInternalTest*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_63_optargs"
              c:identifier="guestfs_session_internal_test_63_optargs"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle the full range of 63 optargs
correctly. (Note that 63 is not an absolute limit and it could be raised
by changing the XDR protocol).

It echos the contents of each parameter to stdout (by default) or to a
file (if guestfs_session_internal_test_set_output() was called).

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsInternalTest63Optargs containing optional arguments</doc>
            <type name="InternalTest63Optargs"
                  c:type="GuestfsInternalTest63Optargs*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_close_output"
              c:identifier="guestfs_session_internal_test_close_output"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible parameter
type correctly.

It closes the output file previously opened by
guestfs_session_internal_test_set_output().

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_only_optargs"
              c:identifier="guestfs_session_internal_test_only_optargs"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle no args, some optargs
correctly.

It echos the contents of each parameter to stdout (by default) or to a
file (if guestfs_session_internal_test_set_output() was called).

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsInternalTestOnlyOptargs containing optional arguments</doc>
            <type name="InternalTestOnlyOptargs"
                  c:type="GuestfsInternalTestOnlyOptargs*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rbool"
              c:identifier="guestfs_session_internal_test_rbool"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rboolerr"
              c:identifier="guestfs_session_internal_test_rboolerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rbufferout"
              c:identifier="guestfs_session_internal_test_rbufferout"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="1" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rbufferouterr"
              c:identifier="guestfs_session_internal_test_rbufferouterr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rconstoptstring"
              c:identifier="guestfs_session_internal_test_rconstoptstring"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string. Note that NULL does not indicate error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rconstoptstringerr"
              c:identifier="guestfs_session_internal_test_rconstoptstringerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string. Note that NULL does not indicate error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rconststring"
              c:identifier="guestfs_session_internal_test_rconststring"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rconststringerr"
              c:identifier="guestfs_session_internal_test_rconststringerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rhashtable"
              c:identifier="guestfs_session_internal_test_rhashtable"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rhashtableerr"
              c:identifier="guestfs_session_internal_test_rhashtableerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rint"
              c:identifier="guestfs_session_internal_test_rint"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rint64"
              c:identifier="guestfs_session_internal_test_rint64"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rint64err"
              c:identifier="guestfs_session_internal_test_rint64err"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rinterr"
              c:identifier="guestfs_session_internal_test_rinterr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rstring"
              c:identifier="guestfs_session_internal_test_rstring"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rstringerr"
              c:identifier="guestfs_session_internal_test_rstringerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rstringlist"
              c:identifier="guestfs_session_internal_test_rstringlist"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rstringlisterr"
              c:identifier="guestfs_session_internal_test_rstringlisterr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rstruct"
              c:identifier="guestfs_session_internal_test_rstruct"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a PV object, or NULL on error</doc>
          <type name="PV" c:type="GuestfsPV*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rstructerr"
              c:identifier="guestfs_session_internal_test_rstructerr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a PV object, or NULL on error</doc>
          <type name="PV" c:type="GuestfsPV*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_rstructlist"
              c:identifier="guestfs_session_internal_test_rstructlist"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

It converts string @val to the return type.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of PV objects, or NULL on error</doc>
          <array c:type="GuestfsPV**">
            <type name="PV"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_test_rstructlisterr"
              c:identifier="guestfs_session_internal_test_rstructlisterr"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible return type
correctly.

This function always returns an error.

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of PV objects, or NULL on error</doc>
          <array c:type="GuestfsPV**">
            <type name="PV"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="internal_test_set_output"
              c:identifier="guestfs_session_internal_test_set_output"
              throws="1">
        <doc xml:space="preserve">internal test function - do not use

This is an internal test function which is used to test whether the
automatically generated bindings can handle every possible parameter
type correctly.

It sets the output file used by guestfs_session_internal_test().

You probably don't want to call this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_blockdev"
              c:identifier="guestfs_session_is_blockdev"
              throws="1">
        <doc xml:space="preserve">test if block device

This returns @true if and only if there is a block device with the given
@path name.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a block device also causes the function to
return true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsBlockdev containing optional arguments</doc>
            <type name="IsBlockdev" c:type="GuestfsIsBlockdev*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_busy" c:identifier="guestfs_session_is_busy" throws="1">
        <doc xml:space="preserve">is busy processing a command

This always returns false. This function is deprecated with no
replacement. Do not use this function.

For more information on states, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_chardev"
              c:identifier="guestfs_session_is_chardev"
              throws="1">
        <doc xml:space="preserve">test if character device

This returns @true if and only if there is a character device with the
given @path name.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a chardev also causes the function to return
true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsChardev containing optional arguments</doc>
            <type name="IsChardev" c:type="GuestfsIsChardev*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_config"
              c:identifier="guestfs_session_is_config"
              throws="1">
        <doc xml:space="preserve">is in configuration state

This returns true iff this handle is being configured (in the @CONFIG
state).

For more information on states, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_dir" c:identifier="guestfs_session_is_dir" throws="1">
        <doc xml:space="preserve">test if a directory

This returns @true if and only if there is a directory with the given
@path name. Note that it returns false for other objects like files.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a directory also causes the function to
return true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsDir containing optional arguments</doc>
            <type name="IsDir" c:type="GuestfsIsDir*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_fifo" c:identifier="guestfs_session_is_fifo" throws="1">
        <doc xml:space="preserve">test if FIFO (named pipe)

This returns @true if and only if there is a FIFO (named pipe) with the
given @path name.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a FIFO also causes the function to return
true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsFifo containing optional arguments</doc>
            <type name="IsFifo" c:type="GuestfsIsFifo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_file" c:identifier="guestfs_session_is_file" throws="1">
        <doc xml:space="preserve">test if a regular file

This returns @true if and only if there is a regular file with the given
@path name. Note that it returns false for other objects like
directories.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a file also causes the function to return
true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsFile containing optional arguments</doc>
            <type name="IsFile" c:type="GuestfsIsFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_launching"
              c:identifier="guestfs_session_is_launching"
              throws="1">
        <doc xml:space="preserve">is launching subprocess

This returns true iff this handle is launching the subprocess (in the
@LAUNCHING state).

For more information on states, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_lv" c:identifier="guestfs_session_is_lv" throws="1">
        <doc xml:space="preserve">test if device is a logical volume

This command tests whether @device is a logical volume, and returns true
iff this is the case.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ready"
              c:identifier="guestfs_session_is_ready"
              throws="1">
        <doc xml:space="preserve">is ready to accept commands

This returns true iff this handle is ready to accept commands (in the
@READY state).

For more information on states, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_socket"
              c:identifier="guestfs_session_is_socket"
              throws="1">
        <doc xml:space="preserve">test if socket

This returns @true if and only if there is a Unix domain socket with the
given @path name.

If the optional flag @followsymlinks is true, then a symlink (or chain
of symlinks) that ends with a socket also causes the function to return
true.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsIsSocket containing optional arguments</doc>
            <type name="IsSocket" c:type="GuestfsIsSocket*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_symlink"
              c:identifier="guestfs_session_is_symlink"
              throws="1">
        <doc xml:space="preserve">test if symbolic link

This returns @true if and only if there is a symbolic link with the
given @path name.

See also guestfs_session_stat().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_whole_device"
              c:identifier="guestfs_session_is_whole_device"
              throws="1">
        <doc xml:space="preserve">test if a device is a whole device

This returns @true if and only if @device refers to a whole block
device. That is, not a partition or a logical device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_zero" c:identifier="guestfs_session_is_zero" throws="1">
        <doc xml:space="preserve">test if a file contains all zero bytes

This returns true iff the file exists and the file is empty or it
contains all zero bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_zero_device"
              c:identifier="guestfs_session_is_zero_device"
              throws="1">
        <doc xml:space="preserve">test if a device contains all zero bytes

This returns true iff the device exists and contains all zero bytes.

Note that for large devices this can take a long time to run.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="isoinfo" c:identifier="guestfs_session_isoinfo" throws="1">
        <doc xml:space="preserve">get ISO information from primary volume descriptor of ISO file

This is the same as guestfs_session_isoinfo_device() except that it
works for an ISO file located inside some other mounted filesystem. Note
that in the common case where you have added an ISO file as a libguestfs
device, you would *not* call this. Instead you would call
guestfs_session_isoinfo_device().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a ISOInfo object, or NULL on error</doc>
          <type name="ISOInfo" c:type="GuestfsISOInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="isofile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="isoinfo_device"
              c:identifier="guestfs_session_isoinfo_device"
              throws="1">
        <doc xml:space="preserve">get ISO information from primary volume descriptor of device

@device is an ISO device. This returns a struct of information read from
the primary volume descriptor (the ISO equivalent of the superblock) of
the device.

Usually it is more efficient to use the isoinfo(1) command with the *-d*
option on the host to analyze ISO files, instead of going through
libguestfs.

For information on the primary volume descriptor fields, see &lt;ulink
url='http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor'&gt;
http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor &lt;/ulink&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a ISOInfo object, or NULL on error</doc>
          <type name="ISOInfo" c:type="GuestfsISOInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="kill_subprocess"
              c:identifier="guestfs_session_kill_subprocess"
              throws="1">
        <doc xml:space="preserve">kill the qemu subprocess

This kills the qemu subprocess.

Do not call this. See: guestfs_session_shutdown() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="launch" c:identifier="guestfs_session_launch" throws="1">
        <doc xml:space="preserve">launch the qemu subprocess

Internally libguestfs is implemented by running a virtual machine using
qemu(1).

You should call this after configuring the handle (eg. adding drives)
but before performing any actions.

Do not call guestfs_session_launch() twice on the same handle. Although
it will not give an error (for historical reasons), the precise
behaviour when you do this is not well defined. Handles are very cheap
to create, so create a new one for each launch.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lchown" c:identifier="guestfs_session_lchown" throws="1">
        <doc xml:space="preserve">change file owner and group

Change the file owner to @owner and group to @group. This is like
guestfs_session_chown() but if @path is a symlink then the link itself
is changed, not the target.

Only numeric uid and gid are supported. If you want to use names, you
will need to locate and parse the password file yourself (Augeas support
makes this relatively easy).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="owner" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_create_all"
              c:identifier="guestfs_session_ldmtool_create_all"
              throws="1">
        <doc xml:space="preserve">scan and create Windows dynamic disk volumes

This function scans all block devices looking for Windows dynamic disk
volumes and partitions, and creates devices for any that were found.

Call guestfs_session_list_ldm_volumes() and
guestfs_session_list_ldm_partitions() to return all devices.

Note that you don't normally need to call this explicitly, since it is
done automatically at guestfs_session_launch() time. However you might
want to call this function if you have hotplugged disks or have just
created a Windows dynamic disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ldmtool_diskgroup_disks"
              c:identifier="guestfs_session_ldmtool_diskgroup_disks"
              throws="1">
        <doc xml:space="preserve">return the disks in a Windows dynamic disk group

Return the disks in a Windows dynamic disk group. The @diskgroup
parameter should be the GUID of a disk group, one element from the list
returned by guestfs_session_ldmtool_scan().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_diskgroup_name"
              c:identifier="guestfs_session_ldmtool_diskgroup_name"
              throws="1">
        <doc xml:space="preserve">return the name of a Windows dynamic disk group

Return the name of a Windows dynamic disk group. The @diskgroup
parameter should be the GUID of a disk group, one element from the list
returned by guestfs_session_ldmtool_scan().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_diskgroup_volumes"
              c:identifier="guestfs_session_ldmtool_diskgroup_volumes"
              throws="1">
        <doc xml:space="preserve">return the volumes in a Windows dynamic disk group

Return the volumes in a Windows dynamic disk group. The @diskgroup
parameter should be the GUID of a disk group, one element from the list
returned by guestfs_session_ldmtool_scan().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_remove_all"
              c:identifier="guestfs_session_ldmtool_remove_all"
              throws="1">
        <doc xml:space="preserve">remove all Windows dynamic disk volumes

This is essentially the opposite of
guestfs_session_ldmtool_create_all(). It removes the device mapper
mappings for all Windows dynamic disk volumes</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ldmtool_scan"
              c:identifier="guestfs_session_ldmtool_scan"
              throws="1">
        <doc xml:space="preserve">scan for Windows dynamic disks

This function scans for Windows dynamic disks. It returns a list of
identifiers (GUIDs) for all disk groups that were found. These
identifiers can be passed to other "guestfs_ldmtool_*" functions.

This function scans all block devices. To scan a subset of block
devices, call guestfs_session_ldmtool_scan_devices() instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ldmtool_scan_devices"
              c:identifier="guestfs_session_ldmtool_scan_devices"
              throws="1">
        <doc xml:space="preserve">scan for Windows dynamic disks

This function scans for Windows dynamic disks. It returns a list of
identifiers (GUIDs) for all disk groups that were found. These
identifiers can be passed to other "guestfs_ldmtool_*" functions.

The parameter @devices is a list of block devices which are scanned. If
this list is empty, all block devices are scanned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_volume_hint"
              c:identifier="guestfs_session_ldmtool_volume_hint"
              throws="1">
        <doc xml:space="preserve">return the hint field of a Windows dynamic disk volume

Return the hint field of the volume named @volume in the disk group with
GUID @diskgroup. This may not be defined, in which case the empty string
is returned. The hint field is often, though not always, the name of a
Windows drive, eg. "E:".</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_volume_partitions"
              c:identifier="guestfs_session_ldmtool_volume_partitions"
              throws="1">
        <doc xml:space="preserve">return the partitions in a Windows dynamic disk volume

Return the list of partitions in the volume named @volume in the disk
group with GUID @diskgroup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ldmtool_volume_type"
              c:identifier="guestfs_session_ldmtool_volume_type"
              throws="1">
        <doc xml:space="preserve">return the type of a Windows dynamic disk volume

Return the type of the volume named @volume in the disk group with GUID
@diskgroup.

Possible volume types that can be returned here include: @simple,
@spanned, @striped, @mirrored, @raid5. Other types may also be returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="diskgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lgetxattr"
              c:identifier="guestfs_session_lgetxattr"
              throws="1">
        <doc xml:space="preserve">get a single extended attribute

Get a single extended attribute from file @path named @name. If @path is
a symlink, then this call returns an extended attribute from the
symlink.

Normally it is better to get all extended attributes from a file in one
go by calling guestfs_session_getxattrs(). However some Linux filesystem
implementations are buggy and do not provide a way to list out
attributes. For these filesystems (notably ntfs-3g) you have to know the
names of the extended attributes you want in advance and call this
function.

Extended attribute values are blobs of binary data. If there is no
extended attribute named @name, this returns an error.

See also: guestfs_session_lgetxattrs(), guestfs_session_getxattr(),
attr(5).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="2" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lgetxattrs"
              c:identifier="guestfs_session_lgetxattrs"
              throws="1">
        <doc xml:space="preserve">list extended attributes of a file or directory

This is the same as guestfs_session_getxattrs(), but if @path is a
symbolic link, then it returns the extended attributes of the link
itself.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of XAttr objects, or NULL on error</doc>
          <array c:type="GuestfsXAttr**">
            <type name="XAttr"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_9p" c:identifier="guestfs_session_list_9p" throws="1">
        <doc xml:space="preserve">list 9p filesystems

List all 9p filesystems attached to the guest. A list of mount tags is
returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_devices"
              c:identifier="guestfs_session_list_devices"
              throws="1">
        <doc xml:space="preserve">list the block devices

List all the block devices.

The full block device names are returned, eg. "/dev/sda".

See also guestfs_session_list_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_disk_labels"
              c:identifier="guestfs_session_list_disk_labels"
              throws="1">
        <doc xml:space="preserve">mapping of disk labels to devices

If you add drives using the optional @label parameter of
guestfs_session_add_drive_opts(), you can use this call to map between
disk labels, and raw block device and partition names (like "/dev/sda"
and "/dev/sda1").

This returns a hashtable, where keys are the disk labels (*without* the
"/dev/disk/guestfs" prefix), and the values are the full raw block
device and partition names (eg. "/dev/sda" and "/dev/sda1").</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_dm_devices"
              c:identifier="guestfs_session_list_dm_devices"
              throws="1">
        <doc xml:space="preserve">list device mapper devices

List all device mapper devices.

The returned list contains "/dev/mapper/*" devices, eg. ones created by
a previous call to guestfs_session_luks_open().

Device mapper devices which correspond to logical volumes are *not*
returned in this list. Call guestfs_session_lvs() if you want to list
logical volumes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_filesystems"
              c:identifier="guestfs_session_list_filesystems"
              throws="1">
        <doc xml:space="preserve">list filesystems

This inspection command looks for filesystems on partitions, block
devices and logical volumes, returning a list of @mountables containing
filesystems and their type.

The return value is a hash, where the keys are the devices containing
filesystems, and the values are the filesystem types. For example:

&lt;![CDATA["/dev/sda1" =&gt; "ntfs"]]&gt;

&lt;![CDATA["/dev/sda2" =&gt; "ext2"]]&gt;

&lt;![CDATA["/dev/vg_guest/lv_root" =&gt; "ext4"]]&gt;

&lt;![CDATA["/dev/vg_guest/lv_swap" =&gt; "swap"]]&gt;

The key is not necessarily a block device. It may also be an opaque
'mountable' string which can be passed to guestfs_session_mount().

The value can have the special value "unknown", meaning the content of
the device is undetermined or empty. "swap" means a Linux swap
partition.

This command runs other libguestfs commands, which might include
guestfs_session_mount() and guestfs_session_umount(), and therefore you
should use this soon after launch and only when nothing is mounted.

Not all of the filesystems returned will be mountable. In particular,
swap partitions are returned in the list. Also this command does not
check that each filesystem found is valid and mountable, and some
filesystems might be mountable but require special options. Filesystems
may not all belong to a single logical operating system (use
guestfs_session_inspect_os() to look for OSes).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_ldm_partitions"
              c:identifier="guestfs_session_list_ldm_partitions"
              throws="1">
        <doc xml:space="preserve">list all Windows dynamic disk partitions

This function returns all Windows dynamic disk partitions that were
found at launch time. It returns a list of device names.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_ldm_volumes"
              c:identifier="guestfs_session_list_ldm_volumes"
              throws="1">
        <doc xml:space="preserve">list all Windows dynamic disk volumes

This function returns all Windows dynamic disk volumes that were found
at launch time. It returns a list of device names.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_md_devices"
              c:identifier="guestfs_session_list_md_devices"
              throws="1">
        <doc xml:space="preserve">list Linux md (RAID) devices

List all Linux md devices.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_partitions"
              c:identifier="guestfs_session_list_partitions"
              throws="1">
        <doc xml:space="preserve">list the partitions

List all the partitions detected on all block devices.

The full partition device names are returned, eg. "/dev/sda1"

This does not return logical volumes. For that you will need to call
guestfs_session_lvs().

See also guestfs_session_list_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ll" c:identifier="guestfs_session_ll" throws="1">
        <doc xml:space="preserve">list the files in a directory (long format)

List the files in @directory (relative to the root directory, there is
no cwd) in the format of 'ls -la'.

This command is mostly useful for interactive sessions. It is *not*
intended that you try to parse the output string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="llz" c:identifier="guestfs_session_llz" throws="1">
        <doc xml:space="preserve">list the files in a directory (long format with SELinux contexts)

List the files in @directory in the format of 'ls -laZ'.

This command is mostly useful for interactive sessions. It is *not*
intended that you try to parse the output string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ln" c:identifier="guestfs_session_ln" throws="1">
        <doc xml:space="preserve">create a hard link

This command creates a hard link using the @ln command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="linkname" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ln_f" c:identifier="guestfs_session_ln_f" throws="1">
        <doc xml:space="preserve">create a hard link

This command creates a hard link using the "ln -f" command. The *-f*
option removes the link (@linkname) if it exists already.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="linkname" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ln_s" c:identifier="guestfs_session_ln_s" throws="1">
        <doc xml:space="preserve">create a symbolic link

This command creates a symbolic link using the "ln -s" command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="linkname" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ln_sf" c:identifier="guestfs_session_ln_sf" throws="1">
        <doc xml:space="preserve">create a symbolic link

This command creates a symbolic link using the "ln -sf" command, The
*-f* option removes the link (@linkname) if it exists already.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="linkname" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lremovexattr"
              c:identifier="guestfs_session_lremovexattr"
              throws="1">
        <doc xml:space="preserve">remove extended attribute of a file or directory

This is the same as guestfs_session_removexattr(), but if @path is a
symbolic link, then it removes an extended attribute of the link itself.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="xattr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls" c:identifier="guestfs_session_ls" throws="1">
        <doc xml:space="preserve">list the files in a directory

List the files in @directory (relative to the root directory, there is
no cwd). The '.' and '..' entries are not returned, but hidden files are
shown.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls0" c:identifier="guestfs_session_ls0" throws="1">
        <doc xml:space="preserve">get list of files in a directory

This specialized command is used to get a listing of the filenames in
the directory @dir. The list of filenames is written to the local file
@filenames (on the host).

In the output file, the filenames are separated by "\0" characters.

"." and ".." are not returned. The filenames are not sorted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="filenames" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lsetxattr"
              c:identifier="guestfs_session_lsetxattr"
              throws="1">
        <doc xml:space="preserve">set extended attribute of a file or directory

This is the same as guestfs_session_setxattr(), but if @path is a
symbolic link, then it sets an extended attribute of the link itself.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="xattr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="vallen" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lstat" c:identifier="guestfs_session_lstat" throws="1">
        <doc xml:space="preserve">get file information for a symbolic link

Returns file information for the given @path.

This is the same as guestfs_session_stat() except that if @path is a
symbolic link, then the link is stat-ed, not the file it refers to.

This is the same as the lstat(2) system call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a Stat object, or NULL on error</doc>
          <type name="Stat" c:type="GuestfsStat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lstatlist"
              c:identifier="guestfs_session_lstatlist"
              throws="1">
        <doc xml:space="preserve">lstat on multiple files

This call allows you to perform the guestfs_session_lstat() operation on
multiple files, where all files are in the directory @path. @names is
the list of files from this directory.

On return you get a list of stat structs, with a one-to-one
correspondence to the @names list. If any name did not exist or could
not be lstat'd, then the @ino field of that structure is set to @-1.

This call is intended for programs that want to efficiently list a
directory contents without making many round-trips. See also
guestfs_session_lxattrlist() for a similarly efficient call for getting
extended attributes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of Stat objects, or NULL on error</doc>
          <array c:type="GuestfsStat**">
            <type name="Stat"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="luks_add_key"
              c:identifier="guestfs_session_luks_add_key"
              throws="1">
        <doc xml:space="preserve">add a key on a LUKS encrypted device

This command adds a new key on LUKS device @device. @key is any existing
key, and is used to access the device. @newkey is the new key to add.
@keyslot is the key slot that will be replaced.

Note that if @keyslot already contains a key, then this command will
fail. You have to use guestfs_session_luks_kill_slot() first to remove
that key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="newkey" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keyslot" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_close"
              c:identifier="guestfs_session_luks_close"
              throws="1">
        <doc xml:space="preserve">close a LUKS device

This closes a LUKS device that was created earlier by
guestfs_session_luks_open() or guestfs_session_luks_open_ro(). The
@device parameter must be the name of the LUKS mapping device (ie.
"/dev/mapper/mapname") and *not* the name of the underlying block
device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_format"
              c:identifier="guestfs_session_luks_format"
              throws="1">
        <doc xml:space="preserve">format a block device as a LUKS encrypted device

This command erases existing data on @device and formats the device as a
LUKS encrypted device. @key is the initial key, which is added to key
slot @slot. (LUKS supports 8 key slots, numbered 0-7).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keyslot" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_format_cipher"
              c:identifier="guestfs_session_luks_format_cipher"
              throws="1">
        <doc xml:space="preserve">format a block device as a LUKS encrypted device

This command is the same as guestfs_session_luks_format() but it also
allows you to set the @cipher used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keyslot" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="cipher" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_kill_slot"
              c:identifier="guestfs_session_luks_kill_slot"
              throws="1">
        <doc xml:space="preserve">remove a key from a LUKS encrypted device

This command deletes the key in key slot @keyslot from the encrypted
LUKS device @device. @key must be one of the *other* keys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keyslot" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_open"
              c:identifier="guestfs_session_luks_open"
              throws="1">
        <doc xml:space="preserve">open a LUKS-encrypted block device

This command opens a block device which has been encrypted according to
the Linux Unified Key Setup (LUKS) standard.

@device is the encrypted block device or partition.

The caller must supply one of the keys associated with the LUKS block
device, in the @key parameter.

This creates a new block device called "/dev/mapper/mapname". Reads and
writes to this block device are decrypted from and encrypted to the
underlying @device respectively.

If this block device contains LVM volume groups, then calling
guestfs_session_vgscan() followed by guestfs_session_vg_activate_all()
will make them visible.

Use guestfs_session_list_dm_devices() to list all device mapper devices.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mapname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="luks_open_ro"
              c:identifier="guestfs_session_luks_open_ro"
              throws="1">
        <doc xml:space="preserve">open a LUKS-encrypted block device read-only

This is the same as guestfs_session_luks_open() except that a read-only
mapping is created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mapname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvcreate"
              c:identifier="guestfs_session_lvcreate"
              throws="1">
        <doc xml:space="preserve">create an LVM logical volume

This creates an LVM logical volume called @logvol on the volume group
@volgroup, with @size megabytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="logvol" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="volgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mbytes" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvcreate_free"
              c:identifier="guestfs_session_lvcreate_free"
              throws="1">
        <doc xml:space="preserve">create an LVM logical volume in % remaining free space

Create an LVM logical volume called "/dev/volgroup/logvol", using
approximately @percent % of the free space remaining in the volume
group. Most usefully, when @percent is @100 this will create the largest
possible LV.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="logvol" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="volgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="percent" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvm_canonical_lv_name"
              c:identifier="guestfs_session_lvm_canonical_lv_name"
              throws="1">
        <doc xml:space="preserve">get canonical name of an LV

This converts alternative naming schemes for LVs that you might find to
the canonical name. For example, "/dev/mapper/VG-LV" is converted to
"/dev/VG/LV".

This command returns an error if the @lvname parameter does not refer to
a logical volume.

See also guestfs_session_is_lv(),
guestfs_session_canonical_device_name().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="lvname" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvm_clear_filter"
              c:identifier="guestfs_session_lvm_clear_filter"
              throws="1">
        <doc xml:space="preserve">clear LVM device filter

This undoes the effect of guestfs_session_lvm_set_filter(). LVM will be
able to see every block device.

This command also clears the LVM cache and performs a volume group scan.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lvm_remove_all"
              c:identifier="guestfs_session_lvm_remove_all"
              throws="1">
        <doc xml:space="preserve">remove all LVM LVs, VGs and PVs

This command removes all LVM logical volumes, volume groups and physical
volumes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lvm_set_filter"
              c:identifier="guestfs_session_lvm_set_filter"
              throws="1">
        <doc xml:space="preserve">set LVM device filter

This sets the LVM device filter so that LVM will only be able to "see"
the block devices in the list @devices, and will ignore all other
attached block devices.

Where disk image(s) contain duplicate PVs or VGs, this command is useful
to get LVM to ignore the duplicates, otherwise LVM can get confused.
Note also there are two types of duplication possible: either cloned
PVs/VGs which have identical UUIDs; or VGs that are not cloned but just
happen to have the same name. In normal operation you cannot create this
situation, but you can do it outside LVM, eg. by cloning disk images or
by bit twiddling inside the LVM metadata.

This command also clears the LVM cache and performs a volume group scan.

You can filter whole block devices or individual partitions.

You cannot use this if any VG is currently in use (eg. contains a
mounted filesystem), even if you are not filtering out that VG.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="lvremove"
              c:identifier="guestfs_session_lvremove"
              throws="1">
        <doc xml:space="preserve">remove an LVM logical volume

Remove an LVM logical volume @device, where @device is the path to the
LV, such as "/dev/VG/LV".

You can also remove all LVs in a volume group by specifying the VG name,
"/dev/VG".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvrename"
              c:identifier="guestfs_session_lvrename"
              throws="1">
        <doc xml:space="preserve">rename an LVM logical volume

Rename a logical volume @logvol with the new name @newlogvol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="logvol" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="newlogvol" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvresize"
              c:identifier="guestfs_session_lvresize"
              throws="1">
        <doc xml:space="preserve">resize an LVM logical volume

This resizes (expands or shrinks) an existing LVM logical volume to
@mbytes. When reducing, data in the reduced part is lost.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mbytes" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvresize_free"
              c:identifier="guestfs_session_lvresize_free"
              throws="1">
        <doc xml:space="preserve">expand an LV to fill free space

This expands an existing logical volume @lv so that it fills @pc% of the
remaining free space in the volume group. Commonly you would call this
with pc = 100 which expands the logical volume as much as possible,
using all remaining free space in the volume group.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="lv" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="percent" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="lvs" c:identifier="guestfs_session_lvs" throws="1">
        <doc xml:space="preserve">list the LVM logical volumes (LVs)

List all the logical volumes detected. This is the equivalent of the
lvs(8) command.

This returns a list of the logical volume device names (eg.
"/dev/VolGroup00/LogVol00").

See also guestfs_session_lvs_full(), guestfs_session_list_filesystems().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lvs_full"
              c:identifier="guestfs_session_lvs_full"
              throws="1">
        <doc xml:space="preserve">list the LVM logical volumes (LVs)

List all the logical volumes detected. This is the equivalent of the
lvs(8) command. The "full" version includes all fields.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of LV objects, or NULL on error</doc>
          <array c:type="GuestfsLV**">
            <type name="LV"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lvuuid" c:identifier="guestfs_session_lvuuid" throws="1">
        <doc xml:space="preserve">get the UUID of a logical volume

This command returns the UUID of the LVM LV @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lxattrlist"
              c:identifier="guestfs_session_lxattrlist"
              throws="1">
        <doc xml:space="preserve">lgetxattr on multiple files

This call allows you to get the extended attributes of multiple files,
where all files are in the directory @path. @names is the list of files
from this directory.

On return you get a flat list of xattr structs which must be interpreted
sequentially. The first xattr struct always has a zero-length @attrname.
@attrval in this struct is zero-length to indicate there was an error
doing @lgetxattr for this file, *or* is a C string which is a decimal
number (the number of following attributes for this file, which could be
"0"). Then after the first xattr struct are the zero or more attributes
for the first named file. This repeats for the second and subsequent
files.

This call is intended for programs that want to efficiently list a
directory contents without making many round-trips. See also
guestfs_session_lstatlist() for a similarly efficient call for getting
standard stats.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of XAttr objects, or NULL on error</doc>
          <array c:type="GuestfsXAttr**">
            <type name="XAttr"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="max_disks"
              c:identifier="guestfs_session_max_disks"
              throws="1">
        <doc xml:space="preserve">maximum number of disks that may be added

Return the maximum number of disks that may be added to a handle (eg. by
guestfs_session_add_drive_opts() and similar calls).

This function was added in libguestfs 1.19.7. In previous versions of
libguestfs the limit was 25.

See "MAXIMUM NUMBER OF DISKS" in guestfs(3) for additional information
on this topic.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="md_create"
              c:identifier="guestfs_session_md_create"
              throws="1">
        <doc xml:space="preserve">create a Linux md (RAID) device

Create a Linux md (RAID) device named @name on the devices in the list
@devices.

The optional parameters are:

@missingbitmap
A bitmap of missing devices. If a bit is set it means that a missing
device is added to the array. The least significant bit corresponds
to the first device in the array.

As examples:

If "devices = ["/dev/sda"]" and "missingbitmap = 0x1" then the
resulting array would be "[&amp;lt;missing&amp;gt;, "/dev/sda"]".

If "devices = ["/dev/sda"]" and "missingbitmap = 0x2" then the
resulting array would be "["/dev/sda", &amp;lt;missing&amp;gt;]".

This defaults to @0 (no missing devices).

The length of @devices + the number of bits set in @missingbitmap
must equal @nrdevices + @spare.

@nrdevices
The number of active RAID devices.

If not set, this defaults to the length of @devices plus the number
of bits set in @missingbitmap.

@spare
The number of spare devices.

If not set, this defaults to @0.

@chunk
The chunk size in bytes.

@level
The RAID level, which can be one of: *linear*, *raid0*, *0*,
*stripe*, *raid1*, *1*, *mirror*, *raid4*, *4*, *raid5*, *5*,
*raid6*, *6*, *raid10*, *10*. Some of these are synonymous, and more
levels may be added in future.

If not set, this defaults to @raid1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMDCreate containing optional arguments</doc>
            <type name="MDCreate" c:type="GuestfsMDCreate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="md_detail"
              c:identifier="guestfs_session_md_detail"
              throws="1">
        <doc xml:space="preserve">obtain metadata for an MD device

This command exposes the output of 'mdadm -DY &amp;lt;md&amp;gt;'. The following
fields are usually present in the returned hash. Other fields may also
be present.

@level
The raid level of the MD device.

@devices
The number of underlying devices in the MD device.

@metadata
The metadata version used.

@uuid
The UUID of the MD device.

@name
The name of the MD device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="md" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="md_stat" c:identifier="guestfs_session_md_stat" throws="1">
        <doc xml:space="preserve">get underlying devices from an MD device

This call returns a list of the underlying devices which make up the
single software RAID array device @md.

To get a list of software RAID devices, call
guestfs_session_list_md_devices().

Each structure returned corresponds to one device along with additional
status information:

@mdstat_device
The name of the underlying device.

@mdstat_index
The index of this device within the array.

@mdstat_flags
Flags associated with this device. This is a string containing (in
no specific order) zero or more of the following flags:

@W  write-mostly

@F  device is faulty

@S  device is a RAID spare

@R  replacement</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of MDStat objects, or NULL on error</doc>
          <array c:type="GuestfsMDStat**">
            <type name="MDStat"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="md" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="md_stop" c:identifier="guestfs_session_md_stop" throws="1">
        <doc xml:space="preserve">stop a Linux md (RAID) device

This command deactivates the MD array named @md. The device is stopped,
but it is not destroyed or zeroed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="md" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkdir" c:identifier="guestfs_session_mkdir" throws="1">
        <doc xml:space="preserve">create a directory

Create a directory named @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkdir_mode"
              c:identifier="guestfs_session_mkdir_mode"
              throws="1">
        <doc xml:space="preserve">create a directory with a particular mode

This command creates a directory, setting the initial permissions of the
directory to @mode.

For common Linux filesystems, the actual mode which is set will be "mode
&amp; ~umask &amp; 01777". Non-native-Linux filesystems may interpret the mode
in other ways.

See also guestfs_session_mkdir(), guestfs_session_umask()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkdir_p" c:identifier="guestfs_session_mkdir_p" throws="1">
        <doc xml:space="preserve">create a directory and parents

Create a directory named @path, creating any parent directories as
necessary. This is like the "mkdir -p" shell command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkdtemp" c:identifier="guestfs_session_mkdtemp" throws="1">
        <doc xml:space="preserve">create a temporary directory

This command creates a temporary directory. The @tmpl parameter should
be a full pathname for the temporary directory name with the final six
characters being "XXXXXX".

For example: "/tmp/myprogXXXXXX" or "/Temp/myprogXXXXXX", the second one
being suitable for Windows filesystems.

The name of the temporary directory that was created is returned.

The temporary directory is created with mode 0700 and is owned by root.

The caller is responsible for deleting the temporary directory and its
contents after use.

See also: mkdtemp(3)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tmpl" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2fs" c:identifier="guestfs_session_mke2fs" throws="1">
        <doc xml:space="preserve">create an ext2/ext3/ext4 filesystem on device

@mke2fs is used to create an ext2, ext3, or ext4 filesystem on @device.

The optional @blockscount is the size of the filesystem in blocks. If
omitted it defaults to the size of @device. Note if the filesystem is
too small to contain a journal, @mke2fs will silently create an ext2
filesystem instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMke2fs containing optional arguments</doc>
            <type name="Mke2fs" c:type="GuestfsMke2fs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2fs_J"
              c:identifier="guestfs_session_mke2fs_J"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 filesystem with external journal

This creates an ext2/3/4 filesystem on @device with an external journal
on @journal. It is equivalent to the command:

&lt;![CDATA[mke2fs -t fstype -b blocksize -J device=&lt;journal&gt; &lt;device&gt;]]&gt;

See also guestfs_session_mke2journal().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="journal" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2fs_JL"
              c:identifier="guestfs_session_mke2fs_JL"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 filesystem with external journal

This creates an ext2/3/4 filesystem on @device with an external journal
on the journal labeled @label.

See also guestfs_session_mke2journal_L().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2fs_JU"
              c:identifier="guestfs_session_mke2fs_JU"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 filesystem with external journal

This creates an ext2/3/4 filesystem on @device with an external journal
on the journal with UUID @uuid.

See also guestfs_session_mke2journal_U().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2journal"
              c:identifier="guestfs_session_mke2journal"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 external journal

This creates an ext2 external journal on @device. It is equivalent to
the command:

&lt;![CDATA[mke2fs -O journal_dev -b blocksize device]]&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2journal_L"
              c:identifier="guestfs_session_mke2journal_L"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 external journal with label

This creates an ext2 external journal on @device with label @label.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mke2journal_U"
              c:identifier="guestfs_session_mke2journal_U"
              throws="1">
        <doc xml:space="preserve">make ext2/3/4 external journal with UUID

This creates an ext2 external journal on @device with UUID @uuid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkfifo" c:identifier="guestfs_session_mkfifo" throws="1">
        <doc xml:space="preserve">make FIFO (named pipe)

This call creates a FIFO (named pipe) called @path with mode @mode. It
is just a convenient wrapper around guestfs_session_mknod().

The mode actually set is affected by the umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkfs" c:identifier="guestfs_session_mkfs" throws="1">
        <doc xml:space="preserve">make a filesystem

This function creates a filesystem on @device. The filesystem type is
@fstype, for example @ext3.

The optional arguments are:

@blocksize
The filesystem block size. Supported block sizes depend on the
filesystem type, but typically they are @1024, @2048 or @4096 for
Linux ext2/3 filesystems.

For VFAT and NTFS the @blocksize parameter is treated as the
requested cluster size.

For UFS block sizes, please see mkfs.ufs(8).

@features
This passes the *-O* parameter to the external mkfs program.

For certain filesystem types, this allows extra filesystem features
to be selected. See mke2fs(8) and mkfs.ufs(8) for more details.

You cannot use this optional parameter with the @gfs or @gfs2
filesystem type.

@inode
This passes the *-I* parameter to the external mke2fs(8) program
which sets the inode size (only for ext2/3/4 filesystems at
present).

@sectorsize
This passes the *-S* parameter to external mkfs.ufs(8) program,
which sets sector size for ufs filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMkfs containing optional arguments</doc>
            <type name="Mkfs" c:type="GuestfsMkfs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkfs_b" c:identifier="guestfs_session_mkfs_b" throws="1">
        <doc xml:space="preserve">make a filesystem with block size

This call is similar to guestfs_session_mkfs(), but it allows you to
control the block size of the resulting filesystem. Supported block
sizes depend on the filesystem type, but typically they are @1024, @2048
or @4096 only.

For VFAT and NTFS the @blocksize parameter is treated as the requested
cluster size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="fstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="blocksize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkfs_btrfs"
              c:identifier="guestfs_session_mkfs_btrfs"
              throws="1">
        <doc xml:space="preserve">create a btrfs filesystem

Create a btrfs filesystem, allowing all configurables to be set. For
more information on the optional arguments, see mkfs.btrfs(8).

Since btrfs filesystems can span multiple devices, this takes a
non-empty list of devices.

To create general filesystems, use guestfs_session_mkfs().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMkfsBtrfs containing optional arguments</doc>
            <type name="MkfsBtrfs" c:type="GuestfsMkfsBtrfs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mklost_and_found"
              c:identifier="guestfs_session_mklost_and_found"
              throws="1">
        <doc xml:space="preserve">make lost+found directory on an ext2/3/4 filesystem

Make the "lost+found" directory, normally in the root directory of an
ext2/3/4 filesystem. @mountpoint is the directory under which we try to
create the "lost+found" directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkmountpoint"
              c:identifier="guestfs_session_mkmountpoint"
              throws="1">
        <doc xml:space="preserve">create a mountpoint

guestfs_session_mkmountpoint() and guestfs_session_rmmountpoint() are
specialized calls that can be used to create extra mountpoints before
mounting the first filesystem.

These calls are *only* necessary in some very limited circumstances,
mainly the case where you want to mount a mix of unrelated and/or
read-only filesystems together.

For example, live CDs often contain a "Russian doll" nest of
filesystems, an ISO outer layer, with a squashfs image inside, with an
ext2/3 image inside that. You can unpack this as follows in guestfish:

&lt;![CDATA[add-ro Fedora-11-i686-Live.iso]]&gt;

&lt;![CDATA[run]]&gt;

&lt;![CDATA[mkmountpoint /cd]]&gt;

&lt;![CDATA[mkmountpoint /sqsh]]&gt;

&lt;![CDATA[mkmountpoint /ext3fs]]&gt;

&lt;![CDATA[mount /dev/sda /cd]]&gt;

&lt;![CDATA[mount-loop /cd/LiveOS/squashfs.img /sqsh]]&gt;

&lt;![CDATA[mount-loop /sqsh/LiveOS/ext3fs.img /ext3fs]]&gt;

The inner filesystem is now unpacked under the /ext3fs mountpoint.

guestfs_session_mkmountpoint() is not compatible with
guestfs_session_umount_all(). You may get unexpected errors if you try
to mix these calls. It is safest to manually unmount filesystems and
remove mountpoints after use.

guestfs_session_umount_all() unmounts filesystems by sorting the paths
longest first, so for this to work for manual mountpoints, you must
ensure that the innermost mountpoints have the longest pathnames, as in
the example code above.

For more details see &lt;ulink
url='https://bugzilla.redhat.com/show_bug.cgi?id=599503'&gt;
http://bugzilla.redhat.com/show_bug.cgi?id=599503 &lt;/ulink&gt;

Autosync [see guestfs_session_set_autosync(), this is set by default on
handles] can cause guestfs_session_umount_all() to be called when the
handle is closed which can also trigger these issues.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="exemptpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mknod" c:identifier="guestfs_session_mknod" throws="1">
        <doc xml:space="preserve">make block, character or FIFO devices

This call creates block or character special devices, or named pipes
(FIFOs).

The @mode parameter should be the mode, using the standard constants.
@devmajor and @devminor are the device major and minor numbers, only
used when creating block and character special devices.

Note that, just like mknod(2), the mode must be bitwise OR'd with
S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates
a regular file). These constants are available in the standard Linux
header files, or you can use guestfs_session_mknod_b(),
guestfs_session_mknod_c() or guestfs_session_mkfifo() which are wrappers
around this command which bitwise OR in the appropriate constant for
you.

The mode actually set is affected by the umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devmajor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devminor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mknod_b" c:identifier="guestfs_session_mknod_b" throws="1">
        <doc xml:space="preserve">make block device node

This call creates a block device node called @path with mode @mode and
device major/minor @devmajor and @devminor. It is just a convenient
wrapper around guestfs_session_mknod().

The mode actually set is affected by the umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devmajor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devminor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mknod_c" c:identifier="guestfs_session_mknod_c" throws="1">
        <doc xml:space="preserve">make char device node

This call creates a char device node called @path with mode @mode and
device major/minor @devmajor and @devminor. It is just a convenient
wrapper around guestfs_session_mknod().

The mode actually set is affected by the umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devmajor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="devminor" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkswap" c:identifier="guestfs_session_mkswap" throws="1">
        <doc xml:space="preserve">create a swap partition

Create a Linux swap partition on @device.

The option arguments @label and @uuid allow you to set the label and/or
UUID of the new swap partition.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMkswap containing optional arguments</doc>
            <type name="Mkswap" c:type="GuestfsMkswap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkswap_L"
              c:identifier="guestfs_session_mkswap_L"
              throws="1">
        <doc xml:space="preserve">create a swap partition with a label

Create a swap partition on @device with label @label.

Note that you cannot attach a swap label to a block device (eg.
"/dev/sda"), just to a partition. This appears to be a limitation of the
kernel or swap tools.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkswap_U"
              c:identifier="guestfs_session_mkswap_U"
              throws="1">
        <doc xml:space="preserve">create a swap partition with an explicit UUID

Create a swap partition on @device with UUID @uuid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkswap_file"
              c:identifier="guestfs_session_mkswap_file"
              throws="1">
        <doc xml:space="preserve">create a swap file

Create a swap file.

This command just writes a swap file signature to an existing file. To
create the file itself, use something like guestfs_session_fallocate().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mktemp" c:identifier="guestfs_session_mktemp" throws="1">
        <doc xml:space="preserve">create a temporary file

This command creates a temporary file. The @tmpl parameter should be a
full pathname for the temporary directory name with the final six
characters being "XXXXXX".

For example: "/tmp/myprogXXXXXX" or "/Temp/myprogXXXXXX", the second one
being suitable for Windows filesystems.

The name of the temporary file that was created is returned.

The temporary file is created with mode 0600 and is owned by root.

The caller is responsible for deleting the temporary file after use.

If the optional @suffix parameter is given, then the suffix (eg. ".txt")
is appended to the temporary name.

See also: guestfs_session_mkdtemp().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tmpl" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMktemp containing optional arguments</doc>
            <type name="Mktemp" c:type="GuestfsMktemp*"/>
          </parameter>
        </parameters>
      </method>
      <method name="modprobe"
              c:identifier="guestfs_session_modprobe"
              throws="1">
        <doc xml:space="preserve">load a kernel module

This loads a kernel module in the appliance.

The kernel module must have been whitelisted when libguestfs was built
(see "appliance/kmod.whitelist.in" in the source).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="modulename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount" c:identifier="guestfs_session_mount" throws="1">
        <doc xml:space="preserve">mount a guest disk at a position in the filesystem

Mount a guest disk at a position in the filesystem. Block devices are
named "/dev/sda", "/dev/sdb" and so on, as they were added to the guest.
If those block devices contain partitions, they will have the usual
names (eg. "/dev/sda1"). Also LVM "/dev/VG/LV"-style names can be used,
or 'mountable' strings returned by guestfs_session_list_filesystems() or
guestfs_session_inspect_get_mountpoints().

The rules are the same as for mount(2): A filesystem must first be
mounted on "/" before others can be mounted. Other filesystems can only
be mounted on directories which already exist.

The mounted filesystem is writable, if we have sufficient permissions on
the underlying device.

Before libguestfs 1.13.16, this call implicitly added the options @sync
and @noatime. The @sync option greatly slowed writes and caused many
problems for users. If your program might need to work with older
versions of libguestfs, use guestfs_session_mount_options() instead
(using an empty string for the first parameter if you don't want any
options).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_9p"
              c:identifier="guestfs_session_mount_9p"
              throws="1">
        <doc xml:space="preserve">mount 9p filesystem

Mount the virtio-9p filesystem with the tag @mounttag on the directory
@mountpoint.

If required, "trans=virtio" will be automatically added to the options.
Any other options required can be passed in the optional @options
parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mounttag" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMount9P containing optional arguments</doc>
            <type name="Mount9P" c:type="GuestfsMount9P*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_local"
              c:identifier="guestfs_session_mount_local"
              throws="1">
        <doc xml:space="preserve">mount on the local filesystem

This call exports the libguestfs-accessible filesystem to a local
mountpoint (directory) called @localmountpoint. Ordinary reads and
writes to files and directories under @localmountpoint are redirected
through libguestfs.

If the optional @readonly flag is set to true, then writes to the
filesystem return error @EROFS.

@options is a comma-separated list of mount options. See guestmount(1)
for some useful options.

@cachetimeout sets the timeout (in seconds) for cached directory
entries. The default is 60 seconds. See guestmount(1) for further
information.

If @debugcalls is set to true, then additional debugging information is
generated for every FUSE call.

When guestfs_session_mount_local() returns, the filesystem is ready, but
is not processing requests (access to it will block). You have to call
guestfs_session_mount_local_run() to run the main loop.

See "MOUNT LOCAL" in guestfs(3) for full documentation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="localmountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsMountLocal containing optional arguments</doc>
            <type name="MountLocal" c:type="GuestfsMountLocal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_local_run"
              c:identifier="guestfs_session_mount_local_run"
              throws="1">
        <doc xml:space="preserve">run main loop of mount on the local filesystem

Run the main loop which translates kernel calls to libguestfs calls.

This should only be called after guestfs_session_mount_local() returns
successfully. The call will not return until the filesystem is
unmounted.

Note you must *not* make concurrent libguestfs calls on the same handle
from another thread.

You may call this from a different thread than the one which called
guestfs_session_mount_local(), subject to the usual rules for threads
and libguestfs (see "MULTIPLE HANDLES AND MULTIPLE THREADS" in
guestfs(3)).

See "MOUNT LOCAL" in guestfs(3) for full documentation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_loop"
              c:identifier="guestfs_session_mount_loop"
              throws="1">
        <doc xml:space="preserve">mount a file using the loop device

This command lets you mount @file (a filesystem image in a file) on a
mount point. It is entirely equivalent to the command "mount -o loop
file mountpoint".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_options"
              c:identifier="guestfs_session_mount_options"
              throws="1">
        <doc xml:space="preserve">mount a guest disk with mount options

This is the same as the guestfs_session_mount() command, but it allows
you to set the mount options as for the mount(8) *-o* flag.

If the @options parameter is an empty string, then no options are passed
(all options default to whatever the filesystem uses).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_ro"
              c:identifier="guestfs_session_mount_ro"
              throws="1">
        <doc xml:space="preserve">mount a guest disk, read-only

This is the same as the guestfs_session_mount() command, but it mounts
the filesystem with the read-only (*-o ro*) flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mount_vfs"
              c:identifier="guestfs_session_mount_vfs"
              throws="1">
        <doc xml:space="preserve">mount a guest disk with mount options and vfstype

This is the same as the guestfs_session_mount() command, but it allows
you to set both the mount options and the vfstype as for the mount(8)
*-o* and *-t* flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="vfstype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="mountpoint" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mountpoints"
              c:identifier="guestfs_session_mountpoints"
              throws="1">
        <doc xml:space="preserve">show mountpoints

This call is similar to guestfs_session_mounts(). That call returns a
list of devices. This one returns a hash table (map) of device name to
directory where the device is mounted.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mounts" c:identifier="guestfs_session_mounts" throws="1">
        <doc xml:space="preserve">show mounted filesystems

This returns the list of currently mounted filesystems. It returns the
list of devices (eg. "/dev/sda1", "/dev/VG/LV").

Some internal mounts are not shown.

See also: guestfs_session_mountpoints()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mv" c:identifier="guestfs_session_mv" throws="1">
        <doc xml:space="preserve">move a file

This moves a file from @src to @dest where @dest is either a destination
filename or destination directory.

See also: guestfs_session_rename().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nr_devices"
              c:identifier="guestfs_session_nr_devices"
              throws="1">
        <doc xml:space="preserve">return number of whole block devices (disks) added

This returns the number of whole block devices that were added. This is
the same as the number of devices that would be returned if you called
guestfs_session_list_devices().

To find out the maximum number of devices that could be added, call
guestfs_session_max_disks().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ntfs_3g_probe"
              c:identifier="guestfs_session_ntfs_3g_probe"
              throws="1">
        <doc xml:space="preserve">probe NTFS volume

This command runs the ntfs-3g.probe(8) command which probes an NTFS
@device for mountability. (Not all NTFS volumes can be mounted
read-write, and some cannot be mounted at all).

@rw is a boolean flag. Set it to true if you want to test if the volume
can be mounted read-write. Set it to false if you want to test if the
volume can be mounted read-only.

The return value is an integer which @0 if the operation would succeed,
or some non-zero value documented in the ntfs-3g.probe(8) manual page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="rw" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ntfsclone_in"
              c:identifier="guestfs_session_ntfsclone_in"
              throws="1">
        <doc xml:space="preserve">restore NTFS from backup file

Restore the @backupfile (from a previous call to
guestfs_session_ntfsclone_out()) to @device, overwriting any existing
contents of this device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="backupfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ntfsclone_out"
              c:identifier="guestfs_session_ntfsclone_out"
              throws="1">
        <doc xml:space="preserve">save NTFS to backup file

Stream the NTFS filesystem @device to the local file @backupfile. The
format used for the backup file is a special format used by the
ntfsclone(8) tool.

If the optional @metadataonly flag is true, then *only* the metadata is
saved, losing all the user data (this is useful for diagnosing some
filesystem problems).

The optional @rescue, @ignorefscheck, @preservetimestamps and @force
flags have precise meanings detailed in the ntfsclone(8) man page.

Use guestfs_session_ntfsclone_in() to restore the file back to a
libguestfs device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="backupfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsNtfscloneOut containing optional arguments</doc>
            <type name="NtfscloneOut" c:type="GuestfsNtfscloneOut*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ntfsfix" c:identifier="guestfs_session_ntfsfix" throws="1">
        <doc xml:space="preserve">fix common errors and force Windows to check NTFS

This command repairs some fundamental NTFS inconsistencies, resets the
NTFS journal file, and schedules an NTFS consistency check for the first
boot into Windows.

This is *not* an equivalent of Windows @chkdsk. It does *not* scan the
filesystem for inconsistencies.

The optional @clearbadsectors flag clears the list of bad sectors. This
is useful after cloning a disk with bad sectors to a new disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsNtfsfix containing optional arguments</doc>
            <type name="Ntfsfix" c:type="GuestfsNtfsfix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ntfsresize"
              c:identifier="guestfs_session_ntfsresize"
              throws="1">
        <doc xml:space="preserve">resize an NTFS filesystem

This command resizes an NTFS filesystem, expanding or shrinking it to
the size of the underlying device.

The optional parameters are:

@size
The new size (in bytes) of the filesystem. If omitted, the
filesystem is resized to fit the container (eg. partition).

@force
If this option is true, then force the resize of the filesystem even
if the filesystem is marked as requiring a consistency check.

After the resize operation, the filesystem is always marked as
requiring a consistency check (for safety). You have to boot into
Windows to perform this check and clear this condition. If you
*don't* set the @force option then it is not possible to call
guestfs_session_ntfsresize() multiple times on a single filesystem
without booting into Windows between each resize.

See also ntfsresize(8).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsNTFSResizeOpts containing optional arguments</doc>
            <type name="NTFSResizeOpts" c:type="GuestfsNTFSResizeOpts*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ntfsresize_size"
              c:identifier="guestfs_session_ntfsresize_size"
              throws="1">
        <doc xml:space="preserve">resize an NTFS filesystem (with size)

This command is the same as guestfs_session_ntfsresize() except that it
allows you to specify the new size (in bytes) explicitly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_environment"
              c:identifier="guestfs_session_parse_environment"
              throws="1">
        <doc xml:space="preserve">parse the environment and set handle flags accordingly

Parse the program's environment and set flags in the handle accordingly.
For example if "LIBGUESTFS_DEBUG=1" then the 'verbose' flag is set in
the handle.

*Most programs do not need to call this*. It is done implicitly when you
call guestfs_session_create().

See "ENVIRONMENT VARIABLES" in guestfs(3) for a list of environment
variables that can affect libguestfs handles. See also
"guestfs_create_flags" in guestfs(3), and
guestfs_session_parse_environment_list().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse_environment_list"
              c:identifier="guestfs_session_parse_environment_list"
              throws="1">
        <doc xml:space="preserve">parse the environment and set handle flags accordingly

Parse the list of strings in the argument @environment and set flags in
the handle accordingly. For example if "LIBGUESTFS_DEBUG=1" is a string
in the list, then the 'verbose' flag is set in the handle.

This is the same as guestfs_session_parse_environment() except that it
parses an explicit list of strings instead of the program's environment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="part_add"
              c:identifier="guestfs_session_part_add"
              throws="1">
        <doc xml:space="preserve">add a partition to the device

This command adds a partition to @device. If there is no partition table
on the device, call guestfs_session_part_init() first.

The @prlogex parameter is the type of partition. Normally you should
pass @p or @primary here, but MBR partition tables also support @l (or
@logical) and @e (or @extended) partition types.

@startsect and @endsect are the start and end of the partition in
*sectors*. @endsect may be negative, which means it counts backwards
from the end of the disk (@-1 is the last sector).

Creating a partition which covers the whole disk is not so easy. Use
guestfs_session_part_disk() to do that.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="prlogex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="startsect" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="endsect" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_del"
              c:identifier="guestfs_session_part_del"
              throws="1">
        <doc xml:space="preserve">delete a partition

This command deletes the partition numbered @partnum on @device.

Note that in the case of MBR partitioning, deleting an extended
partition also deletes any logical partitions it contains.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_disk"
              c:identifier="guestfs_session_part_disk"
              throws="1">
        <doc xml:space="preserve">partition whole disk with a single primary partition

This command is simply a combination of guestfs_session_part_init()
followed by guestfs_session_part_add() to create a single primary
partition covering the whole disk.

@parttype is the partition table type, usually @mbr or @gpt, but other
possible values are described in guestfs_session_part_init().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="parttype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_get_bootable"
              c:identifier="guestfs_session_part_get_bootable"
              throws="1">
        <doc xml:space="preserve">return true if a partition is bootable

This command returns true if the partition @partnum on @device has the
bootable flag set.

See also guestfs_session_part_set_bootable().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint8" c:type="gint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_get_gpt_type"
              c:identifier="guestfs_session_part_get_gpt_type"
              throws="1">
        <doc xml:space="preserve">get the type GUID of a GPT partition

Return the type GUID of numbered GPT partition @partnum. For MBR
partitions, return an appropriate GUID corresponding to the MBR type.
Behaviour is undefined for other partition types.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_get_mbr_id"
              c:identifier="guestfs_session_part_get_mbr_id"
              throws="1">
        <doc xml:space="preserve">get the MBR type byte (ID byte) from a partition

Returns the MBR type byte (also known as the ID byte) from the numbered
partition @partnum.

Note that only MBR (old DOS-style) partitions have type bytes. You will
get undefined results for other partition table types (see
guestfs_session_part_get_parttype()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_get_parttype"
              c:identifier="guestfs_session_part_get_parttype"
              throws="1">
        <doc xml:space="preserve">get the partition table type

This command examines the partition table on @device and returns the
partition table type (format) being used.

Common return values include: @msdos (a DOS/Windows style MBR partition
table), @gpt (a GPT/EFI-style partition table). Other values are
possible, although unusual. See guestfs_session_part_init() for a full
list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_init"
              c:identifier="guestfs_session_part_init"
              throws="1">
        <doc xml:space="preserve">create an empty partition table

This creates an empty partition table on @device of one of the partition
types listed below. Usually @parttype should be either @msdos or @gpt
(for large disks).

Initially there are no partitions. Following this, you should call
guestfs_session_part_add() for each partition required.

Possible values for @parttype are:

efi
gpt Intel EFI / GPT partition table.

This is recommended for &gt;= 2 TB partitions that will be accessed
from Linux and Intel-based Mac OS X. It also has limited backwards
compatibility with the @mbr format.

mbr
msdos
The standard PC "Master Boot Record" (MBR) format used by MS-DOS and
Windows. This partition type will only work for device sizes up to 2
TB. For large disks we recommend using @gpt.

Other partition table types that may work but are not supported include:

aix AIX disk labels.

amiga
rdb Amiga "Rigid Disk Block" format.

bsd BSD disk labels.

dasd
DASD, used on IBM mainframes.

dvh MIPS/SGI volumes.

mac Old Mac partition format. Modern Macs use @gpt.

pc98
NEC PC-98 format, common in Japan apparently.

sun Sun disk labels.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="parttype" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_list"
              c:identifier="guestfs_session_part_list"
              throws="1">
        <doc xml:space="preserve">list partitions on a device

This command parses the partition table on @device and returns the list
of partitions found.

The fields in the returned structure are:

part_num
Partition number, counting from 1.

part_start
Start of the partition *in bytes*. To get sectors you have to divide
by the device's sector size, see guestfs_session_blockdev_getss().

part_end
End of the partition in bytes.

part_size
Size of the partition in bytes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of Partition objects, or NULL on error</doc>
          <array c:type="GuestfsPartition**">
            <type name="Partition"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_set_bootable"
              c:identifier="guestfs_session_part_set_bootable"
              throws="1">
        <doc xml:space="preserve">make a partition bootable

This sets the bootable flag on partition numbered @partnum on device
@device. Note that partitions are numbered from 1.

The bootable flag is used by some operating systems (notably Windows) to
determine which partition to boot from. It is by no means universally
recognized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="bootable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_set_gpt_type"
              c:identifier="guestfs_session_part_set_gpt_type"
              throws="1">
        <doc xml:space="preserve">set the type GUID of a GPT partition

Set the type GUID of numbered GPT partition @partnum to @guid. Return an
error if the partition table of @device isn't GPT, or if @guid is not a
valid GUID.

See &lt;ulink
url='http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GU
IDs'&gt;
http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
&lt;/ulink&gt; for a useful list of type GUIDs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="guid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_set_mbr_id"
              c:identifier="guestfs_session_part_set_mbr_id"
              throws="1">
        <doc xml:space="preserve">set the MBR type byte (ID byte) of a partition

Sets the MBR type byte (also known as the ID byte) of the numbered
partition @partnum to @idbyte. Note that the type bytes quoted in most
documentation are in fact hexadecimal numbers, but usually documented
without any leading "0x" which might be confusing.

Note that only MBR (old DOS-style) partitions have type bytes. You will
get undefined results for other partition table types (see
guestfs_session_part_get_parttype()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="idbyte" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_set_name"
              c:identifier="guestfs_session_part_set_name"
              throws="1">
        <doc xml:space="preserve">set partition name

This sets the partition name on partition numbered @partnum on device
@device. Note that partitions are numbered from 1.

The partition name can only be set on certain types of partition table.
This works on @gpt but not on @mbr partitions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_to_dev"
              c:identifier="guestfs_session_part_to_dev"
              throws="1">
        <doc xml:space="preserve">convert partition name to device name

This function takes a partition name (eg. "/dev/sdb1") and removes the
partition number, returning the device name (eg. "/dev/sdb").

The named partition must exist, for example as a string returned from
guestfs_session_list_partitions().

See also guestfs_session_part_to_partnum(),
guestfs_session_device_index().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="part_to_partnum"
              c:identifier="guestfs_session_part_to_partnum"
              throws="1">
        <doc xml:space="preserve">convert partition name to partition number

This function takes a partition name (eg. "/dev/sdb1") and returns the
partition number (eg. @1).

The named partition must exist, for example as a string returned from
guestfs_session_list_partitions().

See also guestfs_session_part_to_dev().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ping_daemon"
              c:identifier="guestfs_session_ping_daemon"
              throws="1">
        <doc xml:space="preserve">ping the guest daemon

This is a test probe into the guestfs daemon running inside the qemu
subprocess. Calling this function checks that the daemon responds to the
ping message, without affecting the daemon or attached block device(s)
in any other way.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pread" c:identifier="guestfs_session_pread" throws="1">
        <doc xml:space="preserve">read part of a file

This command lets you read part of a file. It reads @count bytes of the
file, starting at @offset, from file @path.

This may read fewer bytes than requested. For further details see the
pread(2) system call.

See also guestfs_session_pwrite(), guestfs_session_pread_device().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="3" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pread_device"
              c:identifier="guestfs_session_pread_device"
              throws="1">
        <doc xml:space="preserve">read part of a device

This command lets you read part of a block device. It reads @count bytes
of @device, starting at @offset.

This may read fewer bytes than requested. For further details see the
pread(2) system call.

See also guestfs_session_pread().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="3" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvchange_uuid"
              c:identifier="guestfs_session_pvchange_uuid"
              throws="1">
        <doc xml:space="preserve">generate a new random UUID for a physical volume

Generate a new random UUID for the physical volume @device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvchange_uuid_all"
              c:identifier="guestfs_session_pvchange_uuid_all"
              throws="1">
        <doc xml:space="preserve">generate new random UUIDs for all physical volumes

Generate new random UUIDs for all physical volumes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pvcreate"
              c:identifier="guestfs_session_pvcreate"
              throws="1">
        <doc xml:space="preserve">create an LVM physical volume

This creates an LVM physical volume on the named @device, where @device
should usually be a partition name such as "/dev/sda1".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvremove"
              c:identifier="guestfs_session_pvremove"
              throws="1">
        <doc xml:space="preserve">remove an LVM physical volume

This wipes a physical volume @device so that LVM will no longer
recognise it.

The implementation uses the @pvremove command which refuses to wipe
physical volumes that contain any volume groups, so you have to remove
those first.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvresize"
              c:identifier="guestfs_session_pvresize"
              throws="1">
        <doc xml:space="preserve">resize an LVM physical volume

This resizes (expands or shrinks) an existing LVM physical volume to
match the new size of the underlying device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvresize_size"
              c:identifier="guestfs_session_pvresize_size"
              throws="1">
        <doc xml:space="preserve">resize an LVM physical volume (with size)

This command is the same as guestfs_session_pvresize() except that it
allows you to specify the new size (in bytes) explicitly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="pvs" c:identifier="guestfs_session_pvs" throws="1">
        <doc xml:space="preserve">list the LVM physical volumes (PVs)

List all the physical volumes detected. This is the equivalent of the
pvs(8) command.

This returns a list of just the device names that contain PVs (eg.
"/dev/sda2").

See also guestfs_session_pvs_full().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pvs_full"
              c:identifier="guestfs_session_pvs_full"
              throws="1">
        <doc xml:space="preserve">list the LVM physical volumes (PVs)

List all the physical volumes detected. This is the equivalent of the
pvs(8) command. The "full" version includes all fields.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of PV objects, or NULL on error</doc>
          <array c:type="GuestfsPV**">
            <type name="PV"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pvuuid" c:identifier="guestfs_session_pvuuid" throws="1">
        <doc xml:space="preserve">get the UUID of a physical volume

This command returns the UUID of the LVM PV @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pwrite" c:identifier="guestfs_session_pwrite" throws="1">
        <doc xml:space="preserve">write to part of a file

This command writes to part of a file. It writes the data buffer
@content to the file @path starting at offset @offset.

This command implements the pwrite(2) system call, and like that system
call it may not write the full data requested. The return value is the
number of bytes that were actually written to the file. This could even
be 0, although short writes are unlikely for regular files in ordinary
circumstances.

See also guestfs_session_pread(), guestfs_session_pwrite_device().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="2" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="content_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of content, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="pwrite_device"
              c:identifier="guestfs_session_pwrite_device"
              throws="1">
        <doc xml:space="preserve">write to part of a device

This command writes to part of a device. It writes the data buffer
@content to @device starting at offset @offset.

This command implements the pwrite(2) system call, and like that system
call it may not write the full data requested (although short writes to
disk devices and partitions are probably impossible with standard Linux
kernels).

See also guestfs_session_pwrite().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="2" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="content_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of content, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_file"
              c:identifier="guestfs_session_read_file"
              throws="1">
        <doc xml:space="preserve">read a file

This calls returns the contents of the file @path as a buffer.

Unlike guestfs_session_cat(), this function can correctly handle files
that contain embedded ASCII NUL characters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="1" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_lines"
              c:identifier="guestfs_session_read_lines"
              throws="1">
        <doc xml:space="preserve">read file as lines

Return the contents of the file named @path.

The file contents are returned as a list of lines. Trailing @LF and
@CRLF character sequences are *not* returned.

Note that this function cannot correctly handle binary files
(specifically, files containing "\0" character which is treated as end
of string). For those you need to use the guestfs_session_read_file()
function and split the buffer into lines yourself.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="readdir" c:identifier="guestfs_session_readdir" throws="1">
        <doc xml:space="preserve">read directories entries

This returns the list of directory entries in directory @dir.

All entries in the directory are returned, including "." and "..". The
entries are *not* sorted, but returned in the same order as the
underlying filesystem.

Also this call returns basic file type information about each file. The
@ftyp field will contain one of the following characters:

'b' Block special

'c' Char special

'd' Directory

'f' FIFO (named pipe)

'l' Symbolic link

'r' Regular file

's' Socket

'u' Unknown file type

'?' The readdir(3) call returned a @d_type field with an unexpected
value

This function is primarily intended for use by programs. To get a simple
list of names, use guestfs_session_ls(). To get a printable directory
for human consumption, use guestfs_session_ll().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of Dirent objects, or NULL on error</doc>
          <array c:type="GuestfsDirent**">
            <type name="Dirent"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="readlink"
              c:identifier="guestfs_session_readlink"
              throws="1">
        <doc xml:space="preserve">read the target of a symbolic link

This command reads the target of a symbolic link.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="readlinklist"
              c:identifier="guestfs_session_readlinklist"
              throws="1">
        <doc xml:space="preserve">readlink on multiple files

This call allows you to do a @readlink operation on multiple files,
where all files are in the directory @path. @names is the list of files
from this directory.

On return you get a list of strings, with a one-to-one correspondence to
the @names list. Each string is the value of the symbolic link.

If the readlink(2) operation fails on any name, then the corresponding
result string is the empty string "". However the whole operation is
completed even if there were readlink(2) errors, and so you can call
this function with names where you don't know if they are symbolic links
already (albeit slightly less efficient).

This call is intended for programs that want to efficiently list a
directory contents without making many round-trips.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="realpath"
              c:identifier="guestfs_session_realpath"
              throws="1">
        <doc xml:space="preserve">canonicalized absolute pathname

Return the canonicalized absolute pathname of @path. The returned path
has no ".", ".." or symbolic link path elements.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_drive"
              c:identifier="guestfs_session_remove_drive"
              throws="1">
        <doc xml:space="preserve">remove a disk image

This function is conceptually the opposite of
guestfs_session_add_drive_opts(). It removes the drive that was
previously added with label @label.

Note that in order to remove drives, you have to add them with labels
(see the optional @label argument to guestfs_session_add_drive_opts()).
If you didn't use a label, then they cannot be removed.

You can call this function before or after launching the handle. If
called after launch, if the backend supports it, we try to hot unplug
the drive: see "HOTPLUGGING" in guestfs(3). The disk must not be in use
(eg. mounted) when you do this. We try to detect if the disk is in use
and stop you from doing this.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="removexattr"
              c:identifier="guestfs_session_removexattr"
              throws="1">
        <doc xml:space="preserve">remove extended attribute of a file or directory

This call removes the extended attribute named @xattr of the file @path.

See also: guestfs_session_lremovexattr(), attr(5).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="xattr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="guestfs_session_rename" throws="1">
        <doc xml:space="preserve">rename a file on the same filesystem

Rename a file to a new place on the same filesystem. This is the same as
the Linux rename(2) system call. In most cases you are better to use
guestfs_session_mv() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="oldpath" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="newpath" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize2fs"
              c:identifier="guestfs_session_resize2fs"
              throws="1">
        <doc xml:space="preserve">resize an ext2, ext3 or ext4 filesystem

This resizes an ext2, ext3 or ext4 filesystem to match the size of the
underlying device.

See also "RESIZE2FS ERRORS" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize2fs_M"
              c:identifier="guestfs_session_resize2fs_M"
              throws="1">
        <doc xml:space="preserve">resize an ext2, ext3 or ext4 filesystem to the minimum size

This command is the same as guestfs_session_resize2fs(), but the
filesystem is resized to its minimum size. This works like the *-M*
option to the @resize2fs command.

To get the resulting size of the filesystem you should call
guestfs_session_tune2fs_l() and read the "Block size" and "Block count"
values. These two numbers, multiplied together, give the resulting size
of the minimal filesystem in bytes.

See also "RESIZE2FS ERRORS" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resize2fs_size"
              c:identifier="guestfs_session_resize2fs_size"
              throws="1">
        <doc xml:space="preserve">resize an ext2, ext3 or ext4 filesystem (with size)

This command is the same as guestfs_session_resize2fs() except that it
allows you to specify the new size (in bytes) explicitly.

See also "RESIZE2FS ERRORS" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="rm" c:identifier="guestfs_session_rm" throws="1">
        <doc xml:space="preserve">remove a file

Remove the single file @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rm_f" c:identifier="guestfs_session_rm_f" throws="1">
        <doc xml:space="preserve">remove a file ignoring errors

Remove the file @path.

If the file doesn't exist, that error is ignored. (Other errors, eg. I/O
errors or bad paths, are not ignored)

This call cannot remove directories. Use guestfs_session_rmdir() to
remove an empty directory, or guestfs_session_rm_rf() to remove
directories recursively.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rm_rf" c:identifier="guestfs_session_rm_rf" throws="1">
        <doc xml:space="preserve">remove a file or directory recursively

Remove the file or directory @path, recursively removing the contents if
its a directory. This is like the "rm -rf" shell command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rmdir" c:identifier="guestfs_session_rmdir" throws="1">
        <doc xml:space="preserve">remove a directory

Remove the single directory @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rmmountpoint"
              c:identifier="guestfs_session_rmmountpoint"
              throws="1">
        <doc xml:space="preserve">remove a mountpoint

This calls removes a mountpoint that was previously created with
guestfs_session_mkmountpoint(). See guestfs_session_mkmountpoint() for
full details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="exemptpath" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rsync" c:identifier="guestfs_session_rsync" throws="1">
        <doc xml:space="preserve">synchronize the contents of two directories

This call may be used to copy or synchronize two directories under the
same libguestfs handle. This uses the rsync(1) program which uses a fast
algorithm that avoids copying files unnecessarily.

@src and @dest are the source and destination directories. Files are
copied from @src to @dest.

The optional arguments are:

@archive
Turns on archive mode. This is the same as passing the *--archive*
flag to @rsync.

@deletedest
Delete files at the destination that do not exist at the source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsRsync containing optional arguments</doc>
            <type name="Rsync" c:type="GuestfsRsync*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rsync_in"
              c:identifier="guestfs_session_rsync_in"
              throws="1">
        <doc xml:space="preserve">synchronize host or remote filesystem with filesystem

This call may be used to copy or synchronize the filesystem on the host
or on a remote computer with the filesystem within libguestfs. This uses
the rsync(1) program which uses a fast algorithm that avoids copying
files unnecessarily.

This call only works if the network is enabled. See
guestfs_session_set_network() or the *--network* option to various tools
like guestfish(1).

Files are copied from the remote server and directory specified by
@remote to the destination directory @dest.

The format of the remote server string is defined by rsync(1). Note that
there is no way to supply a password or passphrase so the target must be
set up not to require one.

The optional arguments are the same as those of guestfs_session_rsync().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="remote" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsRsyncIn containing optional arguments</doc>
            <type name="RsyncIn" c:type="GuestfsRsyncIn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rsync_out"
              c:identifier="guestfs_session_rsync_out"
              throws="1">
        <doc xml:space="preserve">synchronize filesystem with host or remote filesystem

This call may be used to copy or synchronize the filesystem within
libguestfs with a filesystem on the host or on a remote computer. This
uses the rsync(1) program which uses a fast algorithm that avoids
copying files unnecessarily.

This call only works if the network is enabled. See
guestfs_session_set_network() or the *--network* option to various tools
like guestfish(1).

Files are copied from the source directory @src to the remote server and
directory specified by @remote.

The format of the remote server string is defined by rsync(1). Note that
there is no way to supply a password or passphrase so the target must be
set up not to require one.

The optional arguments are the same as those of guestfs_session_rsync().

Globbing does not happen on the @src parameter. In programs which use
the API directly you have to expand wildcards yourself (see
guestfs_session_glob_expand()). In guestfish you can use the @glob
command (see "glob" in guestfish(1)), for example:

&lt;![CDATA[&gt;&lt;fs&gt; glob rsync-out /* rsync://remote/]]&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="remote" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsRsyncOut containing optional arguments</doc>
            <type name="RsyncOut" c:type="GuestfsRsyncOut*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scrub_device"
              c:identifier="guestfs_session_scrub_device"
              throws="1">
        <doc xml:space="preserve">scrub (securely wipe) a device

This command writes patterns over @device to make data retrieval more
difficult.

It is an interface to the scrub(1) program. See that manual page for
more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scrub_file"
              c:identifier="guestfs_session_scrub_file"
              throws="1">
        <doc xml:space="preserve">scrub (securely wipe) a file

This command writes patterns over a file to make data retrieval more
difficult.

The file is *removed* after scrubbing.

It is an interface to the scrub(1) program. See that manual page for
more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scrub_freespace"
              c:identifier="guestfs_session_scrub_freespace"
              throws="1">
        <doc xml:space="preserve">scrub (securely wipe) free space

This command creates the directory @dir and then fills it with files
until the filesystem is full, and scrubs the files as for
guestfs_session_scrub_file(), and deletes them. The intention is to
scrub any free space on the partition containing @dir.

It is an interface to the scrub(1) program. See that manual page for
more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_append"
              c:identifier="guestfs_session_set_append"
              throws="1">
        <doc xml:space="preserve">add options to kernel command line

This function is used to add additional options to the guest kernel
command line.

The default is @NULL unless overridden by setting @LIBGUESTFS_APPEND
environment variable.

Setting @append to @NULL means *no* additional options are passed
(libguestfs always adds a few of its own).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="append"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attach_method"
              c:identifier="guestfs_session_set_attach_method"
              throws="1">
        <doc xml:space="preserve">set the backend

Set the method that libguestfs uses to connect to the backend guestfsd
daemon.

See "BACKEND" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="backend" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_autosync"
              c:identifier="guestfs_session_set_autosync"
              throws="1">
        <doc xml:space="preserve">set autosync mode

If @autosync is true, this enables autosync. Libguestfs will make a best
effort attempt to make filesystems consistent and synchronized when the
handle is closed (also if the program exits without closing handles).

This is enabled by default (since libguestfs 1.5.24, previously it was
disabled by default).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="autosync" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backend"
              c:identifier="guestfs_session_set_backend"
              throws="1">
        <doc xml:space="preserve">set the backend

Set the method that libguestfs uses to connect to the backend guestfsd
daemon.

This handle property was previously called the "attach method".

See "BACKEND" in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="backend" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cachedir"
              c:identifier="guestfs_session_set_cachedir"
              throws="1">
        <doc xml:space="preserve">set the appliance cache directory

Set the directory used by the handle to store the appliance cache, when
using a supermin appliance. The appliance is cached and shared between
all handles which have the same effective user ID.

The environment variables @LIBGUESTFS_CACHEDIR and @TMPDIR control the
default value: If @LIBGUESTFS_CACHEDIR is set, then that is the default.
Else if @TMPDIR is set, then that is the default. Else "/var/tmp" is the
default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="cachedir"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direct"
              c:identifier="guestfs_session_set_direct"
              throws="1">
        <doc xml:space="preserve">enable or disable direct appliance mode

If the direct appliance mode flag is enabled, then stdin and stdout are
passed directly through to the appliance once it is launched.

One consequence of this is that log messages aren't caught by the
library and handled by guestfs_session_set_log_message_callback(), but
go straight to stdout.

You probably don't want to use this unless you know what you are doing.

The default is disabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="direct" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_e2attrs"
              c:identifier="guestfs_session_set_e2attrs"
              throws="1">
        <doc xml:space="preserve">set ext2 file attributes of a file

This sets or clears the file attributes @attrs associated with the inode
@file.

@attrs is a string of characters representing file attributes. See
guestfs_session_get_e2attrs() for a list of possible attributes. Not all
attributes can be changed.

If optional boolean @clear is not present or false, then the @attrs
listed are set in the inode.

If @clear is true, then the @attrs listed are cleared in the inode.

In both cases, other attributes not present in the @attrs string are
left unchanged.

These attributes are only present when the file is located on an
ext2/3/4 filesystem. Using this call on other filesystem types will
result in an error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsSetE2attrs containing optional arguments</doc>
            <type name="SetE2attrs" c:type="GuestfsSetE2attrs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_e2generation"
              c:identifier="guestfs_session_set_e2generation"
              throws="1">
        <doc xml:space="preserve">set ext2 file generation of a file

This sets the ext2 file generation of a file.

See guestfs_session_get_e2generation().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="generation" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_e2label"
              c:identifier="guestfs_session_set_e2label"
              throws="1">
        <doc xml:space="preserve">set the ext2/3/4 filesystem label

This sets the ext2/3/4 filesystem label of the filesystem on @device to
@label. Filesystem labels are limited to 16 characters.

You can use either guestfs_session_tune2fs_l() or
guestfs_session_get_e2label() to return the existing label on a
filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_e2uuid"
              c:identifier="guestfs_session_set_e2uuid"
              throws="1">
        <doc xml:space="preserve">set the ext2/3/4 filesystem UUID

This sets the ext2/3/4 filesystem UUID of the filesystem on @device to
@uuid. The format of the UUID and alternatives such as @clear, @random
and @time are described in the tune2fs(8) manpage.

You can use either guestfs_session_tune2fs_l() or
guestfs_session_get_e2uuid() to return the existing UUID of a
filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="guestfs_session_set_label"
              throws="1">
        <doc xml:space="preserve">set filesystem label

Set the filesystem label on @mountable to @label.

Only some filesystem types support labels, and libguestfs supports
setting labels on only a subset of these.

ext2, ext3, ext4
Labels are limited to 16 bytes.

NTFS
Labels are limited to 128 unicode characters.

XFS The label is limited to 12 bytes. The filesystem must not be mounted
when trying to set the label.

btrfs
The label is limited to 256 bytes and some characters are not
allowed. Setting the label on a btrfs subvolume will set the label
on its parent filesystem. The filesystem must not be mounted when
trying to set the label.

To read the label on a filesystem, call guestfs_session_vfs_label().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_libvirt_requested_credential"
              c:identifier="guestfs_session_set_libvirt_requested_credential"
              throws="1">
        <doc xml:space="preserve">pass requested credential back to libvirt

After requesting the @index'th credential from the user, call this
function to pass the answer back to libvirt.

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="cred" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="2" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="cred_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of cred, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_libvirt_supported_credentials"
              c:identifier="guestfs_session_set_libvirt_supported_credentials"
              throws="1">
        <doc xml:space="preserve">set libvirt credentials supported by calling program

Call this function before setting an event handler for
@GUESTFS_EVENT_LIBVIRT_AUTH, to supply the list of credential types that
the program knows how to process.

The @creds list must be a non-empty list of strings. Possible strings
are:

@username
@authname
@language
@cnonce
@passphrase
@echoprompt
@noechoprompt
@realm
@external

See libvirt documentation for the meaning of these credential types.

See "LIBVIRT AUTHENTICATION" in guestfs(3) for documentation and example
code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="creds" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_memsize"
              c:identifier="guestfs_session_set_memsize"
              throws="1">
        <doc xml:space="preserve">set memory allocated to the qemu subprocess

This sets the memory size in megabytes allocated to the qemu subprocess.
This only has any effect if called before guestfs_session_launch().

You can also change this by setting the environment variable
@LIBGUESTFS_MEMSIZE before the handle is created.

For more information on the architecture of libguestfs, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="memsize" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network"
              c:identifier="guestfs_session_set_network"
              throws="1">
        <doc xml:space="preserve">set enable network flag

If @network is true, then the network is enabled in the libguestfs
appliance. The default is false.

This affects whether commands are able to access the network (see
"RUNNING COMMANDS" in guestfs(3)).

You must call this before calling guestfs_session_launch(), otherwise it
has no effect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="guestfs_session_set_path"
              throws="1">
        <doc xml:space="preserve">set the search path

Set the path that libguestfs searches for kernel and initrd.img.

The default is "$libdir/guestfs" unless overridden by setting
@LIBGUESTFS_PATH environment variable.

Setting @path to @NULL restores the default path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="searchpath"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pgroup"
              c:identifier="guestfs_session_set_pgroup"
              throws="1">
        <doc xml:space="preserve">set process group flag

If @pgroup is true, child processes are placed into their own process
group.

The practical upshot of this is that signals like @SIGINT (from users
pressing "^C") won't be received by the child process.

The default for this flag is false, because usually you want "^C" to
kill the subprocess. Guestfish sets this flag to true when used
interactively, so that "^C" can cancel long-running commands gracefully
(see guestfs_session_user_cancel()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pgroup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_program"
              c:identifier="guestfs_session_set_program"
              throws="1">
        <doc xml:space="preserve">set the program name

Set the program name. This is an informative string which the main
program may optionally set in the handle.

When the handle is created, the program name in the handle is set to the
basename from "argv[0]". If that was not possible, it is set to the
empty string (but never @NULL).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qemu"
              c:identifier="guestfs_session_set_qemu"
              throws="1">
        <doc xml:space="preserve">set the qemu binary

Set the qemu binary that we will use.

The default is chosen when the library was compiled by the configure
script.

You can also override this by setting the @LIBGUESTFS_QEMU environment
variable.

Setting @qemu to @NULL restores the default qemu binary.

Note that you should call this function as early as possible after
creating the handle. This is because some pre-launch operations depend
on testing qemu features (by running "qemu -help"). If the qemu binary
changes, we don't retest features, and so you might see inconsistent
results. Using the environment variable @LIBGUESTFS_QEMU is safest of
all since that picks the qemu binary at the same time as the handle is
created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="qemu"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recovery_proc"
              c:identifier="guestfs_session_set_recovery_proc"
              throws="1">
        <doc xml:space="preserve">enable or disable the recovery process

If this is called with the parameter @false then
guestfs_session_launch() does not create a recovery process. The purpose
of the recovery process is to stop runaway qemu processes in the case
where the main program aborts abruptly.

This only has any effect if called before guestfs_session_launch(), and
the default is true.

About the only time when you would want to disable this is if the main
process will fork itself into the background ("daemonize" itself). In
this case the recovery process thinks that the main program has
disappeared and so kills qemu, which is not very helpful.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="recoveryproc" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selinux"
              c:identifier="guestfs_session_set_selinux"
              throws="1">
        <doc xml:space="preserve">set SELinux enabled or disabled at appliance boot

This sets the selinux flag that is passed to the appliance at boot time.
The default is "selinux=0" (disabled).

Note that if SELinux is enabled, it is always in Permissive mode
("enforcing=0").

For more information on the architecture of libguestfs, see guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="selinux" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smp" c:identifier="guestfs_session_set_smp" throws="1">
        <doc xml:space="preserve">set number of virtual CPUs in appliance

Change the number of virtual CPUs assigned to the appliance. The default
is @1. Increasing this may improve performance, though often it has no
effect.

This function must be called before guestfs_session_launch().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="smp" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tmpdir"
              c:identifier="guestfs_session_set_tmpdir"
              throws="1">
        <doc xml:space="preserve">set the temporary directory

Set the directory used by the handle to store temporary files.

The environment variables @LIBGUESTFS_TMPDIR and @TMPDIR control the
default value: If @LIBGUESTFS_TMPDIR is set, then that is the default.
Else if @TMPDIR is set, then that is the default. Else "/tmp" is the
default.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tmpdir"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_trace"
              c:identifier="guestfs_session_set_trace"
              throws="1">
        <doc xml:space="preserve">enable or disable command traces

If the command trace flag is set to 1, then libguestfs calls, parameters
and return values are traced.

If you want to trace C API calls into libguestfs (and other libraries)
then possibly a better way is to use the external ltrace(1) command.

Command traces are disabled unless the environment variable
@LIBGUESTFS_TRACE is defined and set to @1.

Trace messages are normally sent to @stderr, unless you register a
callback to send them somewhere else (see
guestfs_session_set_event_callback()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="trace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_verbose"
              c:identifier="guestfs_session_set_verbose"
              throws="1">
        <doc xml:space="preserve">set verbose mode

If @verbose is true, this turns on verbose messages.

Verbose messages are disabled unless the environment variable
@LIBGUESTFS_DEBUG is defined and set to @1.

Verbose messages are normally sent to @stderr, unless you register a
callback to send them somewhere else (see
guestfs_session_set_event_callback()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="verbose" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="setcon" c:identifier="guestfs_session_setcon" throws="1">
        <doc xml:space="preserve">set SELinux security context

This sets the SELinux security context of the daemon to the string
@context.

See the documentation about SELINUX in guestfs(3).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setxattr"
              c:identifier="guestfs_session_setxattr"
              throws="1">
        <doc xml:space="preserve">set extended attribute of a file or directory

This call sets the extended attribute named @xattr of the file @path to
the value @val (of length @vallen). The value is arbitrary 8 bit data.

See also: guestfs_session_lsetxattr(), attr(5).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="xattr" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="vallen" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sfdisk" c:identifier="guestfs_session_sfdisk" throws="1">
        <doc xml:space="preserve">create partitions on a block device

This is a direct interface to the sfdisk(8) program for creating
partitions on block devices.

@device should be a block device, for example "/dev/sda".

@cyls, @heads and @sectors are the number of cylinders, heads and
sectors on the device, which are passed directly to sfdisk as the *-C*,
*-H* and *-S* parameters. If you pass @0 for any of these, then the
corresponding parameter is omitted. Usually for 'large' disks, you can
just pass @0 for these, but for small (floppy-sized) disks, sfdisk (or
rather, the kernel) cannot work out the right geometry and you will need
to tell it.

@lines is a list of lines that we feed to @sfdisk. For more information
refer to the sfdisk(8) manpage.

To create a single partition occupying the whole disk, you would pass
@lines as a single element list, when the single element being the
string "," (comma).

See also: guestfs_session_sfdisk_l(), guestfs_session_sfdisk_N(),
guestfs_session_part_init()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cyls" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="heads" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="sectors" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="lines" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="sfdiskM" c:identifier="guestfs_session_sfdiskM" throws="1">
        <doc xml:space="preserve">create partitions on a block device

This is a simplified interface to the guestfs_session_sfdisk() command,
where partition sizes are specified in megabytes only (rounded to the
nearest cylinder) and you don't need to specify the cyls, heads and
sectors parameters which were rarely if ever used anyway.

See also: guestfs_session_sfdisk(), the sfdisk(8) manpage and
guestfs_session_part_disk()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="lines" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="sfdisk_N"
              c:identifier="guestfs_session_sfdisk_N"
              throws="1">
        <doc xml:space="preserve">modify a single partition on a block device

This runs sfdisk(8) option to modify just the single partition @n (note:
@n counts from 1).

For other parameters, see guestfs_session_sfdisk(). You should usually
pass @0 for the cyls/heads/sectors parameters.

See also: guestfs_session_part_add()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="partnum" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="cyls" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="heads" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="sectors" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sfdisk_disk_geometry"
              c:identifier="guestfs_session_sfdisk_disk_geometry"
              throws="1">
        <doc xml:space="preserve">display the disk geometry from the partition table

This displays the disk geometry of @device read from the partition
table. Especially in the case where the underlying block device has been
resized, this can be different from the kernel's idea of the geometry
(see guestfs_session_sfdisk_kernel_geometry()).

The result is in human-readable format, and not designed to be parsed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sfdisk_kernel_geometry"
              c:identifier="guestfs_session_sfdisk_kernel_geometry"
              throws="1">
        <doc xml:space="preserve">display the kernel geometry

This displays the kernel's idea of the geometry of @device.

The result is in human-readable format, and not designed to be parsed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sfdisk_l"
              c:identifier="guestfs_session_sfdisk_l"
              throws="1">
        <doc xml:space="preserve">display the partition table

This displays the partition table on @device, in the human-readable
output of the sfdisk(8) command. It is not intended to be parsed.

See also: guestfs_session_part_list()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sh" c:identifier="guestfs_session_sh" throws="1">
        <doc xml:space="preserve">run a command via the shell

This call runs a command from the guest filesystem via the guest's
"/bin/sh".

This is like guestfs_session_command(), but passes the command to:

&lt;![CDATA[/bin/sh -c "command"]]&gt;

Depending on the guest's shell, this usually results in wildcards being
expanded, shell expressions being interpolated and so on.

All the provisos about guestfs_session_command() apply to this call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sh_lines"
              c:identifier="guestfs_session_sh_lines"
              throws="1">
        <doc xml:space="preserve">run a command via the shell returning lines

This is the same as guestfs_session_sh(), but splits the result into a
list of lines.

See also: guestfs_session_command_lines()</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown"
              c:identifier="guestfs_session_shutdown"
              throws="1">
        <doc xml:space="preserve">shutdown the qemu subprocess

This is the opposite of guestfs_session_launch(). It performs an orderly
shutdown of the backend process(es). If the autosync flag is set (which
is the default) then the disk image is synchronized.

If the subprocess exits with an error then this function will return an
error, which should *not* be ignored (it may indicate that the disk
image could not be written out properly).

It is safe to call this multiple times. Extra calls are ignored.

This call does *not* close or free up the handle. You still need to call
guestfs_session_close() afterwards.

guestfs_session_close() will call this if you don't do it explicitly,
but note that any errors are ignored in that case.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sleep" c:identifier="guestfs_session_sleep" throws="1">
        <doc xml:space="preserve">sleep for some seconds

Sleep for @secs seconds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="secs" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="stat" c:identifier="guestfs_session_stat" throws="1">
        <doc xml:space="preserve">get file information

Returns file information for the given @path.

This is the same as the stat(2) system call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a Stat object, or NULL on error</doc>
          <type name="Stat" c:type="GuestfsStat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="statvfs" c:identifier="guestfs_session_statvfs" throws="1">
        <doc xml:space="preserve">get file system statistics

Returns file system statistics for any mounted file system. @path should
be a file or directory in the mounted file system (typically it is the
mount point itself, but it doesn't need to be).

This is the same as the statvfs(2) system call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a StatVFS object, or NULL on error</doc>
          <type name="StatVFS" c:type="GuestfsStatVFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="strings" c:identifier="guestfs_session_strings" throws="1">
        <doc xml:space="preserve">print the printable strings in a file

This runs the strings(1) command on a file and returns the list of
printable strings found.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="strings_e"
              c:identifier="guestfs_session_strings_e"
              throws="1">
        <doc xml:space="preserve">print the printable strings in a file

This is like the guestfs_session_strings() command, but allows you to
specify the encoding of strings that are looked for in the source file
@path.

Allowed encodings are:

s   Single 7-bit-byte characters like ASCII and the ASCII-compatible
parts of ISO-8859-X (this is what guestfs_session_strings() uses).

S   Single 8-bit-byte characters.

b   16-bit big endian strings such as those encoded in UTF-16BE or
UCS-2BE.

l (lower case letter L)
16-bit little endian such as UTF-16LE and UCS-2LE. This is useful
for examining binaries in Windows guests.

B   32-bit big endian such as UCS-4BE.

L   32-bit little endian such as UCS-4LE.

The returned strings are transcoded to UTF-8.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapoff_device"
              c:identifier="guestfs_session_swapoff_device"
              throws="1">
        <doc xml:space="preserve">disable swap on device

This command disables the libguestfs appliance swap device or partition
named @device. See guestfs_session_swapon_device().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapoff_file"
              c:identifier="guestfs_session_swapoff_file"
              throws="1">
        <doc xml:space="preserve">disable swap on file

This command disables the libguestfs appliance swap on file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapoff_label"
              c:identifier="guestfs_session_swapoff_label"
              throws="1">
        <doc xml:space="preserve">disable swap on labeled swap partition

This command disables the libguestfs appliance swap on labeled swap
partition.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapoff_uuid"
              c:identifier="guestfs_session_swapoff_uuid"
              throws="1">
        <doc xml:space="preserve">disable swap on swap partition by UUID

This command disables the libguestfs appliance swap partition with the
given UUID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapon_device"
              c:identifier="guestfs_session_swapon_device"
              throws="1">
        <doc xml:space="preserve">enable swap on device

This command enables the libguestfs appliance to use the swap device or
partition named @device. The increased memory is made available for all
commands, for example those run using guestfs_session_command() or
guestfs_session_sh().

Note that you should not swap to existing guest swap partitions unless
you know what you are doing. They may contain hibernation information,
or other information that the guest doesn't want you to trash. You also
risk leaking information about the host to the guest this way. Instead,
attach a new host device to the guest and swap on that.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapon_file"
              c:identifier="guestfs_session_swapon_file"
              throws="1">
        <doc xml:space="preserve">enable swap on file

This command enables swap to a file. See guestfs_session_swapon_device()
for other notes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapon_label"
              c:identifier="guestfs_session_swapon_label"
              throws="1">
        <doc xml:space="preserve">enable swap on labeled swap partition

This command enables swap to a labeled swap partition. See
guestfs_session_swapon_device() for other notes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swapon_uuid"
              c:identifier="guestfs_session_swapon_uuid"
              throws="1">
        <doc xml:space="preserve">enable swap on swap partition by UUID

This command enables swap to a swap partition with the given UUID. See
guestfs_session_swapon_device() for other notes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="guestfs_session_sync" throws="1">
        <doc xml:space="preserve">sync disks, writes are flushed through to the disk image

This syncs the disk, so that any writes are flushed through to the
underlying disk image.

You should always call this if you have modified a disk image, before
closing the handle.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="syslinux"
              c:identifier="guestfs_session_syslinux"
              throws="1">
        <doc xml:space="preserve">install the SYSLINUX bootloader

Install the SYSLINUX bootloader on @device.

The device parameter must be either a whole disk formatted as a FAT
filesystem, or a partition formatted as a FAT filesystem. In the latter
case, the partition should be marked as "active"
(guestfs_session_part_set_bootable()) and a Master Boot Record must be
installed (eg. using guestfs_session_pwrite_device()) on the first
sector of the whole disk. The SYSLINUX package comes with some suitable
Master Boot Records. See the syslinux(1) man page for further
information.

The optional arguments are:

@directory
Install SYSLINUX in the named subdirectory, instead of in the root
directory of the FAT filesystem.

Additional configuration can be supplied to SYSLINUX by placing a file
called "syslinux.cfg" on the FAT filesystem, either in the root
directory, or under @directory if that optional argument is being used.
For further information about the contents of this file, see
syslinux(1).

See also guestfs_session_extlinux().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsSyslinux containing optional arguments</doc>
            <type name="Syslinux" c:type="GuestfsSyslinux*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tail" c:identifier="guestfs_session_tail" throws="1">
        <doc xml:space="preserve">return last 10 lines of a file

This command returns up to the last 10 lines of a file as a list of
strings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tail_n" c:identifier="guestfs_session_tail_n" throws="1">
        <doc xml:space="preserve">return last N lines of a file

If the parameter @nrlines is a positive number, this returns the last
@nrlines lines of the file @path.

If the parameter @nrlines is a negative number, this returns lines from
the file @path, starting with the @-nrlinesth line.

If the parameter @nrlines is zero, this returns an empty list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="nrlines" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tar_in" c:identifier="guestfs_session_tar_in" throws="1">
        <doc xml:space="preserve">unpack tarfile to directory

This command uploads and unpacks local file @tarfile into @directory.

The optional @compress flag controls compression. If not given, then the
input should be an uncompressed tar file. Otherwise one of the following
strings may be given to select the compression type of the input file:
@compress, @gzip, @bzip2, @xz, @lzop. (Note that not all builds of
libguestfs will support all of these compression types).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tarfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsTarIn containing optional arguments</doc>
            <type name="TarIn" c:type="GuestfsTarIn*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tar_out" c:identifier="guestfs_session_tar_out" throws="1">
        <doc xml:space="preserve">pack directory into tarfile

This command packs the contents of @directory and downloads it to local
file @tarfile.

The optional @compress flag controls compression. If not given, then the
output will be an uncompressed tar file. Otherwise one of the following
strings may be given to select the compression type of the output file:
@compress, @gzip, @bzip2, @xz, @lzop. (Note that not all builds of
libguestfs will support all of these compression types).

The other optional arguments are:

@excludes
A list of wildcards. Files are excluded if they match any of the
wildcards.

@numericowner
If set to true, the output tar file will contain UID/GID numbers
instead of user/group names.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="tarfile" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsTarOut containing optional arguments</doc>
            <type name="TarOut" c:type="GuestfsTarOut*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tgz_in" c:identifier="guestfs_session_tgz_in" throws="1">
        <doc xml:space="preserve">unpack compressed tarball to directory

This command uploads and unpacks local file @tarball (a *gzip
compressed* tar file) into @directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tarball" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tgz_out" c:identifier="guestfs_session_tgz_out" throws="1">
        <doc xml:space="preserve">pack directory into compressed tarball

This command packs the contents of @directory and downloads it to local
file @tarball.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="tarball" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch" c:identifier="guestfs_session_touch" throws="1">
        <doc xml:space="preserve">update file timestamps or create a new file

Touch acts like the touch(1) command. It can be used to update the
timestamps on a file, or, if the file does not exist, to create a new
zero-length file.

This command only works on regular files, and will fail on other file
types such as directories, symbolic links, block special etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="truncate"
              c:identifier="guestfs_session_truncate"
              throws="1">
        <doc xml:space="preserve">truncate a file to zero size

This command truncates @path to a zero-length file. The file must exist
already.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="truncate_size"
              c:identifier="guestfs_session_truncate_size"
              throws="1">
        <doc xml:space="preserve">truncate a file to a particular size

This command truncates @path to size @size bytes. The file must exist
already.

If the current file size is less than @size then the file is extended to
the required size with zero bytes. This creates a sparse file (ie. disk
blocks are not allocated for the file until you write to it). To create
a non-sparse file of zeroes, use guestfs_session_fallocate64() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="tune2fs" c:identifier="guestfs_session_tune2fs" throws="1">
        <doc xml:space="preserve">adjust ext2/ext3/ext4 filesystem parameters

This call allows you to adjust various filesystem parameters of an
ext2/ext3/ext4 filesystem called @device.

The optional parameters are:

@force
Force tune2fs to complete the operation even in the face of errors.
This is the same as the tune2fs @-f option.

@maxmountcount
Set the number of mounts after which the filesystem is checked by
e2fsck(8). If this is @0 then the number of mounts is disregarded.
This is the same as the tune2fs @-c option.

@mountcount
Set the number of times the filesystem has been mounted. This is the
same as the tune2fs @-C option.

@errorbehavior
Change the behavior of the kernel code when errors are detected.
Possible values currently are: @continue, @remount-ro, @panic. In
practice these options don't really make any difference,
particularly for write errors.

This is the same as the tune2fs @-e option.

@group
Set the group which can use reserved filesystem blocks. This is the
same as the tune2fs @-g option except that it can only be specified
as a number.

@intervalbetweenchecks
Adjust the maximal time between two filesystem checks (in seconds).
If the option is passed as @0 then time-dependent checking is
disabled.

This is the same as the tune2fs @-i option.

@reservedblockspercentage
Set the percentage of the filesystem which may only be allocated by
privileged processes. This is the same as the tune2fs @-m option.

@lastmounteddirectory
Set the last mounted directory. This is the same as the tune2fs @-M
option.

@reservedblockscount Set the number of reserved filesystem blocks. This
is the same as the tune2fs @-r option.
@user
Set the user who can use the reserved filesystem blocks. This is the
same as the tune2fs @-u option except that it can only be specified
as a number.

To get the current values of filesystem parameters, see
guestfs_session_tune2fs_l(). For precise details of how tune2fs works,
see the tune2fs(8) man page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsTune2FS containing optional arguments</doc>
            <type name="Tune2FS" c:type="GuestfsTune2FS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tune2fs_l"
              c:identifier="guestfs_session_tune2fs_l"
              throws="1">
        <doc xml:space="preserve">get ext2/ext3/ext4 superblock details

This returns the contents of the ext2, ext3 or ext4 filesystem
superblock on @device.

It is the same as running "tune2fs -l device". See tune2fs(8) manpage
for more details. The list of fields returned isn't clearly defined, and
depends on both the version of @tune2fs that libguestfs was built
against, and the filesystem itself.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GHashTable of results, or NULL on error</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="txz_in" c:identifier="guestfs_session_txz_in" throws="1">
        <doc xml:space="preserve">unpack compressed tarball to directory

This command uploads and unpacks local file @tarball (an *xz compressed*
tar file) into @directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="tarball" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="txz_out" c:identifier="guestfs_session_txz_out" throws="1">
        <doc xml:space="preserve">pack directory into compressed tarball

This command packs the contents of @directory and downloads it to local
file @tarball (as an xz compressed tar archive).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="tarball" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="umask" c:identifier="guestfs_session_umask" throws="1">
        <doc xml:space="preserve">set file mode creation mask (umask)

This function sets the mask used for creating new files and device nodes
to "mask &amp; 0777".

Typical umask values would be @022 which creates new files with
permissions like "-rw-r--r--" or "-rwxr-xr-x", and @002 which creates
new files with permissions like "-rw-rw-r--" or "-rwxrwxr-x".

The default umask is @022. This is important because it means that
directories and device nodes will be created with @0644 or @0755 mode
even if you specify @0777.

See also guestfs_session_get_umask(), umask(2), guestfs_session_mknod(),
guestfs_session_mkdir().

This call returns the previous umask.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mask" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="umount" c:identifier="guestfs_session_umount" throws="1">
        <doc xml:space="preserve">unmount a filesystem

This unmounts the given filesystem. The filesystem may be specified
either by its mountpoint (path) or the device which contains the
filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pathordevice" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsUmount containing optional arguments</doc>
            <type name="Umount" c:type="GuestfsUmount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="umount_all"
              c:identifier="guestfs_session_umount_all"
              throws="1">
        <doc xml:space="preserve">unmount all filesystems

This unmounts all mounted filesystems.

Some internal mounts are not unmounted by this call.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="umount_local"
              c:identifier="guestfs_session_umount_local"
              throws="1">
        <doc xml:space="preserve">unmount a locally mounted filesystem

If libguestfs is exporting the filesystem on a local mountpoint, then
this unmounts it.

See "MOUNT LOCAL" in guestfs(3) for full documentation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsUmountLocal containing optional arguments</doc>
            <type name="UmountLocal" c:type="GuestfsUmountLocal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upload" c:identifier="guestfs_session_upload" throws="1">
        <doc xml:space="preserve">upload a file from the local machine

Upload local file @filename to @remotefilename on the filesystem.

@filename can also be a named pipe.

See also guestfs_session_download().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="remotefilename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upload_offset"
              c:identifier="guestfs_session_upload_offset"
              throws="1">
        <doc xml:space="preserve">upload a file from the local machine with offset

Upload local file @filename to @remotefilename on the filesystem.

@remotefilename is overwritten starting at the byte @offset specified.
The intention is to overwrite parts of existing files or devices,
although if a non-existant file is specified then it is created with a
"hole" before @offset. The size of the data written is implicit in the
size of the source @filename.

Note that there is no limit on the amount of data that can be uploaded
with this call, unlike with guestfs_session_pwrite(), and this call
always writes the full amount unless an error occurs.

See also guestfs_session_upload(), guestfs_session_pwrite().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="remotefilename" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_cancel"
              c:identifier="guestfs_session_user_cancel"
              throws="1">
        <doc xml:space="preserve">cancel the current upload or download operation

This function cancels the current upload or download operation.

Unlike most other libguestfs calls, this function is signal safe and
thread safe. You can call it from a signal handler or from another
thread, without needing to do any locking.

The transfer that was in progress (if there is one) will stop shortly
afterwards, and will return an error. The errno (see
"guestfs_last_errno") is set to @EINTR, so you can test for this to find
out if the operation was cancelled or failed because of another error.

No cleanup is performed: for example, if a file was being uploaded then
after cancellation there may be a partially uploaded file. It is the
caller's responsibility to clean up if necessary.

There are two common places that you might call
guestfs_session_user_cancel():

In an interactive text-based program, you might call it from a @SIGINT
signal handler so that pressing "^C" cancels the current operation. (You
also need to call "guestfs_set_pgroup" so that child processes don't
receive the "^C" signal).

In a graphical program, when the main thread is displaying a progress
bar with a cancel button, wire up the cancel button to call this
function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="utimens" c:identifier="guestfs_session_utimens" throws="1">
        <doc xml:space="preserve">set timestamp of a file with nanosecond precision

This command sets the timestamps of a file with nanosecond precision.

"atsecs, atnsecs" are the last access time (atime) in secs and
nanoseconds from the epoch.

"mtsecs, mtnsecs" are the last modification time (mtime) in secs and
nanoseconds from the epoch.

If the *nsecs field contains the special value @-1 then the
corresponding timestamp is set to the current time. (The *secs field is
ignored in this case).

If the *nsecs field contains the special value @-2 then the
corresponding timestamp is left unchanged. (The *secs field is ignored
in this case).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="atsecs" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="atnsecs" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="mtsecs" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="mtnsecs" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="utsname" c:identifier="guestfs_session_utsname" throws="1">
        <doc xml:space="preserve">appliance kernel version

This returns the kernel version of the appliance, where this is
available. This information is only useful for debugging. Nothing in the
returned structure is defined by the API.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a UTSName object, or NULL on error</doc>
          <type name="UTSName" c:type="GuestfsUTSName*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="version" c:identifier="guestfs_session_version" throws="1">
        <doc xml:space="preserve">get the library version number

Return the libguestfs version number that the program is linked against.

Note that because of dynamic linking this is not necessarily the version
of libguestfs that you compiled against. You can compile the program,
and then at runtime dynamically link against a completely different
"libguestfs.so" library.

This call was added in version 1.0.58. In previous versions of
libguestfs there was no way to get the version number. From C code you
can use dynamic linker functions to find out if this symbol exists (if
it doesn't, then it's an earlier version).

The call returns a structure with four elements. The first three
(@major, @minor and @release) are numbers and correspond to the usual
version triplet. The fourth element (@extra) is a string and is normally
empty, but may be used for distro-specific information.

To construct the original version string: "$major.$minor.$release$extra"

See also: "LIBGUESTFS VERSION NUMBERS" in guestfs(3).

*Note:* Don't use this call to test for availability of features. In
enterprise distributions we backport features from later versions into
earlier versions, making this an unreliable way to test for features.
Use guestfs_session_available() or guestfs_session_feature_available()
instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a Version object, or NULL on error</doc>
          <type name="Version" c:type="GuestfsVersion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vfs_label"
              c:identifier="guestfs_session_vfs_label"
              throws="1">
        <doc xml:space="preserve">get the filesystem label

This returns the label of the filesystem on @mountable.

If the filesystem is unlabeled, this returns the empty string.

To find a filesystem from the label, use guestfs_session_findfs_label().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vfs_type"
              c:identifier="guestfs_session_vfs_type"
              throws="1">
        <doc xml:space="preserve">get the Linux VFS type corresponding to a mounted device

This command gets the filesystem type corresponding to the filesystem on
@mountable.

For most filesystems, the result is the name of the Linux VFS module
which would be used to mount this filesystem if you mounted it without
specifying the filesystem type. For example a string such as @ext3 or
@ntfs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vfs_uuid"
              c:identifier="guestfs_session_vfs_uuid"
              throws="1">
        <doc xml:space="preserve">get the filesystem UUID

This returns the filesystem UUID of the filesystem on @mountable.

If the filesystem does not have a UUID, this returns the empty string.

To find a filesystem from the UUID, use guestfs_session_findfs_uuid().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="mountable" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vg_activate"
              c:identifier="guestfs_session_vg_activate"
              throws="1">
        <doc xml:space="preserve">activate or deactivate some volume groups

This command activates or (if @activate is false) deactivates all
logical volumes in the listed volume groups @volgroups.

This command is the same as running "vgchange -a y|n volgroups..."

Note that if @volgroups is an empty list then all volume groups are
activated or deactivated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="activate" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="volgroups" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="vg_activate_all"
              c:identifier="guestfs_session_vg_activate_all"
              throws="1">
        <doc xml:space="preserve">activate or deactivate all volume groups

This command activates or (if @activate is false) deactivates all
logical volumes in all volume groups.

This command is the same as running "vgchange -a y|n"</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="activate" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgchange_uuid"
              c:identifier="guestfs_session_vgchange_uuid"
              throws="1">
        <doc xml:space="preserve">generate a new random UUID for a volume group

Generate a new random UUID for the volume group @vg.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vg" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgchange_uuid_all"
              c:identifier="guestfs_session_vgchange_uuid_all"
              throws="1">
        <doc xml:space="preserve">generate new random UUIDs for all volume groups

Generate new random UUIDs for all volume groups.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vgcreate"
              c:identifier="guestfs_session_vgcreate"
              throws="1">
        <doc xml:space="preserve">create an LVM volume group

This creates an LVM volume group called @volgroup from the non-empty
list of physical volumes @physvols.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="volgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="physvols" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="filename"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="vglvuuids"
              c:identifier="guestfs_session_vglvuuids"
              throws="1">
        <doc xml:space="preserve">get the LV UUIDs of all LVs in the volume group

Given a VG called @vgname, this returns the UUIDs of all the logical
volumes created in this volume group.

You can use this along with guestfs_session_lvs() and
guestfs_session_lvuuid() calls to associate logical volumes and volume
groups.

See also guestfs_session_vgpvuuids().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vgname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgmeta" c:identifier="guestfs_session_vgmeta" throws="1">
        <doc xml:space="preserve">get volume group metadata

@vgname is an LVM volume group. This command examines the volume group
and returns its metadata.

Note that the metadata is an internal structure used by LVM, subject to
change at any time, and is provided for information only.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of binary data, or NULL on error</doc>
          <array length="1" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vgname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size_r"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The size of the returned buffer, in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgpvuuids"
              c:identifier="guestfs_session_vgpvuuids"
              throws="1">
        <doc xml:space="preserve">get the PV UUIDs containing the volume group

Given a VG called @vgname, this returns the UUIDs of all the physical
volumes that this volume group resides on.

You can use this along with guestfs_session_pvs() and
guestfs_session_pvuuid() calls to associate physical volumes and volume
groups.

See also guestfs_session_vglvuuids().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vgname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgremove"
              c:identifier="guestfs_session_vgremove"
              throws="1">
        <doc xml:space="preserve">remove an LVM volume group

Remove an LVM volume group @vgname, (for example @VG).

This also forcibly removes all logical volumes in the volume group (if
any).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vgname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgrename"
              c:identifier="guestfs_session_vgrename"
              throws="1">
        <doc xml:space="preserve">rename an LVM volume group

Rename a volume group @volgroup with the new name @newvolgroup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="volgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="newvolgroup" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vgs" c:identifier="guestfs_session_vgs" throws="1">
        <doc xml:space="preserve">list the LVM volume groups (VGs)

List all the volumes groups detected. This is the equivalent of the
vgs(8) command.

This returns a list of just the volume group names that were detected
(eg. @VolGroup00).

See also guestfs_session_vgs_full().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vgs_full"
              c:identifier="guestfs_session_vgs_full"
              throws="1">
        <doc xml:space="preserve">list the LVM volume groups (VGs)

List all the volumes groups detected. This is the equivalent of the
vgs(8) command. The "full" version includes all fields.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of VG objects, or NULL on error</doc>
          <array c:type="GuestfsVG**">
            <type name="VG"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vgscan" c:identifier="guestfs_session_vgscan" throws="1">
        <doc xml:space="preserve">rescan for LVM physical volumes, volume groups and logical volumes

This rescans all block devices and rebuilds the list of LVM physical
volumes, volume groups and logical volumes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vguuid" c:identifier="guestfs_session_vguuid" throws="1">
        <doc xml:space="preserve">get the UUID of a volume group

This command returns the UUID of the LVM VG named @vgname.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="vgname" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_ready"
              c:identifier="guestfs_session_wait_ready"
              throws="1">
        <doc xml:space="preserve">wait until the qemu subprocess launches (no op)

This function is a no op.

In versions of the API &amp;lt; 1.0.71 you had to call this function just
after calling guestfs_session_launch() to wait for the launch to
complete. However this is no longer necessary because
guestfs_session_launch() now does the waiting.

If you see any calls to this function in code then you can just remove
them, unless you want to retain compatibility with older versions of the
API.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wc_c" c:identifier="guestfs_session_wc_c" throws="1">
        <doc xml:space="preserve">count characters in a file

This command counts the characters in a file, using the "wc -c" external
command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wc_l" c:identifier="guestfs_session_wc_l" throws="1">
        <doc xml:space="preserve">count lines in a file

This command counts the lines in a file, using the "wc -l" external
command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wc_w" c:identifier="guestfs_session_wc_w" throws="1">
        <doc xml:space="preserve">count words in a file

This command counts the words in a file, using the "wc -w" external
command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wipefs" c:identifier="guestfs_session_wipefs" throws="1">
        <doc xml:space="preserve">wipe a filesystem signature from a device

This command erases filesystem or RAID signatures from the specified
@device to make the filesystem invisible to libblkid.

This does not erase the filesystem itself nor any other data from the
@device.

Compare with guestfs_session_zero() which zeroes the first few blocks of
a device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="guestfs_session_write" throws="1">
        <doc xml:space="preserve">create a new file

This call creates a file called @path. The content of the file is the
string @content (which can contain any 8 bit data).

See also guestfs_session_write_append().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="2" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="content_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of content, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_append"
              c:identifier="guestfs_session_write_append"
              throws="1">
        <doc xml:space="preserve">append content to end of file

This call appends @content to the end of file @path. If @path does not
exist, then a new file is created.

See also guestfs_session_write().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">an array of binary data</doc>
            <array length="2" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="content_size" transfer-ownership="none">
            <doc xml:space="preserve">The size of content, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_file"
              c:identifier="guestfs_session_write_file"
              throws="1">
        <doc xml:space="preserve">create a file

This call creates a file called @path. The contents of the file is the
string @content (which can contain any 8 bit data), with length @size.

As a special case, if @size is @0 then the length is calculated using
@strlen (so in this case the content cannot contain embedded ASCII
NULs).

*NB.* Owing to a bug, writing content containing ASCII NUL characters
does *not* work, even if the length is specified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfs_admin"
              c:identifier="guestfs_session_xfs_admin"
              throws="1">
        <doc xml:space="preserve">change parameters of an XFS filesystem

Change the parameters of the XFS filesystem on @device.

Devices that are mounted cannot be modified. Administrators must unmount
filesystems before this call can modify parameters.

Some of the parameters of a mounted filesystem can be examined and
modified using the guestfs_session_xfs_info() and
guestfs_session_xfs_growfs() calls.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsXfsAdmin containing optional arguments</doc>
            <type name="XfsAdmin" c:type="GuestfsXfsAdmin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfs_growfs"
              c:identifier="guestfs_session_xfs_growfs"
              throws="1">
        <doc xml:space="preserve">expand an existing XFS filesystem

Grow the XFS filesystem mounted at @path.

The returned struct contains geometry information. Missing fields are
returned as @-1 (for numeric fields) or empty string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsXfsGrowfs containing optional arguments</doc>
            <type name="XfsGrowfs" c:type="GuestfsXfsGrowfs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfs_info"
              c:identifier="guestfs_session_xfs_info"
              throws="1">
        <doc xml:space="preserve">get geometry of XFS filesystem

@pathordevice is a mounted XFS filesystem or a device containing an XFS
filesystem. This command returns the geometry of the filesystem.

The returned struct contains geometry information. Missing fields are
returned as @-1 (for numeric fields) or empty string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a XFSInfo object, or NULL on error</doc>
          <type name="XFSInfo" c:type="GuestfsXFSInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pathordevice" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="xfs_repair"
              c:identifier="guestfs_session_xfs_repair"
              throws="1">
        <doc xml:space="preserve">repair an XFS filesystem

Repair corrupt or damaged XFS filesystem on @device.

The filesystem is specified using the @device argument which should be
the device name of the disk partition or volume containing the
filesystem. If given the name of a block device, @xfs_repair will
attempt to find the raw device associated with the specified block
device and will use the raw device instead.

Regardless, the filesystem to be repaired must be unmounted, otherwise,
the resulting filesystem may be inconsistent or corrupt.

The returned status indicates whether filesystem corruption was detected
(returns @1) or was not detected (returns @0).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the returned value, or -1 on error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="optargs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a GuestfsXfsRepair containing optional arguments</doc>
            <type name="XfsRepair" c:type="GuestfsXfsRepair*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zegrep" c:identifier="guestfs_session_zegrep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @zegrep program and returns the matching lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zegrepi" c:identifier="guestfs_session_zegrepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "zegrep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zero" c:identifier="guestfs_session_zero" throws="1">
        <doc xml:space="preserve">write zeroes to the device

This command writes zeroes over the first few blocks of @device.

How many blocks are zeroed isn't specified (but it's *not* enough to
securely wipe the device). It should be sufficient to remove any
partition tables, filesystem superblocks and so on.

If blocks are already zero, then this command avoids writing zeroes.
This prevents the underlying device from becoming non-sparse or growing
unnecessarily.

See also: guestfs_session_zero_device(), guestfs_session_scrub_device(),
guestfs_session_is_zero_device()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zero_device"
              c:identifier="guestfs_session_zero_device"
              throws="1">
        <doc xml:space="preserve">write zeroes to an entire device

This command writes zeroes over the entire @device. Compare with
guestfs_session_zero() which just zeroes the first few blocks of a
device.

If blocks are already zero, then this command avoids writing zeroes.
This prevents the underlying device from becoming non-sparse or growing
unnecessarily.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zero_free_space"
              c:identifier="guestfs_session_zero_free_space"
              throws="1">
        <doc xml:space="preserve">zero free space in a filesystem

Zero the free space in the filesystem mounted on @directory. The
filesystem must be mounted read-write.

The filesystem contents are not affected, but any free space in the
filesystem is freed.

Free space is not "trimmed". You may want to call
guestfs_session_fstrim() either as an alternative to this, or after
calling this, depending on your requirements.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zerofree"
              c:identifier="guestfs_session_zerofree"
              throws="1">
        <doc xml:space="preserve">zero unused inodes and disk blocks on ext2/3 filesystem

This runs the *zerofree* program on @device. This program claims to zero
unused inodes and disk blocks on an ext2/3 filesystem, thus making it
possible to compress the filesystem more effectively.

You should not run this program if the filesystem is mounted.

It is possible that using this program can damage the filesystem or data
on the filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">true on success, false on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zfgrep" c:identifier="guestfs_session_zfgrep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @zfgrep program and returns the matching lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zfgrepi" c:identifier="guestfs_session_zfgrepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "zfgrep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zfile" c:identifier="guestfs_session_zfile" throws="1">
        <doc xml:space="preserve">determine file type inside a compressed file

This command runs @file after first decompressing @path using @method.

@method must be one of @gzip, @compress or @bzip2.

Since 1.0.63, use guestfs_session_file() instead which can now process
compressed files.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the returned string, or NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="meth" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zgrep" c:identifier="guestfs_session_zgrep" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external @zgrep program and returns the matching lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zgrepi" c:identifier="guestfs_session_zgrepi" throws="1">
        <doc xml:space="preserve">return lines matching a pattern

This calls the external "zgrep -i" program and returns the matching
lines.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of returned strings, or NULL on error</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A GuestfsSession object</doc>
            <type name="Session" c:type="GuestfsSession*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SessionPrivate" c:type="GuestfsSessionPrivate*"/>
      </field>
      <glib:signal name="appliance" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="close" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="enter" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="launch-done" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="library" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="libvirt-auth" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="progress" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="subprocess-quit" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="trace" when="last">
        <doc xml:space="preserve">See "SETTING CALLBACKS TO HANDLE EVENTS" in guestfs(3) for
more details about this event.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">An object containing event parameters</doc>
            <type name="SessionEventParams"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SessionClass"
            c:type="GuestfsSessionClass"
            glib:is-gtype-struct-for="Session">
      <doc xml:space="preserve">A class metadata object for GuestfsSession.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsSession</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SessionEvent"
                 glib:type-name="GuestfsSessionEvent"
                 glib:get-type="guestfs_session_event_get_type"
                 c:type="GuestfsSessionEvent">
      <doc xml:space="preserve">For more detail on libguestfs events, see "SETTING CALLBACKS TO HANDLE
EVENTS" in guestfs(3).</doc>
      <member name="close"
              value="0"
              c:identifier="GUESTFS_SESSION_EVENT_CLOSE"
              glib:nick="close">
        <doc xml:space="preserve">The close event</doc>
      </member>
      <member name="subprocess_quit"
              value="1"
              c:identifier="GUESTFS_SESSION_EVENT_SUBPROCESS_QUIT"
              glib:nick="subprocess_quit">
        <doc xml:space="preserve">The subprocess_quit event</doc>
      </member>
      <member name="launch_done"
              value="2"
              c:identifier="GUESTFS_SESSION_EVENT_LAUNCH_DONE"
              glib:nick="launch_done">
        <doc xml:space="preserve">The launch_done event</doc>
      </member>
      <member name="progress"
              value="3"
              c:identifier="GUESTFS_SESSION_EVENT_PROGRESS"
              glib:nick="progress">
        <doc xml:space="preserve">The progress event</doc>
      </member>
      <member name="appliance"
              value="4"
              c:identifier="GUESTFS_SESSION_EVENT_APPLIANCE"
              glib:nick="appliance">
        <doc xml:space="preserve">The appliance event</doc>
      </member>
      <member name="library"
              value="5"
              c:identifier="GUESTFS_SESSION_EVENT_LIBRARY"
              glib:nick="library">
        <doc xml:space="preserve">The library event</doc>
      </member>
      <member name="trace"
              value="6"
              c:identifier="GUESTFS_SESSION_EVENT_TRACE"
              glib:nick="trace">
        <doc xml:space="preserve">The trace event</doc>
      </member>
      <member name="enter"
              value="7"
              c:identifier="GUESTFS_SESSION_EVENT_ENTER"
              glib:nick="enter">
        <doc xml:space="preserve">The enter event</doc>
      </member>
      <member name="libvirt_auth"
              value="8"
              c:identifier="GUESTFS_SESSION_EVENT_LIBVIRT_AUTH"
              glib:nick="libvirt_auth">
        <doc xml:space="preserve">The libvirt_auth event</doc>
      </member>
    </enumeration>
    <record name="SessionEventParams"
            c:type="GuestfsSessionEventParams"
            glib:type-name="GuestfsSessionEventParams"
            glib:get-type="guestfs_session_event_params_get_type"
            c:symbol-prefix="session_event_params">
      <field name="event" writable="1">
        <doc xml:space="preserve">The event</doc>
        <type name="SessionEvent" c:type="GuestfsSessionEvent"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve">Unused</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="buf" writable="1">
        <doc xml:space="preserve">A message buffer. This buffer can contain arbitrary 8 bit data,
      including NUL bytes</doc>
        <array name="GLib.ByteArray" c:type="GByteArray*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
      <field name="array" writable="1">
        <doc xml:space="preserve">An array of 64-bit unsigned integers</doc>
        <array zero-terminated="0" c:type="guint64" fixed-size="16">
          <type name="guint64" c:type="guint64"/>
        </array>
      </field>
      <field name="array_len" writable="1">
        <doc xml:space="preserve">The length of @array</doc>
        <type name="gulong" c:type="size_t"/>
      </field>
    </record>
    <record name="SessionPrivate" c:type="GuestfsSessionPrivate" disguised="1">
    </record>
    <class name="SetE2attrs"
           c:symbol-prefix="set_e2attrs"
           c:type="GuestfsSetE2attrs"
           parent="GObject.Object"
           glib:type-name="GuestfsSetE2attrs"
           glib:get-type="guestfs_set_e2attrs_get_type"
           glib:type-struct="SetE2attrsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_set_e2attrs.</doc>
      <constructor name="new" c:identifier="guestfs_set_e2attrs_new">
        <doc xml:space="preserve">Create a new GuestfsSetE2attrs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsSetE2attrs object</doc>
          <type name="SetE2attrs" c:type="GuestfsSetE2attrs*"/>
        </return-value>
      </constructor>
      <property name="clear"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SetE2attrsPrivate" c:type="GuestfsSetE2attrsPrivate*"/>
      </field>
    </class>
    <record name="SetE2attrsClass"
            c:type="GuestfsSetE2attrsClass"
            glib:is-gtype-struct-for="SetE2attrs">
      <doc xml:space="preserve">A class metadata object for GuestfsSetE2attrs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsSetE2attrsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SetE2attrsPrivate"
            c:type="GuestfsSetE2attrsPrivate"
            disguised="1">
    </record>
    <record name="Stat"
            c:type="GuestfsStat"
            glib:type-name="GuestfsStat"
            glib:get-type="guestfs_stat_get_type"
            c:symbol-prefix="stat">
      <field name="dev" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="ino" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="mode" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="nlink" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="uid" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="gid" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="rdev" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="blksize" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="blocks" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="atime" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="mtime" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="ctime" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <record name="StatVFS"
            c:type="GuestfsStatVFS"
            glib:type-name="GuestfsStatVFS"
            glib:get-type="guestfs_statvfs_get_type"
            c:symbol-prefix="statvfs">
      <field name="bsize" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="frsize" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="blocks" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="bfree" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="bavail" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="files" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="ffree" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="favail" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="fsid" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="flag" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="namemax" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <class name="Syslinux"
           c:symbol-prefix="syslinux"
           c:type="GuestfsSyslinux"
           parent="GObject.Object"
           glib:type-name="GuestfsSyslinux"
           glib:get-type="guestfs_syslinux_get_type"
           glib:type-struct="SyslinuxClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_syslinux.</doc>
      <constructor name="new" c:identifier="guestfs_syslinux_new">
        <doc xml:space="preserve">Create a new GuestfsSyslinux object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsSyslinux object</doc>
          <type name="Syslinux" c:type="GuestfsSyslinux*"/>
        </return-value>
      </constructor>
      <property name="directory"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SyslinuxPrivate" c:type="GuestfsSyslinuxPrivate*"/>
      </field>
    </class>
    <record name="SyslinuxClass"
            c:type="GuestfsSyslinuxClass"
            glib:is-gtype-struct-for="Syslinux">
      <doc xml:space="preserve">A class metadata object for GuestfsSyslinux.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsSyslinuxClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SyslinuxPrivate"
            c:type="GuestfsSyslinuxPrivate"
            disguised="1">
    </record>
    <class name="TarIn"
           c:symbol-prefix="tar_in"
           c:type="GuestfsTarIn"
           parent="GObject.Object"
           glib:type-name="GuestfsTarIn"
           glib:get-type="guestfs_tar_in_get_type"
           glib:type-struct="TarInClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_tar_in.</doc>
      <constructor name="new" c:identifier="guestfs_tar_in_new">
        <doc xml:space="preserve">Create a new GuestfsTarIn object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsTarIn object</doc>
          <type name="TarIn" c:type="GuestfsTarIn*"/>
        </return-value>
      </constructor>
      <property name="compress"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TarInPrivate" c:type="GuestfsTarInPrivate*"/>
      </field>
    </class>
    <record name="TarInClass"
            c:type="GuestfsTarInClass"
            glib:is-gtype-struct-for="TarIn">
      <doc xml:space="preserve">A class metadata object for GuestfsTarIn.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsTarInClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TarInPrivate" c:type="GuestfsTarInPrivate" disguised="1">
    </record>
    <class name="TarOut"
           c:symbol-prefix="tar_out"
           c:type="GuestfsTarOut"
           parent="GObject.Object"
           glib:type-name="GuestfsTarOut"
           glib:get-type="guestfs_tar_out_get_type"
           glib:type-struct="TarOutClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_tar_out.</doc>
      <constructor name="new" c:identifier="guestfs_tar_out_new">
        <doc xml:space="preserve">Create a new GuestfsTarOut object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsTarOut object</doc>
          <type name="TarOut" c:type="GuestfsTarOut*"/>
        </return-value>
      </constructor>
      <property name="compress"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="numericowner"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TarOutPrivate" c:type="GuestfsTarOutPrivate*"/>
      </field>
    </class>
    <record name="TarOutClass"
            c:type="GuestfsTarOutClass"
            glib:is-gtype-struct-for="TarOut">
      <doc xml:space="preserve">A class metadata object for GuestfsTarOut.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsTarOutClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TarOutPrivate" c:type="GuestfsTarOutPrivate" disguised="1">
    </record>
    <enumeration name="Tristate"
                 glib:type-name="GuestfsTristate"
                 glib:get-type="guestfs_tristate_get_type"
                 c:type="GuestfsTristate">
      <doc xml:space="preserve">An object representing a tristate: i.e. true, false, or unset. If a language
binding has a native concept of true and false which also correspond to the
integer values 1 and 0 respectively, these will also correspond to
GUESTFS_TRISTATE_TRUE and GUESTFS_TRISTATE_FALSE.</doc>
      <member name="false"
              value="0"
              c:identifier="GUESTFS_TRISTATE_FALSE"
              glib:nick="false">
        <doc xml:space="preserve">False</doc>
      </member>
      <member name="true"
              value="1"
              c:identifier="GUESTFS_TRISTATE_TRUE"
              glib:nick="true">
        <doc xml:space="preserve">True</doc>
      </member>
      <member name="none"
              value="2"
              c:identifier="GUESTFS_TRISTATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Unset</doc>
      </member>
    </enumeration>
    <class name="Tune2FS"
           c:symbol-prefix="tune2fs"
           c:type="GuestfsTune2FS"
           parent="GObject.Object"
           glib:type-name="GuestfsTune2FS"
           glib:get-type="guestfs_tune2fs_get_type"
           glib:type-struct="Tune2FSClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_tune2fs.</doc>
      <constructor name="new" c:identifier="guestfs_tune2fs_new">
        <doc xml:space="preserve">Create a new GuestfsTune2FS object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsTune2FS object</doc>
          <type name="Tune2FS" c:type="GuestfsTune2FS*"/>
        </return-value>
      </constructor>
      <property name="errorbehavior"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="force"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="group"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="intervalbetweenchecks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="lastmounteddirectory"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="maxmountcount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="mountcount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="reservedblockscount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="reservedblockspercentage"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="user"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="Tune2FSPrivate" c:type="GuestfsTune2FSPrivate*"/>
      </field>
    </class>
    <record name="Tune2FSClass"
            c:type="GuestfsTune2FSClass"
            glib:is-gtype-struct-for="Tune2FS">
      <doc xml:space="preserve">A class metadata object for GuestfsTune2FS.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsTune2FSClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Tune2FSPrivate" c:type="GuestfsTune2FSPrivate" disguised="1">
    </record>
    <record name="UTSName"
            c:type="GuestfsUTSName"
            glib:type-name="GuestfsUTSName"
            glib:get-type="guestfs_utsname_get_type"
            c:symbol-prefix="utsname">
      <field name="uts_sysname" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uts_release" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uts_version" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uts_machine" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="Umount"
           c:symbol-prefix="umount"
           c:type="GuestfsUmount"
           parent="GObject.Object"
           glib:type-name="GuestfsUmount"
           glib:get-type="guestfs_umount_get_type"
           glib:type-struct="UmountClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_umount.</doc>
      <constructor name="new" c:identifier="guestfs_umount_new">
        <doc xml:space="preserve">Create a new GuestfsUmount object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsUmount object</doc>
          <type name="Umount" c:type="GuestfsUmount*"/>
        </return-value>
      </constructor>
      <property name="force"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="lazyunmount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="UmountPrivate" c:type="GuestfsUmountPrivate*"/>
      </field>
    </class>
    <record name="UmountClass"
            c:type="GuestfsUmountClass"
            glib:is-gtype-struct-for="Umount">
      <doc xml:space="preserve">A class metadata object for GuestfsUmount.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsUmountClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UmountLocal"
           c:symbol-prefix="umount_local"
           c:type="GuestfsUmountLocal"
           parent="GObject.Object"
           glib:type-name="GuestfsUmountLocal"
           glib:get-type="guestfs_umount_local_get_type"
           glib:type-struct="UmountLocalClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_umount_local.</doc>
      <constructor name="new" c:identifier="guestfs_umount_local_new">
        <doc xml:space="preserve">Create a new GuestfsUmountLocal object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsUmountLocal object</doc>
          <type name="UmountLocal" c:type="GuestfsUmountLocal*"/>
        </return-value>
      </constructor>
      <property name="retry"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="UmountLocalPrivate" c:type="GuestfsUmountLocalPrivate*"/>
      </field>
    </class>
    <record name="UmountLocalClass"
            c:type="GuestfsUmountLocalClass"
            glib:is-gtype-struct-for="UmountLocal">
      <doc xml:space="preserve">A class metadata object for GuestfsUmountLocal.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsUmountLocalClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="UmountLocalPrivate"
            c:type="GuestfsUmountLocalPrivate"
            disguised="1">
    </record>
    <record name="UmountPrivate" c:type="GuestfsUmountPrivate" disguised="1">
    </record>
    <record name="VG"
            c:type="GuestfsVG"
            glib:type-name="GuestfsVG"
            glib:get-type="guestfs_lvm_vg_get_type"
            c:symbol-prefix="lvm_vg">
      <field name="vg_name" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vg_uuid" writable="1">
        <doc xml:space="preserve">A 32 byte UUID. Note that this is not NULL-terminated</doc>
        <array zero-terminated="0" c:type="gchar" fixed-size="32">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="vg_fmt" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vg_attr" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vg_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="vg_free" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="vg_sysid" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vg_extent_size" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="vg_extent_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="vg_free_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="max_lv" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="max_pv" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pv_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="lv_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="snap_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="vg_seqno" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="vg_tags" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vg_mda_count" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="vg_mda_free" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <record name="Version"
            c:type="GuestfsVersion"
            glib:type-name="GuestfsVersion"
            glib:get-type="guestfs_version_get_type"
            c:symbol-prefix="version">
      <field name="major" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="minor" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="release" writable="1">
        <doc xml:space="preserve">A signed 64-bit integer</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="extra" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <record name="XAttr"
            c:type="GuestfsXAttr"
            glib:type-name="GuestfsXAttr"
            glib:get-type="guestfs_xattr_get_type"
            c:symbol-prefix="xattr">
      <field name="attrname" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="attrval" writable="1">
        <doc xml:space="preserve">A GByteArray</doc>
        <array name="GLib.ByteArray" c:type="GByteArray*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
    </record>
    <record name="XFSInfo"
            c:type="GuestfsXFSInfo"
            glib:type-name="GuestfsXFSInfo"
            glib:get-type="guestfs_xfsinfo_get_type"
            c:symbol-prefix="xfsinfo">
      <field name="xfs_mntpoint" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="xfs_inodesize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_agcount" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_agsize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_sectsize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_attr" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_blocksize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_datablocks" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="xfs_imaxpct" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_sunit" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_swidth" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_dirversion" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_dirblocksize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_cimode" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_logname" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="xfs_logblocksize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_logblocks" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_logversion" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_logsectsize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_logsunit" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_lazycount" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_rtname" writable="1">
        <doc xml:space="preserve">A NULL-terminated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="xfs_rtextsize" writable="1">
        <doc xml:space="preserve">An unsigned 32-bit integer</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="xfs_rtblocks" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="xfs_rtextents" writable="1">
        <doc xml:space="preserve">An unsigned 64-bit integer</doc>
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <class name="XfsAdmin"
           c:symbol-prefix="xfs_admin"
           c:type="GuestfsXfsAdmin"
           parent="GObject.Object"
           glib:type-name="GuestfsXfsAdmin"
           glib:get-type="guestfs_xfs_admin_get_type"
           glib:type-struct="XfsAdminClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_xfs_admin.</doc>
      <constructor name="new" c:identifier="guestfs_xfs_admin_new">
        <doc xml:space="preserve">Create a new GuestfsXfsAdmin object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsXfsAdmin object</doc>
          <type name="XfsAdmin" c:type="GuestfsXfsAdmin*"/>
        </return-value>
      </constructor>
      <property name="extunwritten"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="imgfile"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="label"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lazycounter"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="projid32bit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="uuid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="v2log"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="XfsAdminPrivate" c:type="GuestfsXfsAdminPrivate*"/>
      </field>
    </class>
    <record name="XfsAdminClass"
            c:type="GuestfsXfsAdminClass"
            glib:is-gtype-struct-for="XfsAdmin">
      <doc xml:space="preserve">A class metadata object for GuestfsXfsAdmin.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsXfsAdminClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="XfsAdminPrivate"
            c:type="GuestfsXfsAdminPrivate"
            disguised="1">
    </record>
    <class name="XfsGrowfs"
           c:symbol-prefix="xfs_growfs"
           c:type="GuestfsXfsGrowfs"
           parent="GObject.Object"
           glib:type-name="GuestfsXfsGrowfs"
           glib:get-type="guestfs_xfs_growfs_get_type"
           glib:type-struct="XfsGrowfsClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_xfs_growfs.</doc>
      <constructor name="new" c:identifier="guestfs_xfs_growfs_new">
        <doc xml:space="preserve">Create a new GuestfsXfsGrowfs object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsXfsGrowfs object</doc>
          <type name="XfsGrowfs" c:type="GuestfsXfsGrowfs*"/>
        </return-value>
      </constructor>
      <property name="datasec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="datasize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="logsec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="logsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="maxpct"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 32-bit integer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="rtextsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="rtsec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="rtsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="XfsGrowfsPrivate" c:type="GuestfsXfsGrowfsPrivate*"/>
      </field>
    </class>
    <record name="XfsGrowfsClass"
            c:type="GuestfsXfsGrowfsClass"
            glib:is-gtype-struct-for="XfsGrowfs">
      <doc xml:space="preserve">A class metadata object for GuestfsXfsGrowfs.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsXfsGrowfsClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="XfsGrowfsPrivate"
            c:type="GuestfsXfsGrowfsPrivate"
            disguised="1">
    </record>
    <class name="XfsRepair"
           c:symbol-prefix="xfs_repair"
           c:type="GuestfsXfsRepair"
           parent="GObject.Object"
           glib:type-name="GuestfsXfsRepair"
           glib:get-type="guestfs_xfs_repair_get_type"
           glib:type-struct="XfsRepairClass">
      <doc xml:space="preserve">An object encapsulating optional arguments for guestfs_session_xfs_repair.</doc>
      <constructor name="new" c:identifier="guestfs_xfs_repair_new">
        <doc xml:space="preserve">Create a new GuestfsXfsRepair object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new GuestfsXfsRepair object</doc>
          <type name="XfsRepair" c:type="GuestfsXfsRepair*"/>
        </return-value>
      </constructor>
      <property name="agstride"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="bhashsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="forcegeometry"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="forcelogzero"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="ihashsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="logdev"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="maxmem"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A 64-bit integer.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="nomodify"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="noprefetch"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A boolean.</doc>
        <type name="Tristate"/>
      </property>
      <property name="rtdev"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="XfsRepairPrivate" c:type="GuestfsXfsRepairPrivate*"/>
      </field>
    </class>
    <record name="XfsRepairClass"
            c:type="GuestfsXfsRepairClass"
            glib:is-gtype-struct-for="XfsRepair">
      <doc xml:space="preserve">A class metadata object for GuestfsXfsRepair.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The superclass of GuestfsXfsRepairClass</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="XfsRepairPrivate"
            c:type="GuestfsXfsRepairPrivate"
            disguised="1">
    </record>
  </namespace>
</repository>
