<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="libmsi-1.0"/>
  <c:include name="libmsi.h"/>
  <namespace name="Libmsi"
             version="1.0"
             shared-library="libmsi-0.dll"
             c:identifier-prefixes="Libmsi"
             c:symbol-prefixes="libmsi">
    <enumeration name="ColInfo"
                 glib:type-name="LibmsiColInfo"
                 glib:get-type="libmsi_col_info_get_type"
                 c:type="LibmsiColInfo">
      <member name="names"
              value="0"
              c:identifier="LIBMSI_COL_INFO_NAMES"
              glib:nick="names">
      </member>
      <member name="types"
              value="1"
              c:identifier="LIBMSI_COL_INFO_TYPES"
              glib:nick="types">
      </member>
    </enumeration>
    <enumeration name="DBError"
                 glib:type-name="LibmsiDBError"
                 glib:get-type="libmsi_db_error_get_type"
                 c:type="LibmsiDBError"
                 glib:error-domain="libmsi-db-error-quark">
      <member name="success"
              value="0"
              c:identifier="LIBMSI_DB_ERROR_SUCCESS"
              glib:nick="success">
      </member>
      <member name="invalidarg"
              value="1"
              c:identifier="LIBMSI_DB_ERROR_INVALIDARG"
              glib:nick="invalidarg">
      </member>
      <member name="moredata"
              value="2"
              c:identifier="LIBMSI_DB_ERROR_MOREDATA"
              glib:nick="moredata">
      </member>
      <member name="functionerror"
              value="3"
              c:identifier="LIBMSI_DB_ERROR_FUNCTIONERROR"
              glib:nick="functionerror">
      </member>
      <member name="duplicatekey"
              value="4"
              c:identifier="LIBMSI_DB_ERROR_DUPLICATEKEY"
              glib:nick="duplicatekey">
      </member>
      <member name="required"
              value="5"
              c:identifier="LIBMSI_DB_ERROR_REQUIRED"
              glib:nick="required">
      </member>
      <member name="badlink"
              value="6"
              c:identifier="LIBMSI_DB_ERROR_BADLINK"
              glib:nick="badlink">
      </member>
      <member name="overflow"
              value="7"
              c:identifier="LIBMSI_DB_ERROR_OVERFLOW"
              glib:nick="overflow">
      </member>
      <member name="underflow"
              value="8"
              c:identifier="LIBMSI_DB_ERROR_UNDERFLOW"
              glib:nick="underflow">
      </member>
      <member name="notinset"
              value="9"
              c:identifier="LIBMSI_DB_ERROR_NOTINSET"
              glib:nick="notinset">
      </member>
      <member name="badversion"
              value="10"
              c:identifier="LIBMSI_DB_ERROR_BADVERSION"
              glib:nick="badversion">
      </member>
      <member name="badcase"
              value="11"
              c:identifier="LIBMSI_DB_ERROR_BADCASE"
              glib:nick="badcase">
      </member>
      <member name="badguid"
              value="12"
              c:identifier="LIBMSI_DB_ERROR_BADGUID"
              glib:nick="badguid">
      </member>
      <member name="badwildcard"
              value="13"
              c:identifier="LIBMSI_DB_ERROR_BADWILDCARD"
              glib:nick="badwildcard">
      </member>
      <member name="badidentifier"
              value="14"
              c:identifier="LIBMSI_DB_ERROR_BADIDENTIFIER"
              glib:nick="badidentifier">
      </member>
      <member name="badlanguage"
              value="15"
              c:identifier="LIBMSI_DB_ERROR_BADLANGUAGE"
              glib:nick="badlanguage">
      </member>
      <member name="badfilename"
              value="16"
              c:identifier="LIBMSI_DB_ERROR_BADFILENAME"
              glib:nick="badfilename">
      </member>
      <member name="badpath"
              value="17"
              c:identifier="LIBMSI_DB_ERROR_BADPATH"
              glib:nick="badpath">
      </member>
      <member name="badcondition"
              value="18"
              c:identifier="LIBMSI_DB_ERROR_BADCONDITION"
              glib:nick="badcondition">
      </member>
      <member name="badformatted"
              value="19"
              c:identifier="LIBMSI_DB_ERROR_BADFORMATTED"
              glib:nick="badformatted">
      </member>
      <member name="badtemplate"
              value="20"
              c:identifier="LIBMSI_DB_ERROR_BADTEMPLATE"
              glib:nick="badtemplate">
      </member>
      <member name="baddefaultdir"
              value="21"
              c:identifier="LIBMSI_DB_ERROR_BADDEFAULTDIR"
              glib:nick="baddefaultdir">
      </member>
      <member name="badregpath"
              value="22"
              c:identifier="LIBMSI_DB_ERROR_BADREGPATH"
              glib:nick="badregpath">
      </member>
      <member name="badcustomsource"
              value="23"
              c:identifier="LIBMSI_DB_ERROR_BADCUSTOMSOURCE"
              glib:nick="badcustomsource">
      </member>
      <member name="badproperty"
              value="24"
              c:identifier="LIBMSI_DB_ERROR_BADPROPERTY"
              glib:nick="badproperty">
      </member>
      <member name="missingdata"
              value="25"
              c:identifier="LIBMSI_DB_ERROR_MISSINGDATA"
              glib:nick="missingdata">
      </member>
      <member name="badcategory"
              value="26"
              c:identifier="LIBMSI_DB_ERROR_BADCATEGORY"
              glib:nick="badcategory">
      </member>
      <member name="badkeytable"
              value="27"
              c:identifier="LIBMSI_DB_ERROR_BADKEYTABLE"
              glib:nick="badkeytable">
      </member>
      <member name="badmaxminvalues"
              value="28"
              c:identifier="LIBMSI_DB_ERROR_BADMAXMINVALUES"
              glib:nick="badmaxminvalues">
      </member>
      <member name="badcabinet"
              value="29"
              c:identifier="LIBMSI_DB_ERROR_BADCABINET"
              glib:nick="badcabinet">
      </member>
      <member name="badshortcut"
              value="30"
              c:identifier="LIBMSI_DB_ERROR_BADSHORTCUT"
              glib:nick="badshortcut">
      </member>
      <member name="stringoverflow"
              value="31"
              c:identifier="LIBMSI_DB_ERROR_STRINGOVERFLOW"
              glib:nick="stringoverflow">
      </member>
      <member name="badlocalizeattrib"
              value="32"
              c:identifier="LIBMSI_DB_ERROR_BADLOCALIZEATTRIB"
              glib:nick="badlocalizeattrib">
      </member>
      <function name="quark" c:identifier="libmsi_db_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Database"
           c:symbol-prefix="database"
           c:type="LibmsiDatabase"
           parent="GObject.Object"
           glib:type-name="LibmsiDatabase"
           glib:get-type="libmsi_database_get_type"
           glib:type-struct="DatabaseClass">
      <constructor name="new" c:identifier="libmsi_database_new" throws="1">
        <doc xml:space="preserve">Create a MSI database or open from @path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #LibmsiDatabase on success, %NULL if fail.</doc>
          <type name="Database" c:type="LibmsiDatabase*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path to a MSI file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">#LibmsiDbFlags opening flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="persist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">path to output MSI file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="apply_transform"
              c:identifier="libmsi_database_apply_transform"
              throws="1">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">an MST transform file path</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit" c:identifier="libmsi_database_commit" throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="export" c:identifier="libmsi_database_export" throws="1">
        <doc xml:space="preserve">Writes a file containing the table data as tab separated ASCII.
The format is as follows:

row1 : colname1 &lt;tab&gt; colname2 &lt;tab&gt; .... colnameN &lt;cr&gt; &lt;lf&gt;
row2 : coltype1 &lt;tab&gt; coltype2 &lt;tab&gt; .... coltypeN &lt;cr&gt; &lt;lf&gt;
row3 : tablename &lt;tab&gt; key1 &lt;tab&gt; key2 &lt;tab&gt; ... keyM &lt;cr&gt; &lt;lf&gt;

Followed by the data, starting at row 1 with one row per line

row4 : data &lt;tab&gt; data &lt;tab&gt; data &lt;tab&gt; ... data &lt;cr&gt; &lt;lf&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">a table name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">a file descriptor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_primary_keys"
              c:identifier="libmsi_database_get_primary_keys"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a %LibmsiRecord containing the names of all the primary
key columns.</doc>
          <type name="Record" c:type="LibmsiRecord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">an exisiting table name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="import" c:identifier="libmsi_database_import" throws="1">
        <doc xml:space="preserve">Import a table to the database from file @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path to a table file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_readonly" c:identifier="libmsi_database_is_readonly">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the database is read-only.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_table_persistent"
              c:identifier="libmsi_database_is_table_persistent"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @table is persistent, %FALSE if it's temporary</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">an exisiting table name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="libmsi_database_merge" throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase to merge into</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </instance-parameter>
          <parameter name="merge" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiDatabase to merge</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </parameter>
          <parameter name="table"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an optionnal table name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DbFlags"/>
      </property>
      <property name="outpath"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DatabaseClass"
            c:type="LibmsiDatabaseClass"
            glib:is-gtype-struct-for="Database">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="DbFlags"
              glib:type-name="LibmsiDbFlags"
              glib:get-type="libmsi_db_flags_get_type"
              c:type="LibmsiDbFlags">
      <member name="readonly"
              value="1"
              c:identifier="LIBMSI_DB_FLAGS_READONLY"
              glib:nick="readonly">
      </member>
      <member name="create"
              value="2"
              c:identifier="LIBMSI_DB_FLAGS_CREATE"
              glib:nick="create">
      </member>
      <member name="transact"
              value="4"
              c:identifier="LIBMSI_DB_FLAGS_TRANSACT"
              glib:nick="transact">
      </member>
      <member name="patch"
              value="8"
              c:identifier="LIBMSI_DB_FLAGS_PATCH"
              glib:nick="patch">
      </member>
    </bitfield>
    <constant name="NULL_INT" value="2147483648" c:type="LIBMSI_NULL_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Property"
                 glib:type-name="LibmsiProperty"
                 glib:get-type="libmsi_property_get_type"
                 c:type="LibmsiProperty">
      <member name="dictionary"
              value="0"
              c:identifier="LIBMSI_PROPERTY_DICTIONARY"
              glib:nick="dictionary">
      </member>
      <member name="codepage"
              value="1"
              c:identifier="LIBMSI_PROPERTY_CODEPAGE"
              glib:nick="codepage">
      </member>
      <member name="title"
              value="2"
              c:identifier="LIBMSI_PROPERTY_TITLE"
              glib:nick="title">
      </member>
      <member name="subject"
              value="3"
              c:identifier="LIBMSI_PROPERTY_SUBJECT"
              glib:nick="subject">
      </member>
      <member name="author"
              value="4"
              c:identifier="LIBMSI_PROPERTY_AUTHOR"
              glib:nick="author">
      </member>
      <member name="keywords"
              value="5"
              c:identifier="LIBMSI_PROPERTY_KEYWORDS"
              glib:nick="keywords">
      </member>
      <member name="comments"
              value="6"
              c:identifier="LIBMSI_PROPERTY_COMMENTS"
              glib:nick="comments">
      </member>
      <member name="template"
              value="7"
              c:identifier="LIBMSI_PROPERTY_TEMPLATE"
              glib:nick="template">
      </member>
      <member name="lastauthor"
              value="8"
              c:identifier="LIBMSI_PROPERTY_LASTAUTHOR"
              glib:nick="lastauthor">
      </member>
      <member name="uuid"
              value="9"
              c:identifier="LIBMSI_PROPERTY_UUID"
              glib:nick="uuid">
      </member>
      <member name="edittime"
              value="10"
              c:identifier="LIBMSI_PROPERTY_EDITTIME"
              glib:nick="edittime">
      </member>
      <member name="lastprinted"
              value="11"
              c:identifier="LIBMSI_PROPERTY_LASTPRINTED"
              glib:nick="lastprinted">
      </member>
      <member name="created_tm"
              value="12"
              c:identifier="LIBMSI_PROPERTY_CREATED_TM"
              glib:nick="created-tm">
      </member>
      <member name="lastsaved_tm"
              value="13"
              c:identifier="LIBMSI_PROPERTY_LASTSAVED_TM"
              glib:nick="lastsaved-tm">
      </member>
      <member name="version"
              value="14"
              c:identifier="LIBMSI_PROPERTY_VERSION"
              glib:nick="version">
      </member>
      <member name="source"
              value="15"
              c:identifier="LIBMSI_PROPERTY_SOURCE"
              glib:nick="source">
      </member>
      <member name="restrict"
              value="16"
              c:identifier="LIBMSI_PROPERTY_RESTRICT"
              glib:nick="restrict">
      </member>
      <member name="thumbnail"
              value="17"
              c:identifier="LIBMSI_PROPERTY_THUMBNAIL"
              glib:nick="thumbnail">
      </member>
      <member name="appname"
              value="18"
              c:identifier="LIBMSI_PROPERTY_APPNAME"
              glib:nick="appname">
      </member>
      <member name="security"
              value="19"
              c:identifier="LIBMSI_PROPERTY_SECURITY"
              glib:nick="security">
      </member>
    </enumeration>
    <enumeration name="PropertyType"
                 glib:type-name="LibmsiPropertyType"
                 glib:get-type="libmsi_property_type_get_type"
                 c:type="LibmsiPropertyType">
      <member name="empty"
              value="0"
              c:identifier="LIBMSI_PROPERTY_TYPE_EMPTY"
              glib:nick="empty">
      </member>
      <member name="int"
              value="1"
              c:identifier="LIBMSI_PROPERTY_TYPE_INT"
              glib:nick="int">
      </member>
      <member name="string"
              value="2"
              c:identifier="LIBMSI_PROPERTY_TYPE_STRING"
              glib:nick="string">
      </member>
      <member name="filetime"
              value="3"
              c:identifier="LIBMSI_PROPERTY_TYPE_FILETIME"
              glib:nick="filetime">
      </member>
    </enumeration>
    <class name="Query"
           c:symbol-prefix="query"
           c:type="LibmsiQuery"
           parent="GObject.Object"
           glib:type-name="LibmsiQuery"
           glib:get-type="libmsi_query_get_type"
           glib:type-struct="QueryClass">
      <constructor name="new" c:identifier="libmsi_query_new" throws="1">
        <doc xml:space="preserve">Create a SQL query for @database.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new %LibmsiQuery on success, %NULL on failure</doc>
          <type name="Query" c:type="LibmsiQuery*"/>
        </return-value>
        <parameters>
          <parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a SQL query</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close" c:identifier="libmsi_query_close" throws="1">
        <doc xml:space="preserve">Release the current result set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiQuery</doc>
            <type name="Query" c:type="LibmsiQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute" c:identifier="libmsi_query_execute" throws="1">
        <doc xml:space="preserve">Execute the @query with the arguments from @rec.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiQuery</doc>
            <type name="Query" c:type="LibmsiQuery*"/>
          </instance-parameter>
          <parameter name="rec"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #LibmsiRecord containing query arguments, or
    %NULL if no arguments needed</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch" c:identifier="libmsi_query_fetch" throws="1">
        <doc xml:space="preserve">Return the next query result. %NULL is returned when there
is no more results.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated
    #LibmsiRecord or %NULL when no results or failure.</doc>
          <type name="Record" c:type="LibmsiRecord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiQuery</doc>
            <type name="Query" c:type="LibmsiQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_column_info"
              c:identifier="libmsi_query_get_column_info"
              throws="1">
        <doc xml:space="preserve">Get column informations, returned as record string fields.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated #LibmsiRecord
containing informations or %NULL on error.</doc>
          <type name="Record" c:type="LibmsiRecord*"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiQuery</doc>
            <type name="Query" c:type="LibmsiQuery*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiColInfo specifying the type of information to return</doc>
            <type name="ColInfo" c:type="LibmsiColInfo"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_error"
              c:identifier="libmsi_query_get_error"
              throws="1">
        <doc xml:space="preserve">Call this to get more information on the last query error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiQuery</doc>
            <type name="Query" c:type="LibmsiQuery*"/>
          </instance-parameter>
          <parameter name="column"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">location to store the allocated column name</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Database"/>
      </property>
      <property name="query"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="QueryClass"
            c:type="LibmsiQueryClass"
            glib:is-gtype-struct-for="Query">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Record"
           c:symbol-prefix="record"
           c:type="LibmsiRecord"
           parent="GObject.Object"
           glib:type-name="LibmsiRecord"
           glib:get-type="libmsi_record_get_type"
           glib:type-struct="RecordClass">
      <constructor name="new" c:identifier="libmsi_record_new">
        <return-value transfer-ownership="full">
          <type name="Record" c:type="LibmsiRecord*"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clear" c:identifier="libmsi_record_clear">
        <doc xml:space="preserve">Clear record fields.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_field_count"
              c:identifier="libmsi_record_get_field_count">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of record fields.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="const LibmsiRecord*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="libmsi_record_get_int">
        <doc xml:space="preserve">Get the integer value of %field. If the field is a string
representing an integer, it will be converted to an integer value.
Other values and types will return %LIBMSI_NULL_INT.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The integer value, or %LIBMSI_NULL_INT if the field is
not an integer.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="const LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stream" c:identifier="libmsi_record_get_stream">
        <doc xml:space="preserve">Get the stream associated with the given record @field.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GInputStream</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="libmsi_record_get_string">
        <doc xml:space="preserve">Get a string representation of %field.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string, or %NULL on error.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="const LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_null" c:identifier="libmsi_record_is_null">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the field is null (or %field &gt; record field count)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="const LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_stream" c:identifier="libmsi_record_load_stream">
        <doc xml:space="preserve">Load the file content as a stream in @field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="libmsi_record_set_int">
        <doc xml:space="preserve">Set the %field to the integer value %val.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">value to set field to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stream"
              c:identifier="libmsi_record_set_stream"
              throws="1">
        <doc xml:space="preserve">Set the stream content from @input stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve">a #GInputStream</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve">the number of bytes to read from @input</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="libmsi_record_set_string">
        <doc xml:space="preserve">Set the %field value to %val string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="record" transfer-ownership="none">
            <doc xml:space="preserve">a %LibmsiRecord</doc>
            <type name="Record" c:type="LibmsiRecord*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a string or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="count"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="RecordClass"
            c:type="LibmsiRecordClass"
            glib:is-gtype-struct-for="Record">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ResultError"
                 glib:type-name="LibmsiResultError"
                 glib:get-type="libmsi_result_error_get_type"
                 c:type="LibmsiResultError"
                 glib:error-domain="libmsi-result-error-quark">
      <member name="success"
              value="0"
              c:identifier="LIBMSI_RESULT_SUCCESS"
              glib:nick="success">
      </member>
      <member name="access_denied"
              value="1"
              c:identifier="LIBMSI_RESULT_ACCESS_DENIED"
              glib:nick="access-denied">
      </member>
      <member name="invalid_handle"
              value="2"
              c:identifier="LIBMSI_RESULT_INVALID_HANDLE"
              glib:nick="invalid-handle">
      </member>
      <member name="not_enough_memory"
              value="3"
              c:identifier="LIBMSI_RESULT_NOT_ENOUGH_MEMORY"
              glib:nick="not-enough-memory">
      </member>
      <member name="invalid_data"
              value="4"
              c:identifier="LIBMSI_RESULT_INVALID_DATA"
              glib:nick="invalid-data">
      </member>
      <member name="outofmemory"
              value="5"
              c:identifier="LIBMSI_RESULT_OUTOFMEMORY"
              glib:nick="outofmemory">
      </member>
      <member name="invalid_parameter"
              value="6"
              c:identifier="LIBMSI_RESULT_INVALID_PARAMETER"
              glib:nick="invalid-parameter">
      </member>
      <member name="open_failed"
              value="7"
              c:identifier="LIBMSI_RESULT_OPEN_FAILED"
              glib:nick="open-failed">
      </member>
      <member name="call_not_implemented"
              value="8"
              c:identifier="LIBMSI_RESULT_CALL_NOT_IMPLEMENTED"
              glib:nick="call-not-implemented">
      </member>
      <member name="more_data"
              value="9"
              c:identifier="LIBMSI_RESULT_MORE_DATA"
              glib:nick="more-data">
      </member>
      <member name="not_found"
              value="10"
              c:identifier="LIBMSI_RESULT_NOT_FOUND"
              glib:nick="not-found">
      </member>
      <member name="continue"
              value="11"
              c:identifier="LIBMSI_RESULT_CONTINUE"
              glib:nick="continue">
      </member>
      <member name="unknown_property"
              value="12"
              c:identifier="LIBMSI_RESULT_UNKNOWN_PROPERTY"
              glib:nick="unknown-property">
      </member>
      <member name="bad_query_syntax"
              value="13"
              c:identifier="LIBMSI_RESULT_BAD_QUERY_SYNTAX"
              glib:nick="bad-query-syntax">
      </member>
      <member name="invalid_field"
              value="14"
              c:identifier="LIBMSI_RESULT_INVALID_FIELD"
              glib:nick="invalid-field">
      </member>
      <member name="function_failed"
              value="15"
              c:identifier="LIBMSI_RESULT_FUNCTION_FAILED"
              glib:nick="function-failed">
      </member>
      <member name="invalid_table"
              value="16"
              c:identifier="LIBMSI_RESULT_INVALID_TABLE"
              glib:nick="invalid-table">
      </member>
      <member name="datatype_mismatch"
              value="17"
              c:identifier="LIBMSI_RESULT_DATATYPE_MISMATCH"
              glib:nick="datatype-mismatch">
      </member>
      <member name="invalid_datatype"
              value="18"
              c:identifier="LIBMSI_RESULT_INVALID_DATATYPE"
              glib:nick="invalid-datatype">
      </member>
      <function name="quark" c:identifier="libmsi_result_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="SummaryInfo"
           c:symbol-prefix="summary_info"
           c:type="LibmsiSummaryInfo"
           parent="GObject.Object"
           glib:type-name="LibmsiSummaryInfo"
           glib:get-type="libmsi_summary_info_get_type"
           glib:type-struct="SummaryInfoClass">
      <constructor name="new"
                   c:identifier="libmsi_summary_info_new"
                   throws="1">
        <doc xml:space="preserve">If @database is provided, the summary informations will be
populated during creation, and the libmsi_summary_info_persist()
function will save the properties to it. If @database is %NULL, you
may still populate properties and then save them to a particular
database with the libmsi_summary_info_save() function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #LibmsiSummaryInfo or %NULL on failure</doc>
          <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
        </return-value>
        <parameters>
          <parameter name="database"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an optionnal associated #LibmsiDatabase</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </parameter>
          <parameter name="update_count" transfer-ownership="none">
            <doc xml:space="preserve">number of changes allowed</doc>
            <type name="guint" c:type="unsigned"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_filetime"
              c:identifier="libmsi_summary_info_get_filetime"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the property value or 0 on failure</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to get</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int"
              c:identifier="libmsi_summary_info_get_int"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the property value or -1 on failure</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to get</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties"
              c:identifier="libmsi_summary_info_get_properties">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GArray with the list of set properties</doc>
          <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
            <type name="Property"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_property_type"
              c:identifier="libmsi_summary_info_get_property_type"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the property type associated for @prop.</doc>
          <type name="PropertyType" c:type="LibmsiPropertyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to get</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="libmsi_summary_info_get_string"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the property value or %NULL on failure</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to get</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
        </parameters>
      </method>
      <method name="persist"
              c:identifier="libmsi_summary_info_persist"
              throws="1">
        <doc xml:space="preserve">Save summary informations to the associated database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="libmsi_summary_info_save" throws="1">
        <doc xml:space="preserve">Save summary informations to the associated database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="db" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiDatabase to save to</doc>
            <type name="Database" c:type="LibmsiDatabase*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filetime"
              c:identifier="libmsi_summary_info_set_filetime"
              throws="1">
        <doc xml:space="preserve">Set file time property @prop.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to set</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a value</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int"
              c:identifier="libmsi_summary_info_set_int"
              throws="1">
        <doc xml:space="preserve">Set integer property @prop.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to set</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="libmsi_summary_info_set_string"
              throws="1">
        <doc xml:space="preserve">Set string property @prop.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="si" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiSummaryInfo</doc>
            <type name="SummaryInfo" c:type="LibmsiSummaryInfo*"/>
          </instance-parameter>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:space="preserve">a #LibmsiProperty to set</doc>
            <type name="Property" c:type="LibmsiProperty"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Database"/>
      </property>
      <property name="update-count"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="SummaryInfoClass"
            c:type="LibmsiSummaryInfoClass"
            glib:is-gtype-struct-for="SummaryInfo">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="db_error_quark"
              c:identifier="libmsi_db_error_quark"
              moved-to="DBError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="result_error_quark"
              c:identifier="libmsi_result_error_quark"
              moved-to="ResultError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
