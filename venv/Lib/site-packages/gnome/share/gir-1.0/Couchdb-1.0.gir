<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Json" version="1.0"/>
  <namespace name="Couchdb"
             version="1.0"
             shared-library="libcouchdb-glib-1.0-2.dll"
             c:identifier-prefixes="Couchdb"
             c:symbol-prefixes="couchdb">
    <class name="ArrayField"
           c:symbol-prefix="array_field"
           c:type="CouchdbArrayField"
           parent="GObject.Object"
           glib:type-name="CouchdbArrayField"
           glib:get-type="couchdb_array_field_get_type"
           glib:type-struct="ArrayFieldClass">
      <constructor name="new" c:identifier="couchdb_array_field_new">
        <doc xml:space="preserve">Create a new array field object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbArrayField object.</doc>
          <type name="ArrayField" c:type="CouchdbArrayField*"/>
        </return-value>
      </constructor>
      <method name="add_array_element"
              c:identifier="couchdb_array_field_add_array_element">
        <doc xml:space="preserve">Add a new element of type array to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="ArrayField" c:type="const CouchdbArrayField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_boolean_element"
              c:identifier="couchdb_array_field_add_boolean_element">
        <doc xml:space="preserve">Add a new element of type boolean to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_double_element"
              c:identifier="couchdb_array_field_add_double_element">
        <doc xml:space="preserve">Add a new element of type double to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int_element"
              c:identifier="couchdb_array_field_add_int_element">
        <doc xml:space="preserve">Add a new element of type integer to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string_element"
              c:identifier="couchdb_array_field_add_string_element">
        <doc xml:space="preserve">Add a new element of type string to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_struct_element"
              c:identifier="couchdb_array_field_add_struct_element">
        <doc xml:space="preserve">Add a new element of type struct to the given array.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to be added</doc>
            <type name="StructField" c:type="const CouchdbStructField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array_element"
              c:identifier="couchdb_array_field_get_array_element"
              introspectable="0">
        <doc xml:space="preserve">Retrieve an array value on the given position of the array.</doc>
        <return-value>
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="ArrayField" c:type="CouchdbArrayField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean_element"
              c:identifier="couchdb_array_field_get_boolean_element">
        <doc xml:space="preserve">Retrieve a boolean value on the given position of the array.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_element"
              c:identifier="couchdb_array_field_get_double_element">
        <doc xml:space="preserve">Retrieve a double value on the given position of the array.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int_element"
              c:identifier="couchdb_array_field_get_int_element">
        <doc xml:space="preserve">Retrieve an integer value on the given position of the array.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="couchdb_array_field_get_length">
        <doc xml:space="preserve">Get the number of elements on the given #CouchdbArrayField object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of elements in the given array.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string_element"
              c:identifier="couchdb_array_field_get_string_element">
        <doc xml:space="preserve">Retrieve a string value on the given position of the array.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_struct_element"
              c:identifier="couchdb_array_field_get_struct_element"
              introspectable="0">
        <doc xml:space="preserve">Retrieve a struct value on the given position of the array.</doc>
        <return-value>
          <doc xml:space="preserve">Value of the element stored in the given position of the array.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_element"
              c:identifier="couchdb_array_field_remove_element">
        <doc xml:space="preserve">Remove an element from the given #CouchdbArrayField object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbArrayField object</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">Position of the element to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ArrayFieldPrivate" c:type="CouchdbArrayFieldPrivate*"/>
      </field>
    </class>
    <record name="ArrayFieldClass"
            c:type="CouchdbArrayFieldClass"
            glib:is-gtype-struct-for="ArrayField">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ArrayFieldPrivate"
            c:type="CouchdbArrayFieldPrivate"
            disguised="1">
    </record>
    <constant name="CREDENTIALS_ITEM_OAUTH_CONSUMER_KEY"
              value="oauth_consumer_key"
              c:type="COUCHDB_CREDENTIALS_ITEM_OAUTH_CONSUMER_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CREDENTIALS_ITEM_OAUTH_CONSUMER_SECRET"
              value="oauth_consumer_secret"
              c:type="COUCHDB_CREDENTIALS_ITEM_OAUTH_CONSUMER_SECRET">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CREDENTIALS_ITEM_OAUTH_TOKEN_KEY"
              value="oauth_token_key"
              c:type="COUCHDB_CREDENTIALS_ITEM_OAUTH_TOKEN_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CREDENTIALS_ITEM_OAUTH_TOKEN_SECRET"
              value="oauth_token_secret"
              c:type="COUCHDB_CREDENTIALS_ITEM_OAUTH_TOKEN_SECRET">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CREDENTIALS_ITEM_PASSWORD"
              value="password"
              c:type="COUCHDB_CREDENTIALS_ITEM_PASSWORD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CREDENTIALS_ITEM_USERNAME"
              value="username"
              c:type="COUCHDB_CREDENTIALS_ITEM_USERNAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Credentials"
           c:symbol-prefix="credentials"
           c:type="CouchdbCredentials"
           parent="GObject.Object"
           glib:type-name="CouchdbCredentials"
           glib:get-type="couchdb_credentials_get_type"
           glib:type-struct="CredentialsClass">
      <constructor name="new_with_oauth"
                   c:identifier="couchdb_credentials_new_with_oauth">
        <doc xml:space="preserve">Create a new #CouchdbCredentials object to be used for OAuth authentication.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CouchdbCredentials object.</doc>
          <type name="Credentials" c:type="CouchdbCredentials*"/>
        </return-value>
        <parameters>
          <parameter name="consumer_key" transfer-ownership="none">
            <doc xml:space="preserve">OAuth consumer key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="consumer_secret" transfer-ownership="none">
            <doc xml:space="preserve">OAuth consumer secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token_key" transfer-ownership="none">
            <doc xml:space="preserve">OAuth token key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token_secret" transfer-ownership="none">
            <doc xml:space="preserve">OAuth token secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_username_and_password"
                   c:identifier="couchdb_credentials_new_with_username_and_password">
        <doc xml:space="preserve">Create a new #CouchdbCredentials object to be used for username
and password based HTTP authentication scheme such as Basic or
Digest.

Authentication is delegated to LibSoup.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CouchdbCredentials object.</doc>
          <type name="Credentials" c:type="CouchdbCredentials*"/>
        </return-value>
        <parameters>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">HTTP Authentication username</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">HTTP Authentication password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_auth_type"
              c:identifier="couchdb_credentials_get_auth_type">
        <doc xml:space="preserve">Retrieve the type of authentication defined for the given #CouchdbCredentials object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #CouchdbCredentialsType specifying the type of authentication.</doc>
          <type name="CredentialsType" c:type="CouchdbCredentialsType"/>
        </return-value>
        <parameters>
          <instance-parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbCredentials object</doc>
            <type name="Credentials" c:type="CouchdbCredentials*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item" c:identifier="couchdb_credentials_get_item">
        <doc xml:space="preserve">Get the value associated with one authentication item on the given #CouchdbCredentials object.
The valid values are the COUCHDB_CREDENTIALS_ITEM_* values defined in couchdb-credentials.h.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value associated with the given item, or NULL if not found.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbCredentials object</doc>
            <type name="Credentials" c:type="CouchdbCredentials*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">Name of the item to retrieve</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item" c:identifier="couchdb_credentials_set_item">
        <doc xml:space="preserve">Set the value associated with one authentication item on the given #CouchdbCredentials object.
The valid values are the COUCHDB_CREDENTIALS_ITEM_* values defined in couchdb-credentials.h.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbCredentials object</doc>
            <type name="Credentials" c:type="CouchdbCredentials*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">Name of the item to set the value of
#value: Value of the item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CredentialsPrivate" c:type="CouchdbCredentialsPrivate*"/>
      </field>
    </class>
    <record name="CredentialsClass"
            c:type="CouchdbCredentialsClass"
            glib:is-gtype-struct-for="Credentials">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CredentialsPrivate"
            c:type="CouchdbCredentialsPrivate"
            disguised="1">
    </record>
    <enumeration name="CredentialsType" c:type="CouchdbCredentialsType">
      <member name="unknown"
              value="-1"
              c:identifier="COUCHDB_CREDENTIALS_TYPE_UNKNOWN">
      </member>
      <member name="oauth"
              value="0"
              c:identifier="COUCHDB_CREDENTIALS_TYPE_OAUTH">
      </member>
      <member name="username_and_password"
              value="1"
              c:identifier="COUCHDB_CREDENTIALS_TYPE_USERNAME_AND_PASSWORD">
      </member>
    </enumeration>
    <constant name="DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_HOME"
              value="home"
              c:type="COUCHDB_DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_HOME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_OTHER"
              value="other"
              c:type="COUCHDB_DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_OTHER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_WORK"
              value="work"
              c:type="COUCHDB_DOCUMENT_CONTACT_ADDRESS_DESCRIPTION_WORK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_EMAIL_DESCRIPTION_HOME"
              value="home"
              c:type="COUCHDB_DOCUMENT_CONTACT_EMAIL_DESCRIPTION_HOME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_EMAIL_DESCRIPTION_OTHER"
              value="other"
              c:type="COUCHDB_DOCUMENT_CONTACT_EMAIL_DESCRIPTION_OTHER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_EMAIL_DESCRIPTION_WORK"
              value="work"
              c:type="COUCHDB_DOCUMENT_CONTACT_EMAIL_DESCRIPTION_WORK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_AIM"
              value="aim"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_AIM">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_GADU_GADU"
              value="gadu-gadu"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_GADU_GADU">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_GROUPWISE"
              value="groupwise"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_GROUPWISE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_ICQ"
              value="icq"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_ICQ">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_IRC"
              value="irc"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_IRC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_JABBER"
              value="jabber"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_JABBER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_MSN"
              value="msn"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_MSN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_SKYPE"
              value="skype"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_SKYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_IM_PROTOCOL_YAHOO"
              value="yahoo"
              c:type="COUCHDB_DOCUMENT_CONTACT_IM_PROTOCOL_YAHOO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_ASSISTANT"
              value="assistant"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_ASSISTANT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_CALLBACK"
              value="callback"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_CALLBACK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_CAR"
              value="car"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_CAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_COMPANY"
              value="company"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_COMPANY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_HOME"
              value="home"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_HOME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_HOME_FAX"
              value="home fax"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_HOME_FAX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_MOBILE"
              value="mobile"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_MOBILE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_OTHER"
              value="other"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_OTHER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_OTHER_FAX"
              value="other fax"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_OTHER_FAX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_PAGER"
              value="pager"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_PAGER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_PRIMARY"
              value="primary"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_PRIMARY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_RADIO"
              value="radio"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_RADIO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_TELEX"
              value="telex"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_TELEX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_WORK"
              value="work"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_WORK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_PHONE_DESCRIPTION_WORK_FAX"
              value="work fax"
              c:type="COUCHDB_DOCUMENT_CONTACT_PHONE_DESCRIPTION_WORK_FAX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_URL_DESCRIPTION_BLOG"
              value="blog"
              c:type="COUCHDB_DOCUMENT_CONTACT_URL_DESCRIPTION_BLOG">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DOCUMENT_CONTACT_URL_DESCRIPTION_HOMEPAGE"
              value="home page"
              c:type="COUCHDB_DOCUMENT_CONTACT_URL_DESCRIPTION_HOMEPAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Database"
           c:symbol-prefix="database"
           c:type="CouchdbDatabase"
           parent="GObject.Object"
           glib:type-name="CouchdbDatabase"
           glib:get-type="couchdb_database_get_type"
           glib:type-struct="DatabaseClass">
      <constructor name="new" c:identifier="couchdb_database_new">
        <doc xml:space="preserve">Create a new #CouchdbDatabase object, which is to be used for operations on specific
databases on the underlying CouchDB instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #CouchdbDatabase object.</doc>
          <type name="Database" c:type="CouchdbDatabase*"/>
        </return-value>
        <parameters>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="free_document_list"
                c:identifier="couchdb_database_free_document_list"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="doclist" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="document_created">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="CouchdbDocument*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="document_deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="document_updated">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="CouchdbDocument*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="delete_document"
              c:identifier="couchdb_database_delete_document"
              throws="1">
        <doc xml:space="preserve">Delete an existing document from a CouchDB instance.

Please take note that this operation can fail if there was an update to the
document and that last revision was not retrieved by the calling application.
This is due to the fact that, to remove a document from CouchDB, the latest
revision needs to be sent, so if the #CouchdbDocument object passed to this
function does not contain the last revision, the operation will fail. In that
case, retrieving the latest revision from CouchDB (with #couchdb_database_get_document)
and trying the delete operation again should fix the issue.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise, in which case the error
argument will contain information about the error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_view"
              c:identifier="couchdb_database_execute_view"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Run a view on the database to retrieve documents. For
each document found in the database, a #CouchdbDocument object is returned
on the list, which represents the document's contents as found on the
underlying database.</doc>
        <return-value>
          <doc xml:space="preserve">a list of #CouchdbDocument objects, or NULL if there are none
or there was an error (in which case the error argument will contain information
about the error). Once no longer needed, the list should be freed by calling
#couchdb_database_free_document_list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="design_doc" transfer-ownership="none">
            <doc xml:space="preserve">Name of the design document where the view to execute is</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="view_name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the view to execute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_documents"
              c:identifier="couchdb_database_get_all_documents"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Retrieve all documents from a database on a running CouchDB instance. For
each document found in the database, a #CouchdbDocument object is returned
on the list, which represents the document's contents as found on the
underlying database.</doc>
        <return-value>
          <doc xml:space="preserve">a list of #CouchdbDocument objects, or NULL if there are none
or there was an error (in which case the error argument will contain information
about the error). Once no longer needed, the list should be freed by calling
#couchdb_database_free_document_list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_design_document"
              c:identifier="couchdb_database_get_design_document"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Retrieve a design document from the given database.</doc>
        <return-value>
          <doc xml:space="preserve">A #CouchdbDesignDocument object if successful, NULL otherwise, in
which case, the error argument will contain information about the error.</doc>
          <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">ID of the design document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_design_documents"
              c:identifier="couchdb_database_get_design_documents"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Retrieve all design documents from the given database.

Design documents are special documents (well, they are really normal documents in
the CouchDB database, just with a special ID) that contain views' code, which are used
to create queries on the database that are cached and so make access to the database
much quicker.</doc>
        <return-value>
          <doc xml:space="preserve">A list of #CouchdbDesignDocument objects, or NULL if there are none
or there was an error (in which case the error argument will contain information
about the error). Once no longer needed, the list should be freed by calling
#couchdb_database_free_document_list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document"
              c:identifier="couchdb_database_get_document"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Retrieve the last revision of a document from the given database.</doc>
        <return-value>
          <doc xml:space="preserve">A #CouchdbDocument object if successful, NULL otherwise, in
which case, the error argument will contain information about the error.</doc>
          <type name="Document" c:type="CouchdbDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">Unique ID of the document to be retrieved</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="couchdb_database_get_name">
        <doc xml:space="preserve">Retrieve the name of the database the given #CouchdbDatabase object maps to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the database</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session"
              c:identifier="couchdb_database_get_session"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the #CouchdbSession associated with the given database object.</doc>
        <return-value>
          <doc xml:space="preserve">A #CouchdbSession object.</doc>
          <type name="Session" c:type="CouchdbSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="listen_for_changes"
              c:identifier="couchdb_database_listen_for_changes">
        <doc xml:space="preserve">Setup a listener to get information about changes done to a specific database. Please
note that changes done in the application using couchdb-glib will be notified
without the need of calling this function. But if the application wants to receive
notifications of changes done externally (by another application, or by any other
means, like replication with a remote database), it needs to call this function.

For each change, one of the signals on the #CouchdbDatabase object will be emitted,
so applications just have to connect to those signals before calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="put_document"
              c:identifier="couchdb_database_put_document"
              throws="1">
        <doc xml:space="preserve">Store a document on a CouchDB database.

If it is a new document, and hence does not have a unique ID, a unique ID
will be generated and stored on the #CouchdbDocument object. Likewise,
whether the document is new or just an update to an existing one, the
#CouchdbDocument object passed to this function will be updated to contain
the latest revision of the document, as returned by CouchDB (revision that
can be retrieved by calling #couchdb_document_get_revision).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise, in which case the error
argument will contain information about the error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabase object</doc>
            <type name="Database" c:type="CouchdbDatabase*"/>
          </instance-parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </parameter>
        </parameters>
      </method>
      <property name="database-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="session"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Session"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DatabasePrivate" c:type="CouchdbDatabasePrivate*"/>
      </field>
      <glib:signal name="document-created" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Document"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="document-deleted" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="document-updated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Document"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DatabaseClass"
            c:type="CouchdbDatabaseClass"
            glib:is-gtype-struct-for="Database">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="document_created">
        <callback name="document_created">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="database" transfer-ownership="none">
              <type name="Database" c:type="CouchdbDatabase*"/>
            </parameter>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="CouchdbDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="document_updated">
        <callback name="document_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="database" transfer-ownership="none">
              <type name="Database" c:type="CouchdbDatabase*"/>
            </parameter>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="CouchdbDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="document_deleted">
        <callback name="document_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="database" transfer-ownership="none">
              <type name="Database" c:type="CouchdbDatabase*"/>
            </parameter>
            <parameter name="docid" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DatabaseInfo"
            c:type="CouchdbDatabaseInfo"
            glib:type-name="CouchdbDatabaseInfo"
            glib:get-type="couchdb_database_info_get_type"
            c:symbol-prefix="database_info">
      <constructor name="new" c:identifier="couchdb_database_info_new">
        <doc xml:space="preserve">Create a new @CouchdbDatabaseInfo object, which is used to store information
(name, number of documents, etc) of a database in CouchDB.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbDatabaseInfo object.</doc>
          <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
        </return-value>
        <parameters>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Database name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="doc_count" transfer-ownership="none">
            <doc xml:space="preserve">Number of documents in the database</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="doc_del_count" transfer-ownership="none">
            <doc xml:space="preserve">Number of deleted documents in the database</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="update_seq" transfer-ownership="none">
            <doc xml:space="preserve">Last update sequence</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="purse_seq" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="compact_running" transfer-ownership="none">
            <doc xml:space="preserve">Whether compacting is in progress</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="disk_size" transfer-ownership="none">
            <doc xml:space="preserve">Size of database on disk</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="disk_format_version" transfer-ownership="none">
            <doc xml:space="preserve">Current version of the internal database format on disk</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="instance_start_time" transfer-ownership="none">
            <doc xml:space="preserve">Timestamp of CouchDBs start time</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dbname"
              c:identifier="couchdb_database_info_get_dbname">
        <doc xml:space="preserve">Get the database name stored in the #CouchdbDatabaseInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of the database.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deleted_documents_count"
              c:identifier="couchdb_database_info_get_deleted_documents_count">
        <doc xml:space="preserve">Get the number of deleted documents stored in the #CouchdbDatabaseInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of deleted documents.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disk_format_version"
              c:identifier="couchdb_database_info_get_disk_format_version">
        <doc xml:space="preserve">Get the current version of the internal database format on disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Current version of the internal database format on disk.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disk_size"
              c:identifier="couchdb_database_info_get_disk_size">
        <doc xml:space="preserve">Get the size of database on disk stored in the #CouchdbDatabaseInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Size of the database on disk.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documents_count"
              c:identifier="couchdb_database_info_get_documents_count">
        <doc xml:space="preserve">Get the number of documents stored in the #CouchdbDatabaseInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of documents in the database.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_instance_start_time"
              c:identifier="couchdb_database_info_get_instance_start_time">
        <doc xml:space="preserve">Get the timestamp of CouchDBs start time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Timestamp of CouchDBs start time.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_purge_sequence"
              c:identifier="couchdb_database_info_get_purge_sequence">
        <doc xml:space="preserve">Get the number of purge operations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of purge operations.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_sequence"
              c:identifier="couchdb_database_info_get_update_sequence">
        <doc xml:space="preserve">Get the last update sequence stored in the #CouchdbDatabaseInfo object.
This sequence is incremented with each change done to the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Last update sequence.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_compact_running"
              c:identifier="couchdb_database_info_is_compact_running">
        <doc xml:space="preserve">Get whether compacting is running on the database at the time the information
was retrieved.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether compacting is running or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDatabaseInfo object</doc>
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="couchdb_database_info_ref">
        <doc xml:space="preserve">Increments reference counting of the given #CouchdbDatabaseInfo object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the object being referenced.</doc>
          <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="couchdb_database_info_unref">
        <doc xml:space="preserve">Decrements reference counting of the given #CouchdbDatabaseInfo object.
When the reference count is equal to 0, the object will be destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="DatabasePrivate"
            c:type="CouchdbDatabasePrivate"
            disguised="1">
    </record>
    <class name="DesignDocument"
           c:symbol-prefix="design_document"
           c:type="CouchdbDesignDocument"
           parent="Document"
           glib:type-name="CouchdbDesignDocument"
           glib:get-type="couchdb_design_document_get_type"
           glib:type-struct="DesignDocumentClass">
      <constructor name="new" c:identifier="couchdb_design_document_new">
        <doc xml:space="preserve">Create a new design document, to contain views' code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #CouchdbDesignDocument object.</doc>
          <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
        </return-value>
      </constructor>
      <function name="free_views_list"
                c:identifier="couchdb_design_document_free_views_list"
                introspectable="0">
        <doc xml:space="preserve">Free the list of views' names returned by #couchdb_design_document_list_views.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">A list of views' names, as returned by #couchdb_design_document_list_views</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="add_view" c:identifier="couchdb_design_document_add_view">
        <doc xml:space="preserve">Add a new view to the given #CouchdbDesignDocument object. If the view already exists,
it will get replaced by the new one. To make the change permanent, the document
must be saved to the database by calling #couchdb_database_put_document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDesignDocument object</doc>
            <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the view</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="map_function" transfer-ownership="none">
            <doc xml:space="preserve">Source code for the map function</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="reduce_function" transfer-ownership="none">
            <doc xml:space="preserve">Source code for the reduce function</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_view"
              c:identifier="couchdb_design_document_delete_view">
        <doc xml:space="preserve">Delete a view from the given #CouchdbDesignDocument object. To make the change permanent,
the document must be saved to the database by calling #couchdb_database_put_document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDesignDocument object</doc>
            <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of the view to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="couchdb_design_document_get_language">
        <doc xml:space="preserve">Return the programming language in which the views on the given design
document are written.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A value representing the language the views are written in.</doc>
          <type name="DesignDocumentLanguage"
                c:type="CouchdbDesignDocumentLanguage"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDesignDocument object</doc>
            <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_views"
              c:identifier="couchdb_design_document_list_views"
              introspectable="0">
        <doc xml:space="preserve">Return a list of the names of the views contained in the given
#CouchdbDesignDocument object.</doc>
        <return-value>
          <doc xml:space="preserve">A list of names of views. When no longer needed, this list
should be freed by calling #couchdb_design_document_free_views_list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDesignDocument object</doc>
            <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="couchdb_design_document_set_language">
        <doc xml:space="preserve">Set the language used in the views contained in the given #CouchdbDesignDocument
object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDesignDocument object</doc>
            <type name="DesignDocument" c:type="CouchdbDesignDocument*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve">Language for the views in this design document</doc>
            <type name="DesignDocumentLanguage"
                  c:type="CouchdbDesignDocumentLanguage"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Document" c:type="CouchdbDocument"/>
      </field>
    </class>
    <record name="DesignDocumentClass"
            c:type="CouchdbDesignDocumentClass"
            glib:is-gtype-struct-for="DesignDocument">
      <field name="parent_class">
        <type name="DocumentClass" c:type="CouchdbDocumentClass"/>
      </field>
    </record>
    <enumeration name="DesignDocumentLanguage"
                 c:type="CouchdbDesignDocumentLanguage">
      <member name="unknown"
              value="0"
              c:identifier="COUCHDB_DESIGN_DOCUMENT_LANGUAGE_UNKNOWN">
      </member>
      <member name="javascript"
              value="1"
              c:identifier="COUCHDB_DESIGN_DOCUMENT_LANGUAGE_JAVASCRIPT">
      </member>
      <member name="python"
              value="2"
              c:identifier="COUCHDB_DESIGN_DOCUMENT_LANGUAGE_PYTHON">
      </member>
    </enumeration>
    <class name="Document"
           c:symbol-prefix="document"
           c:type="CouchdbDocument"
           parent="GObject.Object"
           glib:type-name="CouchdbDocument"
           glib:get-type="couchdb_document_get_type"
           glib:type-struct="DocumentClass">
      <constructor name="new" c:identifier="couchdb_document_new">
        <doc xml:space="preserve">Create an empty #CouchdbDocument object, which can then be populated with data
and added to a database.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbDocument object, with no data on it.</doc>
          <type name="Document" c:type="CouchdbDocument*"/>
        </return-value>
      </constructor>
      <method name="get_application_annotations"
              c:identifier="couchdb_document_get_application_annotations"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the application annotations for the given document.

Application annotations is a special field (named "application_annotations"), used
in Desktopcouch to allow applications to set values on standard documents (as defined
at http://www.freedesktop.org/wiki/Specifications/desktopcouch#Formats) that are
not part of the standard, but still needed by the application.</doc>
        <return-value>
          <doc xml:space="preserve">A #CouchdbStructField containing the value of the application
annotations for the given document.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_array_field"
              c:identifier="couchdb_document_get_array_field"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the value of an array field from the given document.</doc>
        <return-value>
          <doc xml:space="preserve">The value of the given array field.</doc>
          <type name="ArrayField" c:type="CouchdbArrayField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean_field"
              c:identifier="couchdb_document_get_boolean_field">
        <doc xml:space="preserve">Retrieve the value of a boolean field from the given document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given boolean field.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_field"
              c:identifier="couchdb_document_get_double_field">
        <doc xml:space="preserve">Retrieve the value of a decimal number field from the given document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given decimal number field.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_field_names"
              c:identifier="couchdb_document_get_field_names"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the list of fields contained in the given #CouchdbDocument.</doc>
        <return-value>
          <doc xml:space="preserve">A list of strings containing the names of all the fields contained
in the given #CouchdbDocument object. When no longer needed, the list should
be freed by calling #g_slist_free.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_field_type"
              c:identifier="couchdb_document_get_field_type">
        <doc xml:space="preserve">Get the value type of the given #CouchdbDocument's field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Type of the field.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to get type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="couchdb_document_get_id">
        <doc xml:space="preserve">Retrieve the unique ID of the given document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The unique ID of the given document.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int_field"
              c:identifier="couchdb_document_get_int_field">
        <doc xml:space="preserve">Retrieve the value of an integer field from the given document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given integer field.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_record_type"
              c:identifier="couchdb_document_get_record_type">
        <doc xml:space="preserve">Retrieve the record type of the given document. Record types are special
fields in the CouchDB documents, used in Desktopcouch, to identify
standard records. All supported record types are listed at
http://www.freedesktop.org/wiki/Specifications/desktopcouch#Formats.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The record type of the given document.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision" c:identifier="couchdb_document_get_revision">
        <doc xml:space="preserve">Retrieve the revision of a given document.

CouchDB does not overwrite updated documents in place, instead it creates a
new document at the end of the database file, with the same ID but a new revision.

Document revisions are used for optimistic concurrency control and applications
should not rely on document revisions for any other purpose than concurrency control.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Revision of the given document.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string_field"
              c:identifier="couchdb_document_get_string_field">
        <doc xml:space="preserve">Retrieve the value of a string field from the given document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given string field.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_struct_field"
              c:identifier="couchdb_document_get_struct_field"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the value of a struct field from the given document.</doc>
        <return-value>
          <doc xml:space="preserve">The value of the given struct field.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_field" c:identifier="couchdb_document_has_field">
        <doc xml:space="preserve">Check whether the given document has a field with a specific name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the field exists in the document, FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to check existence for in the document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_contact" c:identifier="couchdb_document_is_contact">
        <doc xml:space="preserve">Check whether the given document represents a contact record, as specified
at http://www.freedesktop.org/wiki/Specifications/desktopcouch/contact</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the document represents a contact, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_task" c:identifier="couchdb_document_is_task">
        <doc xml:space="preserve">Check whether the given document represents a contact record, as specified
at http://www.freedesktop.org/wiki/Specifications/desktopcouch/task</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the document represents a task, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_attachments"
              c:identifier="couchdb_document_list_attachments"
              introspectable="0">
        <doc xml:space="preserve">List all the attachments for the given document.</doc>
        <return-value>
          <doc xml:space="preserve">A list containing the IDs of all the attachments for the
given document. When no longer needed, the list should
be freed by calling #g_slist_free.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_field" c:identifier="couchdb_document_remove_field">
        <doc xml:space="preserve">Remove a field from the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to remove from the document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_application_annotations"
              c:identifier="couchdb_document_set_application_annotations">
        <doc xml:space="preserve">Set the application annotations for the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="annotations" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField with the contents of the application_annotations field.</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_array_field"
              c:identifier="couchdb_document_set_array_field">
        <doc xml:space="preserve">Set the value of an array field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean_field"
              c:identifier="couchdb_document_set_boolean_field">
        <doc xml:space="preserve">Set the value of a boolean field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_field"
              c:identifier="couchdb_document_set_double_field">
        <doc xml:space="preserve">Set the value of a decimal number field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="couchdb_document_set_id">
        <doc xml:space="preserve">Set the unique ID for a given document.

This usually is not needed by calling applications, unless they want to
force IDs on the CouchDB documents created/updated for some reason, like
compatibility with 3rd party applications. In most cases, the autogenerated
IDs from CouchDB when new documents are created (see #couchdb_document_put)
should be ok for most applications.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">New unique ID for the given document.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int_field"
              c:identifier="couchdb_document_set_int_field">
        <doc xml:space="preserve">Set the value of an integer field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_record_type"
              c:identifier="couchdb_document_set_record_type">
        <doc xml:space="preserve">Set the record type of the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="record_type" transfer-ownership="none">
            <doc xml:space="preserve">Record type to set the document to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision" c:identifier="couchdb_document_set_revision">
        <doc xml:space="preserve">Set the revision of the given document. This should never be used by applications,
unless they really know what they are doing, since using a wrong revision string
will confuse CouchDB when doing updates to the document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="revision" transfer-ownership="none">
            <doc xml:space="preserve">String specifying the revision to set the document to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_field"
              c:identifier="couchdb_document_set_string_field">
        <doc xml:space="preserve">Set the value of a string field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_struct_field"
              c:identifier="couchdb_document_set_struct_field">
        <doc xml:space="preserve">Set the value of a struct field in the given document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Value to set the field to</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="couchdb_document_to_string">
        <doc xml:space="preserve">Convert the given #CouchdbDocument to a JSON string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the given document in JSON format.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocument object</doc>
            <type name="Document" c:type="CouchdbDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Database"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DocumentPrivate" c:type="CouchdbDocumentPrivate*"/>
      </field>
    </class>
    <record name="DocumentClass"
            c:type="CouchdbDocumentClass"
            glib:is-gtype-struct-for="Document">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DocumentContact"
           c:symbol-prefix="document_contact"
           c:type="CouchdbDocumentContact"
           parent="Document"
           glib:type-name="CouchdbDocumentContact"
           glib:get-type="couchdb_document_contact_get_type"
           glib:type-struct="DocumentContactClass">
      <constructor name="address_new"
                   c:identifier="couchdb_document_contact_address_new">
        <return-value transfer-ownership="full">
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="street" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="ext_street" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="city" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="country" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="postalcode" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pobox" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="email_new"
                   c:identifier="couchdb_document_contact_email_new">
        <return-value transfer-ownership="full">
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="im_new"
                   c:identifier="couchdb_document_contact_im_new">
        <return-value transfer-ownership="full">
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="couchdb_document_contact_new">
        <doc xml:space="preserve">Create a new #CouchdbDocumentContact object.</doc>
        <return-value transfer-ownership="full">
          <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
        </return-value>
      </constructor>
      <constructor name="phone_new"
                   c:identifier="couchdb_document_contact_phone_new">
        <return-value transfer-ownership="full">
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="number" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="url_new"
                   c:identifier="couchdb_document_contact_url_new">
        <return-value transfer-ownership="full">
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="address_get_city"
                c:identifier="couchdb_document_contact_address_get_city">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_country"
                c:identifier="couchdb_document_contact_address_get_country">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_description"
                c:identifier="couchdb_document_contact_address_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_ext_street"
                c:identifier="couchdb_document_contact_address_get_ext_street">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_pobox"
                c:identifier="couchdb_document_contact_address_get_pobox">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_postalcode"
                c:identifier="couchdb_document_contact_address_get_postalcode">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_state"
                c:identifier="couchdb_document_contact_address_get_state">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_get_street"
                c:identifier="couchdb_document_contact_address_get_street">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_city"
                c:identifier="couchdb_document_contact_address_set_city">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="city" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_country"
                c:identifier="couchdb_document_contact_address_set_country">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="country" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_description"
                c:identifier="couchdb_document_contact_address_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_ext_street"
                c:identifier="couchdb_document_contact_address_set_ext_street">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="ext_street" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_pobox"
                c:identifier="couchdb_document_contact_address_set_pobox">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="pobox" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_postalcode"
                c:identifier="couchdb_document_contact_address_set_postalcode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="postalcode" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_state"
                c:identifier="couchdb_document_contact_address_set_state">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="address_set_street"
                c:identifier="couchdb_document_contact_address_set_street">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="street" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="email_get_address"
                c:identifier="couchdb_document_contact_email_get_address">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="email_get_description"
                c:identifier="couchdb_document_contact_email_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="email_set_address"
                c:identifier="couchdb_document_contact_email_set_address">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="email_set_description"
                c:identifier="couchdb_document_contact_email_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_get_address"
                c:identifier="couchdb_document_contact_im_get_address">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_get_description"
                c:identifier="couchdb_document_contact_im_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_get_protocol"
                c:identifier="couchdb_document_contact_im_get_protocol">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_set_address"
                c:identifier="couchdb_document_contact_im_set_address">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_set_description"
                c:identifier="couchdb_document_contact_im_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="im_set_protocol"
                c:identifier="couchdb_document_contact_im_set_protocol">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_get_description"
                c:identifier="couchdb_document_contact_phone_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_get_number"
                c:identifier="couchdb_document_contact_phone_get_number">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_get_priority"
                c:identifier="couchdb_document_contact_phone_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_set_description"
                c:identifier="couchdb_document_contact_phone_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_set_number"
                c:identifier="couchdb_document_contact_phone_set_number">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="number" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="phone_set_priority"
                c:identifier="couchdb_document_contact_phone_set_priority">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="url_get_address"
                c:identifier="couchdb_document_contact_url_get_address">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="url_get_description"
                c:identifier="couchdb_document_contact_url_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </function>
      <function name="url_set_address"
                c:identifier="couchdb_document_contact_url_set_address">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="url_set_description"
                c:identifier="couchdb_document_contact_url_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_addresses"
              c:identifier="couchdb_document_contact_get_addresses"
              introspectable="0">
        <return-value>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_assistant_name"
              c:identifier="couchdb_document_contact_get_assistant_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_birth_date"
              c:identifier="couchdb_document_contact_get_birth_date">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_categories"
              c:identifier="couchdb_document_contact_get_categories">
        <doc xml:space="preserve">Get the list of categories (as a string) for this contact document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A comma separated list of categories as a string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocumentContact object</doc>
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_company"
              c:identifier="couchdb_document_contact_get_company">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_department"
              c:identifier="couchdb_document_contact_get_department">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_email_addresses"
              c:identifier="couchdb_document_contact_get_email_addresses"
              introspectable="0">
        <doc xml:space="preserve">Retrieve a list of email addresses from the specified contact document.
Email addresses are returned in a GSList of #CouchdbStructField objects,
which can be manipulated with the couchdb_document_contact_email_* functions
and freed with:
    g_slist_foreach (list, (GFunc) couchdb_struct_field_unref, NULL);
    g_slist_free (list);</doc>
        <return-value>
          <doc xml:space="preserve">a #GSList of #CouchdbStructField objects.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocumentContact object representing a contact</doc>
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_name"
              c:identifier="couchdb_document_contact_get_first_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_im_addresses"
              c:identifier="couchdb_document_contact_get_im_addresses"
              introspectable="0">
        <return-value>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_job_title"
              c:identifier="couchdb_document_contact_get_job_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_name"
              c:identifier="couchdb_document_contact_get_last_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_name"
              c:identifier="couchdb_document_contact_get_manager_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_middle_name"
              c:identifier="couchdb_document_contact_get_middle_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick_name"
              c:identifier="couchdb_document_contact_get_nick_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notes"
              c:identifier="couchdb_document_contact_get_notes">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_office"
              c:identifier="couchdb_document_contact_get_office">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phone_numbers"
              c:identifier="couchdb_document_contact_get_phone_numbers"
              introspectable="0">
        <return-value>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spouse_name"
              c:identifier="couchdb_document_contact_get_spouse_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suffix"
              c:identifier="couchdb_document_contact_get_suffix">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="couchdb_document_contact_get_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urls"
              c:identifier="couchdb_document_contact_get_urls"
              introspectable="0">
        <return-value>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wedding_date"
              c:identifier="couchdb_document_contact_get_wedding_date">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_addresses"
              c:identifier="couchdb_document_contact_set_addresses"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_assistant_name"
              c:identifier="couchdb_document_contact_set_assistant_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="assistant_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_birth_date"
              c:identifier="couchdb_document_contact_set_birth_date">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="birth_date" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_categories"
              c:identifier="couchdb_document_contact_set_categories">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="categories" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_company"
              c:identifier="couchdb_document_contact_set_company">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="company" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_department"
              c:identifier="couchdb_document_contact_set_department">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="department" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_email_addresses"
              c:identifier="couchdb_document_contact_set_email_addresses"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_first_name"
              c:identifier="couchdb_document_contact_set_first_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="first_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_im_addresses"
              c:identifier="couchdb_document_contact_set_im_addresses"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_job_title"
              c:identifier="couchdb_document_contact_set_job_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="job_title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_last_name"
              c:identifier="couchdb_document_contact_set_last_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="last_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_name"
              c:identifier="couchdb_document_contact_set_manager_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="manager_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_middle_name"
              c:identifier="couchdb_document_contact_set_middle_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="middle_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nick_name"
              c:identifier="couchdb_document_contact_set_nick_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="nick_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_notes"
              c:identifier="couchdb_document_contact_set_notes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="notes" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_office"
              c:identifier="couchdb_document_contact_set_office">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="office" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_phone_numbers"
              c:identifier="couchdb_document_contact_set_phone_numbers"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_spouse_name"
              c:identifier="couchdb_document_contact_set_spouse_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="spouse_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_suffix"
              c:identifier="couchdb_document_contact_set_suffix">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="suffix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="couchdb_document_contact_set_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urls"
              c:identifier="couchdb_document_contact_set_urls"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_wedding_date"
              c:identifier="couchdb_document_contact_set_wedding_date">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentContact" c:type="CouchdbDocumentContact*"/>
          </instance-parameter>
          <parameter name="wedding_date" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Document" c:type="CouchdbDocument"/>
      </field>
    </class>
    <record name="DocumentContactClass"
            c:type="CouchdbDocumentContactClass"
            glib:is-gtype-struct-for="DocumentContact">
      <field name="parent_class">
        <type name="DocumentClass" c:type="CouchdbDocumentClass"/>
      </field>
    </record>
    <record name="DocumentInfo"
            c:type="CouchdbDocumentInfo"
            glib:type-name="CouchdbDocumentInfo"
            glib:get-type="couchdb_document_info_get_type"
            c:symbol-prefix="document_info">
      <constructor name="new" c:identifier="couchdb_document_info_new">
        <doc xml:space="preserve">Create a new #CouchdbDocumentInfo object, which is used to store information
about a document on a CouchDB database. It contains information like the
Unique ID and revision of the document.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchDocumentInfo object.</doc>
          <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
        </return-value>
        <parameters>
          <parameter name="docid" transfer-ownership="none">
            <doc xml:space="preserve">Unique ID of the document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="revision" transfer-ownership="none">
            <doc xml:space="preserve">Current revision of the document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_docid" c:identifier="couchdb_document_info_get_docid">
        <doc xml:space="preserve">Get the unique ID stored in the #CouchdbDocumentInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Unique ID.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc_info" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocumentInfo object</doc>
            <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="couchdb_document_info_get_revision">
        <doc xml:space="preserve">Get the revision stored in the #CouchdbDocumentInfo object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Revision number.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc_info" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbDocumentInfo object</doc>
            <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="couchdb_document_info_ref">
        <doc xml:space="preserve">Increments reference counting of the given #CouchdbDocumentInfo object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A pointer to the object being referenced.</doc>
          <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="couchdb_document_info_unref">
        <doc xml:space="preserve">Decrements reference counting of the given #CouchdbDocumentInfo object.
When the reference count is equal to 0, the object will be destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dbinfo" transfer-ownership="none">
            <type name="DocumentInfo" c:type="CouchdbDocumentInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="DocumentPrivate"
            c:type="CouchdbDocumentPrivate"
            disguised="1">
    </record>
    <class name="DocumentTask"
           c:symbol-prefix="document_task"
           c:type="CouchdbDocumentTask"
           parent="Document"
           glib:type-name="CouchdbDocumentTask"
           glib:get-type="couchdb_document_task_get_type"
           glib:type-struct="DocumentTaskClass">
      <constructor name="new" c:identifier="couchdb_document_task_new">
        <doc xml:space="preserve">Create a new #CouchdbDocumentTask object.</doc>
        <return-value transfer-ownership="full">
          <type name="DocumentTask" c:type="CouchdbDocumentTask*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="couchdb_document_task_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentTask" c:type="CouchdbDocumentTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="couchdb_document_task_get_summary">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentTask" c:type="CouchdbDocumentTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="couchdb_document_task_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentTask" c:type="CouchdbDocumentTask*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary"
              c:identifier="couchdb_document_task_set_summary">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="DocumentTask" c:type="CouchdbDocumentTask*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Document" c:type="CouchdbDocument"/>
      </field>
    </class>
    <record name="DocumentTaskClass"
            c:type="CouchdbDocumentTaskClass"
            glib:is-gtype-struct-for="DocumentTask">
      <field name="parent_class">
        <type name="DocumentClass" c:type="CouchdbDocumentClass"/>
      </field>
    </record>
    <class name="Query"
           c:symbol-prefix="query"
           c:type="CouchdbQuery"
           parent="GObject.Object"
           glib:type-name="CouchdbQuery"
           glib:get-type="couchdb_query_get_type"
           glib:type-struct="QueryClass">
      <constructor name="new" c:identifier="couchdb_query_new">
        <doc xml:space="preserve">Creates and returns a new #CouchdbQuery object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #CouchdbQuery object, to be unreferenced
when no longer needed.</doc>
          <type name="Query" c:type="CouchdbQuery*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_path"
                   c:identifier="couchdb_query_new_for_path">
        <doc xml:space="preserve">Creates and returns a new #CouchdbQuery object for a give design document
and view. It's a shortcut for this code:
[[[
const gchar *design_doc, *view_name;
CouchdbQuery *query;

design_doc = "document";
view_name = "view";
path = g_str_concat ("_design/", design_doc, "_view", view_name);
query = couchdb_query_new ();
couchdb_query_set_path (query, path);
g_free (path);
]]]</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #CouchdbQuery object, to be unreferenced
when no longer needed.</doc>
          <type name="Query" c:type="CouchdbQuery*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_view"
                   c:identifier="couchdb_query_new_for_view">
        <return-value transfer-ownership="full">
          <type name="Query" c:type="CouchdbQuery*"/>
        </return-value>
        <parameters>
          <parameter name="design_doc" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="view_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_json_object"
              c:identifier="couchdb_query_get_json_object">
        <doc xml:space="preserve">Sets the given Json object as a body of the query that is going to be
send to the CouchDB server. It doesn't change the query's method so it has
to be set to either PUT or POST by calling #couchdb_query_set_method.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A JsonObject to be set as a Query's body.</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="couchdb_query_get_method">
        <doc xml:space="preserve">Returns method set for the query.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">string containing method set for the query.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbQuery object</doc>
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_option" c:identifier="couchdb_query_get_option">
        <doc xml:space="preserve">Returns the value of the given key, or %NULL if it wasn't set</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the given key,
or %NULL if it hasn't been set.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="couchdb_query_get_path">
        <doc xml:space="preserve">Returns path set for the query.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">string containing path set for the query.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbQuery object</doc>
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query_options_string"
              c:identifier="couchdb_query_get_query_options_string">
        <doc xml:space="preserve">Returns options as a query string that can be used to create
a complete uri for querying server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing all query options.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbQuery object</doc>
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_json_object"
              c:identifier="couchdb_query_set_json_object">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_method" c:identifier="couchdb_query_set_method">
        <doc xml:space="preserve">Sets method for the Query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbQuery object</doc>
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">A method for query.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_option" c:identifier="couchdb_query_set_option">
        <doc xml:space="preserve">Set's the value of the given key, overwriting the current one if it's
already set</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="couchdb_query_set_path">
        <doc xml:space="preserve">Sets path for the Query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbQuery object</doc>
            <type name="Query" c:type="CouchdbQuery*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="path" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="query-options" writable="1" transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="QueryPrivate" c:type="CouchdbQueryPrivate*"/>
      </field>
    </class>
    <record name="QueryClass"
            c:type="CouchdbQueryClass"
            glib:is-gtype-struct-for="Query">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="QueryPrivate" c:type="CouchdbQueryPrivate" disguised="1">
    </record>
    <constant name="RECORD_TYPE_CONTACT"
              value="http://www.freedesktop.org/wiki/Specifications/desktopcouch/contact"
              c:type="COUCHDB_RECORD_TYPE_CONTACT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECORD_TYPE_TASK"
              value="http://www.freedesktop.org/wiki/Specifications/desktopcouch/task"
              c:type="COUCHDB_RECORD_TYPE_TASK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Response"
           c:symbol-prefix="response"
           c:type="CouchdbResponse"
           parent="GObject.Object"
           glib:type-name="CouchdbResponse"
           glib:get-type="couchdb_response_get_type"
           glib:type-struct="ResponseClass">
      <constructor name="new" c:identifier="couchdb_response_new">
        <return-value transfer-ownership="full">
          <type name="Response" c:type="CouchdbResponse*"/>
        </return-value>
      </constructor>
      <method name="get_content_length"
              c:identifier="couchdb_response_get_content_length">
        <doc xml:space="preserve">Returns content length of the CouchDB response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">content length or 0 if response doesn't contain
any body.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="couchdb_response_get_content_type">
        <doc xml:space="preserve">Returns the string containing content type of the response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Content-Type of the response or %NULL if the header
wasn't set</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_etag" c:identifier="couchdb_response_get_etag">
        <doc xml:space="preserve">Returns the value of ETag header from the response. This header
is set to the current revision of the document requested.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A @string containing the ETag header or %NULL
if there has been no ETag in response headers.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_json_object"
              c:identifier="couchdb_response_get_json_object">
        <doc xml:space="preserve">Returns a #JsonObject containing the response from CouchDB server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #JsonObject containing response from
the server. Object is owned by #CouchdbResponse and should not be
freed.</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rows" c:identifier="couchdb_response_get_rows">
        <doc xml:space="preserve">Returns a list of #JsonObject rows returned by the CouchDB server.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GList
of #JsonObject objects. Returned objects are owned by #CouchdbResponse,
#GList should be freed by caller when no longer needed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Json.Object"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status_code"
              c:identifier="couchdb_response_get_status_code">
        <doc xml:space="preserve">Returns the response status code</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">status code of the response</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbResponse object</doc>
            <type name="Response" c:type="CouchdbResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="content-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="content-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="etag"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="response"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Json.Object"/>
      </property>
      <property name="status-code"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ResponsePrivate" c:type="CouchdbResponsePrivate*"/>
      </field>
    </class>
    <record name="ResponseClass"
            c:type="CouchdbResponseClass"
            glib:is-gtype-struct-for="Response">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ResponsePrivate"
            c:type="CouchdbResponsePrivate"
            disguised="1">
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="CouchdbSession"
           parent="GObject.Object"
           glib:type-name="CouchdbSession"
           glib:get-type="couchdb_session_get_type"
           glib:type-struct="SessionClass">
      <constructor name="new" c:identifier="couchdb_session_new">
        <doc xml:space="preserve">Create a new #CouchdbSession object, which is the entry point for operations on a
CouchDB instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbSession object.</doc>
          <type name="Session" c:type="CouchdbSession*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">URI of the CouchDB instance to connect to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="free_database_list"
                c:identifier="couchdb_session_free_database_list"
                introspectable="0">
        <doc xml:space="preserve">Free the list of databases returned by #couchdb_session_list_databases.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dblist" transfer-ownership="none">
            <doc xml:space="preserve">A list of databases, as returned by #couchdb_session_list_databases</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="authentication_failed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="database_created">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="database_deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="compact_database"
              c:identifier="couchdb_session_compact_database"
              throws="1">
        <doc xml:space="preserve">Compact the given database, which means removing outdated document
revisions and deleted documents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database to be compacted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_database"
              c:identifier="couchdb_session_create_database"
              throws="1">
        <doc xml:space="preserve">Create a new database on a CouchDB instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database to be created</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_database"
              c:identifier="couchdb_session_delete_database"
              throws="1">
        <doc xml:space="preserve">Delete an existing database on a CouchDB instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database to be deleted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_authentication"
              c:identifier="couchdb_session_disable_authentication">
        <doc xml:space="preserve">Disables authentication for the given #CouchdbSession object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_authentication"
              c:identifier="couchdb_session_enable_authentication">
        <doc xml:space="preserve">Enables authentication for the given #CouchdbSession object. The authentication
mechanism should be specificied when creating the #CouchdbCredentials object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbCredentials object</doc>
            <type name="Credentials" c:type="CouchdbCredentials*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_database"
              c:identifier="couchdb_session_get_database"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Get a #CouchdbDatabase object reference for an existing database.</doc>
        <return-value>
          <doc xml:space="preserve">A #CouchdbDatabase object if the database exists on the specified
#CouchdbSession object, or NULL if the database does not exist.</doc>
          <type name="Database" c:type="CouchdbDatabase*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_database_info"
              c:identifier="couchdb_session_get_database_info"
              throws="1">
        <doc xml:space="preserve">Retrieve information about a given database.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #CouchdbDatabaseInfo object, whose API can be used to retrieve
all the information returned by CouchDB about this database.</doc>
          <type name="DatabaseInfo" c:type="CouchdbDatabaseInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="dbname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the database for which to retrieve the information</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="couchdb_session_get_uri">
        <doc xml:space="preserve">Retrieve the URI of the CouchDB instance a #CouchdbSession object is bound to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the URI of the CouchDB instance used by this #CouchdbSession object.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_authentication_enabled"
              c:identifier="couchdb_session_is_authentication_enabled">
        <doc xml:space="preserve">Gets whether the given #CouchdbSession object has authentication enabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if authentication is enabled, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_databases"
              c:identifier="couchdb_session_list_databases"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve">Retrieve the list of databases that exist in the CouchDB instance being used.</doc>
        <return-value>
          <doc xml:space="preserve">A list of strings containing the names of all the databases
that exist in the CouchDB instance connected to. Once no longer needed, this
list can be freed by calling #couchdb_session_free_database_list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="replicate"
              c:identifier="couchdb_session_replicate"
              throws="1">
        <doc xml:space="preserve">Replicates a source database to another database, on the same CouchDB instance
or on a remote instance.

If @continous is FALSE, the replication will happen once, but if set to TRUE,
CouchDB will listen to all changes made to the source database, and automatically
replicate over any new docs as they come into the source to the target.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if successful, FALSE otherwise, in which case the @error
parameter will be set to contain information about the error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbSession object</doc>
            <type name="Session" c:type="CouchdbSession*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">Source database</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">Target database</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="continous" transfer-ownership="none">
            <doc xml:space="preserve">Whether to replicate once or keep replicating</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="uri"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SessionPrivate" c:type="CouchdbSessionPrivate*"/>
      </field>
      <glib:signal name="authentication-failed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="database-created" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="database-deleted" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SessionClass"
            c:type="CouchdbSessionClass"
            glib:is-gtype-struct-for="Session">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="authentication_failed">
        <callback name="authentication_failed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="CouchdbSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="database_created">
        <callback name="database_created">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="CouchdbSession*"/>
            </parameter>
            <parameter name="dbname" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="database_deleted">
        <callback name="database_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="CouchdbSession*"/>
            </parameter>
            <parameter name="dbname" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SessionPrivate" c:type="CouchdbSessionPrivate" disguised="1">
    </record>
    <class name="StructField"
           c:symbol-prefix="struct_field"
           c:type="CouchdbStructField"
           parent="GObject.Object"
           glib:type-name="CouchdbStructField"
           glib:get-type="couchdb_struct_field_get_type"
           glib:type-struct="StructFieldClass">
      <constructor name="new" c:identifier="couchdb_struct_field_new">
        <doc xml:space="preserve">Create a new struct field object, to be added to a #CouchdbDocument or to
another #CouchdbStructField.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbStructField object.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="couchdb_struct_field_new_from_string">
        <doc xml:space="preserve">Create a new struct field object, filling it with values taken from a string
representing a JSON object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly-created #CouchdbStructField object.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">A JSON string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_array_field"
              c:identifier="couchdb_struct_field_get_array_field"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the value of an array field from the given struct field.</doc>
        <return-value>
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="ArrayField" c:type="CouchdbArrayField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean_field"
              c:identifier="couchdb_struct_field_get_boolean_field">
        <doc xml:space="preserve">Retrieve the value of a boolean field from the given struct field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_field"
              c:identifier="couchdb_struct_field_get_double_field">
        <doc xml:space="preserve">Retrieve the value of a decimal number field from the given struct field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_field_names"
              c:identifier="couchdb_struct_field_get_field_names"
              introspectable="0">
        <doc xml:space="preserve">Get the list of field names the given #CouchdbStructField object contains.</doc>
        <return-value>
          <doc xml:space="preserve">A list of strings containing the names of all the fields contained
in the given #CouchdbStructField object. When no longer needed, the list should
be freed by calling #g_slist_free.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_field_type"
              c:identifier="couchdb_struct_field_get_field_type">
        <doc xml:space="preserve">Get the value type of the given #CouchdbStructField's field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Type of the field.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to get type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int_field"
              c:identifier="couchdb_struct_field_get_int_field">
        <doc xml:space="preserve">Retrieve the value of an integer field from the given struct field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string_field"
              c:identifier="couchdb_struct_field_get_string_field">
        <doc xml:space="preserve">Retrieve the value of a string field from the given struct field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_struct_field"
              c:identifier="couchdb_struct_field_get_struct_field"
              introspectable="0">
        <doc xml:space="preserve">Retrieve the value of a struct field from the given struct field.</doc>
        <return-value>
          <doc xml:space="preserve">The value of the given field.</doc>
          <type name="StructField" c:type="CouchdbStructField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="couchdb_struct_field_get_uuid">
        <doc xml:space="preserve">Retrieve the unique ID of the given struct field. Note that this is a convenience
function to allow documents with a format similar to:

"list": {
       "unique-id-1": { "field": "value" },
       "unique-id-2": { "field": "value" }
}

So, not all #CouchdbStructField objects would have a value for this, unless explicitly
used by the applications storing the documents on the CouchDB database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The unique ID of the given struct field.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_field" c:identifier="couchdb_struct_field_has_field">
        <doc xml:space="preserve">Check whether a given field exists in the given #CouchdbStructField object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the field exists, FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to check</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_field"
              c:identifier="couchdb_struct_field_remove_field">
        <doc xml:space="preserve">Remove a field from the given #CouchdbStructField object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_array_field"
              c:identifier="couchdb_struct_field_set_array_field">
        <doc xml:space="preserve">Set the value of an array field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="ArrayField" c:type="CouchdbArrayField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean_field"
              c:identifier="couchdb_struct_field_set_boolean_field">
        <doc xml:space="preserve">Set the value of a boolean field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double_field"
              c:identifier="couchdb_struct_field_set_double_field">
        <doc xml:space="preserve">Set the value of a decimal number field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int_field"
              c:identifier="couchdb_struct_field_set_int_field">
        <doc xml:space="preserve">Set the value of an integer field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_field"
              c:identifier="couchdb_struct_field_set_string_field">
        <doc xml:space="preserve">Set the value of a string field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_struct_field"
              c:identifier="couchdb_struct_field_set_struct_field">
        <doc xml:space="preserve">Set the value of a string field in the given struct field.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">Name of the field</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="StructField" c:type="CouchdbStructField*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid" c:identifier="couchdb_struct_field_set_uuid">
        <doc xml:space="preserve">Set the unique ID for the given struct field. See the explanation for #couchdb_struct_field_get_uuid
for knowing when to use this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve">Unique ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="couchdb_struct_field_to_string">
        <doc xml:space="preserve">Convert a #CouchdbStructField to a JSON string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string representing the contents of the given #CouchdbStructField
object in JSON format.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sf" transfer-ownership="none">
            <doc xml:space="preserve">A #CouchdbStructField object</doc>
            <type name="StructField" c:type="CouchdbStructField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StructFieldPrivate" c:type="CouchdbStructFieldPrivate*"/>
      </field>
    </class>
    <record name="StructFieldClass"
            c:type="CouchdbStructFieldClass"
            glib:is-gtype-struct-for="StructField">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="StructFieldPrivate"
            c:type="CouchdbStructFieldPrivate"
            disguised="1">
    </record>
  </namespace>
</repository>
