<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Bayes"
             version="1.0"
             shared-library="libbayes-glib-1.0-0.dll"
             c:identifier-prefixes="Bayes"
             c:symbol-prefixes="bayes">
    <class name="Classifier"
           c:symbol-prefix="classifier"
           c:type="BayesClassifier"
           parent="GObject.Object"
           glib:type-name="BayesClassifier"
           glib:get-type="bayes_classifier_get_type"
           glib:type-struct="ClassifierClass">
      <constructor name="new" c:identifier="bayes_classifier_new">
        <doc xml:space="preserve">Create a new instance of #BayesClassifier. The instance should be
freed using g_object_unref().

See bayes_classifier_train() for how to train your classifier.
See bayes_classifier_guess() for guessing the classification of
unknown input.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #BayesClassifier.</doc>
          <type name="Classifier" c:type="BayesClassifier*"/>
        </return-value>
      </constructor>
      <method name="get_storage" c:identifier="bayes_classifier_get_storage">
        <doc xml:space="preserve">Retrieves the #BayesStorage used for tokens by @classifier.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #BayesStorage.</doc>
          <type name="Storage" c:type="BayesStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="classifier" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesClassifier.</doc>
            <type name="Classifier" c:type="BayesClassifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="guess" c:identifier="bayes_classifier_guess">
        <doc xml:space="preserve">Tries to guess the classification of @text by tokenizing @text using
the tokenizer provided to bayes_classifier_set_tokenizer()
and testing each token against the classifiers training.

This method returns a #GList of #BayesGuess instances. It is up to the
caller to free the individual #BayesGuess structures as well as the
containing #GList.

[[
GList *list = bayes_classifier_guess(classifier, "who am i?");
g_list_foreach(list, (GFunc)bayes_guess_unref);
g_list_free(list);
]]</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The guesses.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Guess"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="classifier" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesClassifier.</doc>
            <type name="Classifier" c:type="BayesClassifier*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">Text to tokenize and guess the classification.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_storage" c:identifier="bayes_classifier_set_storage">
        <doc xml:space="preserve">Sets the storage to use for tokens by the classifier.
If @storage is %NULL, then in memory storage will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="classifier" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesClassifier.</doc>
            <type name="Classifier" c:type="BayesClassifier*"/>
          </instance-parameter>
          <parameter name="storage"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #BayesStorage or %NULL.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tokenizer"
              c:identifier="bayes_classifier_set_tokenizer">
        <doc xml:space="preserve">Sets the tokenizer to use to tokenize input text by @classifer for
both training using bayes_classifier_train() and guessing using
bayes_classifier_guess().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="classifier" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesClassifier.</doc>
            <type name="Classifier" c:type="BayesClassifier*"/>
          </instance-parameter>
          <parameter name="tokenizer"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve">A #BayesTokenizer.</doc>
            <type name="Tokenizer" c:type="BayesTokenizer"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @tokenizer.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">Destruction notification for @user_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="train" c:identifier="bayes_classifier_train">
        <doc xml:space="preserve">Tokenizes @text and stores the values under the classification named
@name. These are used by bayes_classifier_guess() to determine
the classification.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="classifier" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesClassifier.</doc>
            <type name="Classifier" c:type="BayesClassifier*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification for @text.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">Text to tokenize and store for guessing.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="storage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "storage" property. The training data used by @classifier is
saved to and loaded from @storage.</doc>
        <type name="Storage"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ClassifierPrivate" c:type="BayesClassifierPrivate*"/>
      </field>
    </class>
    <record name="ClassifierClass"
            c:type="BayesClassifierClass"
            glib:is-gtype-struct-for="Classifier">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ClassifierPrivate"
            c:type="BayesClassifierPrivate"
            disguised="1">
    </record>
    <record name="Guess"
            c:type="BayesGuess"
            glib:type-name="BayesGuess"
            glib:get-type="bayes_guess_get_type"
            c:symbol-prefix="guess">
      <constructor name="new" c:identifier="bayes_guess_new">
        <doc xml:space="preserve">Creates a new #BayesGuess that is the probability of a given
classification.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #BayesGuess.</doc>
          <type name="Guess" c:type="BayesGuess*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the classification.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="probability" transfer-ownership="none">
            <doc xml:space="preserve">The probability of the classification.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_name" c:identifier="bayes_guess_get_name">
        <doc xml:space="preserve">Retrieves the classification name for which this guess represents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string which should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="guess" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesGuess.</doc>
            <type name="Guess" c:type="BayesGuess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_probability"
              c:identifier="bayes_guess_get_probability">
        <doc xml:space="preserve">Retrieves the probability that the input data matches the classification
this guess represents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gdouble between 0.0 and 1.0.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="guess" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesGuess.</doc>
            <type name="Guess" c:type="BayesGuess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="bayes_guess_ref">
        <doc xml:space="preserve">Increments the reference count of @guess by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The instance provided, @guess.</doc>
          <type name="Guess" c:type="BayesGuess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="guess" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesGuess.</doc>
            <type name="Guess" c:type="BayesGuess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="bayes_guess_unref">
        <doc xml:space="preserve">Decrements the reference count of @guess by one. Once the reference count
reaches zero, the structure and allocated resources are released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="guess" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesGuess.</doc>
            <type name="Guess" c:type="BayesGuess*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <interface name="Storage"
               c:symbol-prefix="storage"
               c:type="BayesStorage"
               glib:type-name="BayesStorage"
               glib:get-type="bayes_storage_get_type"
               glib:type-struct="StorageIface">
      <virtual-method name="add_token_count" invoker="add_token_count">
        <doc xml:space="preserve">This function will add a token to the storage, applying it to the given
classification. @count should indiciate the number of times that the
token was found.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification to store the token in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve">The token to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve">The count of times @token was found.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_names" invoker="get_names">
        <doc xml:space="preserve">Retrieves the names of the classifications trained in this storage
instance. The result should be freed with g_strfreev().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GStrv of class names.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_token_count" invoker="get_token_count">
        <doc xml:space="preserve">Retrieves the number of times @token has been found in the training
data. If @token is %NULL, the count of all items in the classification
will be retrieved. If @name is %NULL, then the count of all the
instances of @token in the all the classifications.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the count of all items.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The classification or %NULL for all.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The token or %NULL for all.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_token_probability"
                      invoker="get_token_probability">
        <doc xml:space="preserve">Checks to see the probability of a token being a given classification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gdouble between 0.0 and 1.0 containing the probability.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve">The desired token.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_token" c:identifier="bayes_storage_add_token">
        <doc xml:space="preserve">This function will add a token to the storage, applying it to the given
classification.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification to store the token in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve">The token to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_token_count"
              c:identifier="bayes_storage_add_token_count">
        <doc xml:space="preserve">This function will add a token to the storage, applying it to the given
classification. @count should indiciate the number of times that the
token was found.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification to store the token in.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve">The token to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve">The count of times @token was found.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_names" c:identifier="bayes_storage_get_names">
        <doc xml:space="preserve">Retrieves the names of the classifications trained in this storage
instance. The result should be freed with g_strfreev().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GStrv of class names.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_token_count"
              c:identifier="bayes_storage_get_token_count">
        <doc xml:space="preserve">Retrieves the number of times @token has been found in the training
data. If @token is %NULL, the count of all items in the classification
will be retrieved. If @name is %NULL, then the count of all the
instances of @token in the all the classifications.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the count of all items.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The classification or %NULL for all.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The token or %NULL for all.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_token_probability"
              c:identifier="bayes_storage_get_token_probability">
        <doc xml:space="preserve">Checks to see the probability of a token being a given classification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gdouble between 0.0 and 1.0 containing the probability.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">A #BayesStorage.</doc>
            <type name="Storage" c:type="BayesStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The classification.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve">The desired token.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="StorageIface"
            c:type="BayesStorageIface"
            glib:is-gtype-struct-for="Storage">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="add_token_count">
        <callback name="add_token_count">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="storage" transfer-ownership="none">
              <doc xml:space="preserve">A #BayesStorage.</doc>
              <type name="Storage" c:type="BayesStorage*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve">The classification to store the token in.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="token" transfer-ownership="none">
              <doc xml:space="preserve">The token to add.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <doc xml:space="preserve">The count of times @token was found.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_names">
        <callback name="get_names">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #GStrv of class names.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="storage" transfer-ownership="none">
              <doc xml:space="preserve">A #BayesStorage.</doc>
              <type name="Storage" c:type="BayesStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_token_count">
        <callback name="get_token_count">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #guint containing the count of all items.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="storage" transfer-ownership="none">
              <doc xml:space="preserve">A #BayesStorage.</doc>
              <type name="Storage" c:type="BayesStorage*"/>
            </parameter>
            <parameter name="name"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">The classification or %NULL for all.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="token"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">The token or %NULL for all.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_token_probability">
        <callback name="get_token_probability">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #gdouble between 0.0 and 1.0 containing the probability.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="storage" transfer-ownership="none">
              <doc xml:space="preserve">A #BayesStorage.</doc>
              <type name="Storage" c:type="BayesStorage*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve">The classification.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="token" transfer-ownership="none">
              <doc xml:space="preserve">The desired token.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="StorageMemory"
           c:symbol-prefix="storage_memory"
           c:type="BayesStorageMemory"
           parent="GObject.Object"
           glib:type-name="BayesStorageMemory"
           glib:get-type="bayes_storage_memory_get_type"
           glib:type-struct="StorageMemoryClass">
      <implements name="Storage"/>
      <function name="new" c:identifier="bayes_storage_memory_new">
        <doc xml:space="preserve">Creates a new #BayesStorageMemory instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #BayesStorageMemory.</doc>
          <type name="Storage" c:type="BayesStorage*"/>
        </return-value>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StorageMemoryPrivate" c:type="BayesStorageMemoryPrivate*"/>
      </field>
    </class>
    <record name="StorageMemoryClass"
            c:type="BayesStorageMemoryClass"
            glib:is-gtype-struct-for="StorageMemory">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="StorageMemoryPrivate"
            c:type="BayesStorageMemoryPrivate"
            disguised="1">
    </record>
    <callback name="Tokenizer" c:type="BayesTokenizer">
      <doc xml:space="preserve">#BayesTokenizer is a callback that can be used to tokenize
a piece of text into individual tokens. This is used by a
#BayesClassifier to convert the input text into a form that
may be used when training or guessing probabilities.

The caller is responsible for freeing the result with
g_strfreev().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A newly allocated #GStrv.</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve">The text to tokenize.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:space="preserve">User data provided during registration.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="tokenizer_word" c:identifier="bayes_tokenizer_word">
      <doc xml:space="preserve">Standard tokenizer for input text that tries to split the text
based on whitespace. This uses a simple regex "\w+".</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A #GStrv. Free with g_strfreev().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve">A string of text to tokenize.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">Unused.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
