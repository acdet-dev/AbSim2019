<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <package name="json-rpc-glib-1.0"/>
  <c:include name="json-rpc-glib/json-rpc-glib.h"/>
  <namespace name="JsonRpc"
             version="1.0"
             shared-library="libjson-rpc-glib-1.0-0.dll"
             c:identifier-prefixes="JsonRpc"
             c:symbol-prefixes="json_rpc">
    <class name="Bridge"
           c:symbol-prefix="bridge"
           c:type="JsonRpcBridge"
           parent="GObject.Object"
           glib:type-name="JsonRpcBridge"
           glib:get-type="json_rpc_bridge_get_type"
           glib:type-struct="BridgeClass">
      <doc xml:space="preserve">Bridge between local native procedures and remotes.</doc>
      <constructor name="new" c:identifier="json_rpc_bridge_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #JsonRpcBridge</doc>
          <type name="Bridge" c:type="JsonRpcBridge*"/>
        </return-value>
        <parameters>
          <parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve">the transport to use</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve">protocol version</doc>
            <type name="ProtocolVersion" c:type="JsonRpcProtocolVersion"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_procedures"
                   c:identifier="json_rpc_bridge_new_with_procedures">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #JsonRpcBridge</doc>
          <type name="Bridge" c:type="JsonRpcBridge*"/>
        </return-value>
        <parameters>
          <parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve">the transport to use</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
          <parameter name="procedures" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcProcedureTable allowing the lookup of procedures</doc>
            <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve">protocol version</doc>
            <type name="ProtocolVersion" c:type="JsonRpcProtocolVersion"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="Id" c:type="JsonRpcId*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notification">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="Id" c:type="JsonRpcId*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="response">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="Id" c:type="JsonRpcId*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_buffer_size"
              c:identifier="json_rpc_bridge_get_buffer_size">
        <doc xml:space="preserve">Get the size of @bridge's receiving buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the buffer size</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_procedure_table"
              c:identifier="json_rpc_bridge_get_procedure_table">
        <doc xml:space="preserve">Get the procedure table associated with @bridge.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #JsonRpcProcedureTable</doc>
          <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout" c:identifier="json_rpc_bridge_get_timeout">
        <doc xml:space="preserve">Get the timeout for requests/notification on @bridge.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the timeout</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport"
              c:identifier="json_rpc_bridge_get_transport">
        <doc xml:space="preserve">Get the transport associated with @bridge</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GIOStream</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="json_rpc_bridge_get_version">
        <doc xml:space="preserve">Get the version of JSON-RPC communicated over @bridge</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the version</doc>
          <type name="ProtocolVersion" c:type="JsonRpcProtocolVersion"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_async" c:identifier="json_rpc_bridge_notify_async">
        <doc xml:space="preserve">Notifies (no return value) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">parameters for @method</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_finish"
              c:identifier="json_rpc_bridge_notify_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_notify_async() operation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_verbatim_async"
              c:identifier="json_rpc_bridge_notify_verbatim_async">
        <doc xml:space="preserve">Notifies (no return value) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">stringified parameters for @method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_verbatim_finish"
              c:identifier="json_rpc_bridge_notify_verbatim_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_notify_verbatim_async() operation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_with_array_async"
              c:identifier="json_rpc_bridge_notify_with_array_async">
        <doc xml:space="preserve">Notifies (no return value) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameter array for @method</doc>
            <type name="Json.Array" c:type="JsonArray*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_with_array_finish"
              c:identifier="json_rpc_bridge_notify_with_array_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_notify_with_array_async() operation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_with_object_async"
              c:identifier="json_rpc_bridge_notify_with_object_async">
        <doc xml:space="preserve">Notifies (no return value) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameter object for @method</doc>
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_with_object_finish"
              c:identifier="json_rpc_bridge_notify_with_object_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_notify_with_object_async() operation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_async"
              c:identifier="json_rpc_bridge_request_async">
        <doc xml:space="preserve">Requests (calls) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">parameters for @method</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_finish"
              c:identifier="json_rpc_bridge_request_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_request_async() operation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #JsonNode containing the result of the
 call, or %NULL if an error occurred.</doc>
          <type name="Json.Node" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_verbatim_async"
              c:identifier="json_rpc_bridge_request_verbatim_async">
        <doc xml:space="preserve">Requests (calls) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">stringified parameters for @method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_verbatim_finish"
              c:identifier="json_rpc_bridge_request_verbatim_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_request_verbatim_async() operation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #JsonNode containing the result of the
 call, or %NULL if an error occurred.</doc>
          <type name="Json.Node" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_with_array_async"
              c:identifier="json_rpc_bridge_request_with_array_async">
        <doc xml:space="preserve">Requests (calls) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameter array for @method</doc>
            <type name="Json.Array" c:type="JsonArray*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_with_array_finish"
              c:identifier="json_rpc_bridge_request_with_array_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_request_with_array_async() operation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #JsonNode containing the result of the
 call, or %NULL if an error occurred.</doc>
          <type name="Json.Node" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_with_object_async"
              c:identifier="json_rpc_bridge_request_with_object_async">
        <doc xml:space="preserve">Requests (calls) the remote with @method(@params)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameter object for @method</doc>
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable object, or %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_with_object_finish"
              c:identifier="json_rpc_bridge_request_with_object_finish"
              throws="1">
        <doc xml:space="preserve">Finish a #json_rpc_bridge_request_with_object_async() operation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #JsonNode containing the result of the
 call, or %NULL if an error occurred.</doc>
          <type name="Json.Node" c:type="JsonNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buffer_size"
              c:identifier="json_rpc_bridge_set_buffer_size">
        <doc xml:space="preserve">Set the size of the receiving buffer. This change will not take effect until
the next receiving loop iteration, however json_rpc_bridge_get_buffer_size()
will reflect this change immediately.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">the new buffer size in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_procedure_table"
              c:identifier="json_rpc_bridge_set_procedure_table">
        <doc xml:space="preserve">Set the procedure table associated with @bridge.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="table"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new procedure table or %NULL to remove</doc>
            <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout" c:identifier="json_rpc_bridge_set_timeout">
        <doc xml:space="preserve">Set the timeout for requests/notification on @bridge.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve">the new timeout</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport"
              c:identifier="json_rpc_bridge_set_transport">
        <doc xml:space="preserve">Replaces the current transport with a new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bridge" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcBridge</doc>
            <type name="Bridge" c:type="JsonRpcBridge*"/>
          </instance-parameter>
          <parameter name="transport"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new transport</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Size of the buffer that will be used to receive data. Generally, the
bigger this buffer is, the less overhead associated with parsing.</doc>
        <type name="gsize" c:type="gulong"/>
      </property>
      <property name="procedure-table"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Lookup table for calls on the local end.</doc>
        <type name="ProcedureTable"/>
      </property>
      <property name="timeout" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Timeout in seconds for requests and notifications.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transport"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Transport layer for sending and receiving data.</doc>
        <type name="Gio.IOStream"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">JSON-RPC protocol version spoken over #JsonRpcBridge:transport</doc>
        <type name="ProtocolVersion"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BridgePrivate" c:type="JsonRpcBridgePrivate*"/>
      </field>
      <glib:signal name="error" when="last">
        <doc xml:space="preserve">An error has been thrown from the remote.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">received error</doc>
            <type name="GLib.Error" c:type="gpointer"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">id of the original request</doc>
            <type name="Id" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="notification" when="last" detailed="1">
        <doc xml:space="preserve">A notification has been received and processed. The local procedure will
be executed in the default signal handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the procedure called</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameters for the procedure</doc>
            <type name="Json.Node" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request" when="last" detailed="1">
        <doc xml:space="preserve">A request has been received and processed. The local procedure will be
executed in the default signal handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the procedure called</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">parameters for the procedure</doc>
            <type name="Json.Node" c:type="gpointer"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">id of the request</doc>
            <type name="Id" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="response" when="last">
        <doc xml:space="preserve">A response to a request or notification has been received and processed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">return value of the procedure called</doc>
            <type name="Json.Node" c:type="gpointer"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">id of the original request</doc>
            <type name="Id" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BridgeClass"
            c:type="JsonRpcBridgeClass"
            glib:is-gtype-struct-for="Bridge">
      <doc xml:space="preserve">#JsonRpcBridge class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="request">
        <callback name="request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bridge" transfer-ownership="none">
              <type name="Bridge" c:type="JsonRpcBridge*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <type name="Id" c:type="JsonRpcId*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notification">
        <callback name="notification">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bridge" transfer-ownership="none">
              <type name="Bridge" c:type="JsonRpcBridge*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="response">
        <callback name="response">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bridge" transfer-ownership="none">
              <type name="Bridge" c:type="JsonRpcBridge*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <type name="Id" c:type="JsonRpcId*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error">
        <callback name="error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bridge" transfer-ownership="none">
              <type name="Bridge" c:type="JsonRpcBridge*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <type name="Id" c:type="JsonRpcId*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_json_rpc_reserved1" introspectable="0">
        <callback name="_json_rpc_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved2" introspectable="0">
        <callback name="_json_rpc_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved3" introspectable="0">
        <callback name="_json_rpc_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved4" introspectable="0">
        <callback name="_json_rpc_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="BridgePrivate" c:type="JsonRpcBridgePrivate" disguised="1">
    </record>
    <enumeration name="Encoding" c:type="JsonRpcEncoding">
      <doc xml:space="preserve">Encoding of the received data.</doc>
      <member name="utf8" value="0" c:identifier="JSON_RPC_ENCODING_UTF8">
        <doc xml:space="preserve">UTF-8</doc>
      </member>
      <member name="utf16le"
              value="1"
              c:identifier="JSON_RPC_ENCODING_UTF16LE">
        <doc xml:space="preserve">UTF-16 Little Endian</doc>
      </member>
      <member name="utf16be"
              value="2"
              c:identifier="JSON_RPC_ENCODING_UTF16BE">
        <doc xml:space="preserve">UTF-16 Big Endian</doc>
      </member>
      <member name="utf32le"
              value="3"
              c:identifier="JSON_RPC_ENCODING_UTF32LE">
        <doc xml:space="preserve">UTF-32 Little Endian</doc>
      </member>
      <member name="utf32be"
              value="4"
              c:identifier="JSON_RPC_ENCODING_UTF32BE">
        <doc xml:space="preserve">UTF-32 Big Endian</doc>
      </member>
    </enumeration>
    <enumeration name="Error"
                 glib:type-name="JsonRpcError"
                 glib:get-type="json_rpc_error_get_type"
                 c:type="JsonRpcError"
                 glib:error-domain="json-rpc-error-quark">
      <doc xml:space="preserve">A JSON-RPC error as defined in the 2.0 specification. Errors from earlier
specifications will be treated as INTERNAL as they are completely
implementation dependent. They will be stringified and passed as any regular
GError.

Errors do not necessarily fall into these defined values. The scope
[-32099;-32000] are implementation dependent, so be sure to watch out for
these in your implementation.</doc>
      <member name="Parse"
              value="-32700"
              c:identifier="JSON_RPC_ERROR_PARSE"
              glib:nick="Parse">
        <doc xml:space="preserve">Invalid JSON. An error occurred on the server while
 parsing the JSON text.</doc>
      </member>
      <member name="Invalid_Request"
              value="-32600"
              c:identifier="JSON_RPC_ERROR_INVALID_REQUEST"
              glib:nick="Invalid_Request">
        <doc xml:space="preserve">The received JSON is not a valid JSON-RPC
 Request.</doc>
      </member>
      <member name="Method_not_found"
              value="-32601"
              c:identifier="JSON_RPC_ERROR_METHOD_NOT_FOUND"
              glib:nick="Method_not_found">
        <doc xml:space="preserve">The requested remote-procedure does not
 exist / is not available.</doc>
      </member>
      <member name="Invalid_params"
              value="-32602"
              c:identifier="JSON_RPC_ERROR_INVALID_PARAMS"
              glib:nick="Invalid_params">
        <doc xml:space="preserve">Invalid method parameters.</doc>
      </member>
      <member name="Internal"
              value="-32603"
              c:identifier="JSON_RPC_ERROR_INTERNAL"
              glib:nick="Internal">
        <doc xml:space="preserve">Internal JSON-RPC error.</doc>
      </member>
      <function name="quark" c:identifier="json_rpc_error_quark">
        <doc xml:space="preserve">Gets the #JsonRpcError domain quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GQuark</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="Id"
            c:type="JsonRpcId"
            glib:type-name="JsonRpcId"
            glib:get-type="json_rpc_id_get_type"
            c:symbol-prefix="id">
      <doc xml:space="preserve">A generic JSON-RPC id for both incoming and outgoing requests. The structure
itself is completely opaque and should only be regarded as a string.</doc>
      <constructor name="new" c:identifier="json_rpc_id_new">
        <doc xml:space="preserve">Creates a new #JsonRpcId with a null id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcId</doc>
          <type name="Id" c:type="JsonRpcId*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_int" c:identifier="json_rpc_id_new_from_int">
        <doc xml:space="preserve">Creates a new #JsonRpcId from an integer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcId</doc>
          <type name="Id" c:type="JsonRpcId*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">integer that will make up the id</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="json_rpc_id_new_from_string">
        <doc xml:space="preserve">Creates a new #JsonRpcId from a string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcId</doc>
          <type name="Id" c:type="JsonRpcId*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">string that will make up the id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="equal" c:identifier="json_rpc_id_equal">
        <doc xml:space="preserve">Test the equality of @first and @second.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @first and @second are equal; %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="first" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcId</doc>
            <type name="Id" c:type="const JsonRpcId*"/>
          </instance-parameter>
          <parameter name="second" transfer-ownership="none">
            <doc xml:space="preserve">another #JsonRpcId</doc>
            <type name="Id" c:type="const JsonRpcId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_null" c:identifier="json_rpc_id_is_null">
        <doc xml:space="preserve">Checks whether @id is null.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @id is a %NULL pointer or a null id; %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcId or %NULL</doc>
            <type name="Id" c:type="const JsonRpcId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="json_rpc_id_ref">
        <doc xml:space="preserve">Increase by one the reference count of a #JsonRpcId.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the passed #JsonRpcId</doc>
          <type name="Id" c:type="JsonRpcId*"/>
        </return-value>
        <parameters>
          <instance-parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcId</doc>
            <type name="Id" c:type="JsonRpcId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="json_rpc_id_to_string">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the stringified value of @id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcId</doc>
            <type name="Id" c:type="const JsonRpcId*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="json_rpc_id_unref">
        <doc xml:space="preserve">Decrease by one the reference count of a #JsonRpcId. If the reference count
 reaches zero, the object is automatically destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcId</doc>
            <type name="Id" c:type="JsonRpcId*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ParameterType" c:type="JsonRpcParameterType">
      <member name="null" value="0" c:identifier="JSON_RPC_PARAMETER_NULL">
      </member>
      <member name="array" value="1" c:identifier="JSON_RPC_PARAMETER_ARRAY">
      </member>
      <member name="object" value="2" c:identifier="JSON_RPC_PARAMETER_OBJECT">
      </member>
    </enumeration>
    <record name="Parameters"
            c:type="JsonRpcParameters"
            glib:type-name="JsonRpcParameters"
            glib:get-type="json_rpc_parameters_get_type"
            c:symbol-prefix="parameters">
      <doc xml:space="preserve">Precompiled parameters for a JSON-RPC notification/request.</doc>
      <constructor name="new" c:identifier="json_rpc_parameters_new">
        <doc xml:space="preserve">Creates a new empty #JsonRpcParameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcParameters</doc>
          <type name="Parameters" c:type="JsonRpcParameters*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_array"
                   c:identifier="json_rpc_parameters_new_with_array">
        <doc xml:space="preserve">Creates a new #JsonRpcParameters with an array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcParameters</doc>
          <type name="Parameters" c:type="JsonRpcParameters*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">array that will be compiled to a string</doc>
            <type name="Json.Array" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_object"
                   c:identifier="json_rpc_parameters_new_with_object">
        <doc xml:space="preserve">Creates a new #JsonRpcParameters with an object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #JsonRpcParameters</doc>
          <type name="Parameters" c:type="JsonRpcParameters*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">object that will be compiled to a string</doc>
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup_array" c:identifier="json_rpc_parameters_dup_array">
        <doc xml:space="preserve">Retrieves the #JsonArray stored inside a #JsonRpcParameters and returns it
with its reference count increased by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #JsonArray with its reference count
 increased.</doc>
          <type name="Json.Array" c:type="JsonArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_object" c:identifier="json_rpc_parameters_dup_object">
        <doc xml:space="preserve">Retrieves the #JsonObject stored inside a #JsonRpcParameters and returns it
with its reference count increased by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #JsonObject with its reference count
 increased.</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_array" c:identifier="json_rpc_parameters_get_array">
        <doc xml:space="preserve">Retrieves the #JsonArray stored inside a #JsonRpcParameters</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #JsonArray</doc>
          <type name="Json.Array" c:type="JsonArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="json_rpc_parameters_get_object">
        <doc xml:space="preserve">Retrieves the #JsonObject stored inside a #JsonRpcParameters</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #JsonObject</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_params_type"
              c:identifier="json_rpc_parameters_get_params_type">
        <return-value transfer-ownership="none">
          <type name="ParameterType" c:type="JsonRpcParameterType"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="json_rpc_parameters_ref">
        <doc xml:space="preserve">Increase by one the reference count of a #JsonRpcParameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the passed #JsonRpcParameters</doc>
          <type name="Parameters" c:type="JsonRpcParameters*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_array" c:identifier="json_rpc_parameters_set_array">
        <doc xml:space="preserve">Sets @array inside @params and increases the #JsonArray reference count</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonArray</doc>
            <type name="Json.Array" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object" c:identifier="json_rpc_parameters_set_object">
        <doc xml:space="preserve">Sets @object inside @params and increases the #JsonObject reference count</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonObject</doc>
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_array" c:identifier="json_rpc_parameters_take_array">
        <doc xml:space="preserve">Sets @array into @params without increasing the #JsonArray reference count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="full">
            <doc xml:space="preserve">a #JsonArray</doc>
            <type name="Json.Array" c:type="JsonArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_object"
              c:identifier="json_rpc_parameters_take_object">
        <doc xml:space="preserve">Sets @object into @params without increasing the #JsonObject reference
count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="full">
            <doc xml:space="preserve">a #JsonObject</doc>
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="json_rpc_parameters_to_string">
        <doc xml:space="preserve">Compiles @params into a string if it's marked dirty.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the stringified value of @params ready to be inserted directly
 into a JSON-RPC request.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="json_rpc_parameters_unref">
        <doc xml:space="preserve">Decrease by one the reference count of a #JsonRpcParameters. If the
 reference count reaches zero, the object is automatically destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcParameters</doc>
            <type name="Parameters" c:type="JsonRpcParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="Procedure" c:type="JsonRpcProcedure">
      <doc xml:space="preserve">A remote procedure on the local end.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <doc xml:space="preserve">Parameters passed to the function, in a #JsonNode</doc>
          <type name="Json.Node" c:type="JsonNode*"/>
        </parameter>
        <parameter name="response" transfer-ownership="full">
          <doc xml:space="preserve">response object for returning data</doc>
          <type name="Response" c:type="JsonRpcResponse*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:space="preserve">user data from registering the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="ProcedureTable"
               c:symbol-prefix="procedure_table"
               c:type="JsonRpcProcedureTable"
               glib:type-name="JsonRpcProcedureTable"
               glib:get-type="json_rpc_procedure_table_get_type"
               glib:type-struct="ProcedureTableIface">
      <doc xml:space="preserve">An abstract lookup table for a remote procedure lookup on the local end.</doc>
      <virtual-method name="find" invoker="find" introspectable="0">
        <doc xml:space="preserve">Looks up a method by the name of @name in the lookup table @table.</doc>
        <return-value>
          <doc xml:space="preserve">the delegate associated with
 the method, or %NULL if not found</doc>
          <type name="Procedure" c:type="JsonRpcProcedure"/>
        </return-value>
        <parameters>
          <instance-parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcProcedureTable</doc>
            <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the method being looked up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     closure="1">
            <doc xml:space="preserve">user data for the returned
 delegate</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="find"
              c:identifier="json_rpc_procedure_table_find"
              introspectable="0">
        <doc xml:space="preserve">Looks up a method by the name of @name in the lookup table @table.</doc>
        <return-value>
          <doc xml:space="preserve">the delegate associated with
 the method, or %NULL if not found</doc>
          <type name="Procedure" c:type="JsonRpcProcedure"/>
        </return-value>
        <parameters>
          <instance-parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcProcedureTable</doc>
            <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the method being looked up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">user data for the returned
 delegate</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ProcedureTableIface"
            c:type="JsonRpcProcedureTableIface"
            glib:is-gtype-struct-for="ProcedureTable">
      <doc xml:space="preserve">Interface definition for #JsonRpcProcedureTable.</doc>
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="find" introspectable="0">
        <callback name="find" introspectable="0">
          <return-value>
            <doc xml:space="preserve">the delegate associated with
 the method, or %NULL if not found</doc>
            <type name="Procedure" c:type="JsonRpcProcedure"/>
          </return-value>
          <parameters>
            <parameter name="table" transfer-ownership="none">
              <doc xml:space="preserve">a #JsonRpcProcedureTable</doc>
              <type name="ProcedureTable" c:type="JsonRpcProcedureTable*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve">name of the method being looked up</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="user_data"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="none"
                       closure="2">
              <doc xml:space="preserve">user data for the returned
 delegate</doc>
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ProtocolVersion"
                 glib:type-name="JsonRpcProtocolVersion"
                 glib:get-type="json_rpc_protocol_version_get_type"
                 c:type="JsonRpcProtocolVersion">
      <doc xml:space="preserve">Version of JSON-RPC communicated between server and client</doc>
      <member name="1_0"
              value="1"
              c:identifier="JSON_RPC_PROTOCOL_VERSION_1_0"
              glib:nick="1_0">
      </member>
      <member name="1_1_WD"
              value="2"
              c:identifier="JSON_RPC_PROTOCOL_VERSION_1_1_WD"
              glib:nick="1_1-WD">
      </member>
      <member name="1_1_Alt"
              value="3"
              c:identifier="JSON_RPC_PROTOCOL_VERSION_1_1_ALT"
              glib:nick="1_1-Alt">
      </member>
      <member name="1_2"
              value="4"
              c:identifier="JSON_RPC_PROTOCOL_VERSION_1_2"
              glib:nick="1_2">
        <doc xml:space="preserve">Original 2.0 specification</doc>
      </member>
      <member name="2_0"
              value="5"
              c:identifier="JSON_RPC_PROTOCOL_VERSION_2_0"
              glib:nick="2_0">
        <doc xml:space="preserve">Revised 2.0 specification</doc>
      </member>
    </enumeration>
    <class name="Response"
           c:symbol-prefix="response"
           c:type="JsonRpcResponse"
           parent="GObject.Object"
           glib:type-name="JsonRpcResponse"
           glib:get-type="json_rpc_response_get_type"
           glib:type-struct="ResponseClass">
      <doc xml:space="preserve">Response object for JSON-RPC requests.</doc>
      <method name="get_context" c:identifier="json_rpc_response_get_context">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GMainContext associated with @response.</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="json_rpc_response_get_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #JsonRpcId associated with @response.</doc>
          <type name="Id" c:type="JsonRpcId*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="respond" c:identifier="json_rpc_response_respond">
        <doc xml:space="preserve">Responds to a JSON-RPC request with a #JsonNode. This function may be called
from any thread, but only once. Once this has been called, no other calls to
any respond() or error() functions may be called, and vice versa.

This function is not entirely thread-safe, meaning if it's called twice from
two different threads, the behavior is undefined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="full">
            <doc xml:space="preserve">a #JsonNode as a return value to the procedure call,
 or %NULL to ignore</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error"
              c:identifier="json_rpc_response_set_error"
              introspectable="0">
        <doc xml:space="preserve">Responds to a JSON-RPC request with an error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">error domain</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve">error code</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">printf()-style format for error message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">parameters for message format
see_also: #json_rpc_response_respond</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error_valist"
              c:identifier="json_rpc_response_set_error_valist"
              introspectable="0">
        <doc xml:space="preserve">Responds to a JSON-RPC request with an error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">error domain</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve">error code</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">printf()-style format for error message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve">va_list of parameters for the message format
see_also: #json_rpc_response_respond</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_error"
              c:identifier="json_rpc_response_set_from_error">
        <doc xml:space="preserve">Responds to a JSON-RPC request with an error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">a #GError as a return value to the procedure call.
see_also: #json_rpc_response_respond</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="json_rpc_response_set_id">
        <doc xml:space="preserve">Set the id associated with @response.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new #JsonRpcId</doc>
            <type name="Id" c:type="JsonRpcId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_error" c:identifier="json_rpc_response_take_error">
        <doc xml:space="preserve">Responds to a JSON-RPC request with an error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">a #JsonRpcResponse</doc>
            <type name="Response" c:type="JsonRpcResponse*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="full">
            <doc xml:space="preserve">a #GError as a return value to the procedure call.
see_also: #json_rpc_response_respond</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The context in which the response callback will be called.</doc>
        <type name="GLib.MainContext" c:type="gpointer"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #JsonRpcId associated with the call waiting for a response.</doc>
        <type name="Id"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ResponsePrivate" c:type="JsonRpcResponsePrivate*"/>
      </field>
    </class>
    <record name="ResponseClass"
            c:type="JsonRpcResponseClass"
            glib:is-gtype-struct-for="Response">
      <doc xml:space="preserve">#JsonRpcResponse class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_json_rpc_reserved1" introspectable="0">
        <callback name="_json_rpc_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved2" introspectable="0">
        <callback name="_json_rpc_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved3" introspectable="0">
        <callback name="_json_rpc_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_json_rpc_reserved4" introspectable="0">
        <callback name="_json_rpc_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ResponsePrivate"
            c:type="JsonRpcResponsePrivate"
            disguised="1">
    </record>
    <function name="error_quark"
              c:identifier="json_rpc_error_quark"
              moved-to="Error.quark">
      <doc xml:space="preserve">Gets the #JsonRpcError domain quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
