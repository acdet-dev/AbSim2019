<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <namespace name="Push"
             version="1.0"
             shared-library="libpush-glib-1.0-0.dll"
             c:identifier-prefixes="Push"
             c:symbol-prefixes="push">
    <class name="ApsClient"
           c:symbol-prefix="aps_client"
           c:type="PushApsClient"
           parent="GObject.Object"
           glib:type-name="PushApsClient"
           glib:get-type="push_aps_client_get_type"
           glib:type-struct="ApsClientClass">
      <function name="error_quark" c:identifier="push_aps_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="deliver_async"
              c:identifier="push_aps_client_deliver_async">
        <doc xml:space="preserve">Asynchronously requests that @message be delivered to @identity.
The message is serialized and sent via the Apple push notification
gateway who performs the actual delivery to the identified device.

@callback MUST call push_aps_client_deliver_finish() with the
provided #GAsyncResult.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsClient.</doc>
            <type name="ApsClient" c:type="PushApsClient*"/>
          </instance-parameter>
          <parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsIdentity.</doc>
            <type name="ApsIdentity" c:type="PushApsIdentity*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deliver_finish"
              c:identifier="push_aps_client_deliver_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to push_aps_client_deliver_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsClient.</doc>
            <type name="ApsClient" c:type="PushApsClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="feedback-interval"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ApsClientMode"/>
      </property>
      <property name="ssl-cert-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ssl-key-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tls-certificate"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.TlsCertificate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ApsClientPrivate" c:type="PushApsClientPrivate*"/>
      </field>
      <glib:signal name="identity-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ApsIdentity"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ApsClientClass"
            c:type="PushApsClientClass"
            glib:is-gtype-struct-for="ApsClient">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ApsClientError" c:type="PushApsClientError">
    </enumeration>
    <enumeration name="ApsClientMode"
                 glib:type-name="PushApsClientMode"
                 glib:get-type="push_aps_client_mode_get_type"
                 c:type="PushApsClientMode">
      <member name="PRODUCTION"
              value="1"
              c:identifier="PUSH_APS_CLIENT_PRODUCTION"
              glib:nick="PRODUCTION">
      </member>
      <member name="SANDBOX"
              value="2"
              c:identifier="PUSH_APS_CLIENT_SANDBOX"
              glib:nick="SANDBOX">
      </member>
    </enumeration>
    <record name="ApsClientPrivate"
            c:type="PushApsClientPrivate"
            disguised="1">
    </record>
    <class name="ApsIdentity"
           c:symbol-prefix="aps_identity"
           c:type="PushApsIdentity"
           parent="GObject.Object"
           glib:type-name="PushApsIdentity"
           glib:get-type="push_aps_identity_get_type"
           glib:type-struct="ApsIdentityClass">
      <constructor name="new" c:identifier="push_aps_identity_new">
        <doc xml:space="preserve">Creates a new #PushApsIdentity for the device token.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #PushApsIdentity.</doc>
          <type name="ApsIdentity" c:type="PushApsIdentity*"/>
        </return-value>
        <parameters>
          <parameter name="device_token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The APS device token as base64.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_device_token"
              c:identifier="push_aps_identity_get_device_token">
        <doc xml:space="preserve">Fetches the base64 encoded device token.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string which should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsIdentity.</doc>
            <type name="ApsIdentity" c:type="PushApsIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_device_token"
              c:identifier="push_aps_identity_set_device_token">
        <doc xml:space="preserve">Sets the "device-token" property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsIdentity.</doc>
            <type name="ApsIdentity" c:type="PushApsIdentity*"/>
          </instance-parameter>
          <parameter name="device_token" transfer-ownership="none">
            <doc xml:space="preserve">The "device-token".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="device-token" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ApsIdentityPrivate" c:type="PushApsIdentityPrivate*"/>
      </field>
    </class>
    <record name="ApsIdentityClass"
            c:type="PushApsIdentityClass"
            glib:is-gtype-struct-for="ApsIdentity">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ApsIdentityPrivate"
            c:type="PushApsIdentityPrivate"
            disguised="1">
    </record>
    <class name="ApsMessage"
           c:symbol-prefix="aps_message"
           c:type="PushApsMessage"
           parent="GObject.Object"
           glib:type-name="PushApsMessage"
           glib:get-type="push_aps_message_get_type"
           glib:type-struct="ApsMessageClass">
      <constructor name="new" c:identifier="push_aps_message_new">
        <return-value transfer-ownership="full">
          <type name="ApsMessage" c:type="PushApsMessage*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_json"
                   c:identifier="push_aps_message_new_from_json">
        <return-value transfer-ownership="full">
          <type name="ApsMessage" c:type="PushApsMessage*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_extra" c:identifier="push_aps_message_add_extra">
        <doc xml:space="preserve">Adds a JsonValue to the JSON portion of a push notification. @key MUST NOT
be "aps", as that is reserved for internal use by the APS message.

The extra value will be sent inside the JSON encoded message using @key
as the field name in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key to associate with @value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #JsonNode to send with the message.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_extra_string"
              c:identifier="push_aps_message_add_extra_string">
        <doc xml:space="preserve">Adds a key/value pair to the resulting JSON encoded string that is
delivered to a #PushApsIdentity.

This simply creates a JsonNode containing @value and calls
push_aps_message_add_extra().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key for @value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value for @key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alert" c:identifier="push_aps_message_get_alert">
        <doc xml:space="preserve">Fetches the "alert" property, containing the text of the alert message
or %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_badge" c:identifier="push_aps_message_get_badge">
        <doc xml:space="preserve">Retrieves the "badge" property, containing the badge number that should
be displayed once the message is received by an identity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The badge number.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expires_at"
              c:identifier="push_aps_message_get_expires_at">
        <doc xml:space="preserve">Retrieves the "expires-at" property, containing the time that the message
should expire if it could not be delivered.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDateTime, or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_json" c:identifier="push_aps_message_get_json">
        <doc xml:space="preserve">Retrieves the message as a JSON encoded message. The resulting string
is owned by the #PushApsMessage instance and should not be freed.

The string may be cached for future calls to this function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The message as a JSON encoded string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sound" c:identifier="push_aps_message_get_sound">
        <doc xml:space="preserve">Retrieves the "sound" property, containing the sound to be played
upon receipt of the message.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alert" c:identifier="push_aps_message_set_alert">
        <doc xml:space="preserve">Sets the "alert" property of @message. This contains the text that should
be displayed in the alert message, or %NULL for no alert text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="alert"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The alert text to display.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_badge" c:identifier="push_aps_message_set_badge">
        <doc xml:space="preserve">Sets the "badge" property. This contains the number to be displayed on
the applications badge on an iOS device. To unset the badge, set this
property to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="badge" transfer-ownership="none">
            <doc xml:space="preserve">The badge number to display or zero to unset.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expires_at"
              c:identifier="push_aps_message_set_expires_at">
        <doc xml:space="preserve">Sets the "expires-at" property, containing the time at which the message
should expire and further attempts to deliver should be aborted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="expires_at"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GDateTime, or %NULL.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sound" c:identifier="push_aps_message_set_sound">
        <doc xml:space="preserve">Sest the "sound" property of the message. This contains the sound to be
played upon receipt of the message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushApsMessage.</doc>
            <type name="ApsMessage" c:type="PushApsMessage*"/>
          </instance-parameter>
          <parameter name="sound"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A string containing the sound to play or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="alert" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="badge" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="expires-at" writable="1" transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="json" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sound" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ApsMessagePrivate" c:type="PushApsMessagePrivate*"/>
      </field>
    </class>
    <record name="ApsMessageClass"
            c:type="PushApsMessageClass"
            glib:is-gtype-struct-for="ApsMessage">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ApsMessagePrivate"
            c:type="PushApsMessagePrivate"
            disguised="1">
    </record>
    <class name="C2dmClient"
           c:symbol-prefix="c2dm_client"
           c:type="PushC2dmClient"
           parent="Soup.SessionAsync"
           glib:type-name="PushC2dmClient"
           glib:get-type="push_c2dm_client_get_type"
           glib:type-struct="C2dmClientClass">
      <function name="error_quark" c:identifier="push_c2dm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="deliver_async"
              c:identifier="push_c2dm_client_deliver_async">
        <doc xml:space="preserve">Requests that @message is pushed to the device identified by @identity.
Upon completion, @callback will be executed and is expected to call
push_c2dm_client_deliver_finish() to retrieve the result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmClient.</doc>
            <type name="C2dmClient" c:type="PushC2dmClient*"/>
          </instance-parameter>
          <parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmIdentity.</doc>
            <type name="C2dmIdentity" c:type="PushC2dmIdentity*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deliver_finish"
              c:identifier="push_c2dm_client_deliver_finish"
              throws="1">
        <doc xml:space="preserve">Completes a request to push_c2dm_client_deliver_async(). If successful,
%TRUE is returned. Otherwise, %FALSE is returned and @error is set to
the error code representing the remote failure.

Callers may want to check the error domain and code of an error to
determine if they should remove the device from their records. Such
an error may happen if the device has unregistered from push notifications
but you have not yet been notified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmClient.</doc>
            <type name="C2dmClient" c:type="PushC2dmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-token" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Soup.SessionAsync" c:type="SoupSessionAsync"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="C2dmClientPrivate" c:type="PushC2dmClientPrivate*"/>
      </field>
      <glib:signal name="identity-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="C2dmIdentity"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="C2dmClientClass"
            c:type="PushC2dmClientClass"
            glib:is-gtype-struct-for="C2dmClient">
      <field name="parent_class">
        <type name="Soup.SessionAsyncClass" c:type="SoupSessionAsyncClass"/>
      </field>
    </record>
    <enumeration name="C2dmClientError" c:type="PushC2dmClientError">
    </enumeration>
    <record name="C2dmClientPrivate"
            c:type="PushC2dmClientPrivate"
            disguised="1">
    </record>
    <class name="C2dmIdentity"
           c:symbol-prefix="c2dm_identity"
           c:type="PushC2dmIdentity"
           parent="GObject.Object"
           glib:type-name="PushC2dmIdentity"
           glib:get-type="push_c2dm_identity_get_type"
           glib:type-struct="C2dmIdentityClass">
      <constructor name="new" c:identifier="push_c2dm_identity_new">
        <doc xml:space="preserve">Creates a new #PushC2dmIdentity.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #PushC2dmIdentity.</doc>
          <type name="C2dmIdentity" c:type="PushC2dmIdentity*"/>
        </return-value>
        <parameters>
          <parameter name="registration_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The registration_id.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_registration_id"
              c:identifier="push_c2dm_identity_get_registration_id">
        <doc xml:space="preserve">Fetches the "registration-id" property. The registration id is provided
by a device that has registered with the C2DM service.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the registration id.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmIdentity.</doc>
            <type name="C2dmIdentity" c:type="PushC2dmIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_registration_id"
              c:identifier="push_c2dm_identity_set_registration_id">
        <doc xml:space="preserve">Sets the "registration-id" property. The registration id is provided
by a device that has registered with the C2DM service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmIdentity.</doc>
            <type name="C2dmIdentity" c:type="PushC2dmIdentity*"/>
          </instance-parameter>
          <parameter name="registration_id" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the registration_id.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="registration-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "registration-id" property is the registration_id provided by
a client device registering for C2DM via the Android Intent.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="C2dmIdentityPrivate" c:type="PushC2dmIdentityPrivate*"/>
      </field>
    </class>
    <record name="C2dmIdentityClass"
            c:type="PushC2dmIdentityClass"
            glib:is-gtype-struct-for="C2dmIdentity">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="C2dmIdentityPrivate"
            c:type="PushC2dmIdentityPrivate"
            disguised="1">
    </record>
    <class name="C2dmMessage"
           c:symbol-prefix="c2dm_message"
           c:type="PushC2dmMessage"
           parent="GObject.Object"
           glib:type-name="PushC2dmMessage"
           glib:get-type="push_c2dm_message_get_type"
           glib:type-struct="C2dmMessageClass">
      <constructor name="new" c:identifier="push_c2dm_message_new">
        <doc xml:space="preserve">Creates a new instance of #PushC2dmMessage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #PushC2dmMessage.</doc>
          <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
        </return-value>
      </constructor>
      <method name="add_param" c:identifier="push_c2dm_message_add_param">
        <doc xml:space="preserve">This adds an additional key/value pair to be delivered in the C2DM message.
This is sent as "data.key" to the C2DM service.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">The key for the parameter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value for @key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_params"
              c:identifier="push_c2dm_message_build_params">
        <doc xml:space="preserve">Build the hashtable of parameters to be sent to the C2DM endpoint.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The params for the request.
The hashtable should be freed with g_hash_table_unref.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_collapse_key"
              c:identifier="push_c2dm_message_get_collapse_key">
        <doc xml:space="preserve">Fetches the "collapse-key" property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string which should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delay_while_idle"
              c:identifier="push_c2dm_message_get_delay_while_idle">
        <doc xml:space="preserve">Fetches the "delay-while-idle" property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_collapse_key"
              c:identifier="push_c2dm_message_set_collapse_key">
        <doc xml:space="preserve">Sets the "collapse-key" property to use for the message. This is used
by the C2DM service to collapse multiple messages into a single message
when communicating with a device. This could happen if the device was
offline or messages are sent too fast.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
          <parameter name="collapse_key" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the collapse-key.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delay_while_idle"
              c:identifier="push_c2dm_message_set_delay_while_idle">
        <doc xml:space="preserve">Sets the "delay-while-idle" property. If this is %FALSE, then the
device should receive the message immediately, regardless of if it
is in an idle state. If this is true, the device will wait to wake
up to receive the message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushC2dmMessage.</doc>
            <type name="C2dmMessage" c:type="PushC2dmMessage*"/>
          </instance-parameter>
          <parameter name="delay_while_idle" transfer-ownership="none">
            <doc xml:space="preserve">Indicates c2dm should delay if device is idle.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="collapse-key" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "collapse-key" property represents a key that the C2DM service can
use to collapse multiple messages into a single message. This may happen
if a device is offline while multiple messages have been sent. It also
might also happen if you send messages faster than they deem
appropriate.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="delay-while-idle" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The "delay-while-idle" property indicates that the message should NOT
be immediately delivered to a device if it is in an idle state. This
is generally a good thing to set to %TRUE so that you don't waste
power on the end devices for spurious wakeups.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="C2dmMessagePrivate" c:type="PushC2dmMessagePrivate*"/>
      </field>
    </class>
    <record name="C2dmMessageClass"
            c:type="PushC2dmMessageClass"
            glib:is-gtype-struct-for="C2dmMessage">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="C2dmMessagePrivate"
            c:type="PushC2dmMessagePrivate"
            disguised="1">
    </record>
    <class name="GcmClient"
           c:symbol-prefix="gcm_client"
           c:type="PushGcmClient"
           parent="Soup.SessionAsync"
           glib:type-name="PushGcmClient"
           glib:get-type="push_gcm_client_get_type"
           glib:type-struct="GcmClientClass">
      <constructor name="new" c:identifier="push_gcm_client_new">
        <return-value transfer-ownership="full">
          <type name="GcmClient" c:type="PushGcmClient*"/>
        </return-value>
        <parameters>
          <parameter name="auth_token" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="deliver_async"
              c:identifier="push_gcm_client_deliver_async">
        <doc xml:space="preserve">Asynchronously deliver a #PushGcmMessage to one or more GCM enabled
devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">A #PushGcmClient.</doc>
            <type name="GcmClient" c:type="PushGcmClient*"/>
          </instance-parameter>
          <parameter name="identities" transfer-ownership="none">
            <doc xml:space="preserve">A #GList of #PushGcmIdentity.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GcmIdentity"/>
            </type>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushGcmMessage.</doc>
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deliver_finish"
              c:identifier="push_gcm_client_deliver_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="GcmClient" c:type="PushGcmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-token" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Soup.SessionAsync" c:type="SoupSessionAsync"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GcmClientPrivate" c:type="PushGcmClientPrivate*"/>
      </field>
      <glib:signal name="identity-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GcmIdentity"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="GcmClientClass"
            c:type="PushGcmClientClass"
            glib:is-gtype-struct-for="GcmClient">
      <field name="parent_class">
        <type name="Soup.SessionAsyncClass" c:type="SoupSessionAsyncClass"/>
      </field>
    </record>
    <record name="GcmClientPrivate"
            c:type="PushGcmClientPrivate"
            disguised="1">
    </record>
    <class name="GcmIdentity"
           c:symbol-prefix="gcm_identity"
           c:type="PushGcmIdentity"
           parent="GObject.Object"
           glib:type-name="PushGcmIdentity"
           glib:get-type="push_gcm_identity_get_type"
           glib:type-struct="GcmIdentityClass">
      <constructor name="new" c:identifier="push_gcm_identity_new">
        <return-value transfer-ownership="full">
          <type name="GcmIdentity" c:type="PushGcmIdentity*"/>
        </return-value>
        <parameters>
          <parameter name="registration_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_registration_id"
              c:identifier="push_gcm_identity_get_registration_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <type name="GcmIdentity" c:type="PushGcmIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_registration_id"
              c:identifier="push_gcm_identity_set_registration_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="identity" transfer-ownership="none">
            <type name="GcmIdentity" c:type="PushGcmIdentity*"/>
          </instance-parameter>
          <parameter name="registration_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="registration-id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GcmIdentityPrivate" c:type="PushGcmIdentityPrivate*"/>
      </field>
    </class>
    <record name="GcmIdentityClass"
            c:type="PushGcmIdentityClass"
            glib:is-gtype-struct-for="GcmIdentity">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GcmIdentityPrivate"
            c:type="PushGcmIdentityPrivate"
            disguised="1">
    </record>
    <class name="GcmMessage"
           c:symbol-prefix="gcm_message"
           c:type="PushGcmMessage"
           parent="GObject.Object"
           glib:type-name="PushGcmMessage"
           glib:get-type="push_gcm_message_get_type"
           glib:type-struct="GcmMessageClass">
      <constructor name="new" c:identifier="push_gcm_message_new">
        <return-value transfer-ownership="full">
          <type name="GcmMessage" c:type="PushGcmMessage*"/>
        </return-value>
      </constructor>
      <method name="get_collapse_key"
              c:identifier="push_gcm_message_get_collapse_key">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="push_gcm_message_get_data">
        <doc xml:space="preserve">Fetches the :data property. This corresponds to the "data" field
in a GCM notification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #JsonObject or %NULL.</doc>
          <type name="Json.Object" c:type="JsonObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">A #PushGcmMessage.</doc>
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delay_while_idle"
              c:identifier="push_gcm_message_get_delay_while_idle">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dry_run" c:identifier="push_gcm_message_get_dry_run">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_to_live"
              c:identifier="push_gcm_message_get_time_to_live">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_collapse_key"
              c:identifier="push_gcm_message_set_collapse_key">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
          <parameter name="collapse_key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="push_gcm_message_set_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="Json.Object" c:type="JsonObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delay_while_idle"
              c:identifier="push_gcm_message_set_delay_while_idle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
          <parameter name="delay_while_idle" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dry_run" c:identifier="push_gcm_message_set_dry_run">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
          <parameter name="dry_run" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_to_live"
              c:identifier="push_gcm_message_set_time_to_live">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="GcmMessage" c:type="PushGcmMessage*"/>
          </instance-parameter>
          <parameter name="ttl" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="collapse-key" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="data" writable="1" transfer-ownership="none">
        <type name="Json.Object"/>
      </property>
      <property name="delay-while-idle" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dry-run" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="time-to-live" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GcmMessagePrivate" c:type="PushGcmMessagePrivate*"/>
      </field>
    </class>
    <record name="GcmMessageClass"
            c:type="PushGcmMessageClass"
            glib:is-gtype-struct-for="GcmMessage">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GcmMessagePrivate"
            c:type="PushGcmMessagePrivate"
            disguised="1">
    </record>
  </namespace>
</repository>
