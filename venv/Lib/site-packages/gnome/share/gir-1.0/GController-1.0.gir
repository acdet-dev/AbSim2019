<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <package name="glib-controller-1.0"/>
  <c:include name="glib-controller/glib-controller.h"/>
  <namespace name="GController"
             version="1.0"
             shared-library="libglib-controller-1.0-0.dll"
             c:identifier-prefixes="G"
             c:symbol-prefixes="g">
    <class name="ArrayController"
           c:symbol-prefix="array_controller"
           c:type="GArrayController"
           parent="Controller"
           glib:type-name="GArrayController"
           glib:get-type="g_array_controller_get_type"
           glib:type-struct="ArrayControllerClass">
      <doc xml:space="preserve">The #GArrayController object is a #GController implementation aimed
at controlling #GArray data structures</doc>
      <constructor name="new" c:identifier="g_array_controller_new">
        <doc xml:space="preserve">Creates a new #GArrayController.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GArrayController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_array"
                   c:identifier="g_array_controller_new_with_array"
                   introspectable="0">
        <doc xml:space="preserve">Creates a new #GArrayController controlling the @array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GArrayController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
        <parameters>
          <parameter name="array"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GArray or %NULL</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_array"
              c:identifier="g_array_controller_get_array"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the #GArray controlled by @controller</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a #GArray, or %NULL</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GArrayController</doc>
            <type name="ArrayController" c:type="GArrayController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_array"
              c:identifier="g_array_controller_set_array"
              introspectable="0">
        <doc xml:space="preserve">Sets the #GArray to be controlled by @controller

The #GArrayController will take a reference on the passed #GArray
which will be released when the #GArrayController is disposed or
when unsetting the controlled array by passing %NULL to this
function</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GArrayController</doc>
            <type name="ArrayController" c:type="GArrayController*"/>
          </instance-parameter>
          <parameter name="array"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GArray or %NULL</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="array"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GArray to be controlled by a #GArrayController instance</doc>
        <array name="GLib.Array">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Controller" c:type="GController"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ArrayControllerPrivate" c:type="GArrayControllerPrivate*"/>
      </field>
    </class>
    <record name="ArrayControllerClass"
            c:type="GArrayControllerClass"
            glib:is-gtype-struct-for="ArrayController">
      <doc xml:space="preserve">The &lt;structname&gt;GArrayControllerClass&lt;/structname&gt; structure contains

only private data.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="ControllerClass" c:type="GControllerClass"/>
      </field>
    </record>
    <record name="ArrayControllerPrivate"
            c:type="GArrayControllerPrivate"
            disguised="1">
    </record>
    <constant name="CONTROLLER_MAJOR_VERSION"
              value="0"
              c:type="G_CONTROLLER_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONTROLLER_MICRO_VERSION"
              value="1"
              c:type="G_CONTROLLER_MICRO_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONTROLLER_MINOR_VERSION"
              value="1"
              c:type="G_CONTROLLER_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CONTROLLER_VERSION_S"
              value="0.1.1"
              c:type="G_CONTROLLER_VERSION_S">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Controller"
           c:symbol-prefix="controller"
           c:type="GController"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GController"
           glib:get-type="g_controller_get_type"
           glib:type-struct="ControllerClass">
      <doc xml:space="preserve">#GController is an abstract class for creating controllers (in the
"model-view-controller" pattern sense) for GLib data types.

A #GController is associated to a data storage, and whenever the
storage changes it will emit the #GController::changed signal,
detailing:

&lt;itemizedlist&gt;
  &lt;listitem&gt;&lt;simpara&gt;what kind of change it is&lt;/simpara&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;simpara&gt;where to access the changed data&lt;/simpara&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <type name="Controller" c:type="GController*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="ControllerAction" c:type="GControllerAction"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_event" introspectable="0">
        <return-value>
          <type name="ControllerEvent" c:type="GControllerEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <type name="Controller" c:type="GController*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="ControllerAction" c:type="GControllerAction"/>
          </parameter>
          <parameter name="index_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="indexes" transfer-ownership="none">
            <type name="GObject.ValueArray" c:type="GValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_event"
              c:identifier="g_controller_create_event"
              introspectable="0">
        <doc xml:space="preserve">Creates a new #GControllerEvent for the given indices.

This function should only be used by implementations of the
#GController API.

This is a variadic arguments version of g_controller_create_eventv(),
for the convenience of users of the C API.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created #GControllerEvent
  instance. Use g_object_unref() when done using the returned
  object</doc>
          <type name="ControllerEvent" c:type="GControllerEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GController</doc>
            <type name="Controller" c:type="GController*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">the action for the event</doc>
            <type name="ControllerAction" c:type="GControllerAction"/>
          </parameter>
          <parameter name="index_type" transfer-ownership="none">
            <doc xml:space="preserve">the type of the indices</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_indices" transfer-ownership="none">
            <doc xml:space="preserve">the number of indices, or 0 to create an empty event and
  use the #GControllerEvent API to fill it</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">the indices</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="create_eventv" c:identifier="g_controller_create_eventv">
        <doc xml:space="preserve">Creates a new #GControllerEvent for the given indices.

This function should only be used by implementations of the
#GController API.

The passed @indices array is copied inside the #GControllerEvent
and can be safely freed afterwards.

If @indices is %NULL a new empty event will be created; it is
possible to add indexes to it by using g_controller_event_add_index()
or g_controller_event_add_index_value().

This is a vector-based variant of g_controller_create_event(), for
the convenience of language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created #GControllerEvent
  instance. Use g_object_unref() when done using the returned
  object</doc>
          <type name="ControllerEvent" c:type="GControllerEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GController</doc>
            <type name="Controller" c:type="GController*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">the action for the event</doc>
            <type name="ControllerAction" c:type="GControllerAction"/>
          </parameter>
          <parameter name="index_type" transfer-ownership="none">
            <doc xml:space="preserve">the type of the indices</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="indices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GValueArray containing the indices</doc>
            <type name="GObject.ValueArray" c:type="GValueArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_changed" c:identifier="g_controller_emit_changed">
        <doc xml:space="preserve">Emits the #GController::changed signal with the given
parameters</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GController</doc>
            <type name="Controller" c:type="GController*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">the reference to the changed data</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="first">
        <doc xml:space="preserve">The ::changed signal is emitted each time the data storage controlled
by a #GController instance changes. The type of change is detailed by
the #GControllerAction enumeration and passed as the @action argument
to the signal handlers.

The @event object contains the information necessary for retrieving
the data that was affected by the change from the controlled storage;
the type of the information depends on the #GController.

Views using a #GController to monitor changes inside a data storage
should connect to the #GController::changed signal and update themselves
whenever the signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">the action on the data storage controlled by @controller</doc>
            <type name="ControllerAction"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a reference to the indices changed</doc>
            <type name="ControllerEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="ControllerAction"
                 glib:type-name="GControllerAction"
                 glib:get-type="g_controller_action_get_type"
                 c:type="GControllerAction">
      <doc xml:space="preserve">controlled by a #GController

  controlled by a #GController

  controlled by a #GController

  has been cleared; semantically, it's the equivalent of a

  %G_CONTROLLER_REMOVE for every index of the storage

  has been completely replaced; semantically, it's the equivalent

  of a %G_CONTROLLER_REMOVE for every index of the old storage

  and a %G_CONTROLLER_ADD for every index of the new storage



The available actions supported by a #GController



This enumeration might be extended at later date</doc>
      <member name="invalid_action"
              value="0"
              c:identifier="G_CONTROLLER_INVALID_ACTION"
              glib:nick="invalid-action">
        <doc xml:space="preserve">Marker for initial/error state</doc>
      </member>
      <member name="add"
              value="1"
              c:identifier="G_CONTROLLER_ADD"
              glib:nick="add">
        <doc xml:space="preserve">New items have been added to the storage</doc>
      </member>
      <member name="remove"
              value="2"
              c:identifier="G_CONTROLLER_REMOVE"
              glib:nick="remove">
        <doc xml:space="preserve">Items have been removed from the storage</doc>
      </member>
      <member name="update"
              value="3"
              c:identifier="G_CONTROLLER_UPDATE"
              glib:nick="update">
        <doc xml:space="preserve">Items have been updated in the storage</doc>
      </member>
      <member name="clear"
              value="4"
              c:identifier="G_CONTROLLER_CLEAR"
              glib:nick="clear">
        <doc xml:space="preserve">The storage controlled by a #GController</doc>
      </member>
      <member name="replace"
              value="5"
              c:identifier="G_CONTROLLER_REPLACE"
              glib:nick="replace">
        <doc xml:space="preserve">The storage controlled by a #GController</doc>
      </member>
    </enumeration>
    <record name="ControllerClass"
            c:type="GControllerClass"
            glib:is-gtype-struct-for="Controller">
      <doc xml:space="preserve">#GControllerEvent instance for the given indexes



The &lt;structname&gt;GControllerClass&lt;/structname&gt; structure contains only

private data</doc>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_event" introspectable="0">
        <callback name="create_event" introspectable="0">
          <return-value>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </return-value>
          <parameters>
            <parameter name="controller" transfer-ownership="none">
              <type name="Controller" c:type="GController*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="ControllerAction" c:type="GControllerAction"/>
            </parameter>
            <parameter name="index_type" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="indexes" transfer-ownership="none">
              <type name="GObject.ValueArray" c:type="GValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="controller" transfer-ownership="none">
              <type name="Controller" c:type="GController*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="ControllerAction" c:type="GControllerAction"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="ControllerEvent" c:type="GControllerEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_g_controller_padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ControllerEvent"
           c:symbol-prefix="controller_event"
           c:type="GControllerEvent"
           parent="GObject.Object"
           glib:type-name="GControllerEvent"
           glib:get-type="g_controller_event_get_type"
           glib:type-struct="ControllerEventClass">
      <doc xml:space="preserve">The #GControllerEvent is an object created by a #GController whenever
a controlled data storage changes. The #GControllerEvent stores the
the location of the changed data in a way that allows a View to query the
storage for the actual data.

A #GControllerEvent can only be created by a #GController using
g_controller_create_event() and should be passed to the
#GController::changed signal emitter, g_controller_emit_changed()</doc>
      <method name="add_index"
              c:identifier="g_controller_event_add_index"
              introspectable="0">
        <doc xml:space="preserve">Variadic arguments version of g_controller_event_add_index_value(),
for the convenience of users of the C API</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">the index to add</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_index_value"
              c:identifier="g_controller_event_add_index_value">
        <doc xml:space="preserve">Adds an index stored inside a #GValue.

The #GValue must contain a value with the same type as the
#GControllerEvent:index-type

This function is mostly useful for bindings</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a #GValue containing an index</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action" c:identifier="g_controller_event_get_action">
        <doc xml:space="preserve">Retrieves the action that caused the creation of this event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GControllerAction</doc>
          <type name="ControllerAction" c:type="GControllerAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller"
              c:identifier="g_controller_event_get_controller">
        <doc xml:space="preserve">Retrieves a pointer to the #GController that created this event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a #GController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index"
              c:identifier="g_controller_event_get_index"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the index inside the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">return location for the index value at the given index_ition</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_int"
              c:identifier="g_controller_event_get_index_int">
        <doc xml:space="preserve">Typed accessor for integer indexes stored inside the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer index at the given index_ition</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_pointer"
              c:identifier="g_controller_event_get_index_pointer">
        <doc xml:space="preserve">Typed accessor for pointer indexes stored inside the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer index at the given index_ition</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_string"
              c:identifier="g_controller_event_get_index_string">
        <doc xml:space="preserve">Typed accessor for string indexes stored inside the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string index at the given index_ition</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_type"
              c:identifier="g_controller_event_get_index_type">
        <doc xml:space="preserve">Retrieves the type of the indices stored by the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index_uint"
              c:identifier="g_controller_event_get_index_uint">
        <doc xml:space="preserve">Typed accessor for unsigned integer indexes stored inside the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an unsigned integer index at the given index_ition</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_value"
              c:identifier="g_controller_event_get_index_value">
        <doc xml:space="preserve">Retrieves the index at @index_ and stores it inside @value</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the position of the index, between 0 and the number of
  indices stored by @event</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an uninitialized #GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_indices"
              c:identifier="g_controller_event_get_n_indices">
        <doc xml:space="preserve">Retrieves the number of indices stored by the @event</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of indices</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GControllerEvent</doc>
            <type name="ControllerEvent" c:type="GControllerEvent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="action"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GControllerAction that caused the creation of the event</doc>
        <type name="ControllerAction"/>
      </property>
      <property name="controller"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GController instance that created this event</doc>
        <type name="Controller"/>
      </property>
      <property name="index-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GType representation of an index stored by the event</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="indices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A #GValueArray containing all the indices stored by the event

The indices are meaningful only for the data storage controlled
by the #GController that created this event</doc>
        <type name="GObject.ValueArray"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ControllerEventPrivate" c:type="GControllerEventPrivate*"/>
      </field>
    </class>
    <record name="ControllerEventClass"
            c:type="GControllerEventClass"
            glib:is-gtype-struct-for="ControllerEvent">
      <doc xml:space="preserve">The &lt;structname&gt;GControllerEventClass&lt;/structname&gt; structure

contains only private data</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_g_controller_event0" introspectable="0">
        <callback name="_g_controller_event0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event1" introspectable="0">
        <callback name="_g_controller_event1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event2" introspectable="0">
        <callback name="_g_controller_event2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event3" introspectable="0">
        <callback name="_g_controller_event3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event4" introspectable="0">
        <callback name="_g_controller_event4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event5" introspectable="0">
        <callback name="_g_controller_event5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event6" introspectable="0">
        <callback name="_g_controller_event6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event7" introspectable="0">
        <callback name="_g_controller_event7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_g_controller_event8" introspectable="0">
        <callback name="_g_controller_event8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ControllerEventPrivate"
            c:type="GControllerEventPrivate"
            disguised="1">
    </record>
    <class name="HashController"
           c:symbol-prefix="hash_controller"
           c:type="GHashController"
           parent="Controller"
           glib:type-name="GHashController"
           glib:get-type="g_hash_controller_get_type"
           glib:type-struct="HashControllerClass">
      <doc xml:space="preserve">The #GHashController object is a #GController implementation aimed
at controlling #GHashTable data structures</doc>
      <constructor name="new" c:identifier="g_hash_controller_new">
        <doc xml:space="preserve">Creates a new #GHashController.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GHashController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_hash"
                   c:identifier="g_hash_controller_new_with_hash">
        <doc xml:space="preserve">Creates a new #GHashController controlling the @hash.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GHashController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
        <parameters>
          <parameter name="hash"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GHashTable or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_hash" c:identifier="g_hash_controller_get_hash">
        <doc xml:space="preserve">Retrieves the #GHashTable controlled by @controller</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a #GHashTable, or %NULL</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GHashController</doc>
            <type name="HashController" c:type="GHashController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_hash" c:identifier="g_hash_controller_set_hash">
        <doc xml:space="preserve">Sets the #GHashTable to be controlled by @controller

The #GHashController will take a reference on the passed #GHashTable
which will be released when the #GHashController is disposed or when
unsetting the controlled hash by passing %NULL to this function</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GHashController</doc>
            <type name="HashController" c:type="GHashController*"/>
          </instance-parameter>
          <parameter name="hash"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GHashTable or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="hash"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GHashTable to be controlled by a #GHashController instance</doc>
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Controller" c:type="GController"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HashControllerPrivate" c:type="GHashControllerPrivate*"/>
      </field>
    </class>
    <record name="HashControllerClass"
            c:type="GHashControllerClass"
            glib:is-gtype-struct-for="HashController">
      <doc xml:space="preserve">The &lt;structname&gt;GHashControllerClass&lt;/structname&gt; structure contains

only private data.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="ControllerClass" c:type="GControllerClass"/>
      </field>
    </record>
    <record name="HashControllerPrivate"
            c:type="GHashControllerPrivate"
            disguised="1">
    </record>
    <interface name="Iterable"
               c:symbol-prefix="iterable"
               c:type="GIterable"
               glib:type-name="GIterable"
               glib:get-type="g_iterable_get_type"
               glib:type-struct="IterableInterface">
      <virtual-method name="create_iterator" invoker="create_iterator">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Iterator" c:type="GIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterable" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterable" c:type="GIterable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create_iterator" c:identifier="g_iterable_create_iterator">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Iterator" c:type="GIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterable" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterable" c:type="GIterable*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="IterableInterface"
            c:type="GIterableInterface"
            glib:is-gtype-struct-for="Iterable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_iterator">
        <callback name="create_iterator">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterator" c:type="GIterator*"/>
          </return-value>
          <parameters>
            <parameter name="iterable" transfer-ownership="none">
              <doc xml:space="preserve">FIXME</doc>
              <type name="Iterable" c:type="GIterable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Iterator"
           c:symbol-prefix="iterator"
           c:type="GIterator"
           abstract="1"
           glib:type-name="GIterator"
           glib:get-type="g_iterator_get_type"
           glib:type-struct="IteratorClass"
           glib:fundamental="1"
           glib:ref-func="g_iterator_ref"
           glib:unref-func="g_iterator_unref"
           glib:set-value-func="g_value_set_iterator"
           glib:get-value-func="g_value_get_iterator">
      <function name="create" c:identifier="g_iterator_create">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Iterator" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="iter_type" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="unref" c:identifier="g_iterator_unref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <type name="Iterator" c:type="GIterator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="next" invoker="next">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterator" c:type="GIterator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="next" c:identifier="g_iterator_next">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterator" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_iterator_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Iterator" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="gint" c:type="volatile int"/>
      </field>
    </class>
    <record name="IteratorClass"
            c:type="GIteratorClass"
            glib:is-gtype-struct-for="Iterator">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="next">
        <callback name="next">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:space="preserve">FIXME</doc>
              <type name="Iterator" c:type="GIterator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <type name="Iterator" c:type="GIterator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="2">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PtrArrayController"
           c:symbol-prefix="ptr_array_controller"
           c:type="GPtrArrayController"
           parent="Controller"
           glib:type-name="GPtrArrayController"
           glib:get-type="g_ptr_array_controller_get_type"
           glib:type-struct="PtrArrayControllerClass">
      <doc xml:space="preserve">The #GPtrArrayController object is a #GController implementation aimed
at controlling #GPtrArray data structures</doc>
      <constructor name="new" c:identifier="g_ptr_array_controller_new">
        <doc xml:space="preserve">Creates a new #GPtrArrayController.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GPtrArrayController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_array"
                   c:identifier="g_ptr_array_controller_new_with_array"
                   introspectable="0">
        <doc xml:space="preserve">Creates a new #GPtrArrayController controlling the @array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GPtrArrayController</doc>
          <type name="Controller" c:type="GController*"/>
        </return-value>
        <parameters>
          <parameter name="array"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GPtrArray or %NULL</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_array"
              c:identifier="g_ptr_array_controller_get_array"
              introspectable="0">
        <doc xml:space="preserve">Retrieves the #GPtrArray controlled by @controller</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a #GPtrArray, or %NULL</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GPtrArrayController</doc>
            <type name="PtrArrayController" c:type="GPtrArrayController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_array"
              c:identifier="g_ptr_array_controller_set_array"
              introspectable="0">
        <doc xml:space="preserve">Sets the #GPtrArray to be controlled by @controller

The #GPtrArrayController will take a reference on the passed #GPtrArray
which will be released when the #GPtrArrayController is disposed or
when unsetting the controlled array by passing %NULL to this
function</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve">a #GPtrArrayController</doc>
            <type name="PtrArrayController" c:type="GPtrArrayController*"/>
          </instance-parameter>
          <parameter name="array"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GPtrArray or %NULL</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="array"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GPtrArray to be controlled by a #GPtrArrayController instance</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Controller" c:type="GController"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PtrArrayControllerPrivate"
              c:type="GPtrArrayControllerPrivate*"/>
      </field>
    </class>
    <record name="PtrArrayControllerClass"
            c:type="GPtrArrayControllerClass"
            glib:is-gtype-struct-for="PtrArrayController">
      <doc xml:space="preserve">The &lt;structname&gt;GPtrArrayControllerClass&lt;/structname&gt; structure contains

only private data.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="ControllerClass" c:type="GControllerClass"/>
      </field>
    </record>
    <record name="PtrArrayControllerPrivate"
            c:type="GPtrArrayControllerPrivate"
            disguised="1">
    </record>
    <function name="value_dup_iterator" c:identifier="g_value_dup_iterator">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="Iterator" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_iterator" c:identifier="g_value_get_iterator">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_iterator" c:identifier="g_value_set_iterator">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Iterator" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_take_iterator" c:identifier="g_value_take_iterator">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Iterator" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
