<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="fontconfig" version="2.0"/>
  <namespace name="Easyfc"
             version="0.12"
             shared-library="libeasyfc-gobject-0.dll"
             c:identifier-prefixes="Ezfc"
             c:symbol-prefixes="ezfc">
    <record name="Alias"
            c:type="EzfcAlias"
            glib:type-name="EzfcAlias"
            glib:get-type="ezfc_alias_get_type"
            c:symbol-prefix="alias">
      <doc xml:space="preserve">All the fields in the &lt;structname&gt;EzfcAlias&lt;/structname&gt;
structure are private to the #EzfcAlias implementation.</doc>
      <constructor name="new" c:identifier="ezfc_alias_new">
        <doc xml:space="preserve">Create an instance of #EzfcAlias.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #EzfcAlias.</doc>
          <type name="Alias" c:type="EzfcAlias*"/>
        </return-value>
        <parameters>
          <parameter name="alias_name" transfer-ownership="none">
            <doc xml:space="preserve">the alias font name like sans-serif, serif and monospace.
             This can be the usual font name. in this case, the font added by
             ezfc_alias_set_font() behaves as the substitution font of it.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="check_font_existence"
              c:identifier="ezfc_alias_check_font_existence">
        <doc xml:space="preserve">Set a flag whether checking the font existence when invoking
ezfc_alias_set_font().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="ezfc_alias_get_font">
        <doc xml:space="preserve">Obtains the font that is set as the alias font for @alias.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the font name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_pattern"
              c:identifier="ezfc_alias_get_font_pattern"
              introspectable="0">
        <doc xml:space="preserve">Obtains #FcPattern in #EzfcAlias.</doc>
        <return-value>
          <doc xml:space="preserve">a duplicate of #FcPattern in the instance. it has to be freed.
         %NULL if @alias doesn't have any font pattern.</doc>
          <type name="fontconfig.Pattern" c:type="FcPattern*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ezfc_alias_get_name">
        <doc xml:space="preserve">Obtains the alias font name in @alias object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the alias font name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ezfc_alias_ref">
        <doc xml:space="preserve">Increases the reference count of @alias.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the same @alias.</doc>
          <type name="Alias" c:type="EzfcAlias*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_font" c:identifier="ezfc_alias_set_font" throws="1">
        <doc xml:space="preserve">Set @font_name as the font family name used for the alias font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it successfully is set. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">a font name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_pattern"
              c:identifier="ezfc_alias_set_font_pattern"
              throws="1">
        <doc xml:space="preserve">Set @pattern as the font pattern. @alias keeps a duplicate instance of
@pattern.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it successfully is set. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">a #FcPattern.</doc>
            <type name="fontconfig.Pattern" c:type="const FcPattern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ezfc_alias_unref">
        <doc xml:space="preserve">Decreases the reference count of @alias. When its reference count
drops to 0, the object is finalized (i.e. its memory is freed).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Config"
            c:type="EzfcConfig"
            glib:type-name="EzfcConfig"
            glib:get-type="ezfc_config_get_type"
            c:symbol-prefix="config">
      <doc xml:space="preserve">All the fields in the &lt;structname&gt;EzfcConfig&lt;/structname&gt;
structure are private to the #EzfcConfig implementation.</doc>
      <constructor name="new" c:identifier="ezfc_config_new">
        <doc xml:space="preserve">Create a new instance of a #EzfcConfig.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new instance of #EzfcConfig.</doc>
          <type name="Config" c:type="EzfcConfig*"/>
        </return-value>
      </constructor>
      <method name="add_alias" c:identifier="ezfc_config_add_alias">
        <doc xml:space="preserve">Add a @alias font for @language language. if giving %NULL to @language,
@alias takes effect for any languages.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a language name to add @alias for or %NULL for global settings.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcAlias.</doc>
            <type name="Alias" c:type="EzfcAlias*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font" c:identifier="ezfc_config_add_font">
        <doc xml:space="preserve">Add a #font font to generate non-language-specific, non-alias-specific
rules.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_subst"
              c:identifier="ezfc_config_add_subst"
              version="0.11">
        <doc xml:space="preserve">Add a #subst font as a substitute font for @family_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="family_name" transfer-ownership="none">
            <doc xml:space="preserve">a family name to be substituted.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subst" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont for substitute font</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="ezfc_config_dump">
        <doc xml:space="preserve">Output the object data to the standard output.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliases" c:identifier="ezfc_config_get_aliases">
        <doc xml:space="preserve">Obtains the list of #EzfcAlias in #EzfcConfig instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList contains #EzfcAlias or %NULL.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="Alias"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a language name referenced to the alias</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fonts" c:identifier="ezfc_config_get_fonts">
        <doc xml:space="preserve">Obtains the list of #EzfcFont in @config.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GList contains #EzfcFont or %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Font"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language_list"
              c:identifier="ezfc_config_get_language_list">
        <doc xml:space="preserve">Obtains the list of languages registered by ezfc_config_add_alias() in @config.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList contains languages or %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ezfc_config_get_name">
        <doc xml:space="preserve">Obtains the configuration name that is set by ezfc_config_set_name().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the configuration name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ezfc_config_get_priority">
        <doc xml:space="preserve">Obtains the priority number in @config.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the priority number. if any errors happens, returns -1.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subst_family"
              c:identifier="ezfc_config_get_subst_family"
              version="0.11">
        <doc xml:space="preserve">Obtains the list of the family name being substituted</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList contains languages or %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_substs"
              c:identifier="ezfc_config_get_substs"
              version="0.11">
        <doc xml:space="preserve">Obtains the list of #EzfcFont to be substituted for @family_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GList contains #EzfcFont or %NULL.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="Font"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="family_name" transfer-ownership="none">
            <doc xml:space="preserve">a family name being substituted.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ezfc_config_load" throws="1">
        <doc xml:space="preserve">Read the configuration file and rebuild the object.
You have to invoke ezfc_config_set_priority() and ezfc_config_set_name()
first to read the appropriate configuration file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ezfc_config_ref">
        <doc xml:space="preserve">Increases the refernce count of @config.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the same @config object.</doc>
          <type name="Config" c:type="EzfcConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_alias" c:identifier="ezfc_config_remove_alias">
        <doc xml:space="preserve">Removes @alias_name assigned for @language language from @config.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully removed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a language name to remove @alias_name from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias_name" transfer-ownership="none">
            <doc xml:space="preserve">a alias font name to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_aliases" c:identifier="ezfc_config_remove_aliases">
        <doc xml:space="preserve">Removes all of aliases assigned for @language language from @config.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully removed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a language name to remove @alias_name from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_font" c:identifier="ezfc_config_remove_font">
        <doc xml:space="preserve">Remove a #EzfcFont instance corresponding to @family.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully removed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve">a family name to be removed.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_fonts" c:identifier="ezfc_config_remove_fonts">
        <doc xml:space="preserve">Remove all of fonts from @config, which added by ezfc_config_add_font().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully removed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_subst"
              c:identifier="ezfc_config_remove_subst"
              version="0.11">
        <doc xml:space="preserve">Remove @subst_name from the substitute font list of @family_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="family_name" transfer-ownership="none">
            <doc xml:space="preserve">a family name to be substituted.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subst_name" transfer-ownership="none">
            <doc xml:space="preserve">a substitute font name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_substs"
              c:identifier="ezfc_config_remove_substs"
              version="0.11">
        <doc xml:space="preserve">Remove all of substitute font list of @family_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="family_name" transfer-ownership="none">
            <doc xml:space="preserve">a family name to be substituted.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="ezfc_config_save" throws="1">
        <doc xml:space="preserve">Write the data to the configuration file. you may want to invoke
ezfc_config_set_priority() and ezfc_config_set_name() first to
write it to the appropriate configuration file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_buffer"
              c:identifier="ezfc_config_save_to_buffer"
              throws="1">
        <doc xml:space="preserve">Write the data to the buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GString containing a xml data. %NULL if fails.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_migration"
              c:identifier="ezfc_config_set_migration"
              version="0.8">
        <doc xml:space="preserve">Set a flag to migrate the configuration file on the older place to
the new one where XDG Base Directory Specification defines.
If @flag is %TRUE, ezfc_config_load() will tries to read the config
file from the old path prior to new place and the old file will be
removed during ezfc_config_save().

This feature is enabled by default.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a #gboolean.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ezfc_config_set_name">
        <doc xml:space="preserve">Set @name as the additional configuration name. this is an optional to
make the change in the filename for output.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">additional configuration name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority" c:identifier="ezfc_config_set_priority">
        <doc xml:space="preserve">Set @priority to @config instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve">a priority number that is used for a filename. it has to be
           within 3 digits. so the maximum value is 999.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ezfc_config_unref">
        <doc xml:space="preserve">Decreases the reference count of @config. when its reference count
drops to 0, the object is finalized (i.e. its memory is freed).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcConfig.</doc>
            <type name="Config" c:type="EzfcConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="Error" c:type="EzfcError">
      <doc xml:space="preserve">Error code used in libeasyfc.</doc>
      <member name="unknown" value="-1" c:identifier="EZFC_ERR_UNKNOWN">
        <doc xml:space="preserve">unknown error happened.</doc>
      </member>
      <member name="success" value="0" c:identifier="EZFC_ERR_SUCCESS">
        <doc xml:space="preserve">an operation is succeeded.</doc>
      </member>
      <member name="oom" value="1" c:identifier="EZFC_ERR_OOM">
        <doc xml:space="preserve">Out of memory occurred.</doc>
      </member>
      <member name="fail_on_fc" value="2" c:identifier="EZFC_ERR_FAIL_ON_FC">
        <doc xml:space="preserve">an error happened in fontconfig.</doc>
      </member>
      <member name="no_valid_font"
              value="3"
              c:identifier="EZFC_ERR_NO_VALID_FONT">
        <doc xml:space="preserve">no valid font is available on the system.</doc>
      </member>
      <member name="no_family" value="4" c:identifier="EZFC_ERR_NO_FAMILY">
        <doc xml:space="preserve">no font family name found in a class.</doc>
      </member>
      <member name="no_config_dir"
              value="5"
              c:identifier="EZFC_ERR_NO_CONFIG_DIR">
        <doc xml:space="preserve">no valid configuration directory found.</doc>
      </member>
      <member name="no_elements" value="6" c:identifier="EZFC_ERR_NO_ELEMENTS">
        <doc xml:space="preserve">no elements found to write.</doc>
      </member>
      <member name="no_config_file"
              value="7"
              c:identifier="EZFC_ERR_NO_CONFIG_FILE">
        <doc xml:space="preserve">no configuration file was available on the filesystem.</doc>
      </member>
      <member name="fail_on_xml" value="8" c:identifier="EZFC_ERR_FAIL_ON_XML">
        <doc xml:space="preserve">an error happened in libxml2.</doc>
      </member>
      <member name="fail_on_libc"
              value="9"
              c:identifier="EZFC_ERR_FAIL_ON_LIBC">
        <doc xml:space="preserve">an error happened in libc.</doc>
      </member>
      <member name="end" value="10" c:identifier="EZFC_ERR_END">
        <doc xml:space="preserve">No real error, but just a terminator.</doc>
      </member>
    </enumeration>
    <record name="Font"
            c:type="EzfcFont"
            glib:type-name="EzfcFont"
            glib:get-type="ezfc_font_get_type"
            c:symbol-prefix="font">
      <doc xml:space="preserve">All the fields in the &lt;structname&gt;EzfcFont&lt;/structname&gt;
structure are private to the #EzfcFont implementation.</doc>
      <constructor name="new" c:identifier="ezfc_font_new">
        <doc xml:space="preserve">Create an instance of #EzfcFont.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #EzfcFont.</doc>
          <type name="Font" c:type="EzfcFont*"/>
        </return-value>
      </constructor>
      <method name="add_family"
              c:identifier="ezfc_font_add_family"
              version="0.11"
              throws="1">
        <doc xml:space="preserve">Add @font_name as the font family name used for the font font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it successfully is set. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">a font name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_feature"
              c:identifier="ezfc_font_add_feature"
              version="0.12">
        <doc xml:space="preserve">Add @feature font feature to @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve">feature name to be added</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="canonicalize"
              c:identifier="ezfc_font_canonicalize"
              version="0.11"
              throws="1">
        <doc xml:space="preserve">Split up @font to #EzfcFont that has one family name only.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GList contains
         #EzfcFont, otherwise %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Font"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="check_existence" c:identifier="ezfc_font_check_existence">
        <doc xml:space="preserve">Set a flag whether checking the font existence when invoking
ezfc_font_set_family().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="ezfc_font_find" version="0.11">
        <doc xml:space="preserve">Check if @font contains @font_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it contains, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">a font name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_antialiasing"
              c:identifier="ezfc_font_get_antialiasing">
        <doc xml:space="preserve">Obtain a boolean value about the anti-aliasing usage in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the antialiasing is enabled. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autohinting" c:identifier="ezfc_font_get_autohinting">
        <doc xml:space="preserve">Obtain a boolean value about the auto-hinting usage in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the auto-hinting is enabled. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_available_features"
              c:identifier="ezfc_font_get_available_features"
              version="0.12">
        <doc xml:space="preserve">Obtains available font features in @font.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GList containing
         memory-allocated string of feature name that is available
         in @font. strings in #GList has to be freed when it isn't
         needed anymore.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_embedded_bitmap"
              c:identifier="ezfc_font_get_embedded_bitmap">
        <doc xml:space="preserve">Obtain a boolean value about the embedded bitmap usage in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the embedded bitmap is enabled, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_families"
              c:identifier="ezfc_font_get_families"
              version="0.11">
        <doc xml:space="preserve">Obtains font family names in @font.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GList containing
         the static string of font family names</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family" c:identifier="ezfc_font_get_family">
        <doc xml:space="preserve">Obtains the font family name in first place in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the font name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_features"
              c:identifier="ezfc_font_get_features"
              version="0.12">
        <doc xml:space="preserve">Obtains font features list that @font has.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GList containing
         the static string of feature name.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hinting" c:identifier="ezfc_font_get_hinting">
        <doc xml:space="preserve">Obtain a boolean value about the hinting usage in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the hinting is enabled. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hintstyle" c:identifier="ezfc_font_get_hintstyle">
        <doc xml:space="preserve">Obtain the hintstyle in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #EzfcFontHintstyle.</doc>
          <type name="FontHintstyle" c:type="EzfcFontHintstyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pattern"
              c:identifier="ezfc_font_get_pattern"
              introspectable="0">
        <doc xml:space="preserve">Obtains #FcPattern in #EzfcFont.</doc>
        <return-value>
          <doc xml:space="preserve">a duplicate of #FcPattern in the instance. it has to be freed.
         %NULL if @font doesn't have any font pattern.</doc>
          <type name="fontconfig.Pattern" c:type="FcPattern*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rgba" c:identifier="ezfc_font_get_rgba">
        <doc xml:space="preserve">Obtains current sub-pixel ordering in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the sub-pixel ordering value in the integer.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subpixel_rendering"
              c:identifier="ezfc_font_get_subpixel_rendering">
        <doc xml:space="preserve">Obtain current status about the sub-pixel rendering in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current mode in the sub-pixel rendering.</doc>
          <type name="FontSubpixelRender" c:type="EzfcFontSubpixelRender"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ezfc_font_ref">
        <doc xml:space="preserve">Increases the reference count of @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the same @font object.</doc>
          <type name="Font" c:type="EzfcFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="ezfc_font_remove"
              version="0.11"
              throws="1">
        <doc xml:space="preserve">Removes all of families in @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_family"
              c:identifier="ezfc_font_remove_family"
              version="0.11"
              throws="1">
        <doc xml:space="preserve">Removes @font_name from @font.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">a font name to be removed.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_feature"
              c:identifier="ezfc_font_remove_feature"
              version="0.12">
        <doc xml:space="preserve">Remove @feature from @font if available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's successfully completed, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve">feature name to be removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_antialiasing"
              c:identifier="ezfc_font_set_antialiasing">
        <doc xml:space="preserve">Set a flag whether the font use the antialiasing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_autohinting" c:identifier="ezfc_font_set_autohinting">
        <doc xml:space="preserve">Set a flag whether the font use the auto-hinting for rendering</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_embedded_bitmap"
              c:identifier="ezfc_font_set_embedded_bitmap">
        <doc xml:space="preserve">Set a flag whether the font use the embedded bitmap.
Note that Enabling the embedded bitmap may causes disabling the antialias.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family"
              c:identifier="ezfc_font_set_family"
              deprecated="1"
              deprecated-version="0.11."
              throws="1">
        <doc xml:space="preserve">Set @font_name as the font family name used for the font font.</doc>
        <doc-deprecated xml:space="preserve">Use ezfc_font_add_family().</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it successfully is set. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">a font name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hinting" c:identifier="ezfc_font_set_hinting">
        <doc xml:space="preserve">Set a flag whether the font use the own hints for rendering</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">a boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hintstyle" c:identifier="ezfc_font_set_hintstyle">
        <doc xml:space="preserve">Set a hintstyle for @font.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="hintstyle" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFontHintstyle.</doc>
            <type name="FontHintstyle" c:type="EzfcFontHintstyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pattern"
              c:identifier="ezfc_font_set_pattern"
              throws="1">
        <doc xml:space="preserve">Set @pattern as the font pattern. @font keeps a duplicate instance of
@pattern.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it successfully is set. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">a #FcPattern.</doc>
            <type name="fontconfig.Pattern" c:type="const FcPattern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rgba" c:identifier="ezfc_font_set_rgba">
        <doc xml:space="preserve">Set @val as the sub-pixel ordering</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">an integer value corresponding to FC_RGBA_*.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subpixel_rendering"
              c:identifier="ezfc_font_set_subpixel_rendering">
        <doc xml:space="preserve">This is just convenient to change the several configuration for subpixel
rendering.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the sub-pixel rendering is enabled. otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFontSubpixelRender.</doc>
            <type name="FontSubpixelRender" c:type="EzfcFontSubpixelRender"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ezfc_font_unref">
        <doc xml:space="preserve">Decreases the reference count of @font. when its reference count
drops to 0, the object is finalized (i.e. its memory is freed).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve">a #EzfcFont.</doc>
            <type name="Font" c:type="EzfcFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get_alias_name_from_pattern"
                c:identifier="ezfc_font_get_alias_name_from_pattern">
        <doc xml:space="preserve">Analize @pattern and returns a alias name string according to the result.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GList containing
         a static string for the alias name.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="pattern" transfer-ownership="none">
            <doc xml:space="preserve">a #FcPattern.</doc>
            <type name="fontconfig.Pattern" c:type="const FcPattern*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_list" c:identifier="ezfc_font_get_list">
        <doc xml:space="preserve">Obtains the fonts list being assigned to @alias_name for @language.

Note that @localized_font_name doesn't take effect yet. this is just
a reservation for future improvement.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GList contains the font family name.
         if no valid families, %NULL then.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the alias name to obtain the fonts list for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="localized_font_name" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to include the localized font name if available,
                      %FALSE for English font name only.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_pattern_list"
                c:identifier="ezfc_font_get_pattern_list">
        <doc xml:space="preserve">Obtains #FcPattern list being assigned to @alias_name for @language.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GList contains #FcPattern, otherwise %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="fontconfig.Pattern"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the alias name to obtain the fonts pettern list for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_alias_font" c:identifier="ezfc_font_is_alias_font">
        <doc xml:space="preserve">Checks if @alias_name is one of sans-serif, serif, monospace, cursive or fantasy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @alias_name is an alias font name, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="alias_name" transfer-ownership="none">
            <doc xml:space="preserve">the alias font name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="FontHintstyle" c:type="EzfcFontHintstyle">
      <doc xml:space="preserve">The hintstyle option to be used for ezfc_font_set_hintstyle().</doc>
      <member name="unknown"
              value="0"
              c:identifier="EZFC_FONT_HINTSTYLE_UNKNOWN">
        <doc xml:space="preserve">unknown state in the hintstyle.</doc>
      </member>
      <member name="none" value="1" c:identifier="EZFC_FONT_HINTSTYLE_NONE">
        <doc xml:space="preserve">No use of autohinting</doc>
      </member>
      <member name="slight"
              value="2"
              c:identifier="EZFC_FONT_HINTSTYLE_SLIGHT">
        <doc xml:space="preserve">Use slight autohinting</doc>
      </member>
      <member name="medium"
              value="3"
              c:identifier="EZFC_FONT_HINTSTYLE_MEDIUM">
        <doc xml:space="preserve">Use medium autohinting</doc>
      </member>
      <member name="full" value="4" c:identifier="EZFC_FONT_HINTSTYLE_FULL">
        <doc xml:space="preserve">Use full autohinting</doc>
      </member>
      <member name="end" value="5" c:identifier="EZFC_FONT_HINTSTYLE_END">
        <doc xml:space="preserve">No real value, but just a terminator.</doc>
      </member>
    </enumeration>
    <enumeration name="FontSubpixelRender" c:type="EzfcFontSubpixelRender">
      <doc xml:space="preserve">The sub-pixel rendering option to be used in ezfc_font_set_subpixel_rendering().</doc>
      <member name="unknown"
              value="0"
              c:identifier="EZFC_FONT_ANTIALIAS_UNKNOWN">
        <doc xml:space="preserve">unknown state on using the sub-pixel rendering.</doc>
      </member>
      <member name="none" value="1" c:identifier="EZFC_FONT_ANTIALIAS_NONE">
        <doc xml:space="preserve">no use of the sub-pixel rendering</doc>
      </member>
      <member name="gray" value="2" c:identifier="EZFC_FONT_ANTIALIAS_GRAY">
        <doc xml:space="preserve">Use the gray-scaled sub-pixel rendering</doc>
      </member>
      <member name="rgb" value="3" c:identifier="EZFC_FONT_ANTIALIAS_RGB">
        <doc xml:space="preserve">Use the sub-pixel rendering with the sub-pixel geometry RGB.</doc>
      </member>
      <member name="bgr" value="4" c:identifier="EZFC_FONT_ANTIALIAS_BGR">
        <doc xml:space="preserve">Use the sub-pixel rendering with the sub-pixel geometry BGR.</doc>
      </member>
      <member name="vrgb" value="5" c:identifier="EZFC_FONT_ANTIALIAS_VRGB">
        <doc xml:space="preserve">Use the sub-pixel rendering with the sub-pixel geometry VRGB.</doc>
      </member>
      <member name="vbgr" value="6" c:identifier="EZFC_FONT_ANTIALIAS_VBGR">
        <doc xml:space="preserve">Use the sub-pixel rendering with the sub-pixel geometry VBGR.</doc>
      </member>
      <member name="end" value="7" c:identifier="EZFC_FONT_ANTIALIAS_END">
        <doc xml:space="preserve">No real value, but just a terminator.</doc>
      </member>
    </enumeration>
    <function name="error_get_quark" c:identifier="ezfc_error_get_quark">
      <doc xml:space="preserve">Obtains a #GQuark being used for #GError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="finalize" c:identifier="ezfc_finalize">
      <doc xml:space="preserve">Finalize the library.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="font_get_alias_name_from_pattern"
              c:identifier="ezfc_font_get_alias_name_from_pattern"
              moved-to="Font.get_alias_name_from_pattern">
      <doc xml:space="preserve">Analize @pattern and returns a alias name string according to the result.</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">a #GList containing
         a static string for the alias name.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve">a #FcPattern.</doc>
          <type name="fontconfig.Pattern" c:type="const FcPattern*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_list"
              c:identifier="ezfc_font_get_list"
              moved-to="Font.get_list">
      <doc xml:space="preserve">Obtains the fonts list being assigned to @alias_name for @language.

Note that @localized_font_name doesn't take effect yet. this is just
a reservation for future improvement.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GList contains the font family name.
         if no valid families, %NULL then.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="alias_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the alias name to obtain the fonts list for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="localized_font_name" transfer-ownership="none">
          <doc xml:space="preserve">%TRUE to include the localized font name if available,
                      %FALSE for English font name only.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_pattern_list"
              c:identifier="ezfc_font_get_pattern_list"
              moved-to="Font.get_pattern_list">
      <doc xml:space="preserve">Obtains #FcPattern list being assigned to @alias_name for @language.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GList contains #FcPattern, otherwise %NULL.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="fontconfig.Pattern"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="alias_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the alias name to obtain the fonts pettern list for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_is_alias_font"
              c:identifier="ezfc_font_is_alias_font"
              moved-to="Font.is_alias_font">
      <doc xml:space="preserve">Checks if @alias_name is one of sans-serif, serif, monospace, cursive or fantasy.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @alias_name is an alias font name, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="alias_name" transfer-ownership="none">
          <doc xml:space="preserve">the alias font name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_fonts_list"
              c:identifier="ezfc_get_fonts_list"
              deprecated="1"
              deprecated-version="0.7">
      <doc xml:space="preserve">Obtains the fonts list being assigned to @alias_name for @language.</doc>
      <doc-deprecated xml:space="preserve">Use ezfc_font_get_list().</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GList contains the font family name.
         if no valid families, %NULL then.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="alias_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the alias name to obtain the fonts list for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_fonts_pattern_list"
              c:identifier="ezfc_get_fonts_pattern_list"
              deprecated="1"
              deprecated-version="0.7">
      <doc xml:space="preserve">Obtains #FcPattern list being assigned to @alias_name for @language.</doc>
      <doc-deprecated xml:space="preserve">Use ezfc_font_get_pattern_list().</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #GList contains #FcPattern, otherwise %NULL.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="fontconfig.Pattern"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the language name fontconfig can deal with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="alias_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the alias name to obtain the fonts pettern list for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="ezfc_init">
      <doc xml:space="preserve">Initialize the library.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="is_alias_font"
              c:identifier="ezfc_is_alias_font"
              deprecated="1"
              deprecated-version="0.7">
      <doc xml:space="preserve">Checks if @alias_name is one of sans-serif, serif, monospace, cursive or fantasy.</doc>
      <doc-deprecated xml:space="preserve">Use ezfc_font_is_alias_font().</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @alias_name is an alias font name, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="alias_name" transfer-ownership="none">
          <doc xml:space="preserve">the alias font name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="version" c:identifier="ezfc_version">
      <doc xml:space="preserve">Obtain the version of libeasyfc.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a version string.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
  </namespace>
</repository>
