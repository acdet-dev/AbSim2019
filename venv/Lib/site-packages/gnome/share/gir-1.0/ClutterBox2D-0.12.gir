<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Clutter" version="1.0"/>
  <package name="clutter-box2d-0.12"/>
  <c:include name="clutter-box2d/clutter-box2d.h"/>
  <namespace name="ClutterBox2D"
             version="0.12"
             shared-library="libclutter-box2d-0.12-0.dll"
             c:identifier-prefixes="Clutter"
             c:symbol-prefixes="clutter">
    <class name="Box2D"
           c:symbol-prefix="box2d"
           c:type="ClutterBox2D"
           parent="Clutter.Group"
           glib:type-name="ClutterBox2D"
           glib:get-type="clutter_box2d_get_type"
           glib:type-struct="Box2DClass">
      <doc xml:space="preserve">The #ClutterBox2D physics container, the struct has no public fields.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <constructor name="new" c:identifier="clutter_box2d_new">
        <doc xml:space="preserve">Create a new #ClutterBox2D container.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #ClutterBox2D container.</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
      </constructor>
      <function name="actor_track" c:identifier="clutter_box2d_actor_track">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="actor" transfer-ownership="none">
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Box2DTrackFlags" c:type="ClutterBox2DTrackFlags"/>
          </parameter>
        </parameters>
      </function>
      <function name="joint_destroy"
                c:identifier="clutter_box2d_joint_destroy">
        <doc xml:space="preserve">Destroys a #ClutterBox2DJoint, call this function manually to remove a joint
that you no longer have need for. Note that it is mostly not neccesary to
destroy joints that are part of models manually since they will be destroyed
automatically when the actors they use are destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="joint" transfer-ownership="none">
            <doc xml:space="preserve">A #ClutterBox2DJoint</doc>
            <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="joint_get_type"
                c:identifier="clutter_box2d_joint_get_type">
        <doc xml:space="preserve">Retrieves the type of the joint.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #ClutterBox2DJointType</doc>
          <type name="Box2DJointType" c:type="ClutterBox2DJointType"/>
        </return-value>
        <parameters>
          <parameter name="joint" transfer-ownership="none">
            <doc xml:space="preserve">A #ClutterBox2DJoint</doc>
            <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="joint_set_engine"
                c:identifier="clutter_box2d_joint_set_engine">
        <doc xml:space="preserve">Enables or disables an engine in the specified joint. This is only valid for
revolute, prismatic and line joints. This function does nothing for joints
that don't support engines.

Force (or torque, in the case of a revolute joint) is measured in Newtons,
but what this means will depend on the given size of world-units (the scale-
factor) and the density of the body in question.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="joint" transfer-ownership="none">
            <doc xml:space="preserve">A #ClutterBox2DJoint</doc>
            <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
          </parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to enable the engine, %FALSE to disable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="max_force" transfer-ownership="none">
            <doc xml:space="preserve">The maximum motor force, or torque, in N</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="speed" transfer-ownership="none">
            <doc xml:space="preserve">Motor speed, in radians per second</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="mouse_joint_update_target"
                c:identifier="clutter_box2d_mouse_joint_update_target">
        <doc xml:space="preserve">Updates the position the the target point should coincide with. By updating this
in a motion event callback for mouse motion physical interaction with dynamic actors
is possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mouse_joint" transfer-ownership="none">
            <doc xml:space="preserve">A #ClutterBox2DJoint priorly returned from #clutter_box2d_add_mouse_joint.</doc>
            <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">new box2d container coordinates for mouse pointer.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="iterate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_distance_joint"
              c:identifier="clutter_box2d_add_distance_joint"
              introspectable="0">
        <doc xml:space="preserve">A distance joint constrains two points on two bodies to remain at a fixed
distance from each other. You can view this as a massless, rigid rod. By
modifying @frequency and @damping_ratio you can achieve a spring like
behavior as well. The defaults for frequency and damping_ratio to disable
dampening is 0.0 for both.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the anchor point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the anchor point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">the length that the simulation will maintain between anchor1 on
actor1 and anchor2 on actor2.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:space="preserve">the frequency of length updates.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="damping_ratio" transfer-ownership="none">
            <doc xml:space="preserve">the damping ratio.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_distance_joint2"
              c:identifier="clutter_box2d_add_distance_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function for specifying a distance joint with world coordinates.
See clutter_box2d_add_distance_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the anchor point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the anchor point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:space="preserve">the frequency of length updates.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="damping_ratio" transfer-ownership="none">
            <doc xml:space="preserve">the damping ratio.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_line_joint"
              c:identifier="clutter_box2d_add_line_joint"
              introspectable="0">
        <doc xml:space="preserve">This creates a line joint. A line joint is the same as a prismatic joint,
with the rotation constraint removed. This allows for creating things like
vehicle suspensions. See clutter_box2d_add_prismatic_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="min_length" transfer-ownership="none">
            <doc xml:space="preserve">minimum distance between anchor points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:space="preserve">maximum distance between anchor points.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">the local translation axis in @body1.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_line_joint2"
              c:identifier="clutter_box2d_add_line_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function for creating a line joint with world coordinates.
See clutter_box2d_add_line_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the joint anchor point</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="min_length" transfer-ownership="none">
            <doc xml:space="preserve">minimum distance between anchor points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:space="preserve">maximum distance between anchor points.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">the local translation axis in @body1.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mouse_joint"
              c:identifier="clutter_box2d_add_mouse_joint"
              introspectable="0">
        <doc xml:space="preserve">A mouse joint is used to make a point on a dynamic actor track a specified
world point. This a soft constraint with a maximum force. This allows the
constraint to stretch and without applying huge forces.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve">the (dynamic) actor to be manipulated.</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve">the box2d container coordinates of the mouse.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prismatic_joint"
              c:identifier="clutter_box2d_add_prismatic_joint"
              introspectable="0">
        <doc xml:space="preserve">A prismatic joint. This joint provides one degree of freedom: translation
along an axis fixed in body1. Relative rotation is prevented.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="min_length" transfer-ownership="none">
            <doc xml:space="preserve">minimum distance between anchor points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:space="preserve">maximum distance between anchor points.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">the local translation axis in @body1.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prismatic_joint2"
              c:identifier="clutter_box2d_add_prismatic_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function for creating a prismatic joint using world coordinates.
See clutter_box2d_add_prismatic_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the joint anchor point</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="min_length" transfer-ownership="none">
            <doc xml:space="preserve">minimum distance between anchor points</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length" transfer-ownership="none">
            <doc xml:space="preserve">maximum distance between anchor points.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve">the local translation axis in @body1.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pulley_joint"
              c:identifier="clutter_box2d_add_pulley_joint"
              introspectable="0">
        <doc xml:space="preserve">A pulley joint is used to create an idealized pulley. It connects two actors
to each other via a virtual rope, extending from two 'ground' points in the
world. The length of the rope is conserved according to the initial
configuration. You can supply a ratio that simulates a block and tackle. This
can be used to create mechanical leverage. For example, if @ratio is 2, the
length of the rope suspending @actor1 will vary at twice the rate of that
suspending @actor2.

@max_length1 and @max_length2 are provided to increase stability, as the
constraint equations become singular when either side's rope is of length
zero. They can also be used for gameplay reasons.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle, or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the anchor point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the anchor point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="ground_anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the ground anchor point of @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="ground_anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the ground anchor point of @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="length1" transfer-ownership="none">
            <doc xml:space="preserve">The initial length of the pulley rope for @actor1</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="length2" transfer-ownership="none">
            <doc xml:space="preserve">The initial length of the pulley rope for @actor2</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length1" transfer-ownership="none">
            <doc xml:space="preserve">The maximum length of the pulley rope for @actor1</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_length2" transfer-ownership="none">
            <doc xml:space="preserve">The maximum length of the pulley rope for @actor2</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ratio" transfer-ownership="none">
            <doc xml:space="preserve">The pulley ratio between @actor1 and @actor2</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pulley_joint2"
              c:identifier="clutter_box2d_add_pulley_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function for creating a pulley joint, using world coordinates.
See clutter_box2d_add_pulley_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle, or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the anchor point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the anchor point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="ground_anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the ground anchor point of @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="ground_anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates for the ground anchor point of @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="ratio" transfer-ownership="none">
            <doc xml:space="preserve">The pulley ratio between @actor1 and @actor2</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_revolute_joint"
              c:identifier="clutter_box2d_add_revolute_joint"
              introspectable="0">
        <doc xml:space="preserve">Create a revolute joint. A revolute joint defines a coordinates on two
actors that should coincide. The actors are allowed to rotate around this
point making it act like an axle.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates fro the common point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_revolute_joint2"
              c:identifier="clutter_box2d_add_revolute_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function for creativing a revolute joint using world coordinates.
See clutter_box2d_add_revolute_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">the world (box2d container) coordinates for the point that @actor1
and @actor2 are allowed to revolve around.</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_weld_joint"
              c:identifier="clutter_box2d_add_weld_joint"
              introspectable="0">
        <doc xml:space="preserve">A weld joint is used to constrain all relative motion between two bodies.
Note that this should not be used as an alternative to composite actors,
as the joint allows a small amount of give due to error.</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle, or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor1" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor1</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
          <parameter name="anchor2" transfer-ownership="none">
            <doc xml:space="preserve">the local coordinates for the common point on @actor2</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_weld_joint2"
              c:identifier="clutter_box2d_add_weld_joint2"
              introspectable="0">
        <doc xml:space="preserve">Convenience function to create a weld joint with world coordinates.
See clutter_box2d_add_weld_joint().</doc>
        <return-value>
          <doc xml:space="preserve">a #ClutterBox2DJoint handle, or %NULL on error.</doc>
          <type name="Box2DJoint" c:type="ClutterBox2DJoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="actor1" transfer-ownership="none">
            <doc xml:space="preserve">first actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="actor2" transfer-ownership="none">
            <doc xml:space="preserve">second actor participating in the joint</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="anchor" transfer-ownership="none">
            <doc xml:space="preserve">the world coordinates of the anchor point on both actors</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gravity" c:identifier="clutter_box2d_get_gravity">
        <doc xml:space="preserve">Retrieves the world's gravity vector and puts it in @gravity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterVertex</doc>
            <type name="Clutter.Vertex" c:type="ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scale_factor"
              c:identifier="clutter_box2d_get_scale_factor">
        <doc xml:space="preserve">Gets the scale factor of pixels to world units.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The scale factor of pixels to world units.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_simulating"
              c:identifier="clutter_box2d_get_simulating">
        <doc xml:space="preserve">Checks whether @box2d is simulating or not.
the simulation engine to be running when the group is created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the #ClutterBox2D group is currently doing physical simulation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gravity" c:identifier="clutter_box2d_set_gravity">
        <doc xml:space="preserve">Sets the world's gravity on the x and y axes. The z axis is ignored.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve">The gravity vector</doc>
            <type name="Clutter.Vertex" c:type="const ClutterVertex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale_factor"
              c:identifier="clutter_box2d_set_scale_factor">
        <doc xml:space="preserve">Sets the scale factor of pixels to world units.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="scale_factor" transfer-ownership="none">
            <doc xml:space="preserve">The scaling factor</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_simulating"
              c:identifier="clutter_box2d_set_simulating">
        <doc xml:space="preserve">Sets whether the simulation engine of @box2d is running or not, the
value defaults to TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="box2d" transfer-ownership="none">
            <doc xml:space="preserve">a #ClutterBox2D</doc>
            <type name="Box2D" c:type="ClutterBox2D*"/>
          </instance-parameter>
          <parameter name="simulating" transfer-ownership="none">
            <doc xml:space="preserve">the new state, TRUE or FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="gravity" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The 2D vector specifying the gravity direction and magnitude, pass in 0.0,
0.0 for zero gravity.</doc>
        <type name="Clutter.Vertex"/>
      </property>
      <property name="iterations" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The amount of iterations to perform on each physics step to resolve
contacts and joints. Larger values yield a more accurate simulation,
at the cost of CPU usage.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="scale-factor" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The scaling factor of pixels to world units. For example, if you consider
world units to be metres, setting a scale-factor of 1/50 would make 50
pixels equivalent to 1 metre.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="simulate-inactive"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="simulating" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Whether the physics simulation engine is running or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="time-step" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The amount of time simulated between physics steps. Lower values tend to
yield a higher-quality. 60fps (i.e. 1000/60) is the default and recomended
value.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Clutter.Group" c:type="ClutterGroup"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Box2DPrivate" c:type="ClutterBox2DPrivate*"/>
      </field>
    </class>
    <record name="Box2DActor" c:type="ClutterBox2DActor" disguised="1">
      <doc xml:space="preserve">This structure contains the combined state of an actor and a body, all
actors added to the ClutterBox2D container have such ClutterBox2DActor
associated with it. The ClutterBox2DActor is an implementation detail
that is not exposed in the public API.</doc>
    </record>
    <record name="Box2DClass"
            c:type="ClutterBox2DClass"
            glib:is-gtype-struct-for="Box2D">
      <field name="parent_class" readable="0" private="1">
        <type name="Clutter.GroupClass" c:type="ClutterGroupClass"/>
      </field>
      <field name="iterate">
        <callback name="iterate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="box2d" transfer-ownership="none">
              <type name="Box2D" c:type="ClutterBox2D*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Box2DContactListener"
            c:type="ClutterBox2DContactListener"
            disguised="1">
    </record>
    <record name="Box2DJoint" c:type="ClutterBox2DJoint" disguised="1">
      <doc xml:space="preserve">A handle refering to a joint in a #ClutterBox2D container, joints are automatically
memory managed by Box2D and get destroyed if any of the actors invovled in the joint
is destroyed. You may also explicitly free the joint by calling #clutter_box2d_joint_destroy
on a joint that is no longer needed.</doc>
    </record>
    <enumeration name="Box2DJointType" c:type="ClutterBox2DJointType">
      <doc xml:space="preserve">Identifiers for different joint types.</doc>
      <member name="dead" value="0" c:identifier="CLUTTER_BOX2D_JOINT_DEAD">
        <doc xml:space="preserve">The joint has become invalid</doc>
      </member>
      <member name="distance"
              value="1"
              c:identifier="CLUTTER_BOX2D_JOINT_DISTANCE">
        <doc xml:space="preserve">A distance joint</doc>
      </member>
      <member name="prismatic"
              value="2"
              c:identifier="CLUTTER_BOX2D_JOINT_PRISMATIC">
        <doc xml:space="preserve">A prismatic joint</doc>
      </member>
      <member name="line" value="3" c:identifier="CLUTTER_BOX2D_JOINT_LINE">
        <doc xml:space="preserve">A line joint</doc>
      </member>
      <member name="revolute"
              value="4"
              c:identifier="CLUTTER_BOX2D_JOINT_REVOLUTE">
        <doc xml:space="preserve">A revolute joint</doc>
      </member>
      <member name="pulley"
              value="5"
              c:identifier="CLUTTER_BOX2D_JOINT_PULLEY">
        <doc xml:space="preserve">A pulley joint</doc>
      </member>
      <member name="weld" value="6" c:identifier="CLUTTER_BOX2D_JOINT_WELD">
        <doc xml:space="preserve">A weld joint</doc>
      </member>
      <member name="mouse" value="7" c:identifier="CLUTTER_BOX2D_JOINT_MOUSE">
        <doc xml:space="preserve">A mouse joint</doc>
      </member>
    </enumeration>
    <record name="Box2DPrivate" c:type="ClutterBox2DPrivate" disguised="1">
    </record>
    <bitfield name="Box2DTrackFlags" c:type="ClutterBox2DTrackFlags">
      <member name="position"
              value="1"
              c:identifier="CLUTTER_BOX2D_TRACK_POSITION">
      </member>
      <member name="rotation"
              value="2"
              c:identifier="CLUTTER_BOX2D_TRACK_ROTATION">
      </member>
      <member name="all" value="255" c:identifier="CLUTTER_BOX2D_TRACK_ALL">
      </member>
    </bitfield>
    <enumeration name="Box2DType" c:type="ClutterBox2DType">
      <doc xml:space="preserve">Type of interactions between bodies.</doc>
      <member name="none" value="0" c:identifier="CLUTTER_BOX2D_NONE">
        <doc xml:space="preserve">No interaction</doc>
      </member>
      <member name="dynamic" value="1" c:identifier="CLUTTER_BOX2D_DYNAMIC">
        <doc xml:space="preserve">The actor is affected by collisions</doc>
      </member>
      <member name="static" value="2" c:identifier="CLUTTER_BOX2D_STATIC">
        <doc xml:space="preserve">The actor affects collisions but is immobile</doc>
      </member>
    </enumeration>
  </namespace>
</repository>
