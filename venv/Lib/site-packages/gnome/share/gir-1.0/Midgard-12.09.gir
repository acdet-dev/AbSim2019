<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gda" version="5.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="gobject-2.0"/>
  <package name="libgda-5.0"/>
  <package name="libxml-2.0"/>
  <namespace name="Midgard"
             version="12.09"
             shared-library="libmidgard2-12.dll"
             c:identifier-prefixes="Midgard"
             c:symbol-prefixes="midgard">
    <class name="BaseAbstract"
           c:symbol-prefix="base_abstract"
           c:type="MidgardBaseAbstract"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardBaseAbstract"
           glib:get-type="midgard_base_abstract_get_type"
           glib:type-struct="BaseAbstractClass">
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="BaseAbstractClass"
            c:type="MidgardBaseAbstractClass"
            glib:is-gtype-struct-for="BaseAbstract">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="BaseInterface"
               c:symbol-prefix="base_interface"
               c:type="MidgardBaseInterface"
               glib:type-name="MidgardBaseInterface"
               glib:get-type="midgard_base_interface_get_type">
    </interface>
    <record name="BaseInterfaceIFace" c:type="MidgardBaseInterfaceIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="priv" writable="1">
        <type name="BaseInterfacePrivate"
              c:type="MidgardBaseInterfacePrivate*"/>
      </field>
    </record>
    <record name="BaseInterfacePrivate"
            c:type="MidgardBaseInterfacePrivate"
            disguised="1">
    </record>
    <interface name="BaseMixin"
               c:symbol-prefix="base_mixin"
               c:type="MidgardBaseMixin"
               glib:type-name="MidgardBaseMixin"
               glib:get-type="midgard_base_mixin_get_type">
      <prerequisite name="BaseInterface"/>
    </interface>
    <record name="BaseMixinIFace" c:type="MidgardBaseMixinIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="Blob"
           c:symbol-prefix="blob"
           c:type="MidgardBlob"
           parent="GObject.Object"
           glib:type-name="MidgardBlob"
           glib:get-type="midgard_blob_get_type"
           glib:type-struct="BlobClass">
      <constructor name="new" c:identifier="midgard_blob_new">
        <doc xml:space="preserve">Default encoding is UTF-8. Set NULL @encoding if such is required.

Instatiate new Midgard Blob object for the given midgard_attachment object.

This constructor defines new relative path for attachment, if midgard_attachment
is associated with midgard_blob and its location is empty.
In any other case, location is not changed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly instatiated #MidgardBlob object or %NULL on failure</doc>
          <type name="Blob" c:type="MidgardBlob*"/>
        </return-value>
        <parameters>
          <parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject of MIDGARD_TYPE_ATTACHMENT type.</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="encoding"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">file encoding</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_blob"
                c:identifier="midgard_blob_create_blob"
                version="10.05.1">
        <doc xml:space="preserve">Invokes midgard_blob_new() and it's designed for language bindings, in whic,
that function can not be invoked explicitly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardBlob instance</doc>
          <type name="Blob" c:type="MidgardBlob*"/>
        </return-value>
        <parameters>
          <parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject of MIDGARD_TYPE_ATTACHMENT type.</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="encoding"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">file encoding</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="exists" invoker="exists">
        <doc xml:space="preserve">Check if file associated with midgard_blob exists.
This function will also return FALSE, if file is not yet associated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if file exists, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_handler" invoker="get_handler" throws="1">
        <doc xml:space="preserve">The main idea is to get file handler. On C level it returns
GIOChannel, but language bindings could return typical file handler
or anything else which is needed for particular language.

Returned channel is owned by midgard_blob and should not be freed
or unreferenced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GIOChannel or %NULL</doc>
          <type name="GLib.IOChannel" c:type="GIOChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">fopen mode (r, w, a, b). Default is 'w'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_path" invoker="get_path">
        <doc xml:space="preserve">Returned path is owned by midgard_blob and should not be freed.
It basically contains blobdir and relative file's location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">absolute path or %NULL if path is not set yet.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="read_content" invoker="read_content">
        <doc xml:space="preserve">Returned content should be freed when no longer needed.
@bytes_read holds size of returned content.

This function should be used to get content of small files.
For large and huge ones midgard_blob_get_handler should be used
to get file handle.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">content of the file, or %NULL on failure</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">MidgardBlob self instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="bytes_read"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of bytes read</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_file" invoker="remove_file" throws="1">
        <doc xml:space="preserve">Deletes a file which is associated with blob and located at
attachment's location which is initialized for blob.
#midgard_blob_exists should be invoked if file may be already
deleted, for example when one file is shared among many attachments.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob self instance.</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_content" invoker="write_content">
        <doc xml:space="preserve">Write given @content to a file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if content has been written to file, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob self instance.</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">content which should be written to file.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="exists" c:identifier="midgard_blob_exists">
        <doc xml:space="preserve">Check if file associated with midgard_blob exists.
This function will also return FALSE, if file is not yet associated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if file exists, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handler"
              c:identifier="midgard_blob_get_handler"
              throws="1">
        <doc xml:space="preserve">The main idea is to get file handler. On C level it returns
GIOChannel, but language bindings could return typical file handler
or anything else which is needed for particular language.

Returned channel is owned by midgard_blob and should not be freed
or unreferenced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GIOChannel or %NULL</doc>
          <type name="GLib.IOChannel" c:type="GIOChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve">fopen mode (r, w, a, b). Default is 'w'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="midgard_blob_get_path">
        <doc xml:space="preserve">Returned path is owned by midgard_blob and should not be freed.
It basically contains blobdir and relative file's location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">absolute path or %NULL if path is not set yet.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read_content" c:identifier="midgard_blob_read_content">
        <doc xml:space="preserve">Returned content should be freed when no longer needed.
@bytes_read holds size of returned content.

This function should be used to get content of small files.
For large and huge ones midgard_blob_get_handler should be used
to get file handle.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">content of the file, or %NULL on failure</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">MidgardBlob self instance</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="bytes_read"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of bytes read</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_file"
              c:identifier="midgard_blob_remove_file"
              throws="1">
        <doc xml:space="preserve">Deletes a file which is associated with blob and located at
attachment's location which is initialized for blob.
#midgard_blob_exists should be invoked if file may be already
deleted, for example when one file is shared among many attachments.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob self instance.</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="write_content" c:identifier="midgard_blob_write_content">
        <doc xml:space="preserve">Write given @content to a file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if content has been written to file, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardBlob self instance.</doc>
            <type name="Blob" c:type="MidgardBlob*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">content which should be written to file.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attachment"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Object"/>
      </property>
      <property name="content" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="encoding"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parentguid" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BlobPrivate" c:type="MidgardBlobPrivate*"/>
      </field>
    </class>
    <record name="BlobClass"
            c:type="MidgardBlobClass"
            glib:is-gtype-struct-for="Blob">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="read_content">
        <callback name="read_content">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">content of the file, or %NULL on failure</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">MidgardBlob self instance</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
            <parameter name="bytes_read"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">number of bytes read</doc>
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_content">
        <callback name="write_content">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if content has been written to file, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardBlob self instance.</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
            <parameter name="content" transfer-ownership="none">
              <doc xml:space="preserve">content which should be written to file.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_file">
        <callback name="remove_file" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardBlob self instance.</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="exists">
        <callback name="exists">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if file exists, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardBlob instance</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_path">
        <callback name="get_path">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">absolute path or %NULL if path is not set yet.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardBlob instance</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_handler">
        <callback name="get_handler" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">GIOChannel or %NULL</doc>
            <type name="GLib.IOChannel" c:type="GIOChannel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardBlob instance</doc>
              <type name="Blob" c:type="MidgardBlob*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <doc xml:space="preserve">fopen mode (r, w, a, b). Default is 'w'.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BlobPrivate" c:type="MidgardBlobPrivate" disguised="1">
    </record>
    <class name="Collector"
           c:symbol-prefix="collector"
           c:type="MidgardCollector"
           parent="QueryBuilder"
           glib:type-name="MidgardCollector"
           glib:get-type="midgard_collector_get_type"
           glib:type-struct="CollectorClass">
      <constructor name="new" c:identifier="midgard_collector_new">
        <doc xml:space="preserve">@typename should be any #MidgardDBObject derived class name.
@domain is property name which is registered for given class, and should not be
unique per object or record. In other words, @domain is a common property (and value)
for group of objects expected in collection.
@value must be of domain property type, and is owned by #MidgardCollector instance.
If you need reuse given value, make a copy.

Cases to return NULL:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@mgd #MidgardConnection instance is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@typename is not registered in GType system or it's not #MidgardDBObject derived
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@domain property is not registered for given @typename class
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value is of invalid type
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardCollector instance, or %NULL on failure</doc>
          <type name="Collector" c:type="MidgardCollector*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="typename" transfer-ownership="none">
            <doc xml:space="preserve">name of given class, which collector is initialized for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">collection' domain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">domain's constraint value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="add_constraint" invoker="add_constraint">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_constraint_with_property"
                      invoker="add_constraint_with_property">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="property_a" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_b" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_order" invoker="add_order">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_value_property" invoker="add_value_property">
        <doc xml:space="preserve">Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self, #MidgardCollector object is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value property is not registered for the @class, which has been initialized for given #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Number of value properties added to Midgard Collector is limited by
the number of properties registered for type which has been initialized
for the given #MidgardCollector instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if named value property has been added, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="begin_group" invoker="begin_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="count" invoker="count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end_group" invoker="end_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute" invoker="execute">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get" invoker="get" introspectable="0">
        <doc xml:space="preserve">GData keys ( collector's subkeys ) are inserted to GData as
Quarks , so you must call g_quark_to_string if you need to get strings
( e.g. implementing hash table for language bindings ).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GData for the given key or %NULL if key is not found in collection</doc>
          <type name="GLib.Data" c:type="GData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_subkey" invoker="get_subkey">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">subkey's #GValue value or %NULL if not found</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subkey" transfer-ownership="none">
            <doc xml:space="preserve">name of key's subkey to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="include_deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_keys" invoker="list_keys" introspectable="0">
        <return-value>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="merge" invoker="merge">
        <doc xml:space="preserve">If third overwrite parameter is set as TRUE then all keys which exists
in @self and @mc collector's instance will be oberwritten in @self colection
instance. If set as FALSE , only those keys will be added, which do not exist
in @self collection and exist in @mc collection.

Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Second argument is not valid #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@mc, #MidgardCollector has no keys collection
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if collections has been merged, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">whether overwrite collector's keys</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_key" invoker="remove_key">
        <doc xml:space="preserve">Removes key and associated value from the given #MidgardCollector instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if key (and its value) has been removed from collection, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key in collector's collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set" invoker="set">
        <doc xml:space="preserve">Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self, #MidgardCollector instance is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@subkey property name is not registered for collestor's class
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value is of invalid type
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

If the key is already added to MidgardCollector then its value
(as subkey&amp;value pair) is destroyed and new one is set.
In other case new key and its subkey&amp;value pair is added  to collector.

Key used in this function is a value returned ( or set ) for collector's key.
Keys are collection of values returned from property fields.
Subkey is an explicit  property name.

GValue @value argument is owned by MidgardCollector.
If value should be reused, its copy should be passed as method argument.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if key's value has been set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key name for which @subkey&amp;@value pair should be set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subkey" transfer-ownership="none">
            <doc xml:space="preserve">property name which is a subkey</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value for given @subkey</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_key_property" invoker="set_key_property">
        <doc xml:space="preserve">If @value is explicitly set to NULL , then all key property name's records
are selected from database and set in internal collector's resultset.
If not, key property name and its value is used as constraint to limit selected
records from database. In latter case add_value_property method should be invoked.
GValue value passed as third argument is owned by Midgard Collector. If value
should be reused, its copy should be passed to constructor.

Cases to return FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self #MidgardCollector instance is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@key property is not registered for the @typename class
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value is of invalid type
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@key property is already set for @self #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if key has been set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">property name which must be a key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">optional value of key's constraint</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_limit" invoker="set_limit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_offset" invoker="set_offset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_constraint"
              c:identifier="midgard_collector_add_constraint">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_constraint_with_property"
              c:identifier="midgard_collector_add_constraint_with_property">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="property_a" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_b" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_order" c:identifier="midgard_collector_add_order">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_value_property"
              c:identifier="midgard_collector_add_value_property">
        <doc xml:space="preserve">Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self, #MidgardCollector object is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value property is not registered for the @class, which has been initialized for given #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Number of value properties added to Midgard Collector is limited by
the number of properties registered for type which has been initialized
for the given #MidgardCollector instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if named value property has been added, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_group" c:identifier="midgard_collector_begin_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="midgard_collector_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_group" c:identifier="midgard_collector_end_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute" c:identifier="midgard_collector_execute">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="midgard_collector_get"
              introspectable="0">
        <doc xml:space="preserve">GData keys ( collector's subkeys ) are inserted to GData as
Quarks , so you must call g_quark_to_string if you need to get strings
( e.g. implementing hash table for language bindings ).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GData for the given key or %NULL if key is not found in collection</doc>
          <type name="GLib.Data" c:type="GData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subkey" c:identifier="midgard_collector_get_subkey">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">subkey's #GValue value or %NULL if not found</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subkey" transfer-ownership="none">
            <doc xml:space="preserve">name of key's subkey to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="include_deleted"
              c:identifier="midgard_collector_include_deleted">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_keys"
              c:identifier="midgard_collector_list_keys"
              introspectable="0">
        <return-value>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="midgard_collector_merge">
        <doc xml:space="preserve">If third overwrite parameter is set as TRUE then all keys which exists
in @self and @mc collector's instance will be oberwritten in @self colection
instance. If set as FALSE , only those keys will be added, which do not exist
in @self collection and exist in @mc collection.

Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Second argument is not valid #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@mc, #MidgardCollector has no keys collection
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if collections has been merged, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">whether overwrite collector's keys</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_key" c:identifier="midgard_collector_remove_key">
        <doc xml:space="preserve">Removes key and associated value from the given #MidgardCollector instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if key (and its value) has been removed from collection, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key in collector's collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="midgard_collector_set">
        <doc xml:space="preserve">Cases to return FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self, #MidgardCollector instance is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@subkey property name is not registered for collestor's class
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value is of invalid type
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

If the key is already added to MidgardCollector then its value
(as subkey&amp;value pair) is destroyed and new one is set.
In other case new key and its subkey&amp;value pair is added  to collector.

Key used in this function is a value returned ( or set ) for collector's key.
Keys are collection of values returned from property fields.
Subkey is an explicit  property name.

GValue @value argument is owned by MidgardCollector.
If value should be reused, its copy should be passed as method argument.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if key's value has been set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key name for which @subkey&amp;@value pair should be set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subkey" transfer-ownership="none">
            <doc xml:space="preserve">property name which is a subkey</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value for given @subkey</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key_property"
              c:identifier="midgard_collector_set_key_property">
        <doc xml:space="preserve">If @value is explicitly set to NULL , then all key property name's records
are selected from database and set in internal collector's resultset.
If not, key property name and its value is used as constraint to limit selected
records from database. In latter case add_value_property method should be invoked.
GValue value passed as third argument is owned by Midgard Collector. If value
should be reused, its copy should be passed to constructor.

Cases to return FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@self #MidgardCollector instance is invalid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@key property is not registered for the @typename class
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value is of invalid type
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@key property is already set for @self #MidgardCollector
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if key has been set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardCollector instance</doc>
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">property name which must be a key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">optional value of key's constraint</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit" c:identifier="midgard_collector_set_limit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset" c:identifier="midgard_collector_set_offset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Collector" c:type="MidgardCollector*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="QueryBuilder" c:type="MidgardQueryBuilder"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CollectorPrivate" c:type="MidgardCollectorPrivate*"/>
      </field>
    </class>
    <record name="CollectorClass"
            c:type="MidgardCollectorClass"
            glib:is-gtype-struct-for="Collector">
      <field name="parent">
        <type name="QueryBuilderClass" c:type="MidgardQueryBuilderClass"/>
      </field>
      <field name="set_key_property">
        <callback name="set_key_property">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if key has been set, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">property name which must be a key</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve">optional value of key's constraint</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_value_property">
        <callback name="add_value_property">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if named value property has been added, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve">property name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set">
        <callback name="set">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE, if key's value has been set, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">key name for which @subkey&amp;@value pair should be set</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subkey" transfer-ownership="none">
              <doc xml:space="preserve">property name which is a subkey</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve">value for given @subkey</doc>
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get" introspectable="0">
        <callback name="get" introspectable="0">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">#GData for the given key or %NULL if key is not found in collection</doc>
            <type name="GLib.Data" c:type="GData*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">name of the key to look for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_subkey">
        <callback name="get_subkey">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">subkey's #GValue value or %NULL if not found</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">name of the key</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subkey" transfer-ownership="none">
              <doc xml:space="preserve">name of key's subkey to look for</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="merge">
        <callback name="merge">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if collections has been merged, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="mc" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="overwrite" transfer-ownership="none">
              <doc xml:space="preserve">whether overwrite collector's keys</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_keys" introspectable="0">
        <callback name="list_keys" introspectable="0">
          <return-value>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_key">
        <callback name="remove_key">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if key (and its value) has been removed from collection, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardCollector instance</doc>
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <doc xml:space="preserve">name of the key in collector's collection</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_constraint">
        <callback name="add_constraint">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="op" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_constraint_with_property">
        <callback name="add_constraint_with_property">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="property_a" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="op" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="property_b" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_group">
        <callback name="begin_group">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_group">
        <callback name="end_group">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_order">
        <callback name="add_order">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="dir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_offset">
        <callback name="set_offset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_limit">
        <callback name="set_limit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
            <parameter name="limit" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="count">
        <callback name="count">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="include_deleted">
        <callback name="include_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute">
        <callback name="execute">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Collector" c:type="MidgardCollector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="CollectorPrivate"
            c:type="MidgardCollectorPrivate"
            disguised="1">
    </record>
    <class name="Config"
           c:symbol-prefix="config"
           c:type="MidgardConfig"
           parent="GObject.Object"
           glib:type-name="MidgardConfig"
           glib:get-type="midgard_config_get_type"
           glib:type-struct="ConfigClass">
      <constructor name="new" c:identifier="midgard_config_new">
        <doc xml:space="preserve">Initializes new instance of MidgardConfig object type.
NULL is returned when object can not be initialized.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">pointer to @MidgardConfig object or %NULL on failure.</doc>
          <type name="Config" c:type="MidgardConfig*"/>
        </return-value>
      </constructor>
      <function name="list_files" c:identifier="midgard_config_list_files">
        <doc xml:space="preserve">List all available configuration files.
If @user value is set to %TRUE, all available files from ~/.midgard/conf.d will be listed.
Only system files ( usually from /etc/midgard/conf.d ) will be listed if @user value is set to %FALSE.

Returned array should be freed when no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated and %NULL terminated array of file names.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">boolean switch for system or user's config files</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="midgard_config_copy" version="10.05">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">deep copy of given #MidgardConfig object</doc>
          <type name="Config" c:type="MidgardConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_blobdir"
              c:identifier="midgard_config_create_blobdir">
        <doc xml:space="preserve">Creates directories for blobs</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authtype" c:identifier="midgard_config_get_authtype">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_blobdir" c:identifier="midgard_config_get_blobdir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_host"
              c:identifier="midgard_config_get_database_host">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_name"
              c:identifier="midgard_config_get_database_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_password"
              c:identifier="midgard_config_get_database_password">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_port"
              c:identifier="midgard_config_get_database_port">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_type"
              c:identifier="midgard_config_get_database_type">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_database_username"
              c:identifier="midgard_config_get_database_username">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logfile" c:identifier="midgard_config_get_logfile">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loglevel" c:identifier="midgard_config_get_loglevel">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_midgard_password"
              c:identifier="midgard_config_get_midgard_password">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_midgard_username"
              c:identifier="midgard_config_get_midgard_username">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pamfile" c:identifier="midgard_config_get_pamfile">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schema_dir"
              c:identifier="midgard_config_get_schema_dir">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table_create"
              c:identifier="midgard_config_get_table_create">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table_update"
              c:identifier="midgard_config_get_table_update">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_testunit" c:identifier="midgard_config_get_testunit">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read_data"
              c:identifier="midgard_config_read_data"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if data has been read, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a NULL-terminated buffer containing the configuration</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_file"
              c:identifier="midgard_config_read_file"
              version="9.3"
              throws="1">
        <doc xml:space="preserve">This method reads configuration file from the given name and sets MidgardConfig object's properties.
Such initialized MidgardConfig instance may be reused among midgard-core and midgard-php extension
for example, without any need to re-read configuration file and without  any need to re-initalize
#MidgardConfig object instance.

Set %TRUE as @user boolean value to read files from user's home directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE when file has been read , %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig object instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">name of the file to read</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">boolean switch for system or user's config files</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_file_at_path"
              c:identifier="midgard_config_read_file_at_path"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if file has been read, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="filepath" transfer-ownership="none">
            <doc xml:space="preserve">a path to read file from</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file"
              c:identifier="midgard_config_save_file"
              throws="1">
        <doc xml:space="preserve">Saves configuration file for the given #MidgardConfig.

This method saves configuration file with the given name.
If third user parameter is set to %TRUE, then configuration file will
be saved in ~/.midgard2/conf.d directory.

User's conf.d directory will be created if doesn't exist.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE  ( with propper warning message ) if system wide
directory doesn't exist or file can not be saved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">configuration filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">system or home directory switch</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_at_path"
              c:identifier="midgard_config_save_file_at_path"
              throws="1">
        <doc xml:space="preserve">Saves configuration at specified path</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig instance</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="filepath" transfer-ownership="none">
            <doc xml:space="preserve">file location</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_authtype" c:identifier="midgard_config_set_authtype">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="authtype" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_blobdir" c:identifier="midgard_config_set_blobdir">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="blobdir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_host"
              c:identifier="midgard_config_set_database_host">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_name"
              c:identifier="midgard_config_set_database_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_password"
              c:identifier="midgard_config_set_database_password">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_port"
              c:identifier="midgard_config_set_database_port">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_type"
              c:identifier="midgard_config_set_database_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_database_username"
              c:identifier="midgard_config_set_database_username">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logfile" c:identifier="midgard_config_set_logfile">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="logfile" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loglevel" c:identifier="midgard_config_set_loglevel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="loglevel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_midgard_password"
              c:identifier="midgard_config_set_midgard_password">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_midgard_username"
              c:identifier="midgard_config_set_midgard_username">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pamfile" c:identifier="midgard_config_set_pamfile">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="pamfile" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_schema_dir"
              c:identifier="midgard_config_set_schema_dir">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table_create"
              c:identifier="midgard_config_set_table_create">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table_update"
              c:identifier="midgard_config_set_table_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_testunit" c:identifier="midgard_config_set_testunit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="MidgardConfig*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="authtype" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="blobdir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cachedir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="database" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbdir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbpass" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbtype" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbuser" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="gdathreads" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="host" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="logfilename" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="loglevel" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="midgardpassword" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="midgardusername" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pamfile" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sharedir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tablecreate" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tableupdate" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="testunit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="vardir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dbtype">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="host">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dbport">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="database">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dbdir">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dbuser">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dbpass">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="logfilename">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="loglevel">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="tablecreate">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="tableupdate">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="logfile">
        <type name="gpointer" c:type="FILE*"/>
      </field>
      <field name="log_channel">
        <type name="GLib.IOChannel" c:type="GIOChannel*"/>
      </field>
      <field name="mgdusername">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mgdpassword">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="testunit">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="loghandler">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="authtype">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="pamfile">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="gdathreads">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="blobdir">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="sharedir">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vardir">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cachedir">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="confdir" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="schemadir" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="viewsdir" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ConfigPrivate" c:type="MidgardConfigPrivate*"/>
      </field>
    </class>
    <record name="ConfigClass"
            c:type="MidgardConfigClass"
            glib:is-gtype-struct-for="Config">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ConfigPrivate" c:type="MidgardConfigPrivate" disguised="1">
    </record>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="MidgardConnection"
           parent="GObject.Object"
           glib:type-name="MidgardConnection"
           glib:get-type="midgard_connection_get_type"
           glib:type-struct="ConnectionClass">
      <constructor name="new" c:identifier="midgard_connection_new">
        <doc xml:space="preserve">Initializes new instance of MidgardConnection object type.

MidgardConnectionClass has no properties registered as class members.
Every internal data of MidgardConnection object is accessible with API
functions, and is not settable or gettable as property's value.
Particular methods should be implemented for language bindings.

#MidgardConnection objects holds runtime ( or request ) non persistent
data like authentication type, debug level, etc.

Persistent data like database name, blobs directory are associated with #MidgardConfig object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">pointer to #MidgardConnection object or %NULL on failure.</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </return-value>
      </constructor>
      <function name="open_all" c:identifier="midgard_connection_open_all">
        <doc xml:space="preserve">Every key is configuration name, and value is #MidgardConnection object.
Use g_hash_table_destroy to free hashtable and all opened connections.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated full #GHashTable.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="userdir" transfer-ownership="none">
            <doc xml:space="preserve">switch to read configuration from system or user's directory</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <method name="close"
              c:identifier="midgard_connection_close"
              version="10.05.1">
        <doc xml:space="preserve">Closes connection to underlying storage.
All private and public data remains unchanged, so connection might be reopened at any time.
After closing connection, 'disconnected' signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="midgard_connection_copy">
        <doc xml:space="preserve">This function duplicates given #MidgardConnection. It doesn't make deep copy.
All persistant data are kept unchanged, but runtime related members are reset
to default state. This function is helpful if application is forking and new
processes might have different environment variables.

Call g_object_unref if returned object is no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated and duplicated #MidgardConnection</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_dbus"
              c:identifier="midgard_connection_enable_dbus"
              version="10.05">
        <doc xml:space="preserve">Enable or disable dbus messages send for basic operation</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">dbus enable, disable toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_quota"
              c:identifier="midgard_connection_enable_quota"
              version="10.05">
        <doc xml:space="preserve">Enable or disable quota table usage.
If enabled, every base operation (create, update, delete) will be recorded in quota table,
limiting particular types usage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">quota enable, disable toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_replication"
              c:identifier="midgard_connection_enable_replication"
              version="10.05">
        <doc xml:space="preserve">Enable or disable repligard table usage.
If enabled, every base operation (create, update, delete) will be recorded in repligard table.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">replication enable, disable toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_workspace"
              c:identifier="midgard_connection_enable_workspace"
              version="10.05.5">
        <doc xml:space="preserve">Enable or disable workspace (and contexts) support</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">workspace enable, disable toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_manager"
              c:identifier="midgard_connection_get_content_manager"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardContentManager</doc>
          <type name="ContentManager" c:type="MidgardContentManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error" c:identifier="midgard_connection_get_error">
        <doc xml:space="preserve">Error id may be one of set by #midgard_error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Last error id set</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error_string"
              c:identifier="midgard_connection_get_error_string">
        <doc xml:space="preserve">Error string may be one set by #midgard_error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last error string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loghandler"
              c:identifier="midgard_connection_get_loghandler">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">unsigned integer value which is associated with G_LOG_DOMAIN and
MidgardConnection's loglevel currently set.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loglevel"
              c:identifier="midgard_connection_get_loglevel">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">unsigned integer flag specified by GLogLevelFlags.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="midgard_connection_get_user">
        <doc xml:space="preserve">NULL is explicitly returned if there's no midgard_user logged in
for the given MidgardConnection.
See also #MidgardUser methods if you need midgard_person associated with user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A pointer to MidgardUser instance or %NULL</doc>
          <type name="User" c:type="MidgardUser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workspace"
              c:identifier="midgard_connection_get_workspace"
              version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardWorkspaceStorage associated with #MidgardConnection or %NULL</doc>
          <type name="WorkspaceStorage"
                c:type="const MidgardWorkspaceStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workspace_manager"
              c:identifier="midgard_connection_get_workspace_manager"
              version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardWorkspaceManager associated with given connection instance.</doc>
          <type name="WorkspaceManager"
                c:type="const MidgardWorkspaceManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected"
              c:identifier="midgard_connection_is_connected">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if database connection is established, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled_dbus"
              c:identifier="midgard_connection_is_enabled_dbus"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if dbus is enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled_quota"
              c:identifier="midgard_connection_is_enabled_quota"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if quota is enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled_replication"
              c:identifier="midgard_connection_is_enabled_replication"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if replication is enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled_workspace"
              c:identifier="midgard_connection_is_enabled_workspace"
              version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if workspace support is enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_auth_types"
              c:identifier="midgard_connection_list_auth_types">
        <doc xml:space="preserve">List available and registered authentication types.
Use g_free() to free returned array.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">NULL terminated array with authentication types.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="n_types" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to store number of returned types</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="midgard_connection_open" throws="1">
        <doc xml:space="preserve">Opens a connection to the database, which is defined in named configuration.
The configuration file is read from the system configuration directory
and is used as the configuration for the created connection. For example: `/etc`
directory is taken into account if library is compiled with `/usr' prefix,
`/usr/local/etc` if compiled with `/usr/local` prefix, etc.

Consider using midgard_connection_open_config(), if you need to open connection to
database which is configured in user's home directory.

If the named database configuration can not be read or the connection fails,
then %FALSE is returned and an error message is written to the global midgard
error state.

It also initializes #MidgardSchema object (which is encapsulated by implementation )
and register all MgdSchema, #MidgardObject derived classes defined by user.
This happens only when basic Midgard classes are not registered in GType system.
This is recommended way to initialize MgdSchema types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the operation succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">configuration file name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_config" c:identifier="midgard_connection_open_config">
        <doc xml:space="preserve">Opens a #MidgardConnection with the given configuration.

Take a look at midgard_connection_open() wrt #MidgardSchema.

If #MidgardConnection is already associated with given config, method returns %TRUE.
If associated with another one, %FALSE is returned and MGD_ERR_INTERNAL error is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">[in]newly initialized #MidgardConnection object</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConfig object</doc>
            <type name="Config" c:type="MidgardConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_from_file"
              c:identifier="midgard_connection_open_from_file"
              throws="1">
        <doc xml:space="preserve">Opens a connection to the database.
The configuration file is read from given filepath.

Take a look at midgard_connection_open() wrt #MidgardSchema.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the operation succeeded, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="filepath" transfer-ownership="none">
            <doc xml:space="preserve">configuration file path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reopen" c:identifier="midgard_connection_reopen">
        <doc xml:space="preserve">This is MySQL optimized workaround for lost connection event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_error" c:identifier="midgard_connection_set_error">
        <doc xml:space="preserve">Valid @errcode is one defined in #MidgardErrorGeneric.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="errcode" transfer-ownership="none">
            <doc xml:space="preserve">error code</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loghandler"
              c:identifier="midgard_connection_set_loghandler">
        <doc xml:space="preserve">Sets internal loghandler id associated with G_LOG_DOMAIN and loglevel.
Caller is responsible to remove loghandler using g_log_remove_handler
when new loglevel for G_LOG_DOMAIN is set.

See also: #midgard_connection_set_loglevel</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="loghandler" transfer-ownership="none">
            <doc xml:space="preserve">loghandler id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loglevel"
              c:identifier="midgard_connection_set_loglevel">
        <doc xml:space="preserve">Sets log level of the given MidgardConnection.
Overwrites internal #MidgardConnection's log level defined in configuration file.
By default MidgardConnection holds loglevel which is associated with ( and duplicated
from ) #MidgardConfig.
#MidgardConfig object's log level isn't changed by this function

This method is a shortcut which sets correctly loghandler,loglevel
   and GLib's log function. Default log function will be used if %NULL
is defined. Core's default function is #midgard_error_default_log.

Available levels: error, warn, warning, info, message, debug.
warn is default loglevel, SQL queries are logged with debug level.
With info level, function names ( and classes' names ) are ( at least should be) logged in language bindings</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if debug level is set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve">Loglevel string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="log_func" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">log handler function</doc>
            <type name="GLib.LogFunc" c:type="GLogFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_workspace"
              c:identifier="midgard_connection_set_workspace"
              version="10.05.5">
        <doc xml:space="preserve">Actual workspace scope depends on #MidgardWorkspaceStorage implementation.
For example, if #MidgardWorkspaceContext is passed as @workspace argument,
Midgard environmental workspace is a tree context, which is the opposite
of #MidgardWorkspace which limits workspace scope to given one only.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage to set for given #MidgardConnection</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config" transfer-ownership="none">
        <doc xml:space="preserve">A deep copy of #MidgardConfig associated with #MidgardConnection.
Returned config property has empty database username and password values set.</doc>
        <type name="Config"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="errnum">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="errstr">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="err">
        <type name="GLib.Error" c:type="GError*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ConnectionPrivate" c:type="MidgardConnectionPrivate*"/>
      </field>
      <glib:signal name="auth-changed" when="last" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="connected" when="last" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="disconnected" when="last" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="error" when="last" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve">error signal is emitted every time when error set is different than MGD_ERR_OK</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="lost-provider"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ConnectionClass"
            c:type="MidgardConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="error">
        <callback name="error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="auth_changed">
        <callback name="auth_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lost_provider">
        <callback name="lost_provider">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connected">
        <callback name="connected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_id_error">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_id_auth_changed">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_id_lost_provider">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_id_connected">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_id_disconnected">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="ConnectionPrivate"
            c:type="MidgardConnectionPrivate"
            disguised="1">
    </record>
    <interface name="ContentManager"
               c:symbol-prefix="content_manager"
               c:type="MidgardContentManager"
               glib:type-name="MidgardContentManager"
               glib:get-type="midgard_content_manager_get_type">
      <method name="create_job"
              c:identifier="midgard_content_manager_create_job"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardContentManagerJob job or %NULL on failure</doc>
          <type name="ContentManagerJob" c:type="MidgardContentManagerJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManager instance</doc>
            <type name="ContentManager" c:type="MidgardContentManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManagerJobType</doc>
            <type name="ContentManagerJobType"
                  c:type="MidgardContentManagerJobType"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">#GObject object which holds content data</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObjectReference instance</doc>
            <type name="ObjectReference" c:type="MidgardObjectReference*"/>
          </parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">#MidgardModel instance</doc>
            <type name="Model" c:type="MidgardModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="midgard_content_manager_get_connection"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardConnection or %NULL</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManager instance</doc>
            <type name="ContentManager" c:type="MidgardContentManager*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ContentManagerIFace" c:type="MidgardContentManagerIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_connection" introspectable="0">
        <callback name="get_connection" introspectable="0" throws="1">
          <return-value>
            <type name="Connection" c:type="MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ContentManager" c:type="MidgardContentManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_job" introspectable="0">
        <callback name="create_job" introspectable="0" throws="1">
          <return-value>
            <type name="ContentManagerJob" c:type="MidgardContentManagerJob*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ContentManager" c:type="MidgardContentManager*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="ContentManagerJobType"
                    c:type="MidgardContentManagerJobType"/>
            </parameter>
            <parameter name="content" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="reference" transfer-ownership="none">
              <type name="ObjectReference" c:type="MidgardObjectReference*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <type name="Model" c:type="MidgardModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ContentManagerJob"
               c:symbol-prefix="content_manager_job"
               c:type="MidgardContentManagerJob"
               glib:type-name="MidgardContentManagerJob"
               glib:get-type="midgard_content_manager_job_get_type">
      <prerequisite name="Executable"/>
      <prerequisite name="Job"/>
      <prerequisite name="Validable"/>
      <method name="get_content_object"
              c:identifier="midgard_content_manager_job_get_content_object"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GObject derived instance which is volatile content data holder</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManagerJob instance</doc>
            <type name="ContentManagerJob" c:type="MidgardContentManagerJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="midgard_content_manager_job_get_model"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardModel instance which is a model for content object in this job or %NULL</doc>
          <type name="Model" c:type="MidgardModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManagerJob instance</doc>
            <type name="ContentManagerJob" c:type="MidgardContentManagerJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reference"
              c:identifier="midgard_content_manager_job_get_reference"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardObjectReference instance which identifies object in this job</doc>
          <type name="ObjectReference" c:type="MidgardObjectReference*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardContentManagerJob instance</doc>
            <type name="ContentManagerJob" c:type="MidgardContentManagerJob*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ContentManagerJobIFace"
            c:type="MidgardContentManagerJobIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_content_object" introspectable="0">
        <callback name="get_content_object" introspectable="0" throws="1">
          <return-value>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ContentManagerJob"
                    c:type="MidgardContentManagerJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_reference" introspectable="0">
        <callback name="get_reference" introspectable="0" throws="1">
          <return-value>
            <type name="ObjectReference" c:type="MidgardObjectReference*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ContentManagerJob"
                    c:type="MidgardContentManagerJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model" introspectable="0">
        <callback name="get_model" introspectable="0" throws="1">
          <return-value>
            <type name="Model" c:type="MidgardModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ContentManagerJob"
                    c:type="MidgardContentManagerJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ContentManagerJobType"
                 version="12.09"
                 c:type="MidgardContentManagerJobType">
      <doc xml:space="preserve">Enum values to define job type.</doc>
      <member name="load"
              value="0"
              c:identifier="MIDGARD_CONTENT_MANAGER_JOB_LOAD">
      </member>
      <member name="create"
              value="1"
              c:identifier="MIDGARD_CONTENT_MANAGER_JOB_CREATE">
      </member>
      <member name="update"
              value="2"
              c:identifier="MIDGARD_CONTENT_MANAGER_JOB_UPDATE">
      </member>
      <member name="delete"
              value="3"
              c:identifier="MIDGARD_CONTENT_MANAGER_JOB_DELETE">
      </member>
      <member name="purge"
              value="4"
              c:identifier="MIDGARD_CONTENT_MANAGER_JOB_PURGE">
      </member>
    </enumeration>
    <class name="DBObject"
           c:symbol-prefix="dbobject"
           c:type="MidgardDBObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardDBObject"
           glib:get-type="midgard_dbobject_get_type"
           glib:type-struct="DBObjectClass">
      <virtual-method name="get_connection">
        <return-value transfer-ownership="none">
          <type name="Connection" c:type="const MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBObject" c:type="MidgardDBObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer to #MidgardConnection, given object has been initialized for</doc>
        <type name="Connection"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dbpriv" readable="0" private="1">
        <type name="DBObjectPrivate" c:type="MidgardDBObjectPrivate*"/>
      </field>
    </class>
    <record name="DBObjectClass"
            c:type="MidgardDBObjectClass"
            glib:is-gtype-struct-for="DBObject">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="dbpriv" readable="0" private="1">
        <type name="DBObjectPrivate" c:type="MidgardDBObjectPrivate*"/>
      </field>
      <field name="get_connection">
        <callback name="get_connection">
          <return-value transfer-ownership="none">
            <type name="Connection" c:type="const MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DBObjectPrivate"
            c:type="MidgardDBObjectPrivate"
            disguised="1">
    </record>
    <constant name="DBUS_SUPPORT" value="1" c:type="MIDGARD_DBUS_SUPPORT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DEFAULT_DATETIME"
              value="0001-01-01 00:00:00+0000"
              c:type="MIDGARD_DEFAULT_DATETIME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Dbus"
           c:symbol-prefix="dbus"
           c:type="MidgardDbus"
           parent="GObject.Object"
           glib:type-name="MidgardDbus"
           glib:get-type="midgard_dbus_get_type"
           glib:type-struct="DbusClass">
      <constructor name="new" c:identifier="midgard_dbus_new">
        <doc xml:space="preserve">@use_session, set to FALSE for session bus, TRUE for system one</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardDbus instance, %NULL otherwise</doc>
          <type name="Dbus" c:type="MidgardDbus*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">a path at which D-Bus object exists</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="use_session" transfer-ownership="none">
            <doc xml:space="preserve">whether to use session bus</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_dbus"
                c:identifier="midgard_dbus_create_dbus"
                version="10.05.1">
        <doc xml:space="preserve">Constructor. Invokes midgard_dbus_new().
This function is added for language bindings, in which, midgard_dbus_new can not be
invoked explicitly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardDbus instance</doc>
          <type name="Dbus" c:type="MidgardDbus*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="use_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_name" c:identifier="midgard_dbus_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </function>
      <function name="is_enabled"
                c:identifier="midgard_dbus_is_enabled"
                version="10.05.1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if Midgard library is compiled with DBUS support, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="send" c:identifier="midgard_dbus_send">
        <doc xml:space="preserve">Emits 'Notified' signal on objects at given @path and sends given message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">dbus path at which we expect recipients</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">a message to be sent</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="use_session" transfer-ownership="none">
            <doc xml:space="preserve">whether to use system or session bus</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_message" c:identifier="midgard_dbus_get_message">
        <doc xml:space="preserve">Get message associated with givven instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">pointer to object's message or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardDbus instance</doc>
            <type name="Dbus" c:type="MidgardDbus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DbusPrivate" c:type="MidgardDbusPrivate*"/>
      </field>
      <glib:signal name="notified" when="last" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DbusClass"
            c:type="MidgardDbusClass"
            glib:is-gtype-struct-for="Dbus">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="notified">
        <callback name="notified">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_notified">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="DbusPrivate" c:type="MidgardDbusPrivate" disguised="1">
    </record>
    <interface name="Executable"
               c:symbol-prefix="executable"
               c:type="MidgardExecutable"
               glib:type-name="MidgardExecutable"
               glib:get-type="midgard_executable_get_type">
      <method name="execute"
              c:identifier="midgard_executable_execute"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Execute command or perform operation.
Implementation shall check if given instance is valid.
If it's not, shall invoke validation method, if given instance is #MidgardValidable derived.

Before execution, implementation should emit 'execution-start' signal, and 'execution-end' when
execution operation is completed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardExecutable instance
@error (error-domains MIDGARD_EXECUTION_ERROR): location to store error</doc>
            <type name="Executable" c:type="MidgardExecutable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="midgard_executable_execute_async"
              version="12.09"
              throws="1">
        <doc xml:space="preserve">Execute asynchronous command or perform operation.
Implementation shall check if given instance is valid.
If it's not, shall invoke validation method, if given instance is #MidgardValidable derived.

Implementation shall not emit any signal inside asynchronous method.
Instead, signal emission should be added to GLib's default main loop(e.g. g_idle_add).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardExecutable instance
@error (error-domains MIDGARD_EXECUTION_ERROR): location to store error</doc>
            <type name="Executable" c:type="MidgardExecutable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execution_end"
              c:identifier="midgard_executable_execution_end"
              version="12.09">
        <doc xml:space="preserve">Emits 'execution-end' signal on given executable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardExecutable instance</doc>
            <type name="Executable" c:type="MidgardExecutable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execution_start"
              c:identifier="midgard_executable_execution_start"
              version="12.09">
        <doc xml:space="preserve">Emits 'execution-start' signal on given executable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardExecutable instance</doc>
            <type name="Executable" c:type="MidgardExecutable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="execution-end"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <doc xml:space="preserve">Gets emitted after @executor's operation is executed</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="execution-start"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <doc xml:space="preserve">Gets emitted before @executor's operation is executed</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="ExecutableIFace" c:type="MidgardExecutableIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="execute">
        <callback name="execute" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Executable" c:type="MidgardExecutable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute_async">
        <callback name="execute_async" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Executable" c:type="MidgardExecutable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execution_start">
        <callback name="execution_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execution_end">
        <callback name="execution_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ExecutionError"
                 c:type="MidgardExecutionError"
                 glib:error-domain="midgard-execution-error-quark">
      <member name="dependence_invalid"
              value="0"
              c:identifier="MIDGARD_EXECUTION_ERROR_DEPENDENCE_INVALID">
      </member>
      <member name="command_invalid"
              value="1"
              c:identifier="MIDGARD_EXECUTION_ERROR_COMMAND_INVALID">
      </member>
      <member name="command_invalid_data"
              value="2"
              c:identifier="MIDGARD_EXECUTION_ERROR_COMMAND_INVALID_DATA">
      </member>
      <member name="internal"
              value="3"
              c:identifier="MIDGARD_EXECUTION_ERROR_INTERNAL">
      </member>
    </enumeration>
    <class name="ExecutionPool"
           c:symbol-prefix="execution_pool"
           c:type="MidgardExecutionPool"
           parent="GObject.Object"
           glib:type-name="MidgardExecutionPool"
           glib:get-type="midgard_execution_pool_get_type"
           glib:type-struct="ExecutionPoolClass">
      <implements name="Pool"/>
      <constructor name="new"
                   c:identifier="midgard_execution_pool_new"
                   version="12.09">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardExecutionPool</doc>
          <type name="ExecutionPool" c:type="MidgardExecutionPool*"/>
        </return-value>
        <parameters>
          <parameter name="max_n_threads" transfer-ownership="none">
            <doc xml:space="preserve">maximum number of threads</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="max-n-threads"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ExecutionPoolPrivate"
              c:type="MidgardExecutionPoolPrivate*"/>
      </field>
    </class>
    <record name="ExecutionPoolClass"
            c:type="MidgardExecutionPoolClass"
            glib:is-gtype-struct-for="ExecutionPool">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ExecutionPoolPrivate"
            c:type="MidgardExecutionPoolPrivate"
            disguised="1">
    </record>
    <constant name="GLOBAL_SCHEMA"
              value="/e/rtvc90-32/share/midgard2/MidgardObjects.xml"
              c:type="MIDGARD_GLOBAL_SCHEMA">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="GenericError" c:type="MidgardGenericError">
      <member name="ok" value="0" c:identifier="MIDGARD_GENERIC_ERROR_OK">
      </member>
      <member name="error"
              value="-1"
              c:identifier="MIDGARD_GENERIC_ERROR_ERROR">
      </member>
      <member name="access_denied"
              value="-2"
              c:identifier="MIDGARD_GENERIC_ERROR_ACCESS_DENIED">
      </member>
      <member name="no_metadata"
              value="-3"
              c:identifier="MIDGARD_GENERIC_ERROR_NO_METADATA">
      </member>
      <member name="not_object"
              value="-4"
              c:identifier="MIDGARD_GENERIC_ERROR_NOT_OBJECT">
      </member>
      <member name="not_exists"
              value="-5"
              c:identifier="MIDGARD_GENERIC_ERROR_NOT_EXISTS">
      </member>
      <member name="invalid_name"
              value="-6"
              c:identifier="MIDGARD_GENERIC_ERROR_INVALID_NAME">
      </member>
      <member name="duplicate"
              value="-7"
              c:identifier="MIDGARD_GENERIC_ERROR_DUPLICATE">
      </member>
      <member name="has_dependants"
              value="-8"
              c:identifier="MIDGARD_GENERIC_ERROR_HAS_DEPENDANTS">
      </member>
      <member name="range"
              value="-9"
              c:identifier="MIDGARD_GENERIC_ERROR_RANGE">
      </member>
      <member name="not_connected"
              value="-10"
              c:identifier="MIDGARD_GENERIC_ERROR_NOT_CONNECTED">
      </member>
      <member name="sg_notfound"
              value="-11"
              c:identifier="MIDGARD_GENERIC_ERROR_SG_NOTFOUND">
      </member>
      <member name="invalid_object"
              value="-12"
              c:identifier="MIDGARD_GENERIC_ERROR_INVALID_OBJECT">
      </member>
      <member name="quota"
              value="-13"
              c:identifier="MIDGARD_GENERIC_ERROR_QUOTA">
      </member>
      <member name="internal"
              value="-14"
              c:identifier="MIDGARD_GENERIC_ERROR_INTERNAL">
      </member>
      <member name="object_name_exists"
              value="-15"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_NAME_EXISTS">
      </member>
      <member name="object_no_storage"
              value="-16"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_NO_STORAGE">
      </member>
      <member name="object_no_parent"
              value="-17"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_NO_PARENT">
      </member>
      <member name="invalid_property_value"
              value="-18"
              c:identifier="MIDGARD_GENERIC_ERROR_INVALID_PROPERTY_VALUE">
      </member>
      <member name="invalid_property"
              value="-19"
              c:identifier="MIDGARD_GENERIC_ERROR_INVALID_PROPERTY">
      </member>
      <member name="user_data"
              value="-20"
              c:identifier="MIDGARD_GENERIC_ERROR_USER_DATA">
      </member>
      <member name="object_deleted"
              value="-21"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_DELETED">
      </member>
      <member name="object_purged"
              value="-22"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_PURGED">
      </member>
      <member name="object_exported"
              value="-23"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_EXPORTED">
      </member>
      <member name="object_imported"
              value="-24"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_IMPORTED">
      </member>
      <member name="missed_dependence"
              value="-25"
              c:identifier="MIDGARD_GENERIC_ERROR_MISSED_DEPENDENCE">
      </member>
      <member name="tree_is_circular"
              value="-26"
              c:identifier="MIDGARD_GENERIC_ERROR_TREE_IS_CIRCULAR">
      </member>
      <member name="object_is_locked"
              value="-27"
              c:identifier="MIDGARD_GENERIC_ERROR_OBJECT_IS_LOCKED">
      </member>
    </enumeration>
    <class name="Guid"
           c:symbol-prefix="guid"
           glib:type-name="MidgardGuid"
           glib:get-type="midgard_guid_get_type"
           glib:fundamental="1">
      <function name="external" c:identifier="midgard_guid_external">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="external" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="midgard_guid_new">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <interface name="Job"
               c:symbol-prefix="job"
               c:type="MidgardJob"
               glib:type-name="MidgardJob"
               glib:get-type="midgard_job_get_type">
      <prerequisite name="Executable"/>
      <method name="is_executed"
              c:identifier="midgard_job_is_executed"
              version="12.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if job is executed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardJob instance</doc>
            <type name="Job" c:type="MidgardJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_failed"
              c:identifier="midgard_job_is_failed"
              version="12.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if job failed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardJob instance</doc>
            <type name="Job" c:type="MidgardJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_running"
              c:identifier="midgard_job_is_running"
              version="12.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if job is running, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardJob instance</doc>
            <type name="Job" c:type="MidgardJob*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="JobIFace" c:type="MidgardJobIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="is_running">
        <callback name="is_running">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Job" c:type="MidgardJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_executed">
        <callback name="is_executed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Job" c:type="MidgardJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_failed">
        <callback name="is_failed">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Job" c:type="MidgardJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="KeyConfig"
           c:symbol-prefix="key_config"
           c:type="MidgardKeyConfig"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardKeyConfig"
           glib:get-type="midgard_key_config_get_type"
           glib:type-struct="KeyConfigClass">
      <function name="construct"
                c:identifier="midgard_key_config_construct"
                introspectable="0">
        <return-value>
          <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="keyctx" transfer-ownership="none">
            <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="delete_group" invoker="delete_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_comment" invoker="get_comment">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="group_exists" invoker="group_exists">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_groups"
                      invoker="list_groups"
                      introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="result_length1" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_from_data" invoker="load_from_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_comment" invoker="set_comment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_value" invoker="set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store" invoker="store">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="to_data" invoker="to_data">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="delete_group"
              c:identifier="midgard_key_config_delete_group">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_comment" c:identifier="midgard_key_config_get_comment">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="midgard_key_config_get_value">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="group_exists"
              c:identifier="midgard_key_config_group_exists">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_groups"
              c:identifier="midgard_key_config_list_groups"
              introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="result_length1" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="midgard_key_config_load_from_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_comment" c:identifier="midgard_key_config_set_comment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="midgard_key_config_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="midgard_key_config_store">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_data" c:identifier="midgard_key_config_to_data">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="KeyConfigPrivate" c:type="MidgardKeyConfigPrivate*"/>
      </field>
      <field name="path">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="context">
        <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
      </field>
    </class>
    <record name="KeyConfigClass"
            c:type="MidgardKeyConfigClass"
            glib:is-gtype-struct-for="KeyConfig">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_value">
        <callback name="set_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_comment">
        <callback name="set_comment">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="comment" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_comment">
        <callback name="get_comment">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="group" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_groups" introspectable="0">
        <callback name="list_groups" introspectable="0">
          <return-value>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="result_length1" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="group_exists">
        <callback name="group_exists">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_group">
        <callback name="delete_group">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store">
        <callback name="store">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_from_data">
        <callback name="load_from_data">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="to_data">
        <callback name="to_data">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfig" c:type="MidgardKeyConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="KeyConfigContext"
           c:symbol-prefix="key_config_context"
           c:type="MidgardKeyConfigContext"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardKeyConfigContext"
           glib:get-type="midgard_key_config_context_get_type"
           glib:type-struct="KeyConfigContextClass">
      <function name="construct"
                c:identifier="midgard_key_config_context_construct"
                introspectable="0">
        <return-value>
          <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="context_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="list_key_config"
                      invoker="list_key_config"
                      introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
          </instance-parameter>
          <parameter name="result_length1" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_context_path"
              c:identifier="midgard_key_config_context_get_context_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_key_config"
              c:identifier="midgard_key_config_context_list_key_config"
              introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
          </instance-parameter>
          <parameter name="result_length1" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context-path" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="KeyConfigContextPrivate"
              c:type="MidgardKeyConfigContextPrivate*"/>
      </field>
    </class>
    <record name="KeyConfigContextClass"
            c:type="MidgardKeyConfigContextClass"
            glib:is-gtype-struct-for="KeyConfigContext">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_key_config" introspectable="0">
        <callback name="list_key_config" introspectable="0">
          <return-value>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="KeyConfigContext" c:type="MidgardKeyConfigContext*"/>
            </parameter>
            <parameter name="result_length1" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="KeyConfigContextPrivate"
            c:type="MidgardKeyConfigContextPrivate"
            disguised="1">
    </record>
    <class name="KeyConfigFile"
           c:symbol-prefix="key_config_file"
           c:type="MidgardKeyConfigFile"
           parent="KeyConfig"
           glib:type-name="MidgardKeyConfigFile"
           glib:get-type="midgard_key_config_file_get_type"
           glib:type-struct="KeyConfigFileClass">
      <constructor name="new"
                   c:identifier="midgard_key_config_file_new"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="KeyConfigFile" c:type="MidgardKeyConfigFile*"/>
        </return-value>
        <parameters>
          <parameter name="keyctx" transfer-ownership="none">
            <type name="KeyConfigFileContext"
                  c:type="MidgardKeyConfigFileContext*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="construct"
                c:identifier="midgard_key_config_file_construct"
                introspectable="0"
                throws="1">
        <return-value>
          <type name="KeyConfigFile" c:type="MidgardKeyConfigFile*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="keyctx" transfer-ownership="none">
            <type name="KeyConfigFileContext"
                  c:type="MidgardKeyConfigFileContext*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance">
        <type name="KeyConfig" c:type="MidgardKeyConfig"/>
      </field>
      <field name="priv">
        <type name="KeyConfigFilePrivate"
              c:type="MidgardKeyConfigFilePrivate*"/>
      </field>
    </class>
    <record name="KeyConfigFileClass"
            c:type="MidgardKeyConfigFileClass"
            glib:is-gtype-struct-for="KeyConfigFile">
      <field name="parent_class">
        <type name="KeyConfigClass" c:type="MidgardKeyConfigClass"/>
      </field>
    </record>
    <class name="KeyConfigFileContext"
           c:symbol-prefix="key_config_file_context"
           c:type="MidgardKeyConfigFileContext"
           parent="KeyConfigContext"
           glib:type-name="MidgardKeyConfigFileContext"
           glib:get-type="midgard_key_config_file_context_get_type"
           glib:type-struct="KeyConfigFileContextClass">
      <constructor name="new"
                   c:identifier="midgard_key_config_file_context_new"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="KeyConfigFileContext"
                c:type="MidgardKeyConfigFileContext*"/>
        </return-value>
        <parameters>
          <parameter name="context_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="construct"
                c:identifier="midgard_key_config_file_context_construct"
                introspectable="0"
                throws="1">
        <return-value>
          <type name="KeyConfigFileContext"
                c:type="MidgardKeyConfigFileContext*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="context_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance">
        <type name="KeyConfigContext" c:type="MidgardKeyConfigContext"/>
      </field>
      <field name="priv">
        <type name="KeyConfigFileContextPrivate"
              c:type="MidgardKeyConfigFileContextPrivate*"/>
      </field>
    </class>
    <record name="KeyConfigFileContextClass"
            c:type="MidgardKeyConfigFileContextClass"
            glib:is-gtype-struct-for="KeyConfigFileContext">
      <field name="parent_class">
        <type name="KeyConfigContextClass"
              c:type="MidgardKeyConfigContextClass"/>
      </field>
    </record>
    <record name="KeyConfigFileContextPrivate"
            c:type="MidgardKeyConfigFileContextPrivate"
            disguised="1">
    </record>
    <record name="KeyConfigFilePrivate"
            c:type="MidgardKeyConfigFilePrivate"
            disguised="1">
    </record>
    <record name="KeyConfigPrivate"
            c:type="MidgardKeyConfigPrivate"
            disguised="1">
    </record>
    <constant name="LIB_PREFIX"
              value="/e/rtvc90-32"
              c:type="MIDGARD_LIB_PREFIX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LIB_VERSION" value="12.09" c:type="MIDGARD_LIB_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LIB_VERSION_STRING"
              value=""
              c:type="MIDGARD_LIB_VERSION_STRING">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LSCHEMA_DIR"
              value="/e/rtvc90-32/share/midgard2/schema"
              c:type="MIDGARD_LSCHEMA_DIR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Longtext"
           c:symbol-prefix="longtext"
           glib:type-name="MidgardLongtext"
           glib:get-type="midgard_longtext_get_type"
           glib:fundamental="1">
    </class>
    <function name="MD5_Final"
              c:identifier="MIDGARD_MD5_Final"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type name="guint8" c:type="unsigned char"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type c:type="MIDGARD_MD5_CTX*"/>
        </parameter>
      </parameters>
    </function>
    <function name="MD5_Init"
              c:identifier="MIDGARD_MD5_Init"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type c:type="MIDGARD_MD5_CTX*"/>
        </parameter>
      </parameters>
    </function>
    <function name="MD5_Update"
              c:identifier="MIDGARD_MD5_Update"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="arg0" transfer-ownership="none">
          <type c:type="MIDGARD_MD5_CTX*"/>
        </parameter>
        <parameter name="arg1" transfer-ownership="none">
          <type name="guint8" c:type="const unsigned char*"/>
        </parameter>
        <parameter name="arg2" transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <class name="Metadata"
           c:symbol-prefix="metadata"
           c:type="MidgardMetadata"
           parent="DBObject"
           glib:type-name="MidgardMetadata"
           glib:get-type="midgard_metadata_get_type"
           glib:type-struct="MetadataClass">
      <constructor name="new" c:identifier="midgard_metadata_new">
        <doc xml:space="preserve">Creates new midgard_metadata instance for the given #MidgardObject instance.

Do not use g_object_new() as metadata constructor. #MidgardObject pointer is internally
assigned as a pointer to midgard object for which particular metadata object
instance was created.

#MidgardMetadata object has two "kinds" of properties.
The first one is settable ( and overwritten ) only by metadata implementation.
The second one is freely settable by application. In this case midgard core
keep value of such property "as is".

Do not free #MidgardMetadata object's memory as it is automatically
freed when particular #MidgardObject object's instance memory is freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated midgard_metadata instance</doc>
          <type name="Metadata" c:type="MidgardMetadata*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject for which metadata is created</doc>
            <type name="DBObject" c:type="MidgardDBObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="approved" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="approver" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="authors" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="created" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="creator" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="deleted" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="exported" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="hidden" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="imported" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="isapproved" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="islocked" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="locker" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="navnoentry" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="owner" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="published" writable="1" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="revised" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="revision" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="revisor" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="scheduleend" writable="1" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="schedulestart" writable="1" transfer-ownership="none">
        <type name="Timestamp"/>
      </property>
      <property name="score" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="DBObject" c:type="MidgardDBObject"/>
      </field>
      <field name="priv">
        <type name="MetadataPrivate" c:type="MidgardMetadataPrivate*"/>
      </field>
    </class>
    <record name="MetadataClass"
            c:type="MidgardMetadataClass"
            glib:is-gtype-struct-for="Metadata">
      <field name="parent">
        <type name="DBObjectClass" c:type="MidgardDBObjectClass"/>
      </field>
    </record>
    <record name="MetadataPrivate"
            c:type="MidgardMetadataPrivate"
            disguised="1">
    </record>
    <interface name="Model"
               c:symbol-prefix="model"
               c:type="MidgardModel"
               glib:type-name="MidgardModel"
               glib:get-type="midgard_model_get_type">
      <method name="get_name"
              c:identifier="midgard_model_get_name"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">name of the model, or NULL in case of error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardModel instance</doc>
            <type name="Model" c:type="MidgardModel*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ModelIFace" c:type="MidgardModelIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_name">
        <callback name="get_name" throws="1">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Model" c:type="MidgardModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ModelReference"
               c:symbol-prefix="model_reference"
               c:type="MidgardModelReference"
               glib:type-name="MidgardModelReference"
               glib:get-type="midgard_model_reference_get_type">
      <prerequisite name="Model"/>
      <method name="get_id"
              c:identifier="midgard_model_reference_get_id"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Unique id of the model, or NULL in case of error</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardModelReference instance</doc>
            <type name="ModelReference" c:type="MidgardModelReference*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_value"
              c:identifier="midgard_model_reference_get_id_value"
              version="12.09"
              throws="1">
        <doc xml:space="preserve">The purpose of this method is to return generic GValue which can hold either
string or integer id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">New GValue which holds id of the model, or NULL in case of error.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardModelReference instance</doc>
            <type name="ModelReference" c:type="MidgardModelReference*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ModelReferenceIFace" c:type="MidgardModelReferenceIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_id">
        <callback name="get_id" throws="1">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ModelReference" c:type="MidgardModelReference*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_value">
        <callback name="get_id_value" throws="1">
          <return-value transfer-ownership="full">
            <type name="GObject.Value" c:type="GValue*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ModelReference" c:type="MidgardModelReference*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="MidgardObject"
           parent="DBObject"
           abstract="1"
           glib:type-name="MidgardObject"
           glib:get-type="midgard_object_get_type"
           glib:type-struct="ObjectClass">
      <constructor name="new" c:identifier="midgard_object_new">
        <doc xml:space="preserve">Creates new MidgardObject object instance.

This function is mandatory one for new midgard object initialization.
Unlike g_object_new ( which is typical function to create new GObject
instance ), midgard_object_new initializes data which are accessible
internally by object instance itself or by object's class:

- midgard connection handler is associated with object

Sitegroup value is returned from midgard connection handler and may
be overwritten only by SG0 Midgard Administrator only when object
is created. Setting this property is forbidden when object is already
fetched from database.

Object's contructor tries to determine third optional parameter value.
If it's of #G_TYPE_STRING type , then midgard_is_guid() is called to check
weather passed string is a guid , in any other case id property is used
with #G_TYPE_UINT type. New "empty" instance is created (without fetching
data from database) if @value parameter is explicitly set to NULL.
Or if given string is empty one, or given integer is 0.

Any object instance created with this function should be freed using typical
#g_object_unref function.

Cases to return %NULL:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
@value holds string but it's not a valid guid
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
@value holds valid id or guid but object doesn't exists in database ( MGD_ERR_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">New #MidgardObject object or %NULL on failure</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection handler</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional value which holds id or guid of an object</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="factory"
                c:identifier="midgard_object_factory"
                version="10.05.1">
        <doc xml:space="preserve">Static constructor, provided for language bindings, in which,
midgard_object_new() can not be invoked explicitly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardObject instance</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject derived class name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional object identifier</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="action_approve">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_approve_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_approved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_create">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_create_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_created">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_delete">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_delete_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_export">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_export_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_exported">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_import">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_import_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_imported">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_loaded">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_loaded_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_lock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_lock_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_locked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_purge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_purge_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_purged">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unapprove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unapprove_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unapproved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unlock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unlock_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_unlocked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_update_hook">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="action_updated">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="approve" c:identifier="midgard_object_approve">
        <doc xml:space="preserve">Approve object.

Approval functionality is not used by midgard core itself.
Instead, it supports higher level's applications. It means,
that there are no core methods ( like update or delete ) which
do real check if object is approved. You should create own approval
workflow and logic with methods: midgard_object_is_approved(),
midgard_object_unapprove() and this one.

This method updates metadata properties:
revisor, revised, revision, approver and approved.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
No user logged in ( MGD_ERR_ACCESS_DENIED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
No active person ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object is already approved
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object has been approved, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="build_path" c:identifier="midgard_object_build_path">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mobj" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create" c:identifier="midgard_object_create">
        <doc xml:space="preserve">Creates new database record(s) for object.

Internally such properties are set (overwritten):
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
guid (if not set by root)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
id (if set as primary property)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Metadata overwritten properties:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
creator
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
created
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
revisor
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
revised
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
revision
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
published ( set only, if not defined by user )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Property registered with #MGD_TYPE_GUID doesn't hold valid guid ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's class is registered with tree facilities and there is already object with the same name in midgard tree. ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object has guid property set already. ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Quota is activated and its limit is reached ( MGD_ERR_QUOTA )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_attachment"
              c:identifier="midgard_object_create_attachment">
        <doc xml:space="preserve">Creates object's attachment using given properties.
Any property may be explicitly set to NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created #MidgardObject of midgard_attachment class or %NULL on failure</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name for attachment</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">its title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mimetype" transfer-ownership="none">
            <doc xml:space="preserve">and mimetype</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="midgard_object_delete">
        <doc xml:space="preserve">Delete object's record(s) from database, but object's record is not fully deleted
from database. Instead, it is marked as deleted , thus it is possible to undelete
object later with midgard_schema_object_factory_object_undelete().

To perform valid delete operation, object's class has to have either 'metadata'
(of #MidgardMetadata type) or 'delete' property installed. The latter is not taken into
account if metadata object provides own 'deleted' property.

If @check_dependents toggle is %TRUE, parameters and attachments storage will be queried,
if any of such exist and depend on deleted object.

If given object's class has no metadata defined, object will be purged.

Use midgard_object_purge() if you need to purge object's data from database.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Object's has no storage defined ( MGD_ERR_OBJECT_NO_STORAGE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's property guid is empty ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's class has neither metadata nor deleted property installed ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There are still dependent objects in database ( MGD_ERR_HAS_DEPENDENTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object is successfully marked as deleted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="check_dependents" transfer-ownership="none">
            <doc xml:space="preserve">dependents' check toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_attachments"
              c:identifier="midgard_object_delete_attachments">
        <doc xml:space="preserve">Delete object's attachments(s) which match given properties' values.
Properties list in @parameters is optional. All object's attachments are
deleted ( if exist ) if @parameters is explicitly set to %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE if at least one of the attachment could not be deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_parameters"
              c:identifier="midgard_object_delete_parameters">
        <doc xml:space="preserve">Delete object's parameter(s) which match given properties' values.
Properties list in @parameters is optional. All object's parameters are
deleted ( if exist ) if @parameters is explicitly set to %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE if at least one of the parameters could not be deleted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_attachments"
              c:identifier="midgard_object_find_attachments">
        <doc xml:space="preserve">Find object's attachment(s) with matching given properties.
@parameters argument is optional. All object's attachments are
returned ( if exist ) if @parameters is explicitly set to %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created, NULL terminated array of #MidgardObject ( midgard_attachment class ) or %NULL on failure</doc>
          <type name="Object" c:type="MidgardObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_parameters"
              c:identifier="midgard_object_find_parameters">
        <doc xml:space="preserve">Find object's parameter(s) with matching given properties.
@parameters argument is optional. All object's parameters are
returned ( if exist ) if @parameters is explicitly set to %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created, NULL terminated array of #MidgardObject ( midgard_parameter class ) or %NULL on failure</doc>
          <type name="Object" c:type="MidgardObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_by_guid" c:identifier="midgard_object_get_by_guid">
        <doc xml:space="preserve">Fetch object's record(s) from database using 'guid' property constraint.

MidgardObject object instance must be created with midgard_object_new function.
When midgard connection handler is not associated with object instance,
application is terminated with 'assertion fails' error message being logged.

Object instance created with this function should be freed using g_object_unref.
 
Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Object's record can not be fetched from database ( MGD_ERR_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object is successfully fetched from database, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="guid" transfer-ownership="none">
            <doc xml:space="preserve">string value which should identify object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_by_id" c:identifier="midgard_object_get_by_id">
        <doc xml:space="preserve">Fetch object's record(s) from database using 'id' property.

This is common practice to use 'id' property with integer type when table's
id column stores unique, primary key value which identifies object and its record(s).
However primary property with integer type is freely defined by user.

MidgardObject object instance must be created with midgard_object_new function.
When midgard connection handler is not associated with object instance,
application is terminated with 'assertion fails' error message being logged.

Object instance created with this function should be freed using #g_object_unref.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
There's no 'id' primary property registered for object's class ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's record can not be fetched from database ( MGD_ERR_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object is successfully fetched from database, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">object's integer identifier</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_by_path" c:identifier="midgard_object_get_by_path">
        <doc xml:space="preserve">Fetch object's record by path

This function is slower than midgard_object_class_get_object_by_path,
as it has to create new object instance and copy all properties.

#MidgardErrorGeneric is set by midgard_schema_object_factory_get_object_by_path in this case.
Read about midgard_schema_object_factory_get_object_by_path() for more details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object is found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path at which object should be found</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="midgard_object_get_connection">
        <doc xml:space="preserve">Returned #MidgardConnection is owned by core, and should not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">pointer to #MidgardConnection associated with given object.</doc>
          <type name="Connection" c:type="const MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parameter" c:identifier="midgard_object_get_parameter">
        <return-value transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_schema_property"
              c:identifier="midgard_object_get_schema_property">
        <return-value transfer-ownership="full">
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_workspace"
              c:identifier="midgard_object_get_workspace"
              version="10.05.5"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">new #MidgardWorkspace object or %NULL</doc>
          <type name="Workspace" c:type="MidgardWorkspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attachments"
              c:identifier="midgard_object_has_attachments">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object has attachments, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_dependents"
              c:identifier="midgard_object_has_dependents">
        <doc xml:space="preserve">Checks whether object has dependent objects.

Check is done with such particular order:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Objects of the same type
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Children objects
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Parameters
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Attachments
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_parameters"
              c:identifier="midgard_object_has_parameters">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object has paramateres, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_approved" c:identifier="midgard_object_is_approved">
        <doc xml:space="preserve">Check whether object is approved.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object is approved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_locked" c:identifier="midgard_object_is_locked">
        <doc xml:space="preserve">Check whether object is locked

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Metadata class not defined for given object's class ( MGD_ERR_NO_METADATA )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_attachments"
              c:identifier="midgard_object_list_attachments">
        <doc xml:space="preserve">Returned objects are midgard_attachment class. Attachments objects are
fetched from database unconditionally.
That is, only those which parent guid property matches object's guid.

Returned array should be freed when no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated and NULL terminated array of midgard_attachment objects.</doc>
          <array length="0" zero-terminated="0" c:type="MidgardObject**">
            <type name="Object" c:type="MidgardObject*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #MidgardObject self instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_parameters"
              c:identifier="midgard_object_list_parameters">
        <doc xml:space="preserve">Returned objects are midgard_parameter class. Parameter objects are
fetched from database unconditionally if domain i sexplicitly set to NULL.
That is, only those which parent guid property matches object's guid.

Returned array should be freed when no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated and NULL terminated array of midgard_parameter objects.</doc>
          <type name="Object" c:type="MidgardObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #MidgardObject self instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">optional paramaters' domain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="midgard_object_lock">
        <doc xml:space="preserve">Lock object.

This method doesn't affect any core's functionality like midgard_object_approve.
You should create own locking workflow and logic with methods:
midgard_object_is_locked(), midgard_object_unlock() and this one.

Updates metadata properties:
locker, locked, revisor, revised and revision

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
No user logged in ( MGD_ERR_ACCESS_DENIED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Metadata class not defined for given object's class ( MGD_ERR_NO_METADATA )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object is already locked ( MGD_ERR_OBJECT_IS_LOCKED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="purge" c:identifier="midgard_object_purge">
        <doc xml:space="preserve">Purge object's record(s) from database.

If @check_dependents toggle is %TRUE, parameters and attachments storage will be queried,
if any of such exist and depend on deleted object.

Object's record(s) are purged from database without any possibility to recover.
After successfull call, only repligard table holds information about object's state.
Use midgard_object_delete(), if undelete facility is needed.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Object has no storage defined ( MGD_ERR_OBJECT_NO_STORAGE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's property guid value is empty ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There are still dependent objects in database ( MGD_ERR_HAS_DEPENDANTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
No record has been deleted from database ( MGD_ERR_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object has been succesfully purged from database, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="check_dependents" transfer-ownership="none">
            <doc xml:space="preserve">dependents' check toggle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_attachments"
              c:identifier="midgard_object_purge_attachments">
        <doc xml:space="preserve">Purge object's attachments(s) which match given properties' values.
Properties list in @parameters is optional. All object's attachments are
purged ( if exist ) if @parameters is explicitly set to %NULL.

@delete_blob should be set to %TRUE if midgard_attachment holds a reference
to blob located on filesystem ( it should be set to %TRUE by default ).
However, if midgard_attachment is created for blobs sharing and file should not
be deleted, @delete_blob should be set to %FALSE.

There's no way to determine if midgard_attachment is sharing blob, so aplication
itelf is responsible to create such own logic.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE if at least one of the attachment could not be purged</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="delete_blob" transfer-ownership="none">
            <doc xml:space="preserve">whether blob should be deleted as well</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_parameters"
              c:identifier="midgard_object_purge_parameters">
        <doc xml:space="preserve">Purge object's parameter(s) which match given properties' values.
Properties list in @parameters is optional. All object's parameters are
purged ( if exist ) if @parameters is explicitly set to %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE if at least one of the parameters could not be purged</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">properties list</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="midgard_object_save" version="10.05.5">
        <doc xml:space="preserve">This method combines update and create routines.
It tries to update object, and if this one fails because object's record doesn't exist,
it creates it. It's helper routine for application which needs to store object, though
it might be a bit slower than create or update method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_connection"
              c:identifier="midgard_object_set_connection">
        <doc xml:space="preserve">Set object's connection.

This method associate object with connection being already initialized.
It's not required to use it in every aplication, however it's mandatory
when object has been initialized by some underlying library. For example,
object pointer is available from g_object_new instead of midgard_object_new.

Already associated connection is silently ignored.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_guid" c:identifier="midgard_object_set_guid">
        <doc xml:space="preserve">Sets object's guid

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
given guid already exists in database ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
given guid is invalid ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
object has already set guid property ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
object is deleted or purged ( MGD_ERR_OBJECT_DELETED or MGD_ERR_OBJECT_PURGED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="guid" transfer-ownership="none">
            <doc xml:space="preserve">guid to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parameter" c:identifier="midgard_object_set_parameter">
        <doc xml:space="preserve">Creates object's parameter object if it doesn't exists, updates otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve">parameter's domain string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">parameter's name string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a GValue value which should be set for domain&amp;name pair</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_schema_property"
              c:identifier="midgard_object_set_schema_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unapprove" c:identifier="midgard_object_unapprove">
        <doc xml:space="preserve">Simply unapprove object. It doesn't affect any core functionality,
like midgard_object_approve().

This method updates metadata properties:
revisor, revised, revision, approver and approved

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
No user logged in ( MGD_ERR_ACCESS_DENIED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object is not approved
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="midgard_object_unlock">
        <doc xml:space="preserve">Unlock object.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
No user logged in ( MGD_ERR_ACCESS_DENIED )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object is not locked ( FIXME )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Metadata class not defined for given object's class ( MGD_ERR_NO_METADATA )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="midgard_object_update">
        <doc xml:space="preserve">Update object's record(s).

Internally such metadata properties are set (overwritten):
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
revisor
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
revision ( increased by one )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
revised
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;
 
Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Property registered with #MGD_TYPE_GUID doesn't hold valid guid ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object's class is registered with tree facilities and there is already such object in midgard tree ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Quota is activated and its limit is reached ( MGD_ERR_QUOTA )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Unspecified internal error ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if object's record(s) is successfully updated, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="action" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="guid" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata" writable="1" transfer-ownership="none">
        <type name="Metadata"/>
      </property>
      <field name="parent">
        <type name="DBObject" c:type="MidgardDBObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectPrivate" c:type="MidgardObjectPrivate*"/>
      </field>
      <glib:signal name="action-approve" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-approve-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-approved" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-create" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-create-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-created" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-delete" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-delete-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-deleted" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-export" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-export-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-exported" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-import" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-import-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-imported" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-load" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-loaded" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-loaded-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-lock" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-lock-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-locked" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-purge" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-purge-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-purged" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unapprove" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unapprove-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unapproved" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unlock" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unlock-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-unlocked" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-update" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-update-hook" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="action-updated" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="MidgardObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent">
        <type name="DBObjectClass" c:type="MidgardDBObjectClass"/>
      </field>
      <field name="priv">
        <type name="ObjectClassPrivate" c:type="MidgardObjectClassPrivate*"/>
      </field>
      <field name="get_connection">
        <callback name="get_connection">
          <return-value transfer-ownership="none">
            <type name="Connection" c:type="const MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_create">
        <callback name="action_create">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_create_hook">
        <callback name="action_create_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_created">
        <callback name="action_created">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_update">
        <callback name="action_update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_update_hook">
        <callback name="action_update_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_updated">
        <callback name="action_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_delete">
        <callback name="action_delete">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_delete_hook">
        <callback name="action_delete_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_deleted">
        <callback name="action_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_purge">
        <callback name="action_purge">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_purge_hook">
        <callback name="action_purge_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_purged">
        <callback name="action_purged">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_import">
        <callback name="action_import">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_import_hook">
        <callback name="action_import_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_imported">
        <callback name="action_imported">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_export">
        <callback name="action_export">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_export_hook">
        <callback name="action_export_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_exported">
        <callback name="action_exported">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_load">
        <callback name="action_load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_loaded">
        <callback name="action_loaded">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_loaded_hook">
        <callback name="action_loaded_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_approve">
        <callback name="action_approve">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_approve_hook">
        <callback name="action_approve_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_approved">
        <callback name="action_approved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unapprove">
        <callback name="action_unapprove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unapprove_hook">
        <callback name="action_unapprove_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unapproved">
        <callback name="action_unapproved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_lock">
        <callback name="action_lock">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_lock_hook">
        <callback name="action_lock_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_locked">
        <callback name="action_locked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unlock">
        <callback name="action_unlock">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unlock_hook">
        <callback name="action_unlock_hook">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_unlocked">
        <callback name="action_unlocked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_action_load">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_loaded">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_loaded_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_update">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_update_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_updated">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_create">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_create_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_created">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_delete">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_delete_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_deleted">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_purge">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_purge_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_purged">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_import">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_import_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_imported">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_export">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_export_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_exported">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_approve">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_approve_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_approved">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unapprove">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unapprove_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unapproved">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_lock">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_lock_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_locked">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unlock">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unlock_hook">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_action_unlocked">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="ObjectClassPrivate"
            c:type="MidgardObjectClassPrivate"
            disguised="1">
    </record>
    <record name="ObjectPrivate" c:type="MidgardObjectPrivate" disguised="1">
    </record>
    <class name="ObjectReference"
           c:symbol-prefix="object_reference"
           c:type="MidgardObjectReference"
           parent="GObject.Object"
           glib:type-name="MidgardObjectReference"
           glib:get-type="midgard_object_reference_get_type"
           glib:type-struct="ObjectReferenceClass">
      <implements name="Model"/>
      <implements name="ModelReference"/>
      <constructor name="new"
                   c:identifier="midgard_object_reference_new"
                   version="12.09">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardObjectReference</doc>
          <type name="ObjectReference" c:type="MidgardObjectReference*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">object's identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the name of the reference</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="Workspace" transfer-ownership="none">
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_workspace"
              c:identifier="midgard_object_reference_get_workspace"
              version="12.09"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardWorkspace instance or %NULL</doc>
          <type name="Workspace" c:type="MidgardWorkspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObjectReference instance</doc>
            <type name="ObjectReference" c:type="MidgardObjectReference*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="workspace"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Workspace"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectReferencePrivate"
              c:type="MidgardObjectReferencePrivate*"/>
      </field>
    </class>
    <record name="ObjectReferenceClass"
            c:type="MidgardObjectReferenceClass"
            glib:is-gtype-struct-for="ObjectReference">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ObjectReferencePrivate"
            c:type="MidgardObjectReferencePrivate"
            disguised="1">
    </record>
    <constant name="PACKAGE_NAME"
              value="midgard2"
              c:type="MIDGARD_PACKAGE_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="ParamLongtext"
           c:symbol-prefix="param_longtext"
           parent="GObject.ParamSpec"
           glib:type-name="MidgardParamLongtext"
           glib:get-type="midgard_param_longtext_get_type"
           glib:fundamental="1">
    </class>
    <record name="ParamSpecLongtext"
            c:type="MidgardParamSpecLongtext"
            disguised="1">
    </record>
    <interface name="Pool"
               c:symbol-prefix="pool"
               c:type="MidgardPool"
               glib:type-name="MidgardPool"
               glib:get-type="midgard_pool_get_type">
      <method name="get_max_n_resources"
              c:identifier="midgard_pool_get_max_n_resources"
              version="12.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">maximum number of resources which can be available in the pool</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardPool instance</doc>
            <type name="Pool" c:type="MidgardPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_resources"
              c:identifier="midgard_pool_get_n_resources"
              version="12.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of resources available in pool</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardPool instance</doc>
            <type name="Pool" c:type="MidgardPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push"
              c:identifier="midgard_pool_push"
              version="12.09"
              throws="1">
        <doc xml:space="preserve">Adds an @object to pool</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardPool self reference</doc>
          <type name="Pool" c:type="MidgardPool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardPool instance</doc>
            <type name="Pool" c:type="MidgardPool*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#GObject to add to pool</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_n_resources"
              c:identifier="midgard_pool_set_max_n_resources"
              version="12.09"
              throws="1">
        <doc xml:space="preserve">Sets maximum number of resources which can be available in pool</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardPool self reference</doc>
          <type name="Pool" c:type="MidgardPool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardPool instance</doc>
            <type name="Pool" c:type="MidgardPool*"/>
          </instance-parameter>
          <parameter name="n_resources" transfer-ownership="none">
            <doc xml:space="preserve">number of resources</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PoolIFace" c:type="MidgardPoolIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_max_n_resources">
        <callback name="get_max_n_resources">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Pool" c:type="MidgardPool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_max_n_resources" introspectable="0">
        <callback name="set_max_n_resources" introspectable="0" throws="1">
          <return-value>
            <type name="Pool" c:type="MidgardPool*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Pool" c:type="MidgardPool*"/>
            </parameter>
            <parameter name="n_resources" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_n_resources">
        <callback name="get_n_resources">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Pool" c:type="MidgardPool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push" introspectable="0">
        <callback name="push" introspectable="0" throws="1">
          <return-value>
            <type name="Pool" c:type="MidgardPool*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Pool" c:type="MidgardPool*"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QueryBuilder"
           c:symbol-prefix="query_builder"
           c:type="MidgardQueryBuilder"
           parent="GObject.Object"
           glib:type-name="MidgardQueryBuilder"
           glib:get-type="midgard_query_builder_get_type"
           glib:type-struct="QueryBuilderClass">
      <constructor name="new" c:identifier="midgard_query_builder_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryBuilder instance or %NULL if target class is not registered in GType system
or it's not #MidgardDBObjectClass class derived one.</doc>
          <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">any #MidgardDBObjectClass derived class' name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_builder"
                c:identifier="midgard_query_builder_create_builder"
                version="10.05.1">
        <doc xml:space="preserve">Static constructor. Invokes midgard_query_builder_new().
This function is added for language bindings, in which, that function
can not be invoked explicitly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryBuilder instance</doc>
          <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_constraint" invoker="add_constraint">
        <doc xml:space="preserve">Adds a constraint to the given query builder. The constraint is
expressed as a triple of a field name, a comparison operator, and
a comparison value.

&lt;para&gt;
@name referes to a property of the queried Midgard object class.
For example, #MidgardQueryBuilder has been initialized for person
class which has lastname property registered.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "smith");

midgard_query_builder_add_constraint(builder, "lastname", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;
&lt;para&gt;
It also can be name of the linked class property or reserved one.
A dot '.' is used to separate properties for special constraints.
If such special constraint property is used, #MidgardQueryBuilder
performs right join.
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
First property is the one registered for given class which is a link
to property of different class. Second is a property of target class.
For example, person object has property 'friend' which holds some identifier
(id or guid) to friend class property, and friend class has property 'nick'.
In such case we can use constraint and comparison using friend property,
even if #MidgardQueryBuilder has been initialized for person class.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "Lancelot");

midgard_query_builder_add_constraint(builder, "friend.nick", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There are three reserved words which have special meaning for query builder.
'metadata', 'parameter' and 'attachment'. If one of them is used, query builder
will make (if necessary) right join and query objects against dependent class table.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "avatar");

midgard_query_builder_add_constraint(builder, "attachment.name", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/para&gt;

&lt;para&gt;
The comparison operator is a string representation of the requested comparison.
Available operators are =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=, LIKE, NOT LIKE, IN, INTREE.
&lt;/para&gt;

&lt;para&gt;
The given @value is copied and converted into the property type before comparison.
&lt;/para&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if constraint is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">property name used for this constraint</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">comparison operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value used in comparison</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_constraint_with_property"
                      invoker="add_constraint_with_property">
        <doc xml:space="preserve">Adds named property constraint to the given query builder.
Unlike add_constraint method, this one accepts property name
instead of scalar value. The difference is that with add_constraint
method you can compare property with particular value, while using
add_constraint_with_property method you can compare two different
properties without any need to know their values.
For example, you should use this method if you want to select only
those objects which has been revised after publication time, and particular
date doesn't matter.

&lt;example&gt;
&lt;programlisting&gt;

midgard_query_builder_add_constraint_with_property(builder, "metadata.revised", "&gt;", "metadata.published");

&lt;/programlisting&gt;
&lt;/example&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if properties' names are valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="property_a" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">comparison operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_b" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_order" invoker="add_order">
        <doc xml:space="preserve">Adds an ordering constraint to the query. An ordering constraint consists
of a property name and a sort direction. The objects returned by this
query will be sorted by the given property in the given direction
(ascending or descending). Multiple ordering constraints are applied in
the order they were added.

Allowed sort directions: 'ASC' or 'DESC'

Property name pattern is described in midgard_query_builder_add_constraint()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the ordering constraint is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">sort direction</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="begin_group" invoker="begin_group">
        <doc xml:space="preserve">Starts a constraint group of the given type. A conjunctive constraint
group @type (AND) requires that all component constraints match the
queried objects, while a disjunctive group @type (OR) requires just
one of the component constraints to match.

Allowed group @type: 'AND' or 'OR'</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @type is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">group type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="count" invoker="count">
        <doc xml:space="preserve">Returns the number of objects that this query would return when executed
without limit or start offset settings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of object matched by this query</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end_group" invoker="end_group">
        <doc xml:space="preserve">Closes the most recently opened constraint group. The client should
ensure proper nesting by closing all constraint groups before the
containing query is executed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a constraint group was closed, or %FALSE if no
open constraint groups were found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute" invoker="execute">
        <doc xml:space="preserve">Executes the built query.

Objects in returned array are #MidgardDBObject derived ones,
and typecasted to base GObject. You can safely typecast them to
the type, which #MidgardQueryBuilder has been initialized for.

In case of any error, #MidgardConnection error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">NULL terminated array of objects, or NULL if none found</doc>
          <type name="GObject.Object" c:type="GObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="include_deleted" invoker="include_deleted">
        <doc xml:space="preserve">Query all objects - deleted and undeleted.

This is valid for a class for which metadata is defined ('deleted' property
of MidgardMetadata class), or class has 'metadata' property installed.
If none of them is found, this method does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_limit" invoker="set_limit">
        <doc xml:space="preserve">Sets the maximum number of objects to return when the query is executed.
A query will by default return all matching objects, but the @limit setting
can be used to restrict the potentially large number of returned objects.
The @limit is applied only after the matching objects have been identified
and sorted and after the optional start offset has been applied.

Setting a @limit on the number of returned objects is normally only
reasonable when one or more ordering constraints and optionally an offset
setting are applied to the query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">query limit</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_offset" invoker="set_offset">
        <doc xml:space="preserve">Sets the start @offset of the objects to return when the query is executed.
The start @offset is applied after all the matching objects have been
identified and sorted according to the given ordering constraints. The
first @offset objects are skipped and only the remaining (if any) objects
are returned to the client.

Setting a start offset is normally only reasonable when one or more
ordering constraints are applied to the query. A start offset is usually
accompanied by a limit setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">query offset</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_constraint"
              c:identifier="midgard_query_builder_add_constraint">
        <doc xml:space="preserve">Adds a constraint to the given query builder. The constraint is
expressed as a triple of a field name, a comparison operator, and
a comparison value.

&lt;para&gt;
@name referes to a property of the queried Midgard object class.
For example, #MidgardQueryBuilder has been initialized for person
class which has lastname property registered.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "smith");

midgard_query_builder_add_constraint(builder, "lastname", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;
&lt;para&gt;
It also can be name of the linked class property or reserved one.
A dot '.' is used to separate properties for special constraints.
If such special constraint property is used, #MidgardQueryBuilder
performs right join.
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
First property is the one registered for given class which is a link
to property of different class. Second is a property of target class.
For example, person object has property 'friend' which holds some identifier
(id or guid) to friend class property, and friend class has property 'nick'.
In such case we can use constraint and comparison using friend property,
even if #MidgardQueryBuilder has been initialized for person class.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "Lancelot");

midgard_query_builder_add_constraint(builder, "friend.nick", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There are three reserved words which have special meaning for query builder.
'metadata', 'parameter' and 'attachment'. If one of them is used, query builder
will make (if necessary) right join and query objects against dependent class table.
&lt;example&gt;
&lt;programlisting&gt;

GValue value = {0, };
g_value_init(&amp;value, G_TYPE_STRING);
g_value_set_string(&amp;value, "avatar");

midgard_query_builder_add_constraint(builder, "attachment.name", "=", &amp;value);

&lt;/programlisting&gt;
&lt;/example&gt;
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/para&gt;

&lt;para&gt;
The comparison operator is a string representation of the requested comparison.
Available operators are =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=, LIKE, NOT LIKE, IN, INTREE.
&lt;/para&gt;

&lt;para&gt;
The given @value is copied and converted into the property type before comparison.
&lt;/para&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if constraint is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">property name used for this constraint</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">comparison operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value used in comparison</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_constraint_with_property"
              c:identifier="midgard_query_builder_add_constraint_with_property">
        <doc xml:space="preserve">Adds named property constraint to the given query builder.
Unlike add_constraint method, this one accepts property name
instead of scalar value. The difference is that with add_constraint
method you can compare property with particular value, while using
add_constraint_with_property method you can compare two different
properties without any need to know their values.
For example, you should use this method if you want to select only
those objects which has been revised after publication time, and particular
date doesn't matter.

&lt;example&gt;
&lt;programlisting&gt;

midgard_query_builder_add_constraint_with_property(builder, "metadata.revised", "&gt;", "metadata.published");

&lt;/programlisting&gt;
&lt;/example&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if properties' names are valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="property_a" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">comparison operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="property_b" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_order" c:identifier="midgard_query_builder_add_order">
        <doc xml:space="preserve">Adds an ordering constraint to the query. An ordering constraint consists
of a property name and a sort direction. The objects returned by this
query will be sorted by the given property in the given direction
(ascending or descending). Multiple ordering constraints are applied in
the order they were added.

Allowed sort directions: 'ASC' or 'DESC'

Property name pattern is described in midgard_query_builder_add_constraint()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the ordering constraint is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">sort direction</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_group"
              c:identifier="midgard_query_builder_begin_group">
        <doc xml:space="preserve">Starts a constraint group of the given type. A conjunctive constraint
group @type (AND) requires that all component constraints match the
queried objects, while a disjunctive group @type (OR) requires just
one of the component constraints to match.

Allowed group @type: 'AND' or 'OR'</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @type is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">group type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="midgard_query_builder_count">
        <doc xml:space="preserve">Returns the number of objects that this query would return when executed
without limit or start offset settings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of object matched by this query</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_group" c:identifier="midgard_query_builder_end_group">
        <doc xml:space="preserve">Closes the most recently opened constraint group. The client should
ensure proper nesting by closing all constraint groups before the
containing query is executed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a constraint group was closed, or %FALSE if no
open constraint groups were found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute" c:identifier="midgard_query_builder_execute">
        <doc xml:space="preserve">Executes the built query.

Objects in returned array are #MidgardDBObject derived ones,
and typecasted to base GObject. You can safely typecast them to
the type, which #MidgardQueryBuilder has been initialized for.

In case of any error, #MidgardConnection error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">NULL terminated array of objects, or NULL if none found</doc>
          <type name="GObject.Object" c:type="GObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_type_name"
              c:identifier="midgard_query_builder_get_type_name">
        <doc xml:space="preserve">Returns type name of the type which is currently used by Query Builder.

This function should be used on language binding level , when internal
Query Builder's instance is already created and language binding object
should be instanciated.

Returned type name is a pointer and is owned by GLib system.
Caller shouldn't free it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">name of the class, which query builder is initialized for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="include_deleted"
              c:identifier="midgard_query_builder_include_deleted">
        <doc xml:space="preserve">Query all objects - deleted and undeleted.

This is valid for a class for which metadata is defined ('deleted' property
of MidgardMetadata class), or class has 'metadata' property installed.
If none of them is found, this method does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_limit" c:identifier="midgard_query_builder_set_limit">
        <doc xml:space="preserve">Sets the maximum number of objects to return when the query is executed.
A query will by default return all matching objects, but the @limit setting
can be used to restrict the potentially large number of returned objects.
The @limit is applied only after the matching objects have been identified
and sorted and after the optional start offset has been applied.

Setting a @limit on the number of returned objects is normally only
reasonable when one or more ordering constraints and optionally an offset
setting are applied to the query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">query limit</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="midgard_query_builder_set_offset">
        <doc xml:space="preserve">Sets the start @offset of the objects to return when the query is executed.
The start @offset is applied after all the matching objects have been
identified and sorted according to the given ordering constraints. The
first @offset objects are skipped and only the remaining (if any) objects
are returned to the client.

Setting a start offset is normally only reasonable when one or more
ordering constraints are applied to the query. A start offset is usually
accompanied by a limit setting.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
            <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">query offset</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="QueryBuilderPrivate" c:type="MidgardQueryBuilderPrivate*"/>
      </field>
      <glib:signal name="execution-end"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="execution-start"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="QueryBuilderClass"
            c:type="MidgardQueryBuilderClass"
            glib:is-gtype-struct-for="QueryBuilder">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_constraint">
        <callback name="add_constraint">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if constraint is valid, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve">property name used for this constraint</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="op" transfer-ownership="none">
              <doc xml:space="preserve">comparison operator</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:space="preserve">value used in comparison</doc>
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_constraint_with_property">
        <callback name="add_constraint_with_property">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if properties' names are valid, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="property_a" transfer-ownership="none">
              <doc xml:space="preserve">property name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="op" transfer-ownership="none">
              <doc xml:space="preserve">comparison operator</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="property_b" transfer-ownership="none">
              <doc xml:space="preserve">property name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_group">
        <callback name="begin_group">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the @type is valid, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve">group type</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_group">
        <callback name="end_group">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if a constraint group was closed, or %FALSE if no
open constraint groups were found</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_order">
        <callback name="add_order">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the ordering constraint is valid, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve">property name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="dir" transfer-ownership="none">
              <doc xml:space="preserve">sort direction</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_offset">
        <callback name="set_offset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <doc xml:space="preserve">query offset</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_limit">
        <callback name="set_limit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="limit" transfer-ownership="none">
              <doc xml:space="preserve">query limit</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="include_deleted">
        <callback name="include_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute">
        <callback name="execute">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">NULL terminated array of objects, or NULL if none found</doc>
            <type name="GObject.Object" c:type="GObject**"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <doc xml:space="preserve">a pointer to store number of returned objects</doc>
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="count">
        <callback name="count">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">number of object matched by this query</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryBuilder instance</doc>
              <type name="QueryBuilder" c:type="MidgardQueryBuilder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execution_start">
        <callback name="execution_start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execution_end">
        <callback name="execution_end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_id_execution_start">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="signal_id_execution_end">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="QueryBuilderPrivate"
            c:type="MidgardQueryBuilderPrivate"
            disguised="1">
    </record>
    <interface name="QueryColumn"
               c:symbol-prefix="query_column"
               c:type="MidgardQueryColumn"
               glib:type-name="MidgardQueryColumn"
               glib:get-type="midgard_query_column_get_type">
      <method name="get_name"
              c:identifier="midgard_query_column_get_name"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the column</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryColumn instance</doc>
            <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_qualifier"
              c:identifier="midgard_query_column_get_qualifier"
              version="10.05.6"
              throws="1">
        <doc xml:space="preserve">Qualifier is a trait, which is a common among particular columns.
Usually it is a prefix for column's name (e.g. 'a.id', 'a.title').</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">qualifier name or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryColumn instance</doc>
            <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query_property"
              c:identifier="midgard_query_column_get_query_property"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryProperty associated with the column or %NULL</doc>
          <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryColumn instance</doc>
            <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="QueryColumnIFace" c:type="MidgardQueryColumnIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_query_property" introspectable="0">
        <callback name="get_query_property" introspectable="0" throws="1">
          <return-value>
            <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name" throws="1">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_qualifier">
        <callback name="get_qualifier" throws="1">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryColumn" c:type="MidgardQueryColumn*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QueryConstraint"
           c:symbol-prefix="query_constraint"
           c:type="MidgardQueryConstraint"
           parent="GObject.Object"
           glib:type-name="MidgardQueryConstraint"
           glib:get-type="midgard_query_constraint_get_type"
           glib:type-struct="QueryConstraintClass">
      <implements name="QueryConstraintSimple"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_query_constraint_new"
                   version="10.05">
        <doc xml:space="preserve">Valid @op operators are: '=', '&lt;', '&gt;', '!=', '&lt;&gt;', '&lt;=', '&gt;=', 'LIKE', 'NOT LIKE', 'IN', 'NOT IN'</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryConstraint instance, or %NULL on failure</doc>
          <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryProperty instance</doc>
            <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">constraint operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="holder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
          <parameter name="storage"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #MidgardQueryStorage to use with constraint</doc>
            <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="list_constraints" introspectable="0">
        <return-value>
          <type name="QueryConstraintSimple"
                c:type="MidgardQueryConstraintSimple**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_operator"
              c:identifier="midgard_query_constraint_get_operator"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">operator type associated with @self constraint, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraint instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_property"
              c:identifier="midgard_query_constraint_get_property"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardQueryProperty associated with @self constraint, or %NULL</doc>
          <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraint instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage"
              c:identifier="midgard_query_constraint_get_storage"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardQueryStorage associated with constraint or %NULL</doc>
          <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryStorage instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="midgard_query_constraint_get_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator"
              c:identifier="midgard_query_constraint_set_operator"
              version="10.05">
        <doc xml:space="preserve">Check midgard_query_constraint_new() for valid operator types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraint instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">operator to associate with constraint</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property"
              c:identifier="midgard_query_constraint_set_property"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraint instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryProperty to associate with @self constraint</doc>
            <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_storage"
              c:identifier="midgard_query_constraint_set_storage"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraint instance</doc>
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="storage"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">#MidgardQueryStorage to associate with @self constraint</doc>
            <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="midgard_query_constraint_set_value">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <property name="holder" writable="1" transfer-ownership="none">
        <type name="QueryHolder"/>
      </property>
      <property name="operator" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="property" writable="1" transfer-ownership="none">
        <type name="QueryProperty"/>
      </property>
      <property name="storage" writable="1" transfer-ownership="none">
        <type name="QueryStorage"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryConstraintPrivate"
              c:type="MidgardQueryConstraintPrivate*"/>
      </field>
    </class>
    <record name="QueryConstraintClass"
            c:type="MidgardQueryConstraintClass"
            glib:is-gtype-struct-for="QueryConstraint">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_constraints" introspectable="0">
        <callback name="list_constraints" introspectable="0">
          <return-value>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryConstraint" c:type="MidgardQueryConstraint*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QueryConstraintGroup"
           c:symbol-prefix="query_constraint_group"
           c:type="MidgardQueryConstraintGroup"
           parent="GObject.Object"
           glib:type-name="MidgardQueryConstraintGroup"
           glib:get-type="midgard_query_constraint_group_get_type"
           glib:type-struct="QueryConstraintGroupClass">
      <implements name="QueryConstraintSimple"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_query_constraint_group_new"
                   version="10.05.1">
        <doc xml:space="preserve">Create new #MidgardQueryConstraintGroup instance with default "AND" group type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryConstraintGroup instance or %NULL</doc>
          <type name="QueryConstraintGroup"
                c:type="MidgardQueryConstraintGroup*"/>
        </return-value>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="midgard_query_constraint_group_new_valist"
                   version="10.05.1"
                   introspectable="0">
        <doc xml:space="preserve">This is C convinient function. It's not designed for language bindings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryConstraintGroup instance or %NULL</doc>
          <type name="QueryConstraintGroup"
                c:type="MidgardQueryConstraintGroup*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">constraints group type ('OR' or 'AND')</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="constraint" transfer-ownership="none">
            <doc xml:space="preserve">list of constraints to add to group or NULL</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_constraints"
                   c:identifier="midgard_query_constraint_group_new_with_constraints"
                   version="10.05.1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryConstraintGroup instance or %NULL</doc>
          <type name="QueryConstraintGroup"
                c:type="MidgardQueryConstraintGroup*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">constraints group type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="constraints" transfer-ownership="none">
            <doc xml:space="preserve">an array of #MidgardQueryConstraintSimple constraints</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple**"/>
          </parameter>
          <parameter name="n_constraints" transfer-ownership="none">
            <doc xml:space="preserve">the length of given constraints array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_constraint"
              c:identifier="midgard_query_constraint_group_add_constraint"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintGroup instance</doc>
            <type name="QueryConstraintGroup"
                  c:type="MidgardQueryConstraintGroup*"/>
          </instance-parameter>
          <parameter name="constraint" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintSimple constraint to add to constraint group</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_constraints"
              c:identifier="midgard_query_constraint_group_add_constraints"
              version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintGroup instance</doc>
            <type name="QueryConstraintGroup"
                  c:type="MidgardQueryConstraintGroup*"/>
          </instance-parameter>
          <parameter name="constraints" transfer-ownership="none">
            <doc xml:space="preserve">array of #MidgardQueryConstraintSimple objects</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="MidgardQueryConstraintSimple**">
              <type name="QueryConstraintSimple"/>
            </array>
          </parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <doc xml:space="preserve">number of elements in given array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group_type"
              c:identifier="midgard_query_constraint_group_get_group_type"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">group type ('OR' or 'AND')</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintGroup instance</doc>
            <type name="QueryConstraintGroup"
                  c:type="MidgardQueryConstraintGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_group_type"
              c:identifier="midgard_query_constraint_group_set_group_type"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if type is set, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintGroup instance</doc>
            <type name="QueryConstraintGroup"
                  c:type="MidgardQueryConstraintGroup*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">group type to set ('OR' or 'AND')</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="grouptype" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryConstraintGroupPrivate"
              c:type="MidgardQueryConstraintGroupPrivate*"/>
      </field>
    </class>
    <record name="QueryConstraintGroupClass"
            c:type="MidgardQueryConstraintGroupClass"
            glib:is-gtype-struct-for="QueryConstraintGroup">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="QueryConstraintGroupPrivate"
            c:type="MidgardQueryConstraintGroupPrivate"
            disguised="1">
    </record>
    <record name="QueryConstraintPrivate"
            c:type="MidgardQueryConstraintPrivate"
            disguised="1">
    </record>
    <interface name="QueryConstraintSimple"
               c:symbol-prefix="query_constraint_simple"
               c:type="MidgardQueryConstraintSimple"
               glib:type-name="MidgardQueryConstraintSimple"
               glib:get-type="midgard_query_constraint_simple_get_type">
      <method name="list_constraints"
              c:identifier="midgard_query_constraint_simple_list_constraints"
              version="10.05">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of #MidgardQueryConstraintSimple instances</doc>
          <type name="QueryConstraintSimple"
                c:type="MidgardQueryConstraintSimple**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintSimple instance</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <doc xml:space="preserve">pointer to store numer of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="QueryConstraintSimpleIFace"
            c:type="MidgardQueryConstraintSimpleIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="list_constraints" introspectable="0">
        <callback name="list_constraints" introspectable="0">
          <return-value>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryConstraintSimple"
                    c:type="MidgardQueryConstraintSimple*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="priv" writable="1">
        <type name="QueryConstraintSimplePrivate"
              c:type="MidgardQueryConstraintSimplePrivate*"/>
      </field>
    </record>
    <record name="QueryConstraintSimplePrivate"
            c:type="MidgardQueryConstraintSimplePrivate"
            disguised="1">
    </record>
    <class name="QueryExecutor"
           c:symbol-prefix="query_executor"
           c:type="MidgardQueryExecutor"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardQueryExecutor"
           glib:get-type="midgard_query_executor_get_type"
           glib:type-struct="QueryExecutorClass">
      <implements name="Executable"/>
      <constructor name="new" c:identifier="midgard_query_executor_new">
        <return-value transfer-ownership="full">
          <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="storage" transfer-ownership="none">
            <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="add_join" invoker="add_join">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="join_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="left_holder" transfer-ownership="none">
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
          <parameter name="right_holder" transfer-ownership="none">
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_order" invoker="add_order" version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="holder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">execution order</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_results_count"
                      invoker="get_results_count"
                      version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of objects or records returned from execution</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_constraint"
                      invoker="set_constraint"
                      version="10.05">
        <doc xml:space="preserve">Set constraint object which will be used for query execution</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="constraint" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintSimple instance</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_limit" invoker="set_limit" version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">execution limit</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_offset" invoker="set_offset" version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">execution offset</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_join" c:identifier="midgard_query_executor_add_join">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="join_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="left_holder" transfer-ownership="none">
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
          <parameter name="right_holder" transfer-ownership="none">
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_order"
              c:identifier="midgard_query_executor_add_order"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="holder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">execution order</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_results_count"
              c:identifier="midgard_query_executor_get_results_count"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of objects or records returned from execution</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_constraint"
              c:identifier="midgard_query_executor_set_constraint"
              version="10.05">
        <doc xml:space="preserve">Set constraint object which will be used for query execution</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="constraint" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryConstraintSimple instance</doc>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit"
              c:identifier="midgard_query_executor_set_limit"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve">execution limit</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="midgard_query_executor_set_offset"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
            <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">execution offset</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="constraint" transfer-ownership="none">
        <doc xml:space="preserve">Constraint object which has been set to given executor instance</doc>
        <type name="QueryConstraintSimple"/>
      </property>
      <property name="resultscount" transfer-ownership="none">
        <doc xml:space="preserve">Number of records matched in query.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryExecutorPrivate"
              c:type="MidgardQueryExecutorPrivate*"/>
      </field>
    </class>
    <record name="QueryExecutorClass"
            c:type="MidgardQueryExecutorClass"
            glib:is-gtype-struct-for="QueryExecutor">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_constraint">
        <callback name="set_constraint">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
            <parameter name="constraint" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryConstraintSimple instance</doc>
              <type name="QueryConstraintSimple"
                    c:type="MidgardQueryConstraintSimple*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_limit">
        <callback name="set_limit">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
            <parameter name="limit" transfer-ownership="none">
              <doc xml:space="preserve">execution limit</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_offset">
        <callback name="set_offset">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <doc xml:space="preserve">execution offset</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_order">
        <callback name="add_order">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
            <parameter name="holder" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
              <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve">execution order</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_join">
        <callback name="add_join">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
            <parameter name="join_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="left_holder" transfer-ownership="none">
              <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
            </parameter>
            <parameter name="right_holder" transfer-ownership="none">
              <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_results_count">
        <callback name="get_results_count">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">number of objects or records returned from execution</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQueryExecutor instance</doc>
              <type name="QueryExecutor" c:type="MidgardQueryExecutor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="QueryExecutorPrivate"
            c:type="MidgardQueryExecutorPrivate"
            disguised="1">
    </record>
    <interface name="QueryHolder"
               c:symbol-prefix="query_holder"
               c:type="MidgardQueryHolder"
               glib:type-name="MidgardQueryHolder"
               glib:get-type="midgard_query_holder_get_type">
      <method name="get_value"
              c:identifier="midgard_query_holder_get_value"
              version="10.05">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">pointer to store returned value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="midgard_query_holder_set_value"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="QueryHolderIFace" c:type="MidgardQueryHolderIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_value">
        <callback name="set_value">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QueryProperty"
           c:symbol-prefix="query_property"
           c:type="MidgardQueryProperty"
           parent="GObject.Object"
           glib:type-name="MidgardQueryProperty"
           glib:get-type="midgard_query_property_get_type"
           glib:type-struct="QueryPropertyClass">
      <implements name="QueryHolder"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_query_property_new"
                   version="10.05">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryProperty instance or NULL on failure</doc>
          <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="storage"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional storage for given property</doc>
            <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="property" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="storage" writable="1" transfer-ownership="none">
        <type name="QueryStorage"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryPropertyPrivate"
              c:type="MidgardQueryPropertyPrivate*"/>
      </field>
    </class>
    <record name="QueryPropertyClass"
            c:type="MidgardQueryPropertyClass"
            glib:is-gtype-struct-for="QueryProperty">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="QueryPropertyPrivate"
            c:type="MidgardQueryPropertyPrivate"
            disguised="1">
    </record>
    <interface name="QueryResult"
               c:symbol-prefix="query_result"
               c:type="MidgardQueryResult"
               glib:type-name="MidgardQueryResult"
               glib:get-type="midgard_query_result_get_type">
      <method name="get_column_names"
              c:identifier="midgard_query_result_get_column_names"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of column names available in this result or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryResult instance</doc>
            <type name="QueryResult" c:type="MidgardQueryResult*"/>
          </instance-parameter>
          <parameter name="n_names"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned names</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_columns"
              c:identifier="midgard_query_result_get_columns"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of #MidgardQueryColumn columns available in this result or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="MidgardQueryColumn**">
            <type name="QueryColumn"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryResult instance</doc>
            <type name="QueryResult" c:type="MidgardQueryResult*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="midgard_query_result_get_objects"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of objects available in this result or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="GObject**">
            <type name="GObject.Object"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryResult instance</doc>
            <type name="QueryResult" c:type="MidgardQueryResult*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rows"
              c:identifier="midgard_query_result_get_rows"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of #MidgardQueryRow rows available in this result or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="MidgardQueryRow**">
            <type name="QueryRow"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryResult instance</doc>
            <type name="QueryResult" c:type="MidgardQueryResult*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="QueryResultIFace" c:type="MidgardQueryResultIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_objects" introspectable="0">
        <callback name="get_objects" introspectable="0" throws="1">
          <return-value>
            <type name="GObject.Object" c:type="GObject**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryResult" c:type="MidgardQueryResult*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_columns" introspectable="0">
        <callback name="get_columns" introspectable="0" throws="1">
          <return-value>
            <type name="QueryColumn" c:type="MidgardQueryColumn**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryResult" c:type="MidgardQueryResult*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rows" introspectable="0">
        <callback name="get_rows" introspectable="0" throws="1">
          <return-value>
            <type name="QueryRow" c:type="MidgardQueryRow**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryResult" c:type="MidgardQueryResult*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_column_names" introspectable="0">
        <callback name="get_column_names" introspectable="0" throws="1">
          <return-value>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryResult" c:type="MidgardQueryResult*"/>
            </parameter>
            <parameter name="n_names" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="QueryRow"
               c:symbol-prefix="query_row"
               c:type="MidgardQueryRow"
               glib:type-name="MidgardQueryRow"
               glib:get-type="midgard_query_row_get_type">
      <method name="get_object"
              c:identifier="midgard_query_row_get_object"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an object for specified column.
@column_name can be ommited if column name is uniqe in the #MidgardQueryResult</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryRow instance</doc>
            <type name="QueryRow" c:type="MidgardQueryRow*"/>
          </instance-parameter>
          <parameter name="column_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Column name which holds value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="midgard_query_row_get_value"
              version="10.05.6"
              throws="1">
        <doc xml:space="preserve">@column_name can be ommited if column name is uniqe in the #MidgardQueryResult</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value for specified column.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryRow instance</doc>
            <type name="QueryRow" c:type="MidgardQueryRow*"/>
          </instance-parameter>
          <parameter name="column_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Column name which holds value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="midgard_query_row_get_values"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of values stored in a row or %NULL.</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryRow instance</doc>
            <type name="QueryRow" c:type="MidgardQueryRow*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="QueryRowIFace" c:type="MidgardQueryRowIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_value">
        <callback name="get_value" throws="1">
          <return-value transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryRow" c:type="MidgardQueryRow*"/>
            </parameter>
            <parameter name="column_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_values">
        <callback name="get_values" throws="1">
          <return-value transfer-ownership="full">
            <type name="GObject.ValueArray" c:type="GValueArray*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryRow" c:type="MidgardQueryRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_object" introspectable="0">
        <callback name="get_object" introspectable="0" throws="1">
          <return-value>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryRow" c:type="MidgardQueryRow*"/>
            </parameter>
            <parameter name="column_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QuerySelect"
           c:symbol-prefix="query_select"
           c:type="MidgardQuerySelect"
           parent="QueryExecutor"
           glib:type-name="MidgardQuerySelect"
           glib:get-type="midgard_query_select_get_type"
           glib:type-struct="QuerySelectClass">
      <implements name="Executable"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_query_select_new"
                   version="10.05">
        <doc xml:space="preserve">#MidgardStorage @storage represents storage which is queried during execution

By default, for performance reason, MidgardQuerySelect is instantiated in read only mode.
See: midgard_query_select_toggle_read_only().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQuerySelect instance or %NULL on failure</doc>
          <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardStorage instance</doc>
            <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="include_deleted"
                      invoker="include_deleted"
                      version="10.05.1">
        <doc xml:space="preserve">By default, #MidgardQuerySelect ignores deleted objects.
With this method, you can set deleted objects toggle, so such can be
included in execute results. This method may be called as many times
as needed, to include (@TRUE) or exclude (@FALSE) deleted objects.

This is valid only for those classes which has 'metadata' (of #MidgardMetadata type)
or 'deleted' property installed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">toggle to include or exclude deleted objects</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_objects" introspectable="0">
        <return-value>
          <type name="DBObject" c:type="MidgardDBObject**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="toggle_read_only"
                      invoker="toggle_read_only"
                      version="10.05">
        <doc xml:space="preserve">This method switch #MidgardQuerySelect to read only mode.
It should be enabled when returned objects will be used only to read properties.
It improves performance, but it's impossible to write returned object's properties.

By default, for performance reason, MidgardQuerySelect is instantiated in read only mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">enables or disables read only mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="include_deleted"
              c:identifier="midgard_query_select_include_deleted"
              version="10.05.1">
        <doc xml:space="preserve">By default, #MidgardQuerySelect ignores deleted objects.
With this method, you can set deleted objects toggle, so such can be
included in execute results. This method may be called as many times
as needed, to include (@TRUE) or exclude (@FALSE) deleted objects.

This is valid only for those classes which has 'metadata' (of #MidgardMetadata type)
or 'deleted' property installed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">toggle to include or exclude deleted objects</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_objects"
              c:identifier="midgard_query_select_list_objects"
              version="10.05">
        <doc xml:space="preserve">List all objects for which data has been returned during execution.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated array of #MidgardDBObject</doc>
          <array length="0" zero-terminated="0" c:type="MidgardDBObject**">
            <type name="DBObject"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle_read_only"
              c:identifier="midgard_query_select_toggle_read_only"
              version="10.05">
        <doc xml:space="preserve">This method switch #MidgardQuerySelect to read only mode.
It should be enabled when returned objects will be used only to read properties.
It improves performance, but it's impossible to write returned object's properties.

By default, for performance reason, MidgardQuerySelect is instantiated in read only mode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
            <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
          </instance-parameter>
          <parameter name="toggle" transfer-ownership="none">
            <doc xml:space="preserve">enables or disables read only mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer for a connection, #MidgardQuerySelect has been initialized for</doc>
        <type name="Connection"/>
      </property>
      <property name="storage"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer for a connection, #MidgardQuerySelect has been initialized for</doc>
        <type name="QueryStorage"/>
      </property>
      <field name="parent">
        <type name="QueryExecutor" c:type="MidgardQueryExecutor"/>
      </field>
    </class>
    <record name="QuerySelectClass"
            c:type="MidgardQuerySelectClass"
            glib:is-gtype-struct-for="QuerySelect">
      <field name="parent">
        <type name="QueryExecutorClass" c:type="MidgardQueryExecutorClass"/>
      </field>
      <field name="list_objects" introspectable="0">
        <callback name="list_objects" introspectable="0">
          <return-value>
            <type name="DBObject" c:type="MidgardDBObject**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toggle_read_only">
        <callback name="toggle_read_only">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
              <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
            </parameter>
            <parameter name="toggle" transfer-ownership="none">
              <doc xml:space="preserve">enables or disables read only mode</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="include_deleted">
        <callback name="include_deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardQuerySelect instance</doc>
              <type name="QuerySelect" c:type="MidgardQuerySelect*"/>
            </parameter>
            <parameter name="toggle" transfer-ownership="none">
              <doc xml:space="preserve">toggle to include or exclude deleted objects</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="QuerySelector"
               c:symbol-prefix="query_selector"
               c:type="MidgardQuerySelector"
               glib:type-name="MidgardQuerySelector"
               glib:get-type="midgard_query_selector_get_type">
      <method name="get_connection"
              c:identifier="midgard_query_selector_get_connection"
              version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardConnection or %NULL</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelector instance</doc>
            <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query_result"
              c:identifier="midgard_query_selector_get_query_result"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryResult or %NULL on failure</doc>
          <type name="QueryResult" c:type="MidgardQueryResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelector instance</doc>
            <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query_string"
              c:identifier="midgard_query_selector_get_query_string"
              version="10.05.6">
        <doc xml:space="preserve">To get query string, execute() must be invoked first.
This method doesn't do any validation of a query.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">query string or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelector instance</doc>
            <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="QuerySelectorIFace" c:type="MidgardQuerySelectorIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_query_result" introspectable="0">
        <callback name="get_query_result" introspectable="0" throws="1">
          <return-value>
            <type name="QueryResult" c:type="MidgardQueryResult*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connection" introspectable="0">
        <callback name="get_connection" introspectable="0">
          <return-value>
            <type name="Connection" c:type="MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_query_string">
        <callback name="get_query_string">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="QueryStorage"
           c:symbol-prefix="query_storage"
           c:type="MidgardQueryStorage"
           parent="GObject.Object"
           glib:type-name="MidgardQueryStorage"
           glib:get-type="midgard_query_storage_get_type"
           glib:type-struct="QueryStorageClass">
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_query_storage_new"
                   version="10.05">
        <doc xml:space="preserve">Initializes new object which represents #MidgardDBObject derived one's storage</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryStorage or %NULL on failure</doc>
          <type name="QueryStorage" c:type="MidgardQueryStorage*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">name of the #MidgardDBObject derived class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="dbclass"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Holds the name of the class which, #MidgardQueryStorage has been initialized for.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryStoragePrivate" c:type="MidgardQueryStoragePrivate*"/>
      </field>
    </class>
    <record name="QueryStorageClass"
            c:type="MidgardQueryStorageClass"
            glib:is-gtype-struct-for="QueryStorage">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="QueryStoragePrivate"
            c:type="MidgardQueryStoragePrivate"
            disguised="1">
    </record>
    <class name="QueryValue"
           c:symbol-prefix="query_value"
           c:type="MidgardQueryValue"
           parent="GObject.Object"
           glib:type-name="MidgardQueryValue"
           glib:get-type="midgard_query_value_get_type"
           glib:type-struct="QueryValueClass">
      <implements name="QueryHolder"/>
      <constructor name="new"
                   c:identifier="midgard_query_value_new"
                   version="10.05">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryValue or %NULL on failure</doc>
          <type name="QueryValue" c:type="MidgardQueryValue*"/>
        </return-value>
      </constructor>
      <function name="create_with_value"
                c:identifier="midgard_query_value_create_with_value"
                version="10.05.1">
        <doc xml:space="preserve">Static shortcut for midgard_query_value_new() and set_value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardQueryValue or %NULL on failure</doc>
          <type name="QueryValue" c:type="MidgardQueryValue*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a #GValue to be set</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryValue" c:type="MidgardQueryValue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_value" introspectable="0">
        <return-value>
          <type name="QueryValue" c:type="MidgardQueryValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QueryValue" c:type="MidgardQueryValue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="QueryValuePrivate" c:type="MidgardQueryValuePrivate*"/>
      </field>
    </class>
    <record name="QueryValueClass"
            c:type="MidgardQueryValueClass"
            glib:is-gtype-struct-for="QueryValue">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryValue" c:type="MidgardQueryValue*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_value" introspectable="0">
        <callback name="set_value" introspectable="0">
          <return-value>
            <type name="QueryValue" c:type="MidgardQueryValue*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="QueryValue" c:type="MidgardQueryValue*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="QueryValuePrivate"
            c:type="MidgardQueryValuePrivate"
            disguised="1">
    </record>
    <class name="ReflectionProperty"
           c:symbol-prefix="reflection_property"
           c:type="MidgardReflectionProperty"
           parent="GObject.Object"
           glib:type-name="MidgardReflectionProperty"
           glib:get-type="midgard_reflection_property_get_type"
           glib:type-struct="ReflectionPropertyClass">
      <constructor name="new"
                   c:identifier="midgard_reflection_property_new"
                   deprecated="1"
                   deprecated-version="10.05">
        <doc-deprecated xml:space="preserve">Use midgard_reflector_property_new() instead.</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly initialized #MidgardReflectionProperty instance or %NULL on failure.</doc>
          <type name="ReflectionProperty" c:type="MidgardReflectionProperty*"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardDBObjectClass pointer</doc>
            <type name="DBObjectClass" c:type="MidgardDBObjectClass*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="description"
              c:identifier="midgard_reflection_property_description"
              deprecated="1"
              deprecated-version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">description of the given property or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_class"
              c:identifier="midgard_reflection_property_get_link_class"
              deprecated="1"
              deprecated-version="10.05">
        <doc xml:space="preserve">Returns the pointer to the #MidgardDBObjectClass, a given property is a link to.
@see midgard_reflection_property_get_link_name()</doc>
        <return-value transfer-ownership="none">
          <type name="DBObjectClass" c:type="const MidgardDBObjectClass*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_name"
              c:identifier="midgard_reflection_property_get_link_name"
              deprecated="1"
              deprecated-version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the class, the given property is a link to.
Or %NULL if property is not a link or given property is not registered for given class.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_target"
              c:identifier="midgard_reflection_property_get_link_target"
              deprecated="1"
              deprecated-version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the property, the given one is a link to.
Or %NULL if property is not a link or it's not registered for given class.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_midgard_type"
              c:identifier="midgard_reflection_property_get_midgard_type"
              deprecated="1"
              deprecated-version="10.05">
        <doc-deprecated xml:space="preserve">Use midgard_reflector_property_get_midgard_type() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">type (#GType) of the property or %NULL if property is not registered for given class.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name which is registered for #MidgardDBObjectClass</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_value"
              c:identifier="midgard_reflection_property_get_user_value"
              version="9.09"
              deprecated="1"
              deprecated-version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value for user defined field, or NULL if none found</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property to look value for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of user defined field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_link"
              c:identifier="midgard_reflection_property_is_link"
              deprecated="1"
              deprecated-version="10.05">
        <doc xml:space="preserve">Checks whether property is a link.</doc>
        <doc-deprecated xml:space="preserve">Use midgard_reflector_property_is_link() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if property is registered as link, %FALSE otherwise (or in case if property is not registered for given class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_linked"
              c:identifier="midgard_reflection_property_is_linked"
              deprecated="1"
              deprecated-version="10.05">
        <doc xml:space="preserve">Checks if property is linked with another type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if property is linked with another type (property of another class is defined as a link to given one).
%FALSE is returned if property is not linked or is not registered for given class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_private"
              c:identifier="midgard_reflection_property_is_private"
              deprecated="1"
              deprecated-version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if propery is defined private, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectionProperty instance</doc>
            <type name="ReflectionProperty"
                  c:type="MidgardReflectionProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ReflectionPropertyClass"
            c:type="MidgardReflectionPropertyClass"
            glib:is-gtype-struct-for="ReflectionProperty">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ReflectorObject"
           c:symbol-prefix="reflector_object"
           c:type="MidgardReflectorObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardReflectorObject"
           glib:get-type="midgard_reflector_object_get_type"
           glib:type-struct="ReflectorObjectClass">
      <function name="get_metadata_class"
                c:identifier="midgard_reflector_object_get_metadata_class"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of the metadata class of the given one or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_property_parent"
                c:identifier="midgard_reflector_object_get_property_parent"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of property which is defined as 'parent' for given class or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_property_primary"
                c:identifier="midgard_reflector_object_get_property_primary"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of property which is defined as primary for given class or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_property_unique"
                c:identifier="midgard_reflector_object_get_property_unique"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of property which is defined unique for given class, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_property_up"
                c:identifier="midgard_reflector_object_get_property_up"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Name of property which is defined as 'up' for given class or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_schema_value"
                c:identifier="midgard_reflector_object_get_schema_value"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value of given node's name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">node's name declared for given @klass</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="has_metadata_class"
                c:identifier="midgard_reflector_object_has_metadata_class">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_abstract"
                c:identifier="midgard_reflector_object_is_abstract"
                version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if given type name is an abstract one, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_interface"
                c:identifier="midgard_reflector_object_is_interface"
                version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if given type name is an interface, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_mixin"
                c:identifier="midgard_reflector_object_is_mixin"
                version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if given type name is a mixin, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_children"
                c:identifier="midgard_reflector_object_list_children"
                version="10.05">
        <doc xml:space="preserve">Returns newly allocated, children ( in midgard tree ) classes' names.
Returned array should be freed if no longer needed without freeing array's elements.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of strings or %NULL.</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_children"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of children classes</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_defined_properties"
                c:identifier="midgard_reflector_object_list_defined_properties"
                version="10.05.5">
        <doc xml:space="preserve">Returns newly allocated, array of properties.
Returned array should be freed if no longer needed without freeing array's elements.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of strings or %NULL.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of the class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_prop" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to store number of returned properties</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ReflectorObjectClass"
            c:type="MidgardReflectorObjectClass"
            glib:is-gtype-struct-for="ReflectorObject">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ReflectorProperty"
           c:symbol-prefix="reflector_property"
           c:type="MidgardReflectorProperty"
           parent="GObject.Object"
           glib:type-name="MidgardReflectorProperty"
           glib:get-type="midgard_reflector_property_get_type"
           glib:type-struct="ReflectorPropertyClass">
      <constructor name="new"
                   c:identifier="midgard_reflector_property_new"
                   version="10.05">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly initialized #MidgardReflectorProperty instance or %NULL on failure.</doc>
          <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
        </return-value>
        <parameters>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">Name of #MidgardDBObject (or derived) class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="description"
              c:identifier="midgard_reflector_property_description"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">description of the given property or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="midgard_reflector_property_get_default_value"
              version="10.05">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GValue value or %NULL if property is not registered for the class or there's no default value for the given property</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_class"
              c:identifier="midgard_reflector_property_get_link_class"
              version="10.05"
              introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the pointer to the #MidgardDBObjectClass, a given property is a link to.
@see midgard_reflector_property_get_link_name()</doc>
          <type name="DBObjectClass" c:type="const MidgardDBObjectClass*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_name"
              c:identifier="midgard_reflector_property_get_link_name"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the class, the given property is a link to.
Or %NULL if property is not a link or given property is not registered for given class.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_link_target"
              c:identifier="midgard_reflector_property_get_link_target"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the property, the given one is a link to.
Or %NULL if property is not a link or it's not registered for given class.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_midgard_type"
              c:identifier="midgard_reflector_property_get_midgard_type"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">type (#GType) of the property or %NULL if property is not registered for given class.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name which is registered for #MidgardDBObjectClass</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_value"
              c:identifier="midgard_reflector_property_get_user_value"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">value for user defined field, or NULL if none found</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property to look value for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of user defined field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_default_value"
              c:identifier="midgard_reflector_property_has_default_value"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if property has default value, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_link"
              c:identifier="midgard_reflector_property_is_link"
              version="10.05">
        <doc xml:space="preserve">Checks whether property is a link.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if property is registered as link, %FALSE otherwise (or in case if property is not registered for given class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_linked"
              c:identifier="midgard_reflector_property_is_linked"
              version="10.05">
        <doc xml:space="preserve">Checks if property is linked with another type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if property is linked with another type (property of another class is defined as a link to given one).
%FALSE is returned if property is not linked or is not registered for given class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="propname" transfer-ownership="none">
            <doc xml:space="preserve">property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_primary"
              c:identifier="midgard_reflector_property_is_primary"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if property is primary, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_private"
              c:identifier="midgard_reflector_property_is_private"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if propery is defined private, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_unique"
              c:identifier="midgard_reflector_property_is_unique"
              version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if property is defined as unique, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardReflectorProperty instance</doc>
            <type name="ReflectorProperty" c:type="MidgardReflectorProperty*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">property name to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dbclass"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Holds the name of the class which, #MidgardReflectorProperty has been initialized for.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ReflectorPropertyPrivate"
              c:type="MidgardReflectorPropertyPrivate*"/>
      </field>
    </class>
    <record name="ReflectorPropertyClass"
            c:type="MidgardReflectorPropertyClass"
            glib:is-gtype-struct-for="ReflectorProperty">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ReflectorPropertyPrivate"
            c:type="MidgardReflectorPropertyPrivate"
            disguised="1">
    </record>
    <class name="Replicator"
           c:symbol-prefix="replicator"
           c:type="MidgardReplicator"
           parent="GObject.Object"
           glib:type-name="MidgardReplicator"
           glib:get-type="midgard_replicator_get_type"
           glib:type-struct="ReplicatorClass">
      <function name="export" c:identifier="midgard_replicator_export">
        <doc xml:space="preserve">Given object is not serialized. Its storage record is marked as exported.

@see midgard_object_update() to find out possible error codes returned in case of #MidgardObject failure.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardDBObject instance</doc>
            <type name="DBObject" c:type="MidgardDBObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="export_blob"
                c:identifier="midgard_replicator_export_blob">
        <doc xml:space="preserve">Alias for midgard_replicator_serialize_blob().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">serialized object as xml data</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject of MIDGARD_TYPE_ATTACHMENT type</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="export_by_guid"
                c:identifier="midgard_replicator_export_by_guid">
        <doc xml:space="preserve">Marks object's storage record as exported.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Given guid is NULL or empty string (MGD_ERR_INVALID_PROPERTY_VALUE)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid doesn't exist (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid is purged (MGD_ERR_OBJECT_PURGED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Internal storage error (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="guid" transfer-ownership="none">
            <doc xml:space="preserve">guid which identifies object to be exported</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="export_media"
                c:identifier="midgard_replicator_export_media">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="export_purged"
                c:identifier="midgard_replicator_export_purged">
        <doc xml:space="preserve">Exports all purged objects of given class. If @startdate or @enddate are not NULL,
all objects which were purged between dates will be exported.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">xml buffer with serialized objects or %NULL if there are no objects matching given criteria.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">name of #MidgardObjectClass derived one</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="startdate" transfer-ownership="none">
            <doc xml:space="preserve">optional start date</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="enddate" transfer-ownership="none">
            <doc xml:space="preserve">optional end date</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="import_from_xml"
                c:identifier="midgard_replicator_import_from_xml">
        <doc xml:space="preserve">This method tries to import all objects which could be unserialized from gievn xml.
It's not atomic. Check error code returned from midgard_connection_get_error().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve">data buffer which holds serialized object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve">toggle to force import</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="import_object"
                c:identifier="midgard_replicator_import_object">
        <doc xml:space="preserve">Imports given object to underlying storage

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Given guid is NULL or empty string (MGD_ERR_INVALID_PROPERTY_VALUE)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object is already imported (MGD_ERR_OBJECT_IMPORTED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified is deleted (MGD_ERR_OBJECT_DELETED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object doesn't provide metadata one (MGD_ERR_NO_METADATA)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Set @force toggle if you want to import object even if it's already imported or deleted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardDBObject instance</doc>
            <type name="DBObject" c:type="MidgardDBObject*"/>
          </parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve">toggle to force import</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="serialize" c:identifier="midgard_replicator_serialize">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">serialized objects as xml content or %NULL on failure.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">GObject (or derived class) instance</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="serialize_blob"
                c:identifier="midgard_replicator_serialize_blob">
        <doc xml:space="preserve">Serialize midgard_blob binary data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated xml buffer, which holds blob data base64 encoded, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject of MIDGARD_TYPE_ATTACHMENT type</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unserialize"
                c:identifier="midgard_replicator_unserialize">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Newly allocated array of GObjects</doc>
          <type name="GObject.Object" c:type="GObject**"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve">xml buffer which holds serialized object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="force" transfer-ownership="none">
            <doc xml:space="preserve">toggle to force unserialization</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ReplicatorClass"
            c:type="MidgardReplicatorClass"
            glib:is-gtype-struct-for="Replicator">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="serialize">
        <callback name="serialize">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export">
        <callback name="export">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export_purged">
        <callback name="export_purged">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="mgd" transfer-ownership="none">
              <type name="Connection" c:type="MidgardConnection*"/>
            </parameter>
            <parameter name="classname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="startdate" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="enddate" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="serialize_blob">
        <callback name="serialize_blob">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export_blob">
        <callback name="export_blob">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export_by_guid">
        <callback name="export_by_guid">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="guid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export_media">
        <callback name="export_media">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="MidgardObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unserialize" introspectable="0">
        <callback name="unserialize" introspectable="0">
          <return-value>
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="mgd" transfer-ownership="none">
              <type name="Connection" c:type="MidgardConnection*"/>
            </parameter>
            <parameter name="xml" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="force" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="import_object">
        <callback name="import_object">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
            <parameter name="force" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="import_from_xml">
        <callback name="import_from_xml">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="mgd" transfer-ownership="none">
              <type name="Connection" c:type="MidgardConnection*"/>
            </parameter>
            <parameter name="xml" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="force" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ReplicatorPrivate"
            c:type="MidgardReplicatorPrivate"
            disguised="1">
    </record>
    <class name="Repligard"
           c:symbol-prefix="repligard"
           c:type="MidgardRepligard"
           parent="DBObject"
           glib:type-name="MidgardRepligard"
           glib:get-type="midgard_repligard_get_type"
           glib:type-struct="RepligardClass">
      <constructor name="new"
                   c:identifier="midgard_repligard_new"
                   version="10.05.5">
        <doc xml:space="preserve">Simplified constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardRepligard instance</doc>
          <type name="Repligard" c:type="MidgardRepligard*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_object_info"
              c:identifier="midgard_repligard_create_object_info"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">For given @object, creates replication record info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardRepligard instance</doc>
            <type name="Repligard" c:type="MidgardRepligard*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject to create record info</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_object_info"
              c:identifier="midgard_repligard_purge_object_info"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Repligard" c:type="MidgardRepligard*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_object_info"
              c:identifier="midgard_repligard_update_object_info"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">For given @object, updates replication record info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardRepligard instance</doc>
            <type name="Repligard" c:type="MidgardRepligard*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject to create record info</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">action to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="action" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reference" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="workspace" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="workspaceoid" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="DBObject" c:type="MidgardDBObject"/>
      </field>
      <field name="object_guid">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="type_name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="object_action">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="workspace_id">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dbpriv" readable="0" private="1">
        <type name="DBObjectPrivate" c:type="MidgardDBObjectPrivate*"/>
      </field>
    </class>
    <record name="RepligardClass"
            c:type="MidgardRepligardClass"
            glib:is-gtype-struct-for="Repligard">
      <field name="parent">
        <type name="DBObjectClass" c:type="MidgardDBObjectClass"/>
      </field>
    </record>
    <constant name="SHARE_DIR"
              value="/e/rtvc90-32/share/midgard2"
              c:type="MIDGARD_SHARE_DIR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Schema"
           c:symbol-prefix="schema"
           c:type="MidgardSchema"
           parent="GObject.Object"
           glib:type-name="MidgardSchema"
           glib:get-type="midgard_schema_get_type"
           glib:type-struct="SchemaClass">
      <method name="init" c:identifier="midgard_schema_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Schema" c:type="MidgardSchema*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_dir" c:identifier="midgard_schema_read_dir">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Schema" c:type="MidgardSchema*"/>
          </instance-parameter>
          <parameter name="dirname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_file" c:identifier="midgard_schema_read_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Schema" c:type="MidgardSchema*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="type_exists" c:identifier="midgard_schema_type_exists">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Schema" c:type="MidgardSchema*"/>
          </instance-parameter>
          <parameter name="classname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="types" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </class>
    <record name="SchemaClass"
            c:type="MidgardSchemaClass"
            glib:is-gtype-struct-for="Schema">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SchemaObjectFactory"
           c:symbol-prefix="schema_object_factory"
           c:type="MidgardSchemaObjectFactory"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardSchemaObjectFactory"
           glib:get-type="midgard_schema_object_factory_get_type"
           glib:type-struct="SchemaObjectFactoryClass">
      <function name="create_object"
                c:identifier="midgard_schema_object_factory_create_object"
                version="10.05.1">
        <doc xml:space="preserve">Check midgard_object_new() for returned value and possible errors.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardObject derived instance or NULL</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">name of the class created object is instance of</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value which holds object's identifier</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_object_by_guid"
                c:identifier="midgard_schema_object_factory_get_object_by_guid"
                version="10.05">
        <doc xml:space="preserve">Creates new instance of the class defined in Midgard Schema.

Cases to return %NULL:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Given guid is not a valid guid (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There's no object identified by given guid (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid is deleted (MGD_ERR_OBJECT_DELETED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid is purged (MGD_ERR_OBJECT_PURGED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid doesn't provide 'metadata' or 'deleted' property (MGD_ERR_INVALID_PROPERTY)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardObject derived new instance or %NULL on failure</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="guid" transfer-ownership="none">
            <doc xml:space="preserve">guid which identifies object to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_object_by_path"
                c:identifier="midgard_schema_object_factory_get_object_by_path"
                version="10.05">
        <doc xml:space="preserve">Get object by path. Path elements are objects' names.
To get top object with empty name use "/" path.
Also empty name is allowed in given path: "/A/B//D".

Cases to return %NULL:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given path doesn't exist (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Given @classname doesn't support tree functionality (MGD_ERR_NOT_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Given @classname doesn't provide 'id' or unique named property (MGD_ERR_NOT_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardObject derived, new @classname instance or %NULL</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">name of the class, new instance should be created for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path which identifies object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="object_undelete"
                c:identifier="midgard_schema_object_factory_object_undelete"
                version="10.05">
        <doc xml:space="preserve">Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid doesn't exist (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid is purged (MGD_ERR_OBJECT_PURGED)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Object identified by given guid is not deleted (MGD_ERR_USER_DATA)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Either object's or repligard's record couldn't be updated (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="guid" transfer-ownership="none">
            <doc xml:space="preserve">guid which identifies object to undelete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SchemaObjectFactoryClass"
            c:type="MidgardSchemaObjectFactoryClass"
            glib:is-gtype-struct-for="SchemaObjectFactory">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SchemaObjectFactoryPrivate"
            c:type="MidgardSchemaObjectFactoryPrivate"
            disguised="1">
    </record>
    <class name="SchemaObjectTree"
           c:symbol-prefix="schema_object_tree"
           c:type="MidgardSchemaObjectTree"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardSchemaObjectTree"
           glib:get-type="midgard_schema_object_tree_get_type"
           glib:type-struct="SchemaObjectTreeClass">
      <function name="get_parent_name"
                c:identifier="midgard_schema_object_tree_get_parent_name"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">classname which, in tree is a parent one for given @object</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_parent_object"
                c:identifier="midgard_schema_object_tree_get_parent_object"
                version="10.05">
        <doc xml:space="preserve">Get tree parent object, of the given @object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">parent object or %NULL</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_in_tree"
                c:identifier="midgard_schema_object_tree_is_in_tree"
                version="10.05">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE, if given @object exists under @parent_object in tree. %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance to check existance in tree</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="parent_object" transfer-ownership="none">
            <doc xml:space="preserve">parent #MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_children_objects"
                c:identifier="midgard_schema_object_tree_list_children_objects"
                version="10.05">
        <doc xml:space="preserve">List all @classname objects, if exist and are tree children of given @object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of #MidgardObject objects, or %NULL.</doc>
          <array length="2" zero-terminated="0" c:type="MidgardObject**">
            <type name="Object" c:type="MidgardObject*"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="classname" transfer-ownership="none">
            <doc xml:space="preserve">name of the tree child class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_objects"
                c:identifier="midgard_schema_object_tree_list_objects"
                version="10.05">
        <doc xml:space="preserve">List tree children objects, of given @object type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated array of #MidgardObject objects</doc>
          <array length="1" zero-terminated="0" c:type="MidgardObject**">
            <type name="Object" c:type="MidgardObject*"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SchemaObjectTreeClass"
            c:type="MidgardSchemaObjectTreeClass"
            glib:is-gtype-struct-for="SchemaObjectTree">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SchemaObjectTreePrivate"
            c:type="MidgardSchemaObjectTreePrivate"
            disguised="1">
    </record>
    <class name="SqlContentManager"
           c:symbol-prefix="sql_content_manager"
           c:type="MidgardSqlContentManager"
           parent="GObject.Object"
           glib:type-name="MidgardSqlContentManager"
           glib:get-type="midgard_sql_content_manager_get_type"
           glib:type-struct="SqlContentManagerClass">
      <implements name="ContentManager"/>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Midgard connection</doc>
        <type name="Connection"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SqlContentManagerPrivate"
              c:type="MidgardSqlContentManagerPrivate*"/>
      </field>
    </class>
    <record name="SqlContentManagerClass"
            c:type="MidgardSqlContentManagerClass"
            glib:is-gtype-struct-for="SqlContentManager">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SqlContentManagerJob"
           c:symbol-prefix="sql_content_manager_job"
           c:type="MidgardSqlContentManagerJob"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="MidgardSqlContentManagerJob"
           glib:get-type="midgard_sql_content_manager_job_get_type"
           glib:type-struct="SqlContentManagerJobClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <method name="get_connection"
              c:identifier="midgard_sql_content_manager_job_get_connection"
              version="10.05.08"
              throws="1">
        <doc xml:space="preserve">Get job's connection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardConnection instance or %NULL on failure</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlContentManagerJob instance</doc>
            <type name="SqlContentManagerJob"
                  c:type="MidgardSqlContentManagerJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Midgard connection</doc>
        <type name="Connection"/>
      </property>
      <property name="contentobject"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Content object</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="model"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Model for content object</doc>
        <type name="Model"/>
      </property>
      <property name="reference"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference object</doc>
        <type name="ObjectReference"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SqlContentManagerJobPrivate"
              c:type="MidgardSqlContentManagerJobPrivate*"/>
      </field>
    </class>
    <record name="SqlContentManagerJobClass"
            c:type="MidgardSqlContentManagerJobClass"
            glib:is-gtype-struct-for="SqlContentManagerJob">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SqlContentManagerJobCreate"
           c:symbol-prefix="sql_content_manager_job_create"
           c:type="MidgardSqlContentManagerJobCreate"
           parent="SqlContentManagerJob"
           glib:type-name="MidgardSqlContentManagerJobCreate"
           glib:get-type="midgard_sql_content_manager_job_create_get_type"
           glib:type-struct="SqlContentManagerJobCreateClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <field name="parent">
        <type name="SqlContentManagerJob"
              c:type="MidgardSqlContentManagerJob"/>
      </field>
    </class>
    <record name="SqlContentManagerJobCreateClass"
            c:type="MidgardSqlContentManagerJobCreateClass"
            glib:is-gtype-struct-for="SqlContentManagerJobCreate">
      <field name="parent">
        <type name="SqlContentManagerJobClass"
              c:type="MidgardSqlContentManagerJobClass"/>
      </field>
    </record>
    <class name="SqlContentManagerJobDelete"
           c:symbol-prefix="sql_content_manager_job_delete"
           c:type="MidgardSqlContentManagerJobDelete"
           parent="SqlContentManagerJob"
           glib:type-name="MidgardSqlContentManagerJobDelete"
           glib:get-type="midgard_sql_content_manager_job_delete_get_type"
           glib:type-struct="SqlContentManagerJobDeleteClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <field name="parent">
        <type name="SqlContentManagerJob"
              c:type="MidgardSqlContentManagerJob"/>
      </field>
    </class>
    <record name="SqlContentManagerJobDeleteClass"
            c:type="MidgardSqlContentManagerJobDeleteClass"
            glib:is-gtype-struct-for="SqlContentManagerJobDelete">
      <field name="parent">
        <type name="SqlContentManagerJobClass"
              c:type="MidgardSqlContentManagerJobClass"/>
      </field>
    </record>
    <class name="SqlContentManagerJobLoad"
           c:symbol-prefix="sql_content_manager_job_load"
           c:type="MidgardSqlContentManagerJobLoad"
           parent="SqlContentManagerJob"
           glib:type-name="MidgardSqlContentManagerJobLoad"
           glib:get-type="midgard_sql_content_manager_job_load_get_type"
           glib:type-struct="SqlContentManagerJobLoadClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <field name="parent">
        <type name="SqlContentManagerJob"
              c:type="MidgardSqlContentManagerJob"/>
      </field>
    </class>
    <record name="SqlContentManagerJobLoadClass"
            c:type="MidgardSqlContentManagerJobLoadClass"
            glib:is-gtype-struct-for="SqlContentManagerJobLoad">
      <field name="parent">
        <type name="SqlContentManagerJobClass"
              c:type="MidgardSqlContentManagerJobClass"/>
      </field>
    </record>
    <record name="SqlContentManagerJobPrivate"
            c:type="MidgardSqlContentManagerJobPrivate"
            disguised="1">
    </record>
    <class name="SqlContentManagerJobPurge"
           c:symbol-prefix="sql_content_manager_job_purge"
           c:type="MidgardSqlContentManagerJobPurge"
           parent="SqlContentManagerJob"
           glib:type-name="MidgardSqlContentManagerJobPurge"
           glib:get-type="midgard_sql_content_manager_job_purge_get_type"
           glib:type-struct="SqlContentManagerJobPurgeClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <field name="parent">
        <type name="SqlContentManagerJob"
              c:type="MidgardSqlContentManagerJob"/>
      </field>
    </class>
    <record name="SqlContentManagerJobPurgeClass"
            c:type="MidgardSqlContentManagerJobPurgeClass"
            glib:is-gtype-struct-for="SqlContentManagerJobPurge">
      <field name="parent">
        <type name="SqlContentManagerJobClass"
              c:type="MidgardSqlContentManagerJobClass"/>
      </field>
    </record>
    <class name="SqlContentManagerJobUpdate"
           c:symbol-prefix="sql_content_manager_job_update"
           c:type="MidgardSqlContentManagerJobUpdate"
           parent="SqlContentManagerJob"
           glib:type-name="MidgardSqlContentManagerJobUpdate"
           glib:get-type="midgard_sql_content_manager_job_update_get_type"
           glib:type-struct="SqlContentManagerJobUpdateClass">
      <implements name="ContentManagerJob"/>
      <implements name="Executable"/>
      <implements name="Job"/>
      <implements name="Validable"/>
      <field name="parent">
        <type name="SqlContentManagerJob"
              c:type="MidgardSqlContentManagerJob"/>
      </field>
    </class>
    <record name="SqlContentManagerJobUpdateClass"
            c:type="MidgardSqlContentManagerJobUpdateClass"
            glib:is-gtype-struct-for="SqlContentManagerJobUpdate">
      <field name="parent">
        <type name="SqlContentManagerJobClass"
              c:type="MidgardSqlContentManagerJobClass"/>
      </field>
    </record>
    <record name="SqlContentManagerPrivate"
            c:type="MidgardSqlContentManagerPrivate"
            disguised="1">
    </record>
    <class name="SqlQueryColumn"
           c:symbol-prefix="sql_query_column"
           c:type="MidgardSqlQueryColumn"
           parent="GObject.Object"
           glib:type-name="MidgardSqlQueryColumn"
           glib:get-type="midgard_sql_query_column_get_type"
           glib:type-struct="SqlQueryColumnClass">
      <implements name="QueryColumn"/>
      <implements name="QueryHolder"/>
      <constructor name="new"
                   c:identifier="midgard_sql_query_column_new"
                   version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardSqlQueryColumn instance</doc>
          <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn*"/>
        </return-value>
        <parameters>
          <parameter name="query_property" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryProperty instance</doc>
            <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
          </parameter>
          <parameter name="qualifier" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">column name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="name"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="qualifier"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="queryproperty"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="QueryProperty"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="qualifier">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="query_property">
        <type name="QueryProperty" c:type="MidgardQueryProperty*"/>
      </field>
    </class>
    <record name="SqlQueryColumnClass"
            c:type="MidgardSqlQueryColumnClass"
            glib:is-gtype-struct-for="SqlQueryColumn">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SqlQueryConstraint"
           c:symbol-prefix="sql_query_constraint"
           c:type="MidgardSqlQueryConstraint"
           parent="GObject.Object"
           glib:type-name="MidgardSqlQueryConstraint"
           glib:get-type="midgard_sql_query_constraint_get_type"
           glib:type-struct="SqlQueryConstraintClass">
      <implements name="QueryConstraintSimple"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_sql_query_constraint_new"
                   version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardSqlQueryConstraint instance, or %NULL on failure</doc>
          <type name="SqlQueryConstraint" c:type="MidgardSqlQueryConstraint*"/>
        </return-value>
        <parameters>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryColumn instance</doc>
            <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn*"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">constraint operator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="holder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder instance</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="list_constraints" introspectable="0">
        <return-value>
          <type name="QueryConstraintSimple"
                c:type="MidgardQueryConstraintSimple**"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
          <parameter name="n_objects" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_column"
              c:identifier="midgard_sql_query_constraint_get_column"
              version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardSqlQueryColumn associated with constraint or %NULL</doc>
          <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_holder"
              c:identifier="midgard_sql_query_constraint_get_holder"
              version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardQueryHolder associated with @self constraint, or %NULL</doc>
          <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator"
              c:identifier="midgard_sql_query_constraint_get_operator"
              version="10.05.6">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">operator type associated with @self constraint, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_column"
              c:identifier="midgard_sql_query_constraint_set_column"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryColumn to associate with @self constraint</doc>
            <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_holder"
              c:identifier="midgard_sql_query_constraint_set_holder"
              version="10.05.6"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
          <parameter name="holder" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQueryHolder to associate with @self constraint</doc>
            <type name="QueryHolder" c:type="MidgardQueryHolder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator"
              c:identifier="midgard_sql_query_constraint_set_operator"
              version="10.05.6"
              throws="1">
        <doc xml:space="preserve">Check midgard_query_constraint_new() for valid operator types.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryConstraint instance</doc>
            <type name="SqlQueryConstraint"
                  c:type="MidgardSqlQueryConstraint*"/>
          </instance-parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve">operator to associate with constraint</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="column" writable="1" transfer-ownership="none">
        <type name="SqlQueryColumn"/>
      </property>
      <property name="holder" writable="1" transfer-ownership="none">
        <type name="QueryHolder"/>
      </property>
      <property name="operator" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SqlQueryConstraintPrivate"
              c:type="MidgardSqlQueryConstraintPrivate*"/>
      </field>
    </class>
    <record name="SqlQueryConstraintClass"
            c:type="MidgardSqlQueryConstraintClass"
            glib:is-gtype-struct-for="SqlQueryConstraint">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_constraints" introspectable="0">
        <callback name="list_constraints" introspectable="0">
          <return-value>
            <type name="QueryConstraintSimple"
                  c:type="MidgardQueryConstraintSimple**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SqlQueryConstraint"
                    c:type="MidgardSqlQueryConstraint*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SqlQueryConstraintPrivate"
            c:type="MidgardSqlQueryConstraintPrivate"
            disguised="1">
    </record>
    <class name="SqlQueryResult"
           c:symbol-prefix="sql_query_result"
           c:type="MidgardSqlQueryResult"
           parent="GObject.Object"
           glib:type-name="MidgardSqlQueryResult"
           glib:get-type="midgard_sql_query_result_get_type"
           glib:type-struct="SqlQueryResultClass">
      <implements name="QueryResult"/>
      <constructor name="new"
                   c:identifier="midgard_sql_query_result_new"
                   version="10.05.6">
        <doc xml:space="preserve">This constructor should be used by #MidgardQuerySelector implementation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardSqlQueryResult</doc>
          <type name="SqlQueryResult" c:type="MidgardSqlQueryResult*"/>
        </return-value>
        <parameters>
          <parameter name="selector" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardQuerySelector instance</doc>
            <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a GObject which represents data model</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_columns"
              c:identifier="midgard_sql_query_result_set_columns"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SqlQueryResult" c:type="MidgardSqlQueryResult*"/>
          </instance-parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn**"/>
          </parameter>
          <parameter name="n_columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="model"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gda.DataModel"/>
      </property>
      <property name="selector"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="QuerySelector"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="selector">
        <type name="QuerySelector" c:type="MidgardQuerySelector*"/>
      </field>
      <field name="model">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="rows">
        <type name="SqlQueryRow" c:type="MidgardSqlQueryRow**"/>
      </field>
      <field name="n_rows">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="columns">
        <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn**"/>
      </field>
      <field name="n_columns">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="SqlQueryResultClass"
            c:type="MidgardSqlQueryResultClass"
            glib:is-gtype-struct-for="SqlQueryResult">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SqlQueryRow"
           c:symbol-prefix="sql_query_row"
           c:type="MidgardSqlQueryRow"
           parent="GObject.Object"
           glib:type-name="MidgardSqlQueryRow"
           glib:get-type="midgard_sql_query_row_get_type"
           glib:type-struct="SqlQueryRowClass">
      <implements name="QueryRow"/>
      <constructor name="new"
                   c:identifier="midgard_sql_query_row_new"
                   version="10.05.6">
        <doc xml:space="preserve">This constructor should be used by #MidgardQueryResult implementation</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardSqlQueryRow</doc>
          <type name="SqlQueryRow" c:type="MidgardSqlQueryRow*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a GObject which represents data model</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="row" transfer-ownership="none">
            <doc xml:space="preserve">Row's index in a given model</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Connection"/>
      </property>
      <property name="model"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gda.DataModel"/>
      </property>
      <property name="row"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mgd">
        <type name="Connection" c:type="MidgardConnection*"/>
      </field>
      <field name="model">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="row">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="SqlQueryRowClass"
            c:type="MidgardSqlQueryRowClass"
            glib:is-gtype-struct-for="SqlQueryRow">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SqlQuerySelectData"
           c:symbol-prefix="sql_query_select_data"
           c:type="MidgardSqlQuerySelectData"
           parent="QueryExecutor"
           glib:type-name="MidgardSqlQuerySelectData"
           glib:get-type="midgard_sql_query_select_data_get_type"
           glib:type-struct="SqlQuerySelectDataClass">
      <implements name="Executable"/>
      <implements name="QuerySelector"/>
      <implements name="Validable"/>
      <constructor name="new"
                   c:identifier="midgard_sql_query_select_data_new"
                   version="10.05.6">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardSqlQuerySelectData instance or %NULL on failure</doc>
          <type name="SqlQuerySelectData" c:type="MidgardSqlQuerySelectData*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_column"
              c:identifier="midgard_sql_query_select_data_add_column"
              version="10.05.6">
        <doc xml:space="preserve">Adds a new column, which will be available in #MidgardSqlQueryResult</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQuerySelectData instance</doc>
            <type name="SqlQuerySelectData"
                  c:type="MidgardSqlQuerySelectData*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQueryColumn to add</doc>
            <type name="SqlQueryColumn" c:type="MidgardSqlQueryColumn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_columns"
              c:identifier="midgard_sql_query_select_data_get_columns"
              version="10.05.6"
              throws="1">
        <doc xml:space="preserve">Returns all collumns added to given instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of #MidgardSqlQueryColumn objects or %NULL</doc>
          <array length="0"
                 zero-terminated="0"
                 c:type="MidgardSqlQueryColumn**">
            <type name="SqlQueryColumn"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardSqlQuerySelectData instance</doc>
            <type name="SqlQuerySelectData"
                  c:type="MidgardSqlQuerySelectData*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to store number of returned columns</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer to a connection, #MidgardSqlQuerySelectData has been initialized for</doc>
        <type name="Connection"/>
      </property>
      <field name="parent">
        <type name="QueryExecutor" c:type="MidgardQueryExecutor"/>
      </field>
      <field name="columns">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="query_string">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="SqlQuerySelectDataClass"
            c:type="MidgardSqlQuerySelectDataClass"
            glib:is-gtype-struct-for="SqlQuerySelectData">
      <field name="parent">
        <type name="QueryExecutorClass" c:type="MidgardQueryExecutorClass"/>
      </field>
    </record>
    <class name="Storage"
           c:symbol-prefix="storage"
           c:type="MidgardStorage"
           parent="GObject.Object"
           glib:type-name="MidgardStorage"
           glib:get-type="midgard_storage_get_type"
           glib:type-struct="StorageClass">
      <function name="create"
                c:identifier="midgard_storage_create"
                version="10.05">
        <doc xml:space="preserve">Creates underlying storage (e.g. table in database) for class which is identified by given @name.
It may be class which represents any underlying storage type (database table or view, for example).

If underlying storage already exists, this method silently ignore creation
and returns %TRUE. Such case is not considered an error.

This method also creates metadata storage if given class uses such.

Indexes are created if:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
property is a link type
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
property is linked to another property
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
property is either parent or up
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
property holds guid value
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;
   
Auto increment (and primary key ) field is created if property is defined
as primaryproperty, and it's integer ( or unsigned one ) type</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of #MidgardDBObject derived class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_base_storage"
                c:identifier="midgard_storage_create_base_storage"
                version="9.09">
        <doc xml:space="preserve">Creates storage for base Midgard classes.
Tables created by this method: repligard, midgard_user and midgard_person.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if tables has been created, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="delete"
                c:identifier="midgard_storage_delete"
                version="10.05">
        <doc xml:space="preserve">Delete storage for given class.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of #MidgardDBObjectClass derived class.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="exists"
                c:identifier="midgard_storage_exists"
                version="10.05">
        <doc xml:space="preserve">Checks whether storage for given class exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if storage exists, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of #MidgardDBObjectClass derived class</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="update"
                c:identifier="midgard_storage_update"
                version="10.05">
        <doc xml:space="preserve">Update underlying storage.

This method doesn't create storage. It creates new columns if are defined
for class properties and do not exist in storage yet.

See midgard_storage_create() if you need more info about indexes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">Name of #MidgardDBObjectClass derived class.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="StorageClass"
            c:type="MidgardStorageClass"
            disguised="1"
            glib:is-gtype-struct-for="Storage">
    </record>
    <record name="Timestamp"
            c:type="MidgardTimestamp"
            glib:type-name="MidgardTimestamp"
            glib:get-type="midgard_timestamp_get_type"
            c:symbol-prefix="timestamp">
      <field name="year" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="month" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="day" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="hour" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="minute" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="second" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="nano" writable="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="offset" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="date_value" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="date_string" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="midgard_timestamp_new">
        <return-value transfer-ownership="full">
          <type name="Timestamp" c:type="MidgardTimestamp*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_iso8601"
                   c:identifier="midgard_timestamp_new_from_iso8601">
        <return-value transfer-ownership="full">
          <type name="Timestamp" c:type="MidgardTimestamp*"/>
        </return-value>
        <parameters>
          <parameter name="iso_date" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="midgard_timestamp_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mt" transfer-ownership="none">
            <type name="Timestamp" c:type="MidgardTimestamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="midgard_timestamp_get_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mt" transfer-ownership="none">
            <type name="Timestamp" c:type="MidgardTimestamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get_string_from_value"
                c:identifier="midgard_timestamp_get_string_from_value">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_current"
                c:identifier="midgard_timestamp_new_current">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_value_from_iso8601"
                c:identifier="midgard_timestamp_new_value_from_iso8601">
        <return-value transfer-ownership="full">
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="iso_date" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_current_time"
                c:identifier="midgard_timestamp_set_current_time">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="Transaction"
           c:symbol-prefix="transaction"
           c:type="MidgardTransaction"
           parent="GObject.Object"
           glib:type-name="MidgardTransaction"
           glib:get-type="midgard_transaction_get_type"
           glib:type-struct="TransactionClass">
      <constructor name="new"
                   c:identifier="midgard_transaction_new"
                   version="9.09">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">New #MidgardTransaction instance or NULL on failure</doc>
          <type name="Transaction" c:type="MidgardTransaction*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="begin" invoker="begin" version="9.09">
        <doc xml:space="preserve">Begins new, underlying database provider's transaction.
In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="commit" invoker="commit" version="9.09">
        <doc xml:space="preserve">In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" version="9.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">unique name which identifies given transaction.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_status" invoker="get_status" version="9.09">
        <doc xml:space="preserve">Returns transaction status. %FALSE means, any transaction operation failed.
No #MidgardConnection error is set in case of error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rollback" invoker="rollback" version="9.09">
        <doc xml:space="preserve">In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="begin"
              c:identifier="midgard_transaction_begin"
              version="9.09">
        <doc xml:space="preserve">Begins new, underlying database provider's transaction.
In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="commit"
              c:identifier="midgard_transaction_commit"
              version="9.09">
        <doc xml:space="preserve">In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="midgard_transaction_get_name"
              version="9.09">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">unique name which identifies given transaction.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="midgard_transaction_get_status"
              version="9.09">
        <doc xml:space="preserve">Returns transaction status. %FALSE means, any transaction operation failed.
No #MidgardConnection error is set in case of error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rollback"
              c:identifier="midgard_transaction_rollback"
              version="9.09">
        <doc xml:space="preserve">In case of error, #MidgardConnection error is set to MGD_ERR_INTERNAL</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardTransaction instance</doc>
            <type name="Transaction" c:type="MidgardTransaction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer to #MidgardConnection, given object has been initialized for</doc>
        <type name="Connection"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TransactionPrivate" c:type="MidgardTransactionPrivate*"/>
      </field>
    </class>
    <record name="TransactionClass"
            c:type="MidgardTransactionClass"
            glib:is-gtype-struct-for="Transaction">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="begin">
        <callback name="begin">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardTransaction instance</doc>
              <type name="Transaction" c:type="MidgardTransaction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="commit">
        <callback name="commit">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardTransaction instance</doc>
              <type name="Transaction" c:type="MidgardTransaction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rollback">
        <callback name="rollback">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardTransaction instance</doc>
              <type name="Transaction" c:type="MidgardTransaction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_status">
        <callback name="get_status">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardTransaction instance</doc>
              <type name="Transaction" c:type="MidgardTransaction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">unique name which identifies given transaction.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardTransaction instance</doc>
              <type name="Transaction" c:type="MidgardTransaction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TransactionPrivate"
            c:type="MidgardTransactionPrivate"
            disguised="1">
    </record>
    <enumeration name="TypeAuth" c:type="MidgardTypeAuth">
      <member name="normal" value="0" c:identifier="MIDGARD_AUTHTYPE_NORMAL">
      </member>
      <member name="pam" value="1" c:identifier="MIDGARD_AUTHTYPE_PAM">
      </member>
      <member name="trust" value="2" c:identifier="MIDGARD_AUTHTYPE_TRUST">
      </member>
    </enumeration>
    <record name="TypeHolder" c:type="MidgardTypeHolder">
      <field name="elements" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="level" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <constant name="USER_TYPE_ADMIN"
              value="2"
              c:type="MIDGARD_USER_TYPE_ADMIN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USER_TYPE_NONE" value="0" c:type="MIDGARD_USER_TYPE_NONE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USER_TYPE_USER" value="1" c:type="MIDGARD_USER_TYPE_USER">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="User"
           c:symbol-prefix="user"
           c:type="MidgardUser"
           parent="DBObject"
           glib:type-name="MidgardUser"
           glib:get-type="midgard_user_get_type"
           glib:type-struct="UserClass">
      <constructor name="new" c:identifier="midgard_user_new">
        <doc xml:space="preserve">@parameters and @n_params arguments are optional. midgard_user_get() will be invoked
in constructor if @parameters argument will be set to not %NULL value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardUser object or %NULL on failure</doc>
          <type name="User" c:type="MidgardUser*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">#GParameter with #MidgardUser properties</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get" c:identifier="midgard_user_get">
        <doc xml:space="preserve">Fetch #MidgardUser object from storage.
At least 'login' and 'authtype' property are required to be set in parameters.

Cases to return %NULL:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
'login' or 'authtype' properties do not exist in given parameters (MGD_ERR_INVALID_PROPERTY_VALUE)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
There's no user object which match given parameters (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
More than one record found in database (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardUser instance or %NULL in case of failure

Since 9.09</doc>
          <type name="User" c:type="MidgardUser*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">#GParameter with #MidgardUser properties</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query" c:identifier="midgard_user_query">
        <doc xml:space="preserve">Fetch #MidgardUser objects from storage.
At least 'login' and 'authtype' property are required to be set in parameters.

Cases to return %NULL:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
There are no user objects which match given parameters (MGD_ERR_NOT_EXISTS)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Returned array should be freed (g_free()) when no longer needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated and NULL terminated array of #MidgardUser objects or %NULL

Since 9.09</doc>
          <type name="User" c:type="MidgardUser**"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">#GParameter with #MidgardUser properties</doc>
            <type name="GObject.Parameter" c:type="const GParameter*"/>
          </parameter>
        </parameters>
      </function>
      <function name="quick_login"
                c:identifier="midgard_user_quick_login"
                introspectable="0">
        <return-value>
          <type name="User" c:type="MidgardUser*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
          <parameter name="login" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="create" invoker="create" version="9.09">
        <doc xml:space="preserve">Creates database record for given user.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User with such login and authentication type already exists ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is already set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property is empty or NULL ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property value is invalid ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_record">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_person" invoker="get_person">
        <doc xml:space="preserve">Returned object should not be unref.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardObject of "midgard_person" type, or %NULL if none associated.</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_admin" invoker="is_admin">
        <doc xml:space="preserve">Checks if given user is an admin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user is an admin, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_user" invoker="is_user">
        <doc xml:space="preserve">Checks if given user is a user.
For example, function will return FALSE for user who is logged in as admin or root.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user is a user, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="log_in" invoker="log_in" version="9.09">
        <doc xml:space="preserve">Logs in user instance, if given one is valid.
A valid user object must have (at least) guid set.
Which means, #MidgardObject must be fetched from database.
Either with midgard_user_get() or with midgard_user_query().

This method silently returns with success when given user is already logged in.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is not set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user has been logged in, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="log_out" invoker="log_out" version="9.09">
        <doc xml:space="preserve">Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
There's no user logged in (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User is not recently logged in (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user successfully logs out, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update" version="9.09">
        <doc xml:space="preserve">Updates user storage record

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User with such login and authentication type already exists ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is not set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property is empty or NULL ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User record hasn't been found ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Failed to update storage record ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property value is invalid ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create" c:identifier="midgard_user_create" version="9.09">
        <doc xml:space="preserve">Creates database record for given user.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User with such login and authentication type already exists ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is already set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property is empty or NULL ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property value is invalid ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete"
              c:identifier="midgard_user_delete"
              version="9.09.2">
        <doc xml:space="preserve">Delete user's storage record.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is not set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Failed to delete storage record ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@TRUE on success, @FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_person" c:identifier="midgard_user_get_person">
        <doc xml:space="preserve">Returned object should not be unref.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardObject of "midgard_person" type, or %NULL if none associated.</doc>
          <type name="Object" c:type="MidgardObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_admin" c:identifier="midgard_user_is_admin">
        <doc xml:space="preserve">Checks if given user is an admin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user is an admin, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_user" c:identifier="midgard_user_is_user">
        <doc xml:space="preserve">Checks if given user is a user.
For example, function will return FALSE for user who is logged in as admin or root.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user is a user, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_in" c:identifier="midgard_user_log_in" version="9.09">
        <doc xml:space="preserve">Logs in user instance, if given one is valid.
A valid user object must have (at least) guid set.
Which means, #MidgardObject must be fetched from database.
Either with midgard_user_get() or with midgard_user_query().

This method silently returns with success when given user is already logged in.

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is not set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user has been logged in, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_out"
              c:identifier="midgard_user_log_out"
              version="9.09">
        <doc xml:space="preserve">Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
There's no user logged in (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User is not recently logged in (MGD_ERR_INTERNAL)
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if user successfully logs out, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active" c:identifier="midgard_user_set_active">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="user" transfer-ownership="none">
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_person" c:identifier="midgard_user_set_person">
        <doc xml:space="preserve">Associates given #MidgardObject person with @self #MidgardUser.
Sets person property and updates user storage record.

#MidgardUser @self takes ownership of the given #MidgardObject ('midgard_person' type) reference,
and increases person's object reference count.

See midgard_user_update() for returned error details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
          <parameter name="person" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject instance</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="midgard_user_update" version="9.09">
        <doc xml:space="preserve">Updates user storage record

Cases to return %FALSE:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
User with such login and authentication type already exists ( MGD_ERR_DUPLICATE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User's guid is not set ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property is empty or NULL ( MGD_ERR_INVALID_PROPERTY_VALUE )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
User record hasn't been found ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Failed to update storage record ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
'authtype' property value is invalid ( MGD_ERR_INTERNAL )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardUser instance</doc>
            <type name="User" c:type="MidgardUser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="authtype" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="authtypeid" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="guid" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="login" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="person" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="usertype" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="DBObject" c:type="MidgardDBObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserPrivate" c:type="MidgardUserPrivate*"/>
      </field>
    </class>
    <record name="UserClass"
            c:type="MidgardUserClass"
            glib:is-gtype-struct-for="User">
      <field name="parent">
        <type name="DBObjectClass" c:type="MidgardDBObjectClass"/>
      </field>
      <field name="get_connection">
        <callback name="get_connection">
          <return-value transfer-ownership="none">
            <type name="Connection" c:type="const MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="arg0" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_person">
        <callback name="get_person">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">#MidgardObject of "midgard_person" type, or %NULL if none associated.</doc>
            <type name="Object" c:type="MidgardObject*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="log_in">
        <callback name="log_in">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if user has been logged in, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="log_out">
        <callback name="log_out">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if user successfully logs out, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get" introspectable="0">
        <callback name="get" introspectable="0">
          <return-value>
            <type name="User" c:type="MidgardUser*"/>
          </return-value>
          <parameters>
            <parameter name="mgd" transfer-ownership="none">
              <type name="Connection" c:type="MidgardConnection*"/>
            </parameter>
            <parameter name="n_params" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="parameters" transfer-ownership="none">
              <type name="GObject.Parameter" c:type="const GParameter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query" introspectable="0">
        <callback name="query" introspectable="0">
          <return-value>
            <type name="User" c:type="MidgardUser**"/>
          </return-value>
          <parameters>
            <parameter name="mgd" transfer-ownership="none">
              <type name="Connection" c:type="MidgardConnection*"/>
            </parameter>
            <parameter name="n_params" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="parameters" transfer-ownership="none">
              <type name="GObject.Parameter" c:type="const GParameter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create">
        <callback name="create">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_record">
        <callback name="delete_record">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_user">
        <callback name="is_user">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if user is a user, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_admin">
        <callback name="is_admin">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if user is an admin, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">#MidgardUser instance</doc>
              <type name="User" c:type="MidgardUser*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="UserPrivate" c:type="MidgardUserPrivate" disguised="1">
    </record>
    <interface name="Validable"
               c:symbol-prefix="validable"
               c:type="MidgardValidable"
               glib:type-name="MidgardValidable"
               glib:get-type="midgard_validable_get_type">
      <method name="is_valid"
              c:identifier="midgard_validable_is_valid"
              version="10.05.5">
        <doc xml:space="preserve">Check if given #MidgardValidable instance is marked as valid.
Implementation shall not validate given instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it's valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardValidable instance</doc>
            <type name="Validable" c:type="MidgardValidable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="validate"
              c:identifier="midgard_validable_validate"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Validate given instance.
Implementation shall validate given instance, and in case when it's invalid,
particular error shoudl be set. If instance is valid, error should be NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardValidable instance
@error (error-domains MIDGARD_VALIDATION_ERROR): location to store error</doc>
            <type name="Validable" c:type="MidgardValidable*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ValidableIFace" c:type="MidgardValidableIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="validate">
        <callback name="validate" throws="1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Validable" c:type="MidgardValidable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_valid">
        <callback name="is_valid">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Validable" c:type="MidgardValidable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ValidationError"
                 c:type="MidgardValidationError"
                 glib:error-domain="midgard-validation-error-quark">
      <member name="name_invalid"
              value="0"
              c:identifier="MIDGARD_VALIDATION_ERROR_NAME_INVALID">
      </member>
      <member name="name_duplicated"
              value="1"
              c:identifier="MIDGARD_VALIDATION_ERROR_NAME_DUPLICATED">
      </member>
      <member name="element_invalid"
              value="2"
              c:identifier="MIDGARD_VALIDATION_ERROR_ELEMENT_INVALID">
      </member>
      <member name="type_invalid"
              value="3"
              c:identifier="MIDGARD_VALIDATION_ERROR_TYPE_INVALID">
      </member>
      <member name="key_invalid"
              value="4"
              c:identifier="MIDGARD_VALIDATION_ERROR_KEY_INVALID">
      </member>
      <member name="value_invalid"
              value="5"
              c:identifier="MIDGARD_VALIDATION_ERROR_VALUE_INVALID">
      </member>
      <member name="reference_invalid"
              value="6"
              c:identifier="MIDGARD_VALIDATION_ERROR_REFERENCE_INVALID">
      </member>
      <member name="parent_invalid"
              value="7"
              c:identifier="MIDGARD_VALIDATION_ERROR_PARENT_INVALID">
      </member>
      <member name="location_invalid"
              value="8"
              c:identifier="MIDGARD_VALIDATION_ERROR_LOCATION_INVALID">
      </member>
      <member name="internal"
              value="9"
              c:identifier="MIDGARD_VALIDATION_ERROR_INTERNAL">
      </member>
    </enumeration>
    <class name="View"
           c:symbol-prefix="view"
           c:type="MidgardView"
           parent="DBObject"
           abstract="1"
           glib:type-name="MidgardView"
           glib:get-type="midgard_view_get_type"
           glib:type-struct="ViewClass">
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dbpriv">
        <type name="DBObjectPrivate" c:type="MidgardDBObjectPrivate*"/>
      </field>
    </class>
    <record name="ViewClass"
            c:type="MidgardViewClass"
            glib:is-gtype-struct-for="View">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="dbpriv">
        <type name="DBObjectPrivate" c:type="MidgardDBObjectPrivate*"/>
      </field>
      <field name="get_connection">
        <callback name="get_connection">
          <return-value transfer-ownership="none">
            <type name="Connection" c:type="const MidgardConnection*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBObject" c:type="MidgardDBObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Workspace"
           c:symbol-prefix="workspace"
           c:type="MidgardWorkspace"
           parent="DBObject"
           glib:type-name="MidgardWorkspace"
           glib:get-type="midgard_workspace_get_type"
           glib:type-struct="WorkspaceClass">
      <implements name="WorkspaceStorage"/>
      <constructor name="new"
                   c:identifier="midgard_workspace_new"
                   version="10.05.5">
        <doc xml:space="preserve">Simplified constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardWorkspace instance</doc>
          <type name="Workspace" c:type="MidgardWorkspace*"/>
        </return-value>
      </constructor>
      <method name="get_context"
              c:identifier="midgard_workspace_get_context"
              version="10.05.5">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#MidgardWorkspaceContext @self is in or %NULL</doc>
          <type name="WorkspaceContext"
                c:type="const MidgardWorkspaceContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspace instance</doc>
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="guid" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent-workspace"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Workspace"/>
      </property>
      <property name="path" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="up" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="DBObject" c:type="MidgardDBObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkspacePrivate" c:type="MidgardWorkspacePrivate*"/>
      </field>
    </class>
    <record name="WorkspaceClass"
            c:type="MidgardWorkspaceClass"
            glib:is-gtype-struct-for="Workspace">
      <field name="parent">
        <type name="DBObjectClass" c:type="MidgardDBObjectClass"/>
      </field>
    </record>
    <class name="WorkspaceContext"
           c:symbol-prefix="workspace_context"
           c:type="MidgardWorkspaceContext"
           parent="GObject.Object"
           glib:type-name="MidgardWorkspaceContext"
           glib:get-type="midgard_workspace_context_get_type"
           glib:type-struct="WorkspaceContextClass">
      <implements name="WorkspaceStorage"/>
      <constructor name="new"
                   c:identifier="midgard_workspace_context_new"
                   version="10.05.5">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#MidgardWorkspaceContext instance</doc>
          <type name="WorkspaceContext" c:type="MidgardWorkspaceContext*"/>
        </return-value>
      </constructor>
      <method name="has_workspace"
              c:identifier="midgard_workspace_context_has_workspace"
              version="10.05.5">
        <doc xml:space="preserve">Check, whether given @workspace is in given context</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceContext instance</doc>
            <type name="WorkspaceContext" c:type="MidgardWorkspaceContext*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspace to check</doc>
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkspacePrivate" c:type="MidgardWorkspacePrivate*"/>
      </field>
    </class>
    <record name="WorkspaceContextClass"
            c:type="MidgardWorkspaceContextClass"
            glib:is-gtype-struct-for="WorkspaceContext">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="WorkspaceManager"
           c:symbol-prefix="workspace_manager"
           c:type="MidgardWorkspaceManager"
           parent="GObject.Object"
           glib:type-name="MidgardWorkspaceManager"
           glib:get-type="midgard_workspace_manager_get_type"
           glib:type-struct="WorkspaceManagerClass">
      <constructor name="new"
                   c:identifier="midgard_workspace_manager_new"
                   version="10.05.5">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">new #MidgardWorkspaceManager object</doc>
          <type name="WorkspaceManager" c:type="MidgardWorkspaceManager*"/>
        </return-value>
        <parameters>
          <parameter name="mgd" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardConnection instance</doc>
            <type name="Connection" c:type="MidgardConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_workspace"
              c:identifier="midgard_workspace_manager_create_workspace"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Create given #MidgardWorkspaceStorage instance in underlying storage.
If given #MidgardWorkspaceStorage is #MidgardWorkspaceContext, then it's created
at given path and context's path is set.
If it's #MidgardWorkspace, it's created at given path with its name, which also creates
new context. (e.g. if the path is '/Organization/Branch' and workspace name is 'Private',
then its accessible with '/Organization/Branch/Private' path.)

Cases to return %FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Invalid path given ( MIDGARD_WORKSPACE_STORAGE_ERROR_INVALID_PATH )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Workspace at path already exists ( MIDGARD_WORKSPACE_STORAGE_ERROR_NAME_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Workspace at path already exists ( MIDGARD_WORKSPACE_STORAGE_ERROR_PATH_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="ws" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance to create</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path at which workspace object should be created</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_workspace_by_path"
              c:identifier="midgard_workspace_manager_get_workspace_by_path"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Get given workspace by given path.

Cases to return %FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Invalid path given ( MIDGARD_WORKSPACE_STORAGE_ERROR_INVALID_PATH )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Given workspace object doesn't exist in storage ( MIDGARD_WORKSPACE_STORAGE_ERROR_OBJECT_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="ws" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">workspace path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_content"
              c:identifier="midgard_workspace_manager_move_content"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Moves the content of given #type name from @src, source #MidgardWorkspace to
@dest, destination one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the type name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">source #MidgardWorkspace</doc>
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve">destination #MidgardWorkspace</doc>
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="path_exists"
              c:identifier="midgard_workspace_manager_path_exists"
              version="10.05.5">
        <doc xml:space="preserve">Check if given @path exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">A path to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_content"
              c:identifier="midgard_workspace_manager_purge_content"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">From given @ws workspace, removes entire content of given @type name.
There's no undelete available for this operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the type name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ws" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspace instance</doc>
            <type name="Workspace" c:type="MidgardWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="purge_workspace"
              c:identifier="midgard_workspace_manager_purge_workspace"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Purge #MidgardWorkspaceStorage instance from underlying storage.
Given @ws workspace object should be fetched from database.

Cases to return %FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Given workspace object doesn't exist in storage ( MIDGARD_WORKSPACE_STORAGE_ERROR_OBJECT_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="ws" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_workspace"
              c:identifier="midgard_workspace_manager_update_workspace"
              version="10.05.5"
              throws="1">
        <doc xml:space="preserve">Update #MidgardWorkspaceStorage instance in underlying storage.
A valid path should be set for given @ws workspace object, and @ws should be fetched from database.

Cases to return %FALSE:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Invalid path given ( MIDGARD_WORKSPACE_STORAGE_ERROR_INVALID_PATH )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Workspace at path already exists ( MIDGARD_WORKSPACE_STORAGE_ERROR_PATH_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Given workspace object doesn't exist in storage ( MIDGARD_WORKSPACE_STORAGE_ERROR_OBJECT_NOT_EXISTS )
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceManager instance</doc>
            <type name="WorkspaceManager"
                  c:type="const MidgardWorkspaceManager*"/>
          </instance-parameter>
          <parameter name="ws" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pointer to a connection, @manager has been initialized for</doc>
        <type name="Connection"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkspaceManagerPrivate"
              c:type="MidgardWorkspaceManagerPrivate*"/>
      </field>
    </class>
    <record name="WorkspaceManagerClass"
            c:type="MidgardWorkspaceManagerClass"
            glib:is-gtype-struct-for="WorkspaceManager">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WorkspaceManagerPrivate"
            c:type="MidgardWorkspaceManagerPrivate"
            disguised="1">
    </record>
    <record name="WorkspacePrivate"
            c:type="MidgardWorkspacePrivate"
            disguised="1">
    </record>
    <interface name="WorkspaceStorage"
               c:symbol-prefix="workspace_storage"
               c:type="MidgardWorkspaceStorage"
               glib:type-name="MidgardWorkspaceStorage"
               glib:get-type="midgard_workspace_storage_get_type">
      <function name="error_quark"
                c:identifier="midgard_workspace_storage_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_path"
              c:identifier="midgard_workspace_storage_get_path"
              version="10.05.5">
        <doc xml:space="preserve">Returned path may be %NULL, if given object doesn't exists in storage</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a path, given #MidgardWorkspaceStorage is at.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workspace_by_name"
              c:identifier="midgard_workspace_storage_get_workspace_by_name"
              version="10.05.5">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">(transfer full): (transfer full): (transfer full): (transfer full): (transfer full): (transfer full): (transfer full): (transfer full): newly allocated #MidgardWorkspaceStorage object if found, %NULL otherwise</doc>
          <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a name of #MidgardWorkspaceStorage object to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_children"
              c:identifier="midgard_workspace_storage_list_children"
              version="10.05.5">
        <doc xml:space="preserve">In case of #MidgardWorkspaceContext, all #MidgardWorkspace objects from context are
returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly allocated array of #MidgardWorkspaceStorage objects</doc>
          <array length="0"
                 zero-terminated="0"
                 c:type="MidgardWorkspaceStorage**">
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </instance-parameter>
          <parameter name="n_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a pointer to store number of returned objects</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_workspace_names"
              c:identifier="midgard_workspace_storage_list_workspace_names"
              version="10.05.5">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">array of names</doc>
          <array length="0" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">#MidgardWorkspaceStorage instance</doc>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </instance-parameter>
          <parameter name="n_names"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a pointer to store number of returned names</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <enumeration name="WorkspaceStorageError"
                 c:type="MidgardWorkspaceStorageError"
                 glib:error-domain="midgard_workspace_storage_error-quark">
      <member name="name_exists"
              value="0"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_NAME_EXISTS">
      </member>
      <member name="invalid_path"
              value="1"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_INVALID_PATH">
      </member>
      <member name="path_exists"
              value="2"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_PATH_EXISTS">
      </member>
      <member name="object_not_exists"
              value="3"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_OBJECT_NOT_EXISTS">
      </member>
      <member name="invalid_value"
              value="4"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_INVALID_VALUE">
      </member>
      <member name="context_violation"
              value="5"
              c:identifier="MIDGARD_WORKSPACE_STORAGE_ERROR_CONTEXT_VIOLATION">
      </member>
    </enumeration>
    <record name="WorkspaceStorageIFace" c:type="MidgardWorkspaceStorageIFace">
      <field name="parent" writable="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="priv" writable="1">
        <type name="WorkspaceStorageIFacePrivate"
              c:type="MidgardWorkspaceStorageIFacePrivate*"/>
      </field>
      <field name="get_path">
        <callback name="get_path">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_children" introspectable="0">
        <callback name="list_children" introspectable="0">
          <return-value>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage**"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
            </parameter>
            <parameter name="n_objects" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_workspace_by_name" introspectable="0">
        <callback name="get_workspace_by_name" introspectable="0">
          <return-value>
            <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_workspace_names" introspectable="0">
        <callback name="list_workspace_names" introspectable="0">
          <return-value>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceStorage" c:type="MidgardWorkspaceStorage*"/>
            </parameter>
            <parameter name="n_names" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WorkspaceStorageIFacePrivate"
            c:type="MidgardWorkspaceStorageIFacePrivate"
            disguised="1">
    </record>
    <function name="close" c:identifier="midgard_close">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="core_timestamp_set_current_time"
              c:identifier="midgard_core_timestamp_set_current_time">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tm" transfer-ownership="none">
          <type name="Timestamp" c:type="MidgardTimestamp*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_default_log"
              c:identifier="midgard_error_default_log">
      <doc xml:space="preserve">@ptr pointer may be a pointer to #MidgardConnection or #MidgardTypeHolder
structure. This function checks pointer type using MIDGARD_IS_CONNECTION
convention macro. Next midgard_connection_get_loglevel is called to get loglevel.
If MidgardConnection check fails , a typecast to MidgardTypeHolder is made.
In this case, level member is used to get loglevel.

You are responsible to correctly set MidgardConnection or MidgardTypeHolder
before passing ptr argument. The main approach is to follow configuration's
loglevel even if MidgardConnection pointer is not yet available.

@see midgard_connection_set_loglevel() to set log level.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">domain for the given log message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve">GLogLevelFlags</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve">log message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:space="preserve">pointer to structure which holds loglevel</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_generic" c:identifier="midgard_error_generic">
      <doc xml:space="preserve">GQuark for Midgard Error. It's used by Midgard Error implementation, and
probably not needed to use by any application.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">MGD_GENERIC_ERROR GQuark</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_parse_loglevel"
              c:identifier="midgard_error_parse_loglevel">
      <doc xml:space="preserve">This function returns level registered in GLib.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">#GLogLevelFlags or -1 on failure</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="levelstring" transfer-ownership="none">
          <doc xml:space="preserve">string which should be parsed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_string" c:identifier="midgard_error_string">
      <doc xml:space="preserve">Get error message for the given error code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">error messages which is owned by midgard-core and should not be freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">GQuark which represents MidgardError domain.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="errcode" transfer-ownership="none">
          <doc xml:space="preserve">MidgardErrorGeneric enum value.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="execution_error_quark"
              c:identifier="midgard_execution_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="init" c:identifier="midgard_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="is_guid" c:identifier="midgard_is_guid">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="guid" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_uuid" c:identifier="midgard_is_uuid">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uuid" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_create" c:identifier="midgard_quota_create">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="MidgardObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_get_object_size"
              c:identifier="midgard_quota_get_object_size">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="MidgardObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_get_type_size"
              c:identifier="midgard_quota_get_type_size">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="mgd" transfer-ownership="none">
          <type name="Connection" c:type="MidgardConnection*"/>
        </parameter>
        <parameter name="typename" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_remove" c:identifier="midgard_quota_remove">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="MidgardObject*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_set_type_size"
              c:identifier="midgard_quota_set_type_size">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mgd" transfer-ownership="none">
          <type name="Connection" c:type="MidgardConnection*"/>
        </parameter>
        <parameter name="typename" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="records" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_size_is_reached"
              c:identifier="midgard_quota_size_is_reached">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="MidgardObject*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="quota_update" c:identifier="midgard_quota_update">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="Object" c:type="MidgardObject*"/>
        </parameter>
        <parameter name="init_size" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_error"
              c:identifier="midgard_set_error"
              introspectable="0">
      <doc xml:space="preserve">This function sets internal error constant, and creates new error message.
User defined message is appended to internal one.
Any message created by application ( and its corresponding constant ) are destroyed
and reset to MGD_ERR_OK when any API function is invoked.
Second @domain parameter is optional , and can be safely defined as NULL for
MGD_GENERIC_ERROR domain.

&lt;example&gt;
&lt;programlisting&gt;

void set_wrong_property(MidgardConnection *mgd, gchar *prop)
{
	midgard_set_error(mgd, NULL,
			MGD_ERR_INVALID_PROPERTY_VALUE,
			"My application doesn't accept %s property",
			prop);
}
&lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mgd" transfer-ownership="none">
          <doc xml:space="preserve">#MidgardConnection instance</doc>
          <type name="Connection" c:type="MidgardConnection*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">GQuark which represents MidgardError domain</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="errcode" transfer-ownership="none">
          <doc xml:space="preserve">#MidgardErrorGeneric enum value</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve">a message which should be appended to string represented by errcode</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">message argument list ( if required )</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="timestamp_get_string_from_value"
              c:identifier="midgard_timestamp_get_string_from_value"
              moved-to="Timestamp.get_string_from_value">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="timestamp_new_current"
              c:identifier="midgard_timestamp_new_current"
              moved-to="Timestamp.new_current">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="timestamp_new_value_from_iso8601"
              c:identifier="midgard_timestamp_new_value_from_iso8601"
              moved-to="Timestamp.new_value_from_iso8601">
      <return-value transfer-ownership="full">
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="iso_date" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="timestamp_set_current_time"
              c:identifier="midgard_timestamp_set_current_time"
              moved-to="Timestamp.set_current_time">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uuid_external" c:identifier="midgard_uuid_external">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="external" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uuid_new" c:identifier="midgard_uuid_new">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="validation_error_quark"
              c:identifier="midgard_validation_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="version" c:identifier="midgard_version">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="workspace_storage_error_quark"
              c:identifier="midgard_workspace_storage_error_quark"
              moved-to="WorkspaceStorage.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
