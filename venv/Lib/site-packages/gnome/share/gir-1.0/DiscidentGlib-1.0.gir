<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <package name="discident-glib-1.0"/>
  <namespace name="DiscidentGlib"
             version="1.0"
             shared-library="libdiscident-glib-0.dll"
             c:identifier-prefixes="Discident"
             c:symbol-prefixes="discident_">
    <class name="Ean"
           c:symbol-prefix="ean"
           c:type="DiscidentEan"
           parent="GObject.Object"
           glib:type-name="DiscidentEan"
           glib:get-type="discident_ean_get_type"
           glib:type-struct="EanClass">
      <doc xml:space="preserve">All the fields in the #DiscidentEan structure are private and should never be accessed directly.</doc>
      <constructor name="new" c:identifier="discident_ean_new">
        <doc xml:space="preserve">Create a new #DiscidentEan object to lookup barcodes with.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DiscidentEan object.</doc>
          <type name="Ean" c:type="DiscidentEan*"/>
        </return-value>
        <parameters>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">The identifier for the service, or %NULL to use
the default service.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="discident_ean_new_full">
        <doc xml:space="preserve">Create a new #DiscidentEan object to lookup barcodes with.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DiscidentEan object.</doc>
          <type name="Ean" c:type="DiscidentEan*"/>
        </return-value>
        <parameters>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve">The identifier for the service, or %NULL to use
the default service.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve">a #GHashTable of string keys and string values. The keys
to use depend on the service used.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="lookup" c:identifier="discident_ean_lookup">
        <doc xml:space="preserve">Asynchronously gets the title and image URL for an EAN barcode
using a web service.

When the operation is finished, @callback will be called. You can then call
discident_ean_lookup_finish() to get the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ean" transfer-ownership="none">
            <doc xml:space="preserve">a #DiscidentEan object.</doc>
            <type name="Ean" c:type="DiscidentEan*"/>
          </instance-parameter>
          <parameter name="barcode" transfer-ownership="none">
            <doc xml:space="preserve">the EAN barcode to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_finish"
              c:identifier="discident_ean_lookup_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an EAN lookup operation. See discident_ean_lookup().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string containing the description of the looked up
barcode, or %NULL in case of errors.
Free the returned string with g_free() when done.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ean" transfer-ownership="none">
            <doc xml:space="preserve">a #DiscidentEan object</doc>
            <type name="Ean" c:type="DiscidentEan*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="img_url"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the return location for the image URL, or %NULL to ignore.</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_get_barcode"
              c:identifier="discident_ean_lookup_get_barcode">
        <doc xml:space="preserve">Returns the barcode used for the EAN lookup operation.
See discident_ean_lookup().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string containing the looked up barcode, or
%NULL in case of errors.
Free the returned string with g_free() when done.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ean" transfer-ownership="none">
            <doc xml:space="preserve">a #DiscidentEan object</doc>
            <type name="Ean" c:type="DiscidentEan*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_sync"
              c:identifier="discident_ean_lookup_sync"
              throws="1">
        <doc xml:space="preserve">Looks up the barcode with EAN @barcode, and sets @title
and @img_url appropriately if found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success. %FALSE on failure with @error set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ean" transfer-ownership="none">
            <doc xml:space="preserve">a #DiscidentEan object representing a query</doc>
            <type name="Ean" c:type="DiscidentEan*"/>
          </instance-parameter>
          <parameter name="barcode" transfer-ownership="none">
            <doc xml:space="preserve">a string representing the barcode to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">the return value for the title, or %NULL</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="img_url" transfer-ownership="none">
            <doc xml:space="preserve">the return value for the title, or %NULL</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <property name="parameters"
                readable="0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="service"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EanPrivate" c:type="DiscidentEanPrivate*"/>
      </field>
    </class>
    <record name="EanClass"
            c:type="DiscidentEanClass"
            glib:is-gtype-struct-for="Ean">
      <doc xml:space="preserve">All the fields in the #DiscidentEanClass structure are private and should never be accessed directly.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EanPrivate" c:type="DiscidentEanPrivate" disguised="1">
    </record>
    <enumeration name="Error"
                 c:type="DiscidentError"
                 glib:error-domain="discident_error">
      <doc xml:space="preserve">Error codes returned by discident-glib functions.</doc>
      <member name="parse" value="0" c:identifier="DISCIDENT_ERROR_PARSE">
        <doc xml:space="preserve">An error occured parsing the response from the web service.</doc>
      </member>
      <member name="empty_response"
              value="1"
              c:identifier="DISCIDENT_ERROR_EMPTY_RESPONSE">
        <doc xml:space="preserve">No answers from the web service.</doc>
      </member>
      <member name="missing_parameters"
              value="2"
              c:identifier="DISCIDENT_ERROR_MISSING_PARAMETERS">
        <doc xml:space="preserve">Parameters are missing to use that web service.</doc>
      </member>
    </enumeration>
    <constant name="PARAM_ACCESS_KEY"
              value="access-key"
              c:type="DISCIDENT_PARAM_ACCESS_KEY">
      <doc xml:space="preserve">Access key used for Amazon lookups.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PARAM_ASSOCIATE_TAG"
              value="associate-tag"
              c:type="DISCIDENT_PARAM_ASSOCIATE_TAG">
      <doc xml:space="preserve">Associate tag used for Amazon lookups.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PARAM_PRIVATE_KEY"
              value="private-key"
              c:type="DISCIDENT_PARAM_PRIVATE_KEY">
      <doc xml:space="preserve">Private key used for signing Amazon lookups.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="error_quark" c:identifier="discident_error_quark">
      <doc xml:space="preserve">Gets the discident-glib quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_gtin_file" c:identifier="discident_get_gtin_file">
      <doc xml:space="preserve">Asynchronously gets the GTIN of the DVD tree location in
@directory. This function does not use the Internet.

When the operation is finished, @callback will be called. You can then call
discident_get_gtin_file_finish() to get the result of the operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">the data to pass to callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_gtin_file_finish"
              c:identifier="discident_get_gtin_file_finish"
              throws="1">
      <doc xml:space="preserve">Finishes getting the GTIN for the DVD tree at @directory. See
discident_get_gtin_file().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the GTIN for the DVD or %NULL in case of errors.
Free the returned string with g_free() when done.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_gtin_file_sync"
              c:identifier="discident_get_gtin_file_sync"
              throws="1">
      <doc xml:space="preserve">Return the GTIN of the DVD location at @directory. Note that this
function does blocking I/O. See discident_get_gtin_file()
for a function that does not.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a string containing the GTIN for the DVD or %NULL in case of errors.
Free the returned string with g_free() when done.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_title_file" c:identifier="discident_get_title_file">
      <doc xml:space="preserve">Asynchronously gets the title of the DVD tree located in
@directory using the DiscIdent web service.

When the operation is finished, @callback will be called. You can then call
discident_get_title_file_finish() to get the result of the operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">the data to pass to callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_title_file_finish"
              c:identifier="discident_get_title_file_finish"
              throws="1">
      <doc xml:space="preserve">Finishes a title get operation. See discident_get_title_file().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a string containing the title or %NULL in case of errors.
Free the returned string with g_free() when done.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_title_sync"
              c:identifier="discident_get_title_sync"
              throws="1">
      <doc xml:space="preserve">Returns the title of the DVD located at @directory. Note that this
function does blocking I/O. See discident_get_title_file()
for a function that does not.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a string containing the title or %NULL in case of errors.
Free the returned string with g_free() when done.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile representing a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
